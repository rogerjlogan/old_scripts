program VS5910A30; 
(*
*
*  REVISION HISTORY:
*  REV  DATE     CHANGES                                       MADE BY
*

***************************************************************************

DSP30   Krishna 09/07/07
        Swapped DeviceType with Pin_Map_type for lot control per TIPI's
        request.
DSP29	Cisneros 08/28/2006
	Added load pattern procedure statement 
	Based on TIPI data to provide input driver stability

DSP28	Cisneros 05/17/2006
	Removed hard coded limits for ICCQ test
	Adjusted limits and range for ICCQ
	
	Changed DeviceType from PTSS name into HV/LV option
	
	Modified TestTypes to incoroporate /BI flow
	Options are POSTBI_3 for high temp and POSTBI_4 for N45c
	
	Removed power down between test blocks
	Added Disable( s_IGNORE_FUNC_FAIL, s_PMExit ); after ICCQ tests

	
	Change flow to accomodate Min tests, parametric then Max tests
	Removed API test at Nom Voltage
	Removed LoMin/Max atpg pattern [covered at Min and Max]
	
	Consolidated Bin1 and Bin2 into same block with different freq
	We will only accept Bin1 from VSeries form now on	
	If any ATSPEED_MIN/MAX TEEST pattern faiuls, then it would bin as
	SPEED_BELOW_BIN1  bin #  9       FAIL_SPEED_CAT     FUNCTIONAL_CLASS
	
	Added scf, tcf and nbti as separate variables on SetSupplyVars		
	



***************************************************************************

rev01a  3/24/02  KTR1
  moved autogen exceptions to a seperate file 'autogen_exceptions.log'
  also documented in '.session_output' file
  changed program from F751686_75922500 to F751686_75922501

rev01b  3/24/02  KTR1
  removed 2V voltage supply variable from SET_POWER and Sequence_down 
  procedures and statements/ device only uses 1V or 3V supplies

rev01c  3/24/02  KTR1
  commented out five signals from one corner of OPENS test/no diode to VCC

rev01d  3/24/02  KTR1
  commented out VIH_VIL test for USB differential I/Os for now

rev01e  3/24/02  KTR1
  changed current load for select pingroups during VOH/VOL testing
  from +/- IXXX (Autogen generated) to MLS spec of +/- 4mA

rev01f  3/24/02  KTR1
  added Vdd vs. Frequency shmoo edits for critical ARM at speed tests only
  for now

rev01g  3/25/02  KTR1
  changed GOI levels VGOI1V & VGOI3V to 1.65V & 3.0V respectively for now

rev01h  3/25/02  KTR1
  added TIMING & VOLTAGE margins by pin group to patterns using TIMING_9

rev01i  3/26/02  KTR1
  changed TIMING_3 by adding an extra IO pin group for GPIO_15 & GPIO_13
  signals/changed the T4 edge strobe of these signals from 290ns to 200ns
  to debug pattern 05 (dcp_voh_vol)

rev01j  3/26/02  KTR1
  modified Shmoo ARM at speed window variable to only shmoo most critical
  TDLs to save time

rev01k  3/27/02  KTR1
  added vdd freq shmoo edits to subset of ARM925 TDLs, MGS3 TDLs, &
  MEMBIST & deep sleep TDLs

rev02x  4/5/02   JBZH
  Commented out fail patterns

rev02c  4/05/02  KTR1
  added DIE_ID read capability

rev03a  4/12/02  KTR1
  added Testware hooks

rev03b  4/12/02  KTR1
  added User_DeviceSort procedure

rev03c 4/12/02  KTR1
  added IDDQ TW datalogging

rev03d 4/15/02  APV1
  modified READ<_ICCQ function for more capacitance for PLL supply

rev03e 4/15/02  APV1
  modified READ_ICCQ function as per new board to apply stress to 
  ARM supply 

rev03f 4/15/02  APV1
  commented out temporarily due to instability

rev03g 4/15/02  APV1
  pass/fail for VDD2 (arm supply) moved from pre to post-stress

rev03h 4/15/02  APV1
  added SUPPLY_SHORTS and JUNCTION_LEAKAGE tests for FT_1 pinmap

rev03i 4/15/02  APV1
  added SUPPLY_SHORTS_TEST in the test flow

rev03j 4/16/02 KTR1
  hard coded supply limits for FT_1 board only

rev03k 4/16/02 KTR1
  commented out PIN2PIN test

rev03l 4/16/02 KTR1
  changed bin definitions for HIJI compliance

*** ES2.5 PGM COMMENTS ***
v01a	6/7/02 APV1
  new pgm name for ES2.5

v01b	6/7/02 APV1
  replaced old pattern load with new xref patterload for ES2.5

v01c	6/7/02 APV1
  commented out tdls not handed off

v01z	6/11/02 APV1
  commented out tdls/tests not working and are in debug list

v01np	6/11/02 APV1
  commented out tdls/tests not required for production

v01h	6/18/02 APV1
  added mgs3_atpg tdls back into program

v01h1 	6/18/02 APV1
  added mgs3_atpg_9 which is new tdls for ES2.5

v01i	6/18/02 APV1
  added omap31_atpg new working tdls back into program

503a    6/24/02 APV1
  testware and stdprogram commands modified to work with HIJI

503b    6/24/02 APV1
  S_cpu_paral_au_au tdl taken out from the program because of 
  holes in the schmoo issue

QUAL PGM COMMENTS:

bq01a   6/27/02 APV1
  removed additional testware commands required by HIJI

qrev01a 6/27/02 APV1
  removed individual bist tdls because hel_bist covers

qrev01b 6/27/02 APV1
  added window variable for using all scan tdls in vbox or not

qrev01c 6/27/02 APV1
  added window variable to make mgs3 dpll off tdls optional

qrev01d 6/27/02 APV1
  included checkerboard and inv_checkerboard dpll_off tdls
  in the program regardless of WindowVar DPLL_OFF

qrev01e 6/27/02 APV1
  icache_data and tag memory checkerboard and inverse
  checkerboard dpll_off tdls included in VBOX

ES2.6 PGM COMMENTS:

es26v01a 6/27/02 APV1
  added tdls not covered under ES2.5 program

es26v01b 6/27/02 APV1
  mgs3 dpll off patterns not loaded due to tester memory

es26v01c 6/27/02 APV1
  dirty schmoo tdls left out of the program

es26v01d 6/27/02 APV1
  removed long stress and included hel_icc_10 in short proc

es26v01e 6/27/02 APV1
  frequency search commented out temporarily

es26v01f 6/27/02 APV1
  ulpd_dpll tdl added in the program

es26v01g 7/8/02  APV1
  added 13 OMAP LED tdls to speed sorting as per 
  recommendation by Azhar and Achuta 

es26v01h 7/9/02  APV1
  removed all DPLL_ON tdls from the program, wrong tdls handed off

es26v01i 7/9/02  APV1
  added all DPLL_OFF tdls in patternload to cover wrong DPLL_ON tdls

es26z    7/9/02  APV1
  removed all failing tdls from the program temporarily for 1st Si

ftrev01a  7/13/02 APV1
  added MGS3 DPLL ON tdls back to the program

ftrev01b  7/13/02 APV1
  commented out failing MGS3 DPLL_ON tdls from program

ftrev01c  7/13/02 APV1
  removed imif_march13 tdls from program due to mem size

ftrev01d  7/13/02 APV1
  removed stress,burn_in,bist, diag1and5 tdls bcoz of memsize

ftrev01e  7/13/02 APV1
  added tc_1a back in speed sorting after verification

ftrev01f  7/15/02 APV1
  added benchmark_dagc_exp and cpu_paral_au_au tdls in the program
  to provide coverage for commented out DPLL_ON tdls

ftrev01g  7/15/02 APV1
  added new procedure for freq search for all at speed tdls 

ftrev02a  7/22/02 APV1
  commented out unstable pins for LEAKAGE test

ftrev02b  7/22/02 APV1
  ICCQ limits changed as mentioned

ftrev02c  7/22/02 APV1
  added tdls back in the program with timing changes if required

ftrev02d  7/22/02 APV1
  OMAP tdls taken out of speed sorting for instability

ftrev02e  8/02/02 APV1
  implemented new flow for PRE/POST BURNIN and QC

ftrev02f  8/02/02 APV1
  sped up the march13n_pd tdl 4 times and removed pre GOI
  ICCQ test for TTR 

ftrev02g  8/02/02 APV1
  moved led_test out of speed sorting to functional testing 

ftrev02h  8/06/02 KTR1
  changed VTMX3V from 3V to 3.6V for IDDQ, IIH_IIL, & LEAKAGE tests

ftrev02i  8/06/02 KTR1
  removed hel_bist_arm0_w0r0 pattern from test flow as decided in the meeting

ftrev02j  8/06/02 KTR1
  added TW die id datalogging for FT

ftrev02k  8/08/02 KTR1
  added new timing tables 1b and 8b to speed up non VBOX ATPG test patterns

ftrev03a  8/09/02 KTR1
  commented out S_rheaaccessallperiph pattern from speed sorting (schmoo holes)
  and commented back in the DPLL off version of the test 

ftrev03b  8/09/02 KTR1
  removed vddshmoo, tmarg, and vmarg procedure calls for characterization
  in order to save test time

ftrev03c  8/09/02 KTR1
  made changes for HIJI compatibility with vusp 4.4d

rev03hiji01 08/18/02 APV1
  Moved hel_atpg (1-4) and Helen functionals tdls to 1.65v.  This was to gb 
  against probe - hel_Atpg at probe is at 1.75v

rev03hiji02 08/18/02 APV1
  OMAP_LED moved to 50Mhz (120ns) from current 60Mhz (100ns).  These are 
  non-critical tdls.  Need to debug more - looks like DPLL lock issue.
  BACK TO 100NS AFTER PLL LOCK TIME FIX

rev03hiji03 08/18/02 APV1
  hel_mmu_cam tightened to 60Mhz (from 55Mhz) due to holes near 55Mhz 
  Need to debug more.

rev03hiji04 08/18/02 APV1
  Moved led_test from current 1.95v to 1.8v

rev03hiji05 08/19/02 APV1	
  removed hel_diag1 test from MAX corner due to instability

rev03hiji06 08/19/02 APV1
  added data collection for OSC leakage 

rev03hiji07 08/20/02 APV1
  Moved all TLB impacted tests (arm and omap) to 1.8V for FT

rev03hiji09 08/21/02 APV1
  masked WIRE_NSCS0 pin for hel_atpg_1,2 and 3 at MAX corner

rev03hiji10 08/23/02 APV1
  masked WIRE_SDO pin for hel_atpg_x MIN test and relaxed bin3 TC 
  PREBURNIN to 1.3V/66MHz

rev03hiji11 08/27/02 APV1
  moved testing of critical path TC tdls in the beginning of speed sort

rev03hiji12 08/27/02 APV1
  removed power_down as SET_POWER is moved up with tc tdls

rev03hiji13 08/28/02 APV1
  moved critical path TC tdls at the beginning of the speed sorting
  and changed guardband for BIN3 TC tdls as
  PRE BURNIN 1.4V/78MHz
  POST BURNIN 1.4V/68MHz 

rev03hiji14 08/28/02 APV1
  added back-to-back test for 3 TC tdls

hijirev04	9/5/02	APV1
	changed program name

hijirev04a	9/5/02	APV1
	masked TDO pin for hel_bist tdl as it was unnecessary strobe

hijirev04b	9/5/02	APV1
	included modified vvs file for hel_tdl_apll with two unnecessary
	repeat vectors masked 

hijirev04c	9/5/02	APV1
	moved all hel_atpg_x tdls to NOM corner, no test at min and max 	

hijirev04d	9/5/02	APV1
	added oscillator tdl functional testing with leakage test

hijirev04e	9/5/02	APV1
	added back to back test for all OMAP LED and ARM @speed tdls

hijirev04f	9/5/02	APV1
 	removed deep sleep iccq test as all testing is at hot temp

hijirev04g	9/5/02	APV1
	added vmin and vmax searches for hel_atpg_sc and hel_atpg_0

hijirev05	9/13/02	APV1
	updated the program revision number	

hijirev05a	9/13/02	APV1
	moved led_test from 1.75V to 1.7V at MAX corner

hijirev05b	9/13/02	APV1
	added 1.35V 144MHz - ARM and 72MHz TC test in Bin2

hijirev05c	9/13/02	APV1
	changed VBOX MIN ATPG testing voltage from 1.05V to 1.1V

hijirev05d	9/13/02	APV1
	slowed down omap atpg at min corner to 10MHz

hijirev05e	9/13/02	APV1
	replaced hel_atpg pattern files with the updated one with 
	WIRE_SDO and WIRE_NSCS0 chains removed

hijirev05f	9/13/02	APV1
	removed hel_atpg_3 as it is not handed off

hijirev05g	9/13/02 APV1
	removed NOM testing for hel_atpg tdls and added normal test flow
	with new tdls

hijirev05h	9/13/02	APV1
	no masking of pins required

hijirev05i	9/13/02	APV1
	removed functional testing of hel_icc_10

hijirev05m	9/13/02	APV1
	added testing for sdata_dual tdl at 1.5V core/1.8V i/o 

hijirev05n	9/13/02	APV1
	changed HOT temp ICCQ limit for CORE to 2.5mA and ARM to 200uA

hijirev08	9/30/02 APV1
	changed program revision, skipped 06 and 07 to match VLCT

hijirev08a	9/30/02 APV1
	changed QC_POSTBI test temperature to ROOM

hijirev08b	9/30/02 APV1
	added speed sorting for PREBURNIN and added new test for Fujitsu
        for ICCQ at 1.1V for Bin 2

hijirev08c	9/30/02 APV1
	new category defines to include Bin 4 flow

hijirev08d	9/30/02 APV1
	guardbanded speed sorting with 25mV for QC_POSTBI at room temp

hijirev08e	9/30/02 APV1
	added pattern based dieid and removed VOUT based dieid

hijirev08g	9/30/02 APV1
	supply shorts limits added for ROOM TEMP for QC_POSTBI

hijirev08h	9/30/02 APV1  - SKIPPED - COMMENT FOR VS SHORT ONLY

hijirev08i	9/30/02 APV1
	added 100ms wait time for DPLL ICCQ, more settling time required

hijirev08j	9/30/02 APV1
	added mgs3 at speed tdl long pattern for TTR

hijirev08k	9/30/02 APV1
	modified VOUT_TEST to do per pin test only if tdl functionally fails

hijirev08l	9/30/02 APV1
	removed or reduced wait time for TTR

hijirev08m	9/30/02 APV1
	relaxed memory retention test to 1.0V from 0.6V

hijirev08n	9/30/02 APV1  - SKIPPED - COMMENT FOR VS SHORT ONLY

hijirev09	10/11/02 APV1
	changed prog revision

hijirev09a	10/11/02 APV1
	tightened hot to room temp gb to 50mv between pre and post BI test

hijirev09b	10/11/02 APV1
	changed test temp for post symbol test from 90C to 25C
	changed test limit name from QC_HOT to QC_LA bcoz of temp change

hijirev10	10/22/02 APV1
	changed prog revision

hijirev10a
	changed bin 8 name to SPEED_BELOW_BIN4	

hijirev10b
	added new variable for ROOM TEMP PREBURNIN test	PREBI_RM
	PREBI_RM - with 25C and VDDROOM levels, ROOM limits 

hijirev10c
	added 25mV gb for PREBI_RM for ATSPEED tests

hijirev10d
	added new procedure for DEEP_SLEEP test at room temp

hijirev10e
	changed supply shorts limit to 1mA

hijirev10f
	changed flow to include (final) bin sorting at PREBI_RM 

hijirev10g
	added new procedure and binout condition for TLB_MAX_TEST
	and removed led_test from MAX procedure

hijirev10h
	new variable added for ARM and changed p/f limits for ICCQ
	variables

hijirev10i
	dieid test moved to the end of test sequence

hijirev17	APV1	02/05/03
	new ATSPEED MGS3 MEM tdls commented out due to holes in schmoo

rescrn05	APV1	02/16/03
	added new screens for test escapes for API and MGS3 MEMORY

ftrev18a	APV1	02/17/03
	removed stricter speed test from Athena as specs are relaxed

ftrev18b	APV1	02/17/03
	added new HWA and PDBUS tdls to speed sorting procedure

hijirev19a	APV1	02/24/03
	removed old mgs3 memory tests from the program

hijirev19b	APV1	02/24/03
	added pass/fail condition for ICCQ for individual supply also

hijirev19c	APV1	02/24/03
	removed gross check for DIEID

protorev05	APV1	03/03/03
	added SARAM7 test

ftvsrev06	APV1	03/16/03
	pgm rev change

hijirev21a	APV1	03/16/03
	added "dirty schmoo" tdls back into program after fix
	
hijirev21b	APV1	03/16/03
	added new patterns required for this pgm

hijirev21c	APV1	03/16/03
	removed MGS3 MEM DPLL OFF tests - chckbd and invchckbd

hijirev21e	APV1	03/17/03
	removed hel_atpg_0 tdl for CRAM exceeding problem from QC_LA	

rescreen08	APV1	03/12/03
	added pdrom, 20 new pdbus, shared_rhea, 3 new hwa, new MGS3 MEM
	ATSPEED tdls

rescrn09	APV1	03/16/03
	added new STIO tests, updated API, rhea tests, new dual access tests

ftvsrev06a	APV1	03/20/03
	added VS short flow to do only tests not done on VLCT

ftstack01a
	added FT_STACK option to make single program for both stack and 
	Helen1 stand alone

ftstack07a     HSBH     04/04/03
        changed SpeedSort voltage for QC_POSTBI to 1.43V from 1.4V
        due to currently "unknown shift"

ftrev23a        HSBH    04/27/03
        added new STIO, BIG7, HEL_DIAG_LED and updated API tests.	

ftrevg09	APV1	04/30/03
	changed pgm rev

ftrevg09a	APV1	04/30/03
	added 2nd Athena test for Bin4 back into the program

ftrevg09b	APV1	04/30/03
	added Athena speed test 2 for Bin5 into the program

ftrevg09c	APV1	04/30/03
	removed ICCQ_FJ testing and 
	FJ bin 2 binning out, combined with Bin 1 

ftrevg09d	APV1	05/09/03
	removed arm march13 tests to resolve tester memory issue

ftrevg09e	APV1	05/09/03
	added Athena critical tdls for ATSPEED Athena testing

ftrevg09f	APV1	05/09/03
	fixed error for pattern 480 DeviceStatus flag

ftrevg09g	APV1	05/09/03
	changed STACK speed test voltages based on CHAR data

ftrevg09h	APV1	05/09/03
	removed led_test tdl from loading as TLB testing done on VLCT

ftrevg09i	APV1	05/09/03
	took setpower outside the test definition to apply to rest of tdls

ftrevg09j	APV1	05/09/03
	slowed down hel_diag_led tests due to marginality at high speed

ftvsrev10	APV1	05/15/03
	changed pgm rev

ftvsrev10a	APV1	05/15/03
	slowed down Big 7 testing because of instability at high speed

ftvsrev10b	APV1	05/15/03
	added S_march13 back in the program for atspeed memory coverage

ftvsrev10c	APV1	05/15/03
	moved omap_atpg_1 and mgs3_atpg_1 test to 1.45V and slowed down
	to 1uS (if failed), removed hel_atpg_sc - covered by hel_atpg

ftvsrev10d	APV1	05/15/03
	moved API min test to 1.45V for yield recovery

ftvsrev10e	APV1	05/15/03
	added extra 20 cycles in hel_diag5 to make it stable

ftvsrev10f	APV1	05/15/03
	changed SupplySet statements to match flash supply definitions

ftvsrev10g	APV1	05/15/03
	moved dsp_gpio tdl min testing to 1.45V due to instability

ftvsrev10h	APV1	05/16/03
	removed S_dma_daram_saram test due to instability, debug ongoing

ftvsrev10i	APV1	05/16/03
	changed I/O voltage for memory ret test to 1.8V to match flash I/O

ftvsrev10j	APV1	05/19/03
	relaxed OSC32K_OUT pin to -3.78uA from -2.78uA due to instability

ftvsrev10k	APV1	05/19/03
	changed I/O voltage for TC atspeed tests to 1.8V to match flash I/O

ftvsrev11	APV1	06/04/03
	changed pgm rev

ftvsrev11a	APV1	06/04/03
	replaced hel_diag_1_sync with hel_diag_1_led 

ftvsrev11b	APV1	06/04/03
	removed hel_diag2-5 (zero fail rate) due to tester memory limitations 

ftvsrev11c	APV1	06/04/03
	modified patterns for REPEAT vectors to optimize memory usage

ftvsrev11d	APV1	06/04/03
	replaced imif_march13_1-16 with imif_march13_A-B with same coverage 

ftvsrev11e	APV1	06/04/03
	added new tdls for DSP I$ TC coverage 

ftvsrev11f	APV1	06/04/03
	correction for DIEID bit calculation for RAM REPAIR

ftvsrev11g	APV1	06/04/03
	changed voltage condition for QC_LA to match post burnin test

ftvsrev11h	APV1	06/04/03
	removed frequency search due to patterns mis-alignment in asic_types.include

revj11a         HSBH    06/13/03
        removed arm925_atpg_reset, moved to VLCT {ES2.74}

ftvsrev12	APV1	06/19/03
	changed pgm rev

ftvsrev12a	APV1	06/19/03
	included following updated Big7 D0 and 2 API tdls

F751686_55922rq0	S_checkerboard_d0
F751686_55922rs0	S_inv_checkerboard_d0
F751686_55922rt0	S_march13n_d0
F751686_55922uj0	S_down1_bdbus_pd_d0
F751686_55922ul0	S_down1_cdbus_pd_d0
F751686_55922un0	S_down1_sense_pd_d0
F751686_55922up0	S_dtxn_pd_d0
F751686_55922ur0	S_mapcol_pd_d0
F751686_55922ut0	S_march17_pd_d0
F751686_55922uv0	S_precharge_pd_d0
F751686_55922to0	ramtestapiprod
F751686_55922th0	addr_saram_sam

ftvsrev12b	APV1	06/19/03
	test sequence changed to test DIEID before OPENS test
	
ftvsrev12c	APV1	06/19/03
	different category and binning for MEM_RET_ICCQ test to avoid confusion
	
ftvsrev12d	APV1	06/19/03
	removed 3 TLM tdls as tested on VLCT
	
F751686_55922gd0	TLM_arm9_r3_ctl
F751686_55922ge0	TLM_arm9_r3_dp
F751686_55922gp0	TLM_arm9_r3_wpt
	
ftvsrev12e	APV1	06/19/03
	fixed memory retention with back-to-back testing (initialization issue)
	
ftvsrev12f	APV1	06/19/03
	added memory retention for MGS3 memory also

ftvsrev12g	APV1	06/19/03
	removed Bin2 secondary test conditions

rev13	APV1	07/15/03
	change pgm rev

rev13a	APV1	07/15/03
	included modified pattern for the following tdl with RMR coverage fix
	F751686_55922q40	hel_dsp_wdtimer

rev13b	APV1	07/15/03
	included modified pattern for the following tdl with stability fixes
	F751686_55922py0	hel_dsp_gpio

rev13c	APV1	07/15/03
	removed following tdls because of no additional coverage provided 
	comfirmed by RamK (who created the testcases)

	F751686_55922v40	frv1vadramset1dm
	F751686_55922v50	fr_v1_vad_ramset2
	F751686_55922v60	frv1vadramset2dm

rev13d	APV1	07/15/03
	reduced wait time before OSC LEAKAGE measurement from 50ms to 10ms

rev13e	APV1	07/15/03
	Voltage guardband adjusted by 50mV for ALL the SPEED SORT tests

rev13f	APV1	07/15/03
	removed unnecessary wait times after SET_POWER and SetupSelect

rev13g	APV1	07/15/03
	added LONG Pattern for MGS3 Atspeed tdls and removed individual

rev13h	APV1	07/15/03
	corrected levels for shared I/O pins to 1.8V in Memory retention test

revh13	APV1	07/28/03
	ICCQ relaxed due to KFAB running hotter material
		     from 300uA to 370uA (1.5V) for TOTAL
	 	     from 280uA to 305uA (1.5V) for CORE
	Added new pass/fail condition for Helen+Flash dies as CORE and ARM 
	supplies are combined

rev14	changed pgm rev

rev14a	removed individual pass/fail for ARM supply, combined with CORE

rev14b	pass/fail limits selected based on FAB CODE to keep same program for
 	KFAB and DM6. use relaxed ICCQ limits for KFAB	

rev14c	initialized ICCQ measurement variables to 0na

rev14d	Added special ICCQ screen for STACK die (Bin1 - 250uA, Bin2 - 285uA)

rev14e	removed functional testing of hel_icc_10

rev15a	Added special ICCQ screen for STACK die (Bin1 - 300uA @ 1.5V)

rev16	APV1	08/27/03
	changed pgm rev

rev16a	APV1	08/27/03
	included original hel_diag1_led pattern and added back2back test

rev16b	APV1	08/27/03
	added full ICCQ pattern execution b4 setting PMEXIT for more stability

rev17	APV1	09/05/03
	change pgm rev

rev17a	APV1	09/05/03
	included 3 new RMR tdls as below
	F751686_55922v70	led_dspdma_burst
	F751686_55922v80	led_dspdma_pack
	F751686_55922v90	led_hr_novad_1f_cache

rev17b	APV1	09/05/03
	corrected ICCQ redundant pattern execution to avoid PMEX error

rev18	APV1	09/10/03
	change pgm rev

rev18a	APV1	09/05/03
	included 2 new RMR tdls as below
	F751686_55922va0	S_dsp_blockrepeat
	F751686_55922vb0	S_reta_context

rev18b	APV1	09/05/03
	slowed down OMAP LED on-speed sorted tdls from 60MHz to 50MHz tdls for
    	FTY improvement

rev19a	APV1	10/01/03
	included 1 new RMR tdls as below
	F751686_55922vc0	S_hwa_dcti8x8_D2_D7

rev19b	APV1	10/15/03
	included shmoos before ARM at-speed tdls for yield improvement

rev19c	APV1	10/15/03
	slowed down hel_tdl_apll and hel_diag1 and hel_diag6 to 2MHz for yield 
	improvement

rev19d	APV1	10/15/03
	slowed down all the OMAP LED to 30MHz for yield improvement

rev19e	APV1	10/15/03
	removed individual ICCQ pass/fail for CORE+ARM as it is covered by TOTAL

rev20a	APV1	11/14/03
	added DSP MMU EMIFF tdl for RMR screening
	F751686_55922vd0	27x_rmr_emiffdspmmu

rev21a	APV1	12/04/03
	modified OPENS pinlist for ICCQ test

rev21b	APV1	12/04/03
	added LED DMA 2D2D tdl for RMR screening	
	F751686_55922ve0	S_led_dma_2d2d_xfer


VSA5910A21.itp	 Cisneros 05/25/04
		 Added -45c temperature for DSP
		 Completed robustness test then change limits to adjust
		 See OMAP-DSP for any other changes
		 Program is PREBURNIN 90c for handler

OMAP-DSP21	 Cisneros 06/01/04
		 Modified VMX3V = 3.6V (3.0V previously)
		 Modified VIL and leakage limits	
		 Added New variable PREBI_N45 (Changed from PREBI_RM)
		

OMAP-DSP21b	Drei 09/02/04
		Added POSTBI_100C and POSTBI_N45

VSA5910A22.itp  Agulto 08/17/05
		Moved POSTBI_100C to POSTBI_105C
		Moved Handler_Temp to 105
		Added FT1_110C

DSP23x		Cisneros 10/26/05 
		Changed Core voltages to:
                VMN1V = 1.58V, VNM1V = 1.72V, VMX1V = 1.8V
                Removed 2x-3x executions on patterns
                Adjusted frequency for ATSPEED MAX
		Moved POSTBI_105C to POSTBI_100C
		Moved FT1_110C to FT1_105C
		Added new Screen TC5_1K for Automotive
		Added schmoo function

DSP24X		Cisneros 12/08/05
		Changed from 2ms to 50ms wait after power up on 050
		Added DevicePack to allow package visibility
		Moved variables not used from WindowVar	
		Added failing_pattern on Bin1 block to print on variable
		Testfail, run freq search and send to Testware
		Fixed hard coded schmoo voltage labels
		Added Vmin and Fmax search to run split lot DSP_SEARCH
		
DSP25X		Changed PREBURNIN for FT1_90C and added into ICCQ for
		High temp selection
		Turn on FMax search from pass to fail -- DSPF1
		
DSP26A          Cisneros 01/27/06
		Fix DSPF2 to have correct format for ARM, DSP and TC		
		Added DSP_SEARCH window variables to enable FMax search
		Cleaned up SHMOO routine function sx for printing
		Added all_test_info file to print if datalog in ENG mode
		
		Cisneros 03/03/06
		Added Binary search -- DSPFB
		Linear search from Pass to Fail -- DSPF1
		Linear search from Fail to Pass -- DSPF2
		
DSP26C		Cisneros 03/13/06
		Added Bin3 as TC5BIN MIN/MAX after DieID to cut on test time
		Get FMax on pass/fail TC5MIN 


DSP27		Cisneros 04/12/06
		Removed ATSPEED_TC5_TEST from flow 
		Relaxed ARM patterns frequency from 200MHz to 180MHz		

*
************************************************************************
****            PROGRAM DOCUMENTATION                               ****
************************************************************************
* PATTERN SETS USED:              NAME           REV   TYPE
*   GLOBAL PATTERN FILE
*     F751686_55922G00
*   1MHZ FUNCTIONAL PATTERNS
*     F751686_55922010           hel_atpg_sc     2.00 SCANCHK
*     F751686_55922020           hel_icc_sc      2.00 SCANCHK
*     F751686_55922030           omap31_p_atpg_sc1.02 SCANCHK
*     F751686_55922040           omap31_s_atpg_sc1.02 SCANCHK
*     F751686_55922050           dcp_voh_vol     1.00 DC_PARA
*     F751686_55922060           dcp_voh_vol_sdata_dual1.00 DC_PARA
*     F751686_55922070           E_FUSE          2.00 FUNC
*     F751686_55922080           arm925_atpg_1   2.00 SCAN
*     F751686_55922090           arm925_atpg_2   2.00 SCAN
*     F751686_55922100           arm925_atpg_3   2.00 SCAN
*     F751686_55922110           arm925_atpg_reset2.00 SCAN
*     F751686_55922120           hel_atpg_0      2.00 SCAN
*     F751686_55922130           hel_atpg_1      2.00 SCAN
*     F751686_55922140           hel_atpg_2      2.00 SCAN
*     F751686_55922150           hel_atpg_3      2.00 SCAN
*     F751686_55922160           hel_atpg_4      2.00 SCAN
*     F751686_55922170           hel_atpg_sim    2.00 SCAN
*     F751686_55922180           hel_icc_10      2.00 SCAN, ICCQ
*     F751686_55922190           hel_icc_bsr     1.01 SCAN
*     F751686_55922200           mgs3_atpg_0     1.04 SCAN
*     F751686_55922210           mgs3_atpg_1     1.04 SCAN
*     F751686_55922220           mgs3_atpg_2     1.04 SCAN
*     F751686_55922230           mgs3_atpg_20    1.02 SCAN
*     F751686_55922240           mgs3_atpg_3     1.04 SCAN
*     F751686_55922250           mgs3_atpg_4     1.04 SCAN
*     F751686_55922260           mgs3_atpg_5     1.04 SCAN
*     F751686_55922270           mgs3_atpg_6     1.04 SCAN
*     F751686_55922280           mgs3_atpg_7     1.04 SCAN
*     F751686_55922290           mgs3_atpg_8     1.04 SCAN
*     F751686_55922300           mgs3_atpg_sc    1.03 SCAN
*     F751686_55922310           omap31_p_atpg_0 2.00 SCAN
*     F751686_55922320           omap31_p_atpg_1 2.00 SCAN
*     F751686_55922330           omap31_p_atpg_2 2.00 SCAN
*     F751686_55922340           omap31_p_atpg_3 2.00 SCAN
*     F751686_55922350           omap31_p_atpg_4 2.00 SCAN
*     F751686_55922360           omap31_p_atpg_sim2.00 SCAN
*     F751686_55922370           omap31_s_atpg_0 2.00 SCAN
*     F751686_55922380           omap31_s_atpg_1 2.00 SCAN
*     F751686_55922390           omap31_s_atpg_2 2.00 SCAN
*     F751686_55922400           omap31_s_atpg_sim2.00 SCAN
*   VOUT FUNCTIONAL PATTERNS
*     F751686_55922440           ( Derived From dcp_voh_vol )
*     F751686_55922450           ( Derived From dcp_voh_vol_sdata_dual )
*   ICCQ PATTERNS
*     F751686_55922430           hel_tdl_sleep_sync1.00 ICCQ
*   VIH/VIL PATTERNS
*     F751686_55922410           dcp_vih_vil     1.00 VIH/VIL
*     F751686_55922420           ( Derived From dcp_vih_vil )
*   FUNCTIONAL AT SPEED PATTERNS
*     F751686_55922460           Die_ID          2.00 FUNC_AC
*     F751686_55922470           ETLM            2.00 FUNC_AC
*     F751686_55922480           Ls12_writeseq_14_12.00 FUNC_AC
*     F751686_55922490           Ls12_writeseq_28_22.00 FUNC_AC
*     F751686_55922500           Ls14_writeseq_28_22.00 FUNC_AC
*     F751686_55922510           Ls22_writeseq_28_22.00 FUNC_AC
*     F751686_55922520           Ls24_writeseq_28_22.00 FUNC_AC
*     F751686_55922530           Ls2_32_16_ic_28_22.00 FUNC_AC
*     F751686_55922540           Ls2_cp15test31_28_22.00 FUNC_AC
*     F751686_55922550           Ls2_dc_cl_ful_28_22.00 FUNC_AC
*     F751686_55922560           Ls2_dc_cln_idx_28_22.00 FUNC_AC
*     F751686_55922570           Ls2_dc_rd_wr_28_22.00 FUNC_AC
*     F751686_55922580           Ls2_dche_hs1X_28_22.00 FUNC_AC
*     F751686_55922590           Ls2_dchitmiss_28_22.00 FUNC_AC
*     F751686_55922600           Ls2_hel_diag_28_21.00 FUNC_AC
*     F751686_55922610           Ls2_led_diag_2_28_21.00 FUNC_AC
*     F751686_55922620           Ls2_ichitmiss_28_22.00 FUNC_AC
*     F751686_55922630           Ls2_mmu_w_dtlb_28_22.00 FUNC_AC
*     F751686_55922640           Ls2_mrc_usr_md_28_22.00 FUNC_AC
*     F751686_55922650           Ls2_o_dma_imif_28_21.00 FUNC_AC
*     F751686_55922660           Ls2_ostimer1_28_21.00 FUNC_AC
*     F751686_55922670           Ls2_ostimer3_28_21.00 FUNC_AC
*     F751686_55922680           Ls2_prefetch_28_22.00 FUNC_AC
*     F751686_55922690           Ls2_raw_1010_28_22.00 FUNC_AC
*     F751686_55922700           Ls2_raw_110x_28_22.00 FUNC_AC
*     F751686_55922710           Ls2_raw_1110_28_22.00 FUNC_AC
*     F751686_55922720           Ls2_raw_1111_28_22.00 FUNC_AC
*     F751686_55922730           Ls2_raw_111Xcoh_28_22.00 FUNC_AC
*     F751686_55922740           Ls2_raw_111x_28_22.00 FUNC_AC
*     F751686_55922750           Ls2_swap_hzd_28_22.00 FUNC_AC
*     F751686_55922760           Ls2_swp_str_l1_28_22.00 FUNC_AC
*     F751686_55922770           Ls2_tdl_api_access_28_22.00 FUNC_AC
*     F751686_55922780           Ls2_tdl_led_ostimer2_28_21.00 FUNC_AC
*     F751686_55922790           Ls2_timer32_28_21.00 FUNC_AC
*     F751686_55922800           Ls2_tiny_icw_28_22.00 FUNC_AC
*     F751686_55922810           Ls2_tlb_bistp2_28_22.00 FUNC_AC
*     F751686_55922820           Ls2_tlb_bistp3_28_22.00 FUNC_AC
*     F751686_55922830           Ls2_tlb_bistp_28_22.00 FUNC_AC
*     F751686_55922840           Ls2_tlbfill_28_22.00 FUNC_AC
*     F751686_55922850           S_apirdwrapicntlstatu2.00 FUNC_AC
*     F751686_55922860           S_apirdwrrheareghom2.00 FUNC_AC
*     F751686_55922870           S_apirdwrrhearegsam2.00 FUNC_AC
*     F751686_55922880           S_apisimrdwrDARAM01sa2.00 FUNC_AC
*     F751686_55922890           S_apisimrdwrDARAM27sa2.00 FUNC_AC
*     F751686_55922900           S_apisimrdwrSARAMsam2.00 FUNC_AC
*     F751686_55922910           S_apisimrdwrrheahom2.00 FUNC_AC
*     F751686_55922920           S_apisimrdwrrheasam2.00 FUNC_AC
*     F751686_55922930           S_apisimtestforhabort2.00 FUNC_AC
*     F751686_55922940           S_apiwrapiintrreg2.00 FUNC_AC
*     F751686_55922950           S_apiwrpostmemsam2.00 FUNC_AC
*     F751686_55922960           S_apiwrpostrheasam2.00 FUNC_AC
*     F751686_55922970           S_benchmark_agc_deint2.00 FUNC_AC
*     F751686_55922980           S_bmrkagcdeintbyte2.00 FUNC_AC
*     F751686_55922990           S_benchmark_agc_frame2.00 FUNC_AC
*     F751686_55922a00           S_bmrkagcslotbyte2.00 FUNC_AC
*     F751686_55922a10           S_benchmark_arith_enc2.00 FUNC_AC
*     F751686_55922a20           S_benchmark_conv2d2.00 FUNC_AC
*     F751686_55922a30           S_benchmark_convdec2.00 FUNC_AC
*     F751686_55922a40           S_benchmark_convenc2.00 FUNC_AC
*     F751686_55922a50           S_benchmark_corr2d2.00 FUNC_AC
*     F751686_55922a60           S_benchmark_dagc_exp2.00 FUNC_AC
*     F751686_55922a70           S_benchmark_dagc_slot2.00 FUNC_AC
*     F751686_55922a80           S_bmrkdagcslotbyte2.00 FUNC_AC
*     F751686_55922a90           S_benchmark_deint12.00 FUNC_AC
*     F751686_55922aa0           S_bmrkdigsmooth 2.00 FUNC_AC
*     F751686_55922ab0           S_benchmark_fir12.00 FUNC_AC
*     F751686_55922ac0           S_benchmark_fir22.00 FUNC_AC
*     F751686_55922ad0           S_bmrkframedeint3G2.00 FUNC_AC
*     F751686_55922ae0           S_bmrkframedeint3Gbyt2.00 FUNC_AC
*     F751686_55922af0           S_benchmark_fsdeint2.00 FUNC_AC
*     F751686_55922ag0           S_benchmark_iir12.00 FUNC_AC
*     F751686_55922ah0           S_benchmark_itg962.00 FUNC_AC
*     F751686_55922ai0           S_bmrkmotsearch 2.00 FUNC_AC
*     F751686_55922aj0           S_bmrkmrccombine2.00 FUNC_AC
*     F751686_55922ak0           S_benchmark_mrc_exp2.00 FUNC_AC
*     F751686_55922al0           S_bmrkmrcmultiple2.00 FUNC_AC
*     F751686_55922am0           S_bmrkmrcsingle 2.00 FUNC_AC
*     F751686_55922an0           S_bmrkmrcsmooth 2.00 FUNC_AC
*     F751686_55922ao0           S_benchmark_puncture2.00 FUNC_AC
*     F751686_55922ap0           S_benchmark_qrle2.00 FUNC_AC
*     F751686_55922aq0           S_bmrkratematch 2.00 FUNC_AC
*     F751686_55922ar0           S_benchmark_reorder2.00 FUNC_AC
*     F751686_55922as0           S_benchmark_sad_block2.00 FUNC_AC
*     F751686_55922at0           S_bmrksadmblock 2.00 FUNC_AC
*     F751686_55922au0           S_bmrkslotdeint 2.00 FUNC_AC
*     F751686_55922av0           S_bmrksttdcombinepilo2.00 FUNC_AC
*     F751686_55922aw0           S_benchmark_sttd_mult2.00 FUNC_AC
*     F751686_55922ax0           S_benchmark_vlc 2.00 FUNC_AC
*     F751686_55922ay0           S_benchmark_vld 2.00 FUNC_AC
*     F751686_55922az0           S_checkerboard  2.00 FUNC_AC
*     F751686_55922b00           S_checkerboard_d02.00 FUNC_AC
*     F751686_55922b10           S_cpu_access_rhea_reg2.00 FUNC_AC
*     F751686_55922b20           S_cpu_blockrepeat2.00 FUNC_AC
*     F751686_55922b30           S_cpu_cf_brc_r202.00 FUNC_AC
*     F751686_55922b40           S_cpucfdurptxparar212.00 FUNC_AC
*     F751686_55922b50           S_cpucfretcparar202.00 FUNC_AC
*     F751686_55922b60           S_cpu_cf_rptx_r202.00 FUNC_AC
*     F751686_55922b70           S_cpu_cf_xcn_swap_r202.00 FUNC_AC
*     F751686_55922b80           S_cpucircularlineart12.00 FUNC_AC
*     F751686_55922b90           S_cpucircularlineart22.00 FUNC_AC
*     F751686_55922ba0           S_cpucircularlineart32.00 FUNC_AC
*     F751686_55922bb0           S_cpu_idle_wakeup2.00 FUNC_AC
*     F751686_55922bc0           S_cpu_ipsa_chk  2.00 FUNC_AC
*     F751686_55922bd0           S_cpuleadbitdagenr212.00 FUNC_AC
*     F751686_55922be0           S_cpuleadbitnestloopr2.00 FUNC_AC
*     F751686_55922bf0           S_cpu_localrepeat2.00 FUNC_AC
*     F751686_55922bg0           S_cpu_mmr_rw_min2.00 FUNC_AC
*     F751686_55922bh0           S_cpu_paral_au_au2.00 FUNC_AC
*     F751686_55922bi0           S_cpu_paral_au_du2.00 FUNC_AC
*     F751686_55922bj0           S_cpuplaudubugfixr202.00 FUNC_AC
*     F751686_55922bk0           S_cpu_paral_au_du_t12.00 FUNC_AC
*     F751686_55922bl0           S_cpu_paral_au_du_t22.00 FUNC_AC
*     F751686_55922bm0           S_cpu_paral_au_du_t32.00 FUNC_AC
*     F751686_55922bn0           S_cpu_paral_cf_au2.00 FUNC_AC
*     F751686_55922bo0           S_cpu_paral_cf_au_t12.00 FUNC_AC
*     F751686_55922bp0           S_cpu_paral_cf_cf2.00 FUNC_AC
*     F751686_55922bq0           S_cpu_paral_cf_du2.00 FUNC_AC
*     F751686_55922br0           S_cpu_paral_cf_du_t12.00 FUNC_AC
*     F751686_55922bs0           S_cpu_paral_cf_du_t22.00 FUNC_AC
*     F751686_55922bt0           S_cpu_paral_du_du2.00 FUNC_AC
*     F751686_55922bu0           S_cpupldudubtsr202.00 FUNC_AC
*     F751686_55922bv0           S_cpu_paral_du_du_t12.00 FUNC_AC
*     F751686_55922bw0           S_cpu_repeat    2.00 FUNC_AC
*     F751686_55922bx0           S_cpu_speedpath_alu162.00 FUNC_AC
*     F751686_55922by0           S_cpu_speedpath_alu402.00 FUNC_AC
*     F751686_55922bz0           S_cpuspdptalu40r202.00 FUNC_AC
*     F751686_55922c00           S_cpu_speedpath_bit2.00 FUNC_AC
*     F751686_55922c10           S_cpuspdptbitr202.00 FUNC_AC
*     F751686_55922c20           S_cpuspdptblockrpt2.00 FUNC_AC
*     F751686_55922c30           S_cpuspdptcmprbrc2.00 FUNC_AC
*     F751686_55922c40           S_cpu_speedpath_dagen2.00 FUNC_AC
*     F751686_55922c50           S_cpuspdptkillad2.00 FUNC_AC
*     F751686_55922c60           S_cpuspdptkillex2.00 FUNC_AC
*     F751686_55922c70           S_cpuspdptkillexr202.00 FUNC_AC
*     F751686_55922c80           S_cpuspdptkillrd2.00 FUNC_AC
*     F751686_55922c90           S_cpu_speedpath_mac12.00 FUNC_AC
*     F751686_55922ca0           S_cpuspdptmac1r202.00 FUNC_AC
*     F751686_55922cb0           S_cpu_speedpath_mac22.00 FUNC_AC
*     F751686_55922cc0           S_cpuspdptmac2r202.00 FUNC_AC
*     F751686_55922cd0           S_cpu_speedpath_rf2.00 FUNC_AC
*     F751686_55922ce0           S_cpuspdptrfr20 2.00 FUNC_AC
*     F751686_55922cf0           S_cpu_speedpath_shift2.00 FUNC_AC
*     F751686_55922cg0           S_cpuspdptshiftr202.00 FUNC_AC
*     F751686_55922ch0           S_cpuspdptstallac12.00 FUNC_AC
*     F751686_55922ci0           S_cpuspdptstallad2.00 FUNC_AC
*     F751686_55922cj0           S_cpuspdptstalladr202.00 FUNC_AC
*     F751686_55922ck0           S_cpuspdptstalldec2.00 FUNC_AC
*     F751686_55922cl0           S_cpu_xar_mdp_r202.00 FUNC_AC
*     F751686_55922cm0           S_dieid_led     2.00 FUNC_AC
*     F751686_55922cn0           S_dma_daram_daram2.00 FUNC_AC
*     F751686_55922co0           S_dma_daram_emif2.00 FUNC_AC
*     F751686_55922cp0           S_dma_daram_saram2.00 FUNC_AC
*     F751686_55922cq0           S_dma_emif_daram2.00 FUNC_AC
*     F751686_55922cr0           S_dma_idle      2.00 FUNC_AC
*     F751686_55922cs0           S_dma_rhea_emif 2.00 FUNC_AC
*     F751686_55922ct0           S_dma_rhea_rhea 2.00 FUNC_AC
*     F751686_55922cu0           S_dma_saram_saram2.00 FUNC_AC
*     F751686_55922cv0           S_fdbk_boot     2.00 FUNC_AC
*     F751686_55922cw0           S_fdbk_boot1    2.00 FUNC_AC
*     F751686_55922cx0           S_fdbk_boot2    2.00 FUNC_AC
*     F751686_55922cy0           S_fdbkdmadefaultvalue2.00 FUNC_AC
*     F751686_55922cz0           S_fdbk_dma_registers2.00 FUNC_AC
*     F751686_55922d00           S_fdbk_intr1    2.00 FUNC_AC
*     F751686_55922d10           S_fdbk_intr2    2.00 FUNC_AC
*     F751686_55922d20           S_fdbk_pedbus   2.00 FUNC_AC
*     F751686_55922d30           S_fdbk_stio_dual_read2.00 FUNC_AC
*     F751686_55922d40           S_fdbkstiolockaccess2.00 FUNC_AC
*     F751686_55922d50           S_fdbk_stio_rd_wr2.00 FUNC_AC
*     F751686_55922d60           S_fdbk_stio_read2.00 FUNC_AC
*     F751686_55922d70           S_fdbk_stio_ready2.00 FUNC_AC
*     F751686_55922d80           S_fdbk_stio_wpe 2.00 FUNC_AC
*     F751686_55922d90           S_fdbk_stio_wr_e_f2.00 FUNC_AC
*     F751686_55922da0           S_fill_0        2.00 FUNC_AC
*     F751686_55922db0           S_fill_0_d0     2.00 FUNC_AC
*     F751686_55922dc0           S_fill_1        2.00 FUNC_AC
*     F751686_55922dd0           S_fill_1_d0     2.00 FUNC_AC
*     F751686_55922de0           S_fullrate_vocoder2.00 FUNC_AC
*     F751686_55922df0           S_fullratevocoderintr2.00 FUNC_AC
*     F751686_55922dg0           S_icache_data_chkbd2.00 FUNC_AC
*     F751686_55922dh0           S_icache_data_fill_12.00 FUNC_AC
*     F751686_55922di0           S_icachedatainvchkbd2.00 FUNC_AC
*     F751686_55922dj0           S_icache_fill_0 2.00 FUNC_AC
*     F751686_55922dk0           S_icache_lvb_rs 2.00 FUNC_AC
*     F751686_55922dl0           S_icache_regs   2.00 FUNC_AC
*     F751686_55922dm0           S_icache_tag_chkbd2.00 FUNC_AC
*     F751686_55922dn0           S_icache_tag_fill_12.00 FUNC_AC
*     F751686_55922do0           S_icache_tag_invchkbd2.00 FUNC_AC
*     F751686_55922dp0           S_inv_checkerboard2.00 FUNC_AC
*     F751686_55922dq0           S_inv_checkerboard_d02.00 FUNC_AC
*     F751686_55922dr0           S_march13n_d0   2.00 FUNC_AC
*     F751686_55922ds0           S_march13n_pd   2.00 FUNC_AC
*     F751686_55922dt0           S_rheaaccessallperiph2.00 FUNC_AC
*     F751686_55922du0           S_rhea_int1_pr1 2.00 FUNC_AC
*     F751686_55922dv0           S_rhea_int1_pr102.00 FUNC_AC
*     F751686_55922dw0           S_rhea_int1_pr112.00 FUNC_AC
*     F751686_55922dx0           S_rhea_int1_pr122.00 FUNC_AC
*     F751686_55922dy0           S_rhea_int1_pr132.00 FUNC_AC
*     F751686_55922dz0           S_rhea_int1_pr142.00 FUNC_AC
*     F751686_55922e00           S_rhea_int1_pr152.00 FUNC_AC
*     F751686_55922e10           S_rhea_int1_pr162.00 FUNC_AC
*     F751686_55922e20           S_rhea_int1_pr172.00 FUNC_AC
*     F751686_55922e30           S_rhea_int1_pr182.00 FUNC_AC
*     F751686_55922e40           S_rhea_int1_pr192.00 FUNC_AC
*     F751686_55922e50           S_rhea_int1_pr2 2.00 FUNC_AC
*     F751686_55922e60           S_rhea_int1_pr202.00 FUNC_AC
*     F751686_55922e70           S_rhea_int1_pr212.00 FUNC_AC
*     F751686_55922e80           S_rhea_int1_pr222.00 FUNC_AC
*     F751686_55922e90           S_rhea_int1_pr3 2.00 FUNC_AC
*     F751686_55922ea0           S_rhea_int1_pr4 2.00 FUNC_AC
*     F751686_55922eb0           S_rhea_int1_pr5 2.00 FUNC_AC
*     F751686_55922ec0           S_rhea_int1_pr6 2.00 FUNC_AC
*     F751686_55922ed0           S_rhea_int1_pr7 2.00 FUNC_AC
*     F751686_55922ee0           S_rhea_int1_pr8 2.00 FUNC_AC
*     F751686_55922ef0           S_rhea_int1_pr9 2.00 FUNC_AC
*     F751686_55922eg0           S_rhea_timeout_error12.00 FUNC_AC
*     F751686_55922eh0           S_rom_test      2.00 FUNC_AC
*     F751686_55922ei0           S_rom_test_reg  2.00 FUNC_AC
*     F751686_55922ej0           S_testmmap      2.00 FUNC_AC
*     F751686_55922ek0           S_wrapcombo1daram0x002.00 FUNC_AC
*     F751686_55922el0           S_wrapcombo1daram0x012.00 FUNC_AC
*     F751686_55922em0           S_wrapcombo1daram0x022.00 FUNC_AC
*     F751686_55922en0           S_wrapcombo1daram0x032.00 FUNC_AC
*     F751686_55922eo0           S_wrapcombo1daram0x042.00 FUNC_AC
*     F751686_55922ep0           S_wrapcombo1daram0x052.00 FUNC_AC
*     F751686_55922eq0           S_wrapcombo1daram0x062.00 FUNC_AC
*     F751686_55922er0           S_wrapcombo1daram0x072.00 FUNC_AC
*     F751686_55922es0           S_wrapcombo1saram0x082.00 FUNC_AC
*     F751686_55922et0           S_wrapcombo1saram0x092.00 FUNC_AC
*     F751686_55922eu0           S_wrapcombo1saram0x0a2.00 FUNC_AC
*     F751686_55922ev0           S_wrapcombo1saram0x0b2.00 FUNC_AC
*     F751686_55922ew0           S_wrapcombo1saram0x0c2.00 FUNC_AC
*     F751686_55922ex0           S_wrapcombo1saram0x0d2.00 FUNC_AC
*     F751686_55922ey0           S_wrapcombo1saram0x0e2.00 FUNC_AC
*     F751686_55922ez0           S_wrapcombo1saram0x0f2.00 FUNC_AC
*     F751686_55922f00           S_wrapcombo1saram0x102.00 FUNC_AC
*     F751686_55922f10           S_wrapcombo1saram0x112.00 FUNC_AC
*     F751686_55922f20           S_wrapcombo1saram0x122.00 FUNC_AC
*     F751686_55922f30           S_wrapcombo1saram0x132.00 FUNC_AC
*     F751686_55922f40           S_wrapcombo2daram0x002.00 FUNC_AC
*     F751686_55922f50           S_wrapcombo2daram0x012.00 FUNC_AC
*     F751686_55922f60           S_wrapcombo2daram0x022.00 FUNC_AC
*     F751686_55922f70           S_wrapcombo2daram0x032.00 FUNC_AC
*     F751686_55922f80           S_wrapcombo2daram0x042.00 FUNC_AC
*     F751686_55922f90           S_wrapcombo2daram0x052.00 FUNC_AC
*     F751686_55922fa0           S_wrapcombo2daram0x062.00 FUNC_AC
*     F751686_55922fb0           S_wrapcombo2daram0x072.00 FUNC_AC
*     F751686_55922fc0           S_wrapcombo2saram0x082.00 FUNC_AC
*     F751686_55922fd0           S_wrapcombo2saram0x092.00 FUNC_AC
*     F751686_55922fe0           S_wrapcombo2saram0x0a2.00 FUNC_AC
*     F751686_55922ff0           S_wrapcombo2saram0x0b2.00 FUNC_AC
*     F751686_55922fg0           S_wrapcombo2saram0x0c2.00 FUNC_AC
*     F751686_55922fh0           S_wrapcombo2saram0x0d2.00 FUNC_AC
*     F751686_55922fi0           S_wrapcombo2saram0x0e2.00 FUNC_AC
*     F751686_55922fj0           S_wrapcombo2saram0x0f2.00 FUNC_AC
*     F751686_55922fk0           S_wrapcombo2saram0x102.00 FUNC_AC
*     F751686_55922fl0           S_wrapcombo2saram0x112.00 FUNC_AC
*     F751686_55922fm0           S_wrapcombo2saram0x122.00 FUNC_AC
*     F751686_55922fn0           S_wrapcombo2saram0x132.00 FUNC_AC
*     F751686_55922fo0           S_wrapcombo3daram0x002.00 FUNC_AC
*     F751686_55922fp0           S_wrapcombo3daram0x012.00 FUNC_AC
*     F751686_55922fq0           S_wrapcombo3daram0x022.00 FUNC_AC
*     F751686_55922fr0           S_wrapcombo3daram0x032.00 FUNC_AC
*     F751686_55922fs0           S_wrapcombo3daram0x042.00 FUNC_AC
*     F751686_55922ft0           S_wrapcombo3daram0x052.00 FUNC_AC
*     F751686_55922fu0           S_wrapcombo3daram0x062.00 FUNC_AC
*     F751686_55922fv0           S_wrapcombo3daram0x072.00 FUNC_AC
*     F751686_55922fw0           S_wrapcombo3saram0x082.00 FUNC_AC
*     F751686_55922fx0           S_wrapcombo3saram0x092.00 FUNC_AC
*     F751686_55922fy0           S_wrapcombo3saram0x0a2.00 FUNC_AC
*     F751686_55922fz0           S_wrapcombo3saram0x0b2.00 FUNC_AC
*     F751686_55922g00           S_wrapcombo3saram0x0c2.00 FUNC_AC
*     F751686_55922g10           S_wrapcombo3saram0x0d2.00 FUNC_AC
*     F751686_55922g20           S_wrapcombo3saram0x0e2.00 FUNC_AC
*     F751686_55922g30           S_wrapcombo3saram0x0f2.00 FUNC_AC
*     F751686_55922g40           S_wrapcombo3saram0x102.00 FUNC_AC
*     F751686_55922g50           S_wrapcombo3saram0x112.00 FUNC_AC
*     F751686_55922g60           S_wrapcombo3saram0x122.00 FUNC_AC
*     F751686_55922g70           S_wrapcombo3saram0x132.00 FUNC_AC
*     F751686_55922g80           S_xpsa_api      2.00 FUNC_AC
*     F751686_55922g90           S_xpsa_cpu      2.00 FUNC_AC
*     F751686_55922ga0           S_xpsa_emif     2.00 FUNC_AC
*     F751686_55922gb0           S_xpsa_rhea     2.00 FUNC_AC
*     F751686_55922gc0           TLM_arm9_r3_alu_extra3.0  FUNC_AC
*     F751686_55922gd0           TLM_arm9_r3_ctl 3.0  FUNC_AC
*     F751686_55922ge0           TLM_arm9_r3_dp  3.01 FUNC_AC
*     F751686_55922gf0           TLM_arm9_r3_ice 3.0  FUNC_AC
*     F751686_55922gg0           TLM_arm9_r3_ice_extra3.0  FUNC_AC
*     F751686_55922gh0           TLM_arm9_r3_mul 3.0  FUNC_AC
*     F751686_55922gi0           TLM_arm9_r3_rev13.0  FUNC_AC
*     F751686_55922gj0           TLM_arm9_r3_rev23.0  FUNC_AC
*     F751686_55922gk0           TLM_arm9_r3_rev33.0  FUNC_AC
*     F751686_55922gl0           TLM_arm9_r3_scan_extra3.0  FUNC_AC
*     F751686_55922gm0           TLM_arm9_r3_tapid3.0  FUNC_AC
*     F751686_55922gn0           TLM_arm9_r3_thumb3.0  FUNC_AC
*     F751686_55922go0           TLM_arm9_r3_uni 3.01 FUNC_AC
*     F751686_55922gp0           TLM_arm9_r3_wpt 3.0  FUNC_AC
*     F751686_55922gq0           USB_HELEN1      2.00 FUNC_AC
*     F751686_55922gr0           apirdwrapicntlstatu2.00 FUNC_AC
*     F751686_55922gs0           apirdwrrheareghom2.00 FUNC_AC
*     F751686_55922gt0           apirdwrrhearegsam2.00 FUNC_AC
*     F751686_55922gu0           apisimrdwrDARAM01sa2.00 FUNC_AC
*     F751686_55922gv0           apisimrdwrDARAM27sa2.00 FUNC_AC
*     F751686_55922gw0           apisimrdwrSARAMsam2.00 FUNC_AC
*     F751686_55922gx0           apisimrdwrrheahom2.00 FUNC_AC
*     F751686_55922gy0           apisimrdwrrheasam2.00 FUNC_AC
*     F751686_55922gz0           apisimtestforhabort2.00 FUNC_AC
*     F751686_55922h00           apiwrapiintrreg 2.00 FUNC_AC
*     F751686_55922h10           apiwrpostmemsam 2.00 FUNC_AC
*     F751686_55922h20           apiwrpostrheasam2.00 FUNC_AC
*     F751686_55922h30           benchmark_agc_deint2.00 FUNC_AC
*     F751686_55922h40           bmrkagcdeintbyte2.00 FUNC_AC
*     F751686_55922h50           benchmark_agc_frame2.00 FUNC_AC
*     F751686_55922h60           bmrkagcslotbyte 2.00 FUNC_AC
*     F751686_55922h70           benchmark_arith_enc2.00 FUNC_AC
*     F751686_55922h80           benchmark_conv2d2.00 FUNC_AC
*     F751686_55922h90           benchmark_convdec2.00 FUNC_AC
*     F751686_55922ha0           benchmark_convenc2.00 FUNC_AC
*     F751686_55922hb0           benchmark_corr2d2.00 FUNC_AC
*     F751686_55922hc0           benchmark_dagc_exp2.00 FUNC_AC
*     F751686_55922hd0           benchmark_dagc_slot2.00 FUNC_AC
*     F751686_55922he0           bmrkdagcslotbyte2.00 FUNC_AC
*     F751686_55922hf0           benchmark_deint12.00 FUNC_AC
*     F751686_55922hg0           bmrkdigsmooth   2.00 FUNC_AC
*     F751686_55922hh0           benchmark_fir1  2.00 FUNC_AC
*     F751686_55922hi0           benchmark_fir2  2.00 FUNC_AC
*     F751686_55922hj0           bmrkframedeint3G2.00 FUNC_AC
*     F751686_55922hk0           bmrkframedeint3Gbyt2.00 FUNC_AC
*     F751686_55922hl0           benchmark_fsdeint2.00 FUNC_AC
*     F751686_55922hm0           benchmark_iir1  2.00 FUNC_AC
*     F751686_55922hn0           benchmark_itg96 2.00 FUNC_AC
*     F751686_55922ho0           bmrkmotsearch   2.00 FUNC_AC
*     F751686_55922hp0           bmrkmrccombine  2.00 FUNC_AC
*     F751686_55922hq0           benchmark_mrc_exp2.00 FUNC_AC
*     F751686_55922hr0           bmrkmrcmultiple 2.00 FUNC_AC
*     F751686_55922hs0           bmrkmrcsingle   2.00 FUNC_AC
*     F751686_55922ht0           bmrkmrcsmooth   2.00 FUNC_AC
*     F751686_55922hu0           benchmark_puncture2.00 FUNC_AC
*     F751686_55922hv0           benchmark_qrle  2.00 FUNC_AC
*     F751686_55922hw0           bmrkratematch   2.00 FUNC_AC
*     F751686_55922hx0           benchmark_reorder2.00 FUNC_AC
*     F751686_55922hy0           benchmark_sad_block2.00 FUNC_AC
*     F751686_55922hz0           bmrksadmblock   2.00 FUNC_AC
*     F751686_55922i00           bmrkslotdeint   2.00 FUNC_AC
*     F751686_55922i10           bmrksttdcombinepilo2.00 FUNC_AC
*     F751686_55922i20           benchmark_sttd_mult2.00 FUNC_AC
*     F751686_55922i30           benchmark_vlc   2.00 FUNC_AC
*     F751686_55922i40           benchmark_vld   2.00 FUNC_AC
*     F751686_55922i50           checkerboard    2.00 FUNC_AC
*     F751686_55922i60           checkerboard_d0 2.00 FUNC_AC
*     F751686_55922i70           cpu_access_rhea_reg2.00 FUNC_AC
*     F751686_55922i80           cpu_blockrepeat 2.00 FUNC_AC
*     F751686_55922i90           cpu_cf_brc_r20  2.00 FUNC_AC
*     F751686_55922ia0           cpucfdurptxparar212.00 FUNC_AC
*     F751686_55922ib0           cpucfretcparar202.00 FUNC_AC
*     F751686_55922ic0           cpu_cf_rptx_r20 2.00 FUNC_AC
*     F751686_55922id0           cpu_cf_xcn_swap_r202.00 FUNC_AC
*     F751686_55922ie0           cpucircularlineart12.00 FUNC_AC
*     F751686_55922if0           cpucircularlineart22.00 FUNC_AC
*     F751686_55922ig0           cpucircularlineart32.00 FUNC_AC
*     F751686_55922ih0           cpu_idle_wakeup 2.00 FUNC_AC
*     F751686_55922ii0           cpu_ipsa_chk    2.00 FUNC_AC
*     F751686_55922ij0           cpuleadbitdagenr212.00 FUNC_AC
*     F751686_55922ik0           cpuleadbitnestloopr2.00 FUNC_AC
*     F751686_55922il0           cpu_localrepeat 2.00 FUNC_AC
*     F751686_55922im0           cpu_mmr_rw_min  2.00 FUNC_AC
*     F751686_55922in0           cpu_paral_au_au 2.00 FUNC_AC
*     F751686_55922io0           cpu_paral_au_du 2.00 FUNC_AC
*     F751686_55922ip0           cpuplaudubugfixr202.00 FUNC_AC
*     F751686_55922iq0           cpu_paral_au_du_t12.00 FUNC_AC
*     F751686_55922ir0           cpu_paral_au_du_t22.00 FUNC_AC
*     F751686_55922is0           cpu_paral_au_du_t32.00 FUNC_AC
*     F751686_55922it0           cpu_paral_cf_au 2.00 FUNC_AC
*     F751686_55922iu0           cpu_paral_cf_au_t12.00 FUNC_AC
*     F751686_55922iv0           cpu_paral_cf_cf 2.00 FUNC_AC
*     F751686_55922iw0           cpu_paral_cf_du 2.00 FUNC_AC
*     F751686_55922ix0           cpu_paral_cf_du_t12.00 FUNC_AC
*     F751686_55922iy0           cpu_paral_cf_du_t22.00 FUNC_AC
*     F751686_55922iz0           cpu_paral_du_du 2.00 FUNC_AC
*     F751686_55922j00           cpupldudubtsr20 2.00 FUNC_AC
*     F751686_55922j10           cpu_paral_du_du_t12.00 FUNC_AC
*     F751686_55922j20           cpu_repeat      2.00 FUNC_AC
*     F751686_55922j30           cpu_speedpath_alu162.00 FUNC_AC
*     F751686_55922j40           cpu_speedpath_alu402.00 FUNC_AC
*     F751686_55922j50           cpuspdptalu40r202.00 FUNC_AC
*     F751686_55922j60           cpu_speedpath_bit2.00 FUNC_AC
*     F751686_55922j70           cpuspdptbitr20  2.00 FUNC_AC
*     F751686_55922j80           cpuspdptblockrpt2.00 FUNC_AC
*     F751686_55922j90           cpuspdptcmprbrc 2.00 FUNC_AC
*     F751686_55922ja0           cpu_speedpath_dagen2.00 FUNC_AC
*     F751686_55922jb0           cpuspdptkillad  2.00 FUNC_AC
*     F751686_55922jc0           cpuspdptkillex  2.00 FUNC_AC
*     F751686_55922jd0           cpuspdptkillexr202.00 FUNC_AC
*     F751686_55922je0           cpuspdptkillrd  2.00 FUNC_AC
*     F751686_55922jf0           cpu_speedpath_mac12.00 FUNC_AC
*     F751686_55922jg0           cpuspdptmac1r20 2.00 FUNC_AC
*     F751686_55922jh0           cpu_speedpath_mac22.00 FUNC_AC
*     F751686_55922ji0           cpuspdptmac2r20 2.00 FUNC_AC
*     F751686_55922jj0           cpu_speedpath_rf2.00 FUNC_AC
*     F751686_55922jk0           cpuspdptrfr20   2.00 FUNC_AC
*     F751686_55922jl0           cpu_speedpath_shift2.00 FUNC_AC
*     F751686_55922jm0           cpuspdptshiftr202.00 FUNC_AC
*     F751686_55922jn0           cpuspdptstallac12.00 FUNC_AC
*     F751686_55922jo0           cpuspdptstallad 2.00 FUNC_AC
*     F751686_55922jp0           cpuspdptstalladr202.00 FUNC_AC
*     F751686_55922jq0           cpuspdptstalldec2.00 FUNC_AC
*     F751686_55922jr0           cpu_xar_mdp_r20 2.00 FUNC_AC
*     F751686_55922js0           dcp_iih_iil_nopull1.00 FUNC_AC
*     F751686_55922jt0           dcp_leak        1.00 FUNC_AC
*     F751686_55922ju0           dcp_vih_vil_sdata1.00 FUNC_AC
*     F751686_55922jv0           dcp_voh_vol_dual_com1.00 FUNC_AC
*     F751686_55922jw0           dcp_voh_vol_dual_flash1.00 FUNC_AC
*     F751686_55922jx0           dieid_led       2.00 FUNC_AC
*     F751686_55922jy0           dma_daram_daram 2.00 FUNC_AC
*     F751686_55922jz0           dma_daram_emif  2.00 FUNC_AC
*     F751686_55922k00           dma_daram_saram 2.00 FUNC_AC
*     F751686_55922k10           dma_emif_daram  2.00 FUNC_AC
*     F751686_55922k20           dma_idle        2.00 FUNC_AC
*     F751686_55922k30           dma_rhea_emif   2.00 FUNC_AC
*     F751686_55922k40           dma_rhea_rhea   2.00 FUNC_AC
*     F751686_55922k50           dma_saram_saram 2.00 FUNC_AC
*     F751686_55922k60           fdbk_boot       2.00 FUNC_AC
*     F751686_55922k70           fdbk_boot1      2.00 FUNC_AC
*     F751686_55922k80           fdbk_boot2      2.00 FUNC_AC
*     F751686_55922k90           fdbkdmadefaultvalue2.00 FUNC_AC
*     F751686_55922ka0           fdbk_dma_registers2.00 FUNC_AC
*     F751686_55922kb0           fdbk_intr1      2.00 FUNC_AC
*     F751686_55922kc0           fdbk_intr2      2.00 FUNC_AC
*     F751686_55922kd0           fdbk_pedbus     2.00 FUNC_AC
*     F751686_55922ke0           fdbk_stio_dual_read2.00 FUNC_AC
*     F751686_55922kf0           fdbkstiolockaccess2.00 FUNC_AC
*     F751686_55922kg0           fdbk_stio_rd_wr 2.00 FUNC_AC
*     F751686_55922kh0           fdbk_stio_read  2.00 FUNC_AC
*     F751686_55922ki0           fdbk_stio_ready 2.00 FUNC_AC
*     F751686_55922kj0           fdbk_stio_wpe   2.00 FUNC_AC
*     F751686_55922kk0           fdbk_stio_wr_e_f2.00 FUNC_AC
*     F751686_55922kl0           fill_0          2.00 FUNC_AC
*     F751686_55922km0           fill_0_d0       2.00 FUNC_AC
*     F751686_55922kn0           fill_1          2.00 FUNC_AC
*     F751686_55922ko0           fill_1_d0       2.00 FUNC_AC
*     F751686_55922kp0           fullrate_vocoder2.00 FUNC_AC
*     F751686_55922kq0           fullratevocoderintr2.00 FUNC_AC
*     F751686_55922kr0           hel_critical_tc1a2.00 FUNC_AC
*     F751686_55922ks0           hel_include_file1.00 FUNC_AC
*     F751686_55922kt0           hel_mem_init_00001.00 FUNC_AC
*     F751686_55922ku0           hel_mem_init_55551.00 FUNC_AC
*     F751686_55922kv0           hel_mem_init_AAAA1.00 FUNC_AC
*     F751686_55922kw0           hel_mem_init_FFFF1.00 FUNC_AC
*     F751686_55922kx0           hel_mpu_diagnostic2.00 FUNC_AC
*     F751686_55922ky0           hel_tdl_apll    1.01 FUNC_AC
*     F751686_55922kz0           hel_bist        2.01 FUNC_AC
*     F751686_55922l00           hel_tdl_diag1_sync1.00 FUNC_AC
*     F751686_55922l10           hel_tdl_diag2_sync1.00 FUNC_AC
*     F751686_55922l20           hel_tdl_diag3_sync1.00 FUNC_AC
*     F751686_55922l30           hel_tdl_diag4_sync1.00 FUNC_AC
*     F751686_55922l40           hel_tdl_diag5_sync1.00 FUNC_AC
*     F751686_55922l50           hel_tdl_omap_arm0_T14.00 FUNC_AC
*     F751686_55922l60           hel_tdl_arm0_w0r01.101 FUNC_AC
*     F751686_55922l70           hel_tdl_arm0_w0r11.101 FUNC_AC
*     F751686_55922l80           hel_tdl_arm0_w1r01.101 FUNC_AC
*     F751686_55922l90           hel_tdl_omap_arm1_T14.00 FUNC_AC
*     F751686_55922la0           hel_tdl_omap_arm10_T14.00 FUNC_AC
*     F751686_55922lb0           hel_tdl_omap_arm11_T14.00 FUNC_AC
*     F751686_55922lc0           hel_tdl_omap_arm12_T14.00 FUNC_AC
*     F751686_55922ld0           hel_tdl_arm1_w0r01.101 FUNC_AC
*     F751686_55922le0           hel_tdl_arm1_w0r11.101 FUNC_AC
*     F751686_55922lf0           hel_tdl_arm1_w1r01.101 FUNC_AC
*     F751686_55922lg0           hel_tdl_omap_arm2_T14.00 FUNC_AC
*     F751686_55922lh0           hel_tdl_omap_arm3_T14.00 FUNC_AC
*     F751686_55922li0           hel_tdl_omap_arm4_T14.00 FUNC_AC
*     F751686_55922lj0           hel_tdl_arm4_w0r01.101 FUNC_AC
*     F751686_55922lk0           hel_tdl_arm4_w0r11.101 FUNC_AC
*     F751686_55922ll0           hel_tdl_arm4_w1r01.101 FUNC_AC
*     F751686_55922lm0           hel_tdl_omap_arm5_T14.00 FUNC_AC
*     F751686_55922ln0           hel_tdl_arm5_w0r01.101 FUNC_AC
*     F751686_55922lo0           hel_tdl_arm5_w0r11.101 FUNC_AC
*     F751686_55922lp0           hel_tdl_arm5_w1r01.101 FUNC_AC
*     F751686_55922lq0           hel_tdl_omap_arm6_T14.00 FUNC_AC
*     F751686_55922lr0           hel_tdl_arm6_w0r01.101 FUNC_AC
*     F751686_55922ls0           hel_tdl_arm6_w0r11.101 FUNC_AC
*     F751686_55922lt0           hel_tdl_arm6_w1r01.101 FUNC_AC
*     F751686_55922lu0           hel_tdl_omap_arm7_T14.00 FUNC_AC
*     F751686_55922lv0           hel_tdl_omap_arm8_T14.00 FUNC_AC
*     F751686_55922lw0           hel_tdl_omap_arm9_T14.00 FUNC_AC
*     F751686_55922lx0           hel_tdl_omap_brte0_T14.00 FUNC_AC
*     F751686_55922ly0           hel_tdl_brte0_w0r01.201 FUNC_AC
*     F751686_55922lz0           hel_tdl_brte0_w0r11.201 FUNC_AC
*     F751686_55922m00           hel_tdl_brte0_w1r01.201 FUNC_AC
*     F751686_55922m10           hel_tdl_omap_brte1_T14.00 FUNC_AC
*     F751686_55922m20           hel_tdl_brte1_w0r01.101 FUNC_AC
*     F751686_55922m30           hel_tdl_brte1_w0r11.101 FUNC_AC
*     F751686_55922m40           hel_tdl_brte1_w1r01.101 FUNC_AC
*     F751686_55922m50           hel_tdl_omap_brte2_T14.00 FUNC_AC
*     F751686_55922m60           hel_tdl_brte2_w0r01.101 FUNC_AC
*     F751686_55922m70           hel_tdl_brte2_w0r11.101 FUNC_AC
*     F751686_55922m80           hel_tdl_brte2_w1r01.101 FUNC_AC
*     F751686_55922m90           hel_tdl_vbus_detect1.00 FUNC_AC
*     F751686_55922ma0           hel_tdl_vbusdetect21.00 FUNC_AC
*     F751686_55922mb0           icache_data_chkbd2.00 FUNC_AC
*     F751686_55922mc0           icache_data_fill_12.00 FUNC_AC
*     F751686_55922md0           icachedatainvchkbd2.00 FUNC_AC
*     F751686_55922me0           icache_fill_0   2.00 FUNC_AC
*     F751686_55922mf0           icache_lvb_rs   2.00 FUNC_AC
*     F751686_55922mg0           icache_regs     2.00 FUNC_AC
*     F751686_55922mh0           icache_tag_chkbd2.00 FUNC_AC
*     F751686_55922mi0           icache_tag_fill_12.00 FUNC_AC
*     F751686_55922mj0           icache_tag_invchkbd2.00 FUNC_AC
*     F751686_55922mk0           inv_checkerboard2.00 FUNC_AC
*     F751686_55922ml0           inv_checkerboard_d02.00 FUNC_AC
*     F751686_55922mm0           march13n_d0     2.00 FUNC_AC
*     F751686_55922mn0           march13n_pd     2.00 FUNC_AC
*     F751686_55922mo0           omap_DPLL1      2.00 FUNC_AC
*     F751686_55922mp0           omap_DPLL1_div1 2.00 FUNC_AC
*     F751686_55922mq0           omap_DPLL2      2.00 FUNC_AC
*     F751686_55922mr0           omap_DPLL3      2.00 FUNC_AC
*     F751686_55922ms0           rheaaccessallperiph2.00 FUNC_AC
*     F751686_55922mt0           rhea_int1_pr1   2.00 FUNC_AC
*     F751686_55922mu0           rhea_int1_pr10  2.00 FUNC_AC
*     F751686_55922mv0           rhea_int1_pr11  2.00 FUNC_AC
*     F751686_55922mw0           rhea_int1_pr12  2.00 FUNC_AC
*     F751686_55922mx0           rhea_int1_pr13  2.00 FUNC_AC
*     F751686_55922my0           rhea_int1_pr14  2.00 FUNC_AC
*     F751686_55922mz0           rhea_int1_pr15  2.00 FUNC_AC
*     F751686_55922n00           rhea_int1_pr16  2.00 FUNC_AC
*     F751686_55922n10           rhea_int1_pr17  2.00 FUNC_AC
*     F751686_55922n20           rhea_int1_pr18  2.00 FUNC_AC
*     F751686_55922n30           rhea_int1_pr19  2.00 FUNC_AC
*     F751686_55922n40           rhea_int1_pr2   2.00 FUNC_AC
*     F751686_55922n50           rhea_int1_pr20  2.00 FUNC_AC
*     F751686_55922n60           rhea_int1_pr21  2.00 FUNC_AC
*     F751686_55922n70           rhea_int1_pr22  2.00 FUNC_AC
*     F751686_55922n80           rhea_int1_pr3   2.00 FUNC_AC
*     F751686_55922n90           rhea_int1_pr4   2.00 FUNC_AC
*     F751686_55922na0           rhea_int1_pr5   2.00 FUNC_AC
*     F751686_55922nb0           rhea_int1_pr6   2.00 FUNC_AC
*     F751686_55922nc0           rhea_int1_pr7   2.00 FUNC_AC
*     F751686_55922nd0           rhea_int1_pr8   2.00 FUNC_AC
*     F751686_55922ne0           rhea_int1_pr9   2.00 FUNC_AC
*     F751686_55922nf0           rhea_timeout_error12.00 FUNC_AC
*     F751686_55922ng0           rom_test        2.00 FUNC_AC
*     F751686_55922nh0           rom_test_reg    2.00 FUNC_AC
*     F751686_55922ni0           testmmap        2.00 FUNC_AC
*     F751686_55922nj0           wrapcombo1daram0x002.00 FUNC_AC
*     F751686_55922nk0           wrapcombo1daram0x012.00 FUNC_AC
*     F751686_55922nl0           wrapcombo1daram0x022.00 FUNC_AC
*     F751686_55922nm0           wrapcombo1daram0x032.00 FUNC_AC
*     F751686_55922nn0           wrapcombo1daram0x042.00 FUNC_AC
*     F751686_55922no0           wrapcombo1daram0x052.00 FUNC_AC
*     F751686_55922np0           wrapcombo1daram0x062.00 FUNC_AC
*     F751686_55922nq0           wrapcombo1daram0x072.00 FUNC_AC
*     F751686_55922nr0           wrapcombo1saram0x082.00 FUNC_AC
*     F751686_55922ns0           wrapcombo1saram0x092.00 FUNC_AC
*     F751686_55922nt0           wrapcombo1saram0x0a2.00 FUNC_AC
*     F751686_55922nu0           wrapcombo1saram0x0b2.00 FUNC_AC
*     F751686_55922nv0           wrapcombo1saram0x0c2.00 FUNC_AC
*     F751686_55922nw0           wrapcombo1saram0x0d2.00 FUNC_AC
*     F751686_55922nx0           wrapcombo1saram0x0e2.00 FUNC_AC
*     F751686_55922ny0           wrapcombo1saram0x0f2.00 FUNC_AC
*     F751686_55922nz0           wrapcombo1saram0x102.00 FUNC_AC
*     F751686_55922o00           wrapcombo1saram0x112.00 FUNC_AC
*     F751686_55922o10           wrapcombo1saram0x122.00 FUNC_AC
*     F751686_55922o20           wrapcombo1saram0x132.00 FUNC_AC
*     F751686_55922o30           wrapcombo2daram0x002.00 FUNC_AC
*     F751686_55922o40           wrapcombo2daram0x012.00 FUNC_AC
*     F751686_55922o50           wrapcombo2daram0x022.00 FUNC_AC
*     F751686_55922o60           wrapcombo2daram0x032.00 FUNC_AC
*     F751686_55922o70           wrapcombo2daram0x042.00 FUNC_AC
*     F751686_55922o80           wrapcombo2daram0x052.00 FUNC_AC
*     F751686_55922o90           wrapcombo2daram0x062.00 FUNC_AC
*     F751686_55922oa0           wrapcombo2daram0x072.00 FUNC_AC
*     F751686_55922ob0           wrapcombo2saram0x082.00 FUNC_AC
*     F751686_55922oc0           wrapcombo2saram0x092.00 FUNC_AC
*     F751686_55922od0           wrapcombo2saram0x0a2.00 FUNC_AC
*     F751686_55922oe0           wrapcombo2saram0x0b2.00 FUNC_AC
*     F751686_55922of0           wrapcombo2saram0x0c2.00 FUNC_AC
*     F751686_55922og0           wrapcombo2saram0x0d2.00 FUNC_AC
*     F751686_55922oh0           wrapcombo2saram0x0e2.00 FUNC_AC
*     F751686_55922oi0           wrapcombo2saram0x0f2.00 FUNC_AC
*     F751686_55922oj0           wrapcombo2saram0x102.00 FUNC_AC
*     F751686_55922ok0           wrapcombo2saram0x112.00 FUNC_AC
*     F751686_55922ol0           wrapcombo2saram0x122.00 FUNC_AC
*     F751686_55922om0           wrapcombo2saram0x132.00 FUNC_AC
*     F751686_55922on0           wrapcombo3daram0x002.00 FUNC_AC
*     F751686_55922oo0           wrapcombo3daram0x012.00 FUNC_AC
*     F751686_55922op0           wrapcombo3daram0x022.00 FUNC_AC
*     F751686_55922oq0           wrapcombo3daram0x032.00 FUNC_AC
*     F751686_55922or0           wrapcombo3daram0x042.00 FUNC_AC
*     F751686_55922os0           wrapcombo3daram0x052.00 FUNC_AC
*     F751686_55922ot0           wrapcombo3daram0x062.00 FUNC_AC
*     F751686_55922ou0           wrapcombo3daram0x072.00 FUNC_AC
*     F751686_55922ov0           wrapcombo3saram0x082.00 FUNC_AC
*     F751686_55922ow0           wrapcombo3saram0x092.00 FUNC_AC
*     F751686_55922ox0           wrapcombo3saram0x0a2.00 FUNC_AC
*     F751686_55922oy0           wrapcombo3saram0x0b2.00 FUNC_AC
*     F751686_55922oz0           wrapcombo3saram0x0c2.00 FUNC_AC
*     F751686_55922p00           wrapcombo3saram0x0d2.00 FUNC_AC
*     F751686_55922p10           wrapcombo3saram0x0e2.00 FUNC_AC
*     F751686_55922p20           wrapcombo3saram0x0f2.00 FUNC_AC
*     F751686_55922p30           wrapcombo3saram0x102.00 FUNC_AC
*     F751686_55922p40           wrapcombo3saram0x112.00 FUNC_AC
*     F751686_55922p50           wrapcombo3saram0x122.00 FUNC_AC
*     F751686_55922p60           wrapcombo3saram0x132.00 FUNC_AC
*     F751686_55922p70           xpsa_api        2.00 FUNC_AC
*     F751686_55922p80           xpsa_cpu        2.00 FUNC_AC
*     F751686_55922p90           xpsa_emif       2.00 FUNC_AC
*     F751686_55922pa0           xpsa_rhea       2.00 FUNC_AC
*     F751686_55922pb0           hel_tc1a_m6     1.00 FUNC_AC
*     F751686_55922pc0           hel_tc1c_m6     1.00 FUNC_AC
*     F751686_55922pd0           hel_tc2_m6     1.00 FUNC_AC
*     F751686_55922pe0           hel_burning_test1.00 FUNC_AC
*     F751686_55922pg0           inv_checkerboard_ret_write1.00 FUNC_AC
*     F751686_55922ph0           inv_checkerboard_ret_read_no_10001.00 FUNC_AC
*     F751686_55922pi0           checkerboard_ret_read_no_10001.00 FUNC_AC
*     F751686_55922pj0           checkerboard_ret_write1.00 FUNC_AC
*
*
*
*
*
*                          PIN CONFIGURATION
*
*    DEF     LC        PIN                   PIN         LC     DEF
*                            **************
*      IN   213   COM_PCM_DI *   1     290* .             .    .
*      IN   100   RX2        *   2     289* .             .    .
*      IN   226   OSC32K_OUT *   3     288* VDDSHV3      *0    GL
*      IN   225   OSC32K_IN  *   4     287* GND          *0    GL
*      IN    31   CLK32K_IN  *   5     286* VDDA         *0    GL
*      IN    85   BT_MCLK_RE *   6     285* VDD          *0    GL
*      IN   198   NRESPWRON  *   7     284* VDDSHV7      *0    GL
*      IN    55   PCM_CLKS   *   8     283* GND          *0    GL
*      IN    60   PCM_DATA_I *   9     282* VDD2         *0    GL
*      IN    87   BT_PCM_DIN *  10     281* GND          *0    GL
*      IN    82   RX1        *  11     280* GND          *0    GL
*      IN    81   CTS1       *  12     279* VDDSHV5      *0    GL
*      IN    78   WIRE_SDI   *  13     278* GND          *0    GL
*      IN   194   EXT_FIQ    *  14     277* VDDSHV9      *0    GL
*      IN     7   KBR_4      *  15     276* GND          *0    GL
*      IN     9   KBR_3      *  16     275* GND          *0    GL
*      IN    11   KBR_2      *  17     274* GND          *0    GL
*      IN    13   KBR_1      *  18     273* VDD3         *0    GL
*      IN    15   KBR_0      *  19     272* VDDSHV5      *0    GL
*      IN   195   CLK32K_CTR *  20     271* VDDSHV5      *0    GL
*      IN   193   CONF       *  21     270* VDD          *0    GL
*      IN     1   TDI        *  22     269* GND          *0    GL
*      IN   197   TMS        *  23     268* VDD4         *0    GL
*      IN   199   TCK        *  24     267* VDDSHV8      *0    GL
*      IN   200   NTRST      *  25     266* VDDSHV5      *0    GL
*      IN   203   NBSCAN     *  26     265* GND          *0    GL
*      IN   206   MPU_NRESET *  27     264* GND          *0    GL
*      IN   129   NFRDY      *  28     263* VDD3         *0    GL
*      IO   156   SDCLK      *  29     262* GND          *0    GL
*      IO    20   SDATA_15   *  30     261* VDDSHV5      *0    GL
*      IO    19   SDATA_14   *  31     260* GND          *0    GL
*      IO   143   SDATA_13   *  32     259* GND          *0    GL
*      IO    18   SDATA_12   *  33     258* VDD          *0    GL
*      IO    27   SDATA_11   *  34     257* VDDSHV1      *0    GL
*      IO    21   SDATA_10   *  35     256* GND         *256   GL
*      IO    30   SDATA_9    *  36     255* VDDSHV5     *255   GL
*      IO   148   SDATA_8    *  37     254* VDDSHV5     *254   GL
*      IO    26   SDATA_7    *  38     253* GND         *253   GL
*      IO   147   SDATA_6    *  39     252* GND         *252   GL
*      IO   146   SDATA_5    *  40     251* VDD3        *251   GL
*      IO   164   SDATA_4    *  41     250* GND         *250   GL
*      IO    17   SDATA_3    *  42     249* GND         *249   GL
*      IO   152   SDATA_2    *  43     248* GND         *248   GL
*      IO    25   SDATA_1    *  44     247* VDD3        *247   GL
*      IO   163   SDATA_0    *  45     246* VDDSHV4     *246   GL
*      IO    90   USB_DP     *  46     245* VDDSHV4     *245   GL
*      IO    89   USB_DM     *  47     244* GND         *244   GL
*      IO   210   COM_MCLK_R *  48     243* GND         *243   GL
*      IO   209   COM_SPI_DI *  49     242* VDD2        *242   GL
*      IO   212   COM_PCM_CL *  50     241* GND         *241   GL
*      IO   214   COM_PCM_SY *  51     240* VDDSHV2     *240   GL
*      IO    99   CTS2       *  52     239* VDDSHV6     *239   GL
*      IO   220   GPIO_9     *  53     238* GND         *238   GL
*      IO   219   GPIO_8     *  54     237* VDD         *237   GL
*      IO   218   ARMIO_3    *  55     236* VDDSHV4     *236   GL
*      IO   223   COM_SPI_RS *  56     235* VDDSHV4     *235   GL
*      IO   217   COM_SPI_XS *  57     234* VDD1        *234   GL
*      IO   221   COM_SPI_kr *  58     233* GND         *233   GL
*      IO   222   COM_SPI_CL *  59     232* VDDSHV1     *232   GL
*      IO   224   COM_SPI_DO *  60     231* VDDSHV1     *231   GL
*      IO    98   RTS2       *  61     230* GND         *230   GL
*      IO   227   OSC1_IN    *  62     229* GND         *229   GL
*      IO    93   MEDIA_CS   *  63     228* VDDSHV4     *32    GL
*      IO   211   MEDIA_CMD  *  64     227* FADD_1      111    OU
*      IO    94   MEDIA_DO   *  65     226* FADD_2      142    OU
*      IO    95   MEDIA_CLK  *  66     225* FADD_3      139    OU
*      IO    91   MEDIA_DI   *  67     224* FADD_4      135    OU
*      IO    96   MMC_DAT2   *  68     223* FADD_5      138    OU
*      IO    65   PCM_BIT_CL *  69     222* FADD_6      133    OU
*      IO   161   PCM_SYNC   *  70     221* FADD_7      136    OU
*      IO    29   PCM_DATA_O *  71     220* FADD_8      122    OU
*      IO    92   BT_PCM_BCL *  72     219* FADD_9      134    OU
*      IO    86   BT_PCM_SYN *  73     218* FADD_10     131    OU
*      IO   177   RX         *  74     217* FADD_11     132    OU
*      IO   188   GPIO_15    *  75     216* FADD_12     130    OU
*      IO   196   GPIO_14    *  76     215* FADD_13     110    OU
*      IO    23   GPIO_13    *  77     214* FADD_14     125    OU
*      IO    68   GPIO_12    *  78     213* FADD_15     118    OU
*      IO    22   GPIO_11    *  79     212* FADD_16     121    OU
*      IO   178   GPIO_7     *  80     211* FADD_17     127    OU
*      IO    69   GPIO_6     *  81     210* FADD_18     126    OU
*      IO    70   GPIO_4     *  82     209* FADD_19     117    OU
*      IO    71   GPIO_3     *  83     208* FADD_20      59    OU
*      IO    80   GPIO_2     *  84     207* FADD_21     109    OU
*      IO    72   GPIO_1     *  85     206* FADD_22     128    OU
*      IO    74   GPIO_0     *  86     205* FADD_23     114    OU
*      IO    76   ARMIO_5    *  87     204* FADD_24     120    OU
*      IO    75   ARMIO_4    *  88     203* NFBE_0      113    OU
*      IO   182   ARMIO_2    *  89     202* NFBE_1      112    OU
*      IO    77   ARMIO_1    *  90     201* NFWE        101    OU
*      IO    24   CLK32K_OUT *  91     200* NFOE        107    OU
*      IO    73   SCL        *  92     199* NFRP        108    OU
*      IO    79   SDA        *  93     198* NFWP        102    OU
*      IO    12   WIRE_NSCS0 *  94     197* NFADV       123    OU
*      IO    67   WIRE_NSCS3 *  95     196* NFCS_0      119    OU
*      IO     3   CAM_LCLK   *  96     195* NFCS_1      115    OU
*      IO     4   CAM_D_7    *  97     194* NFCS_2      124    OU
*      IO     6   CAM_D_6    *  98     193* NFCS_3      105    OU
*      IO    57   CAM_D_5    *  99     192* NRESET_OUT  207    OU
*      IO   189   CAM_D_4    * 100     191* COM_SHUTDO   14    OU
*      IO   183   CAM_D_3    * 101     190* TDO           2    OU
*      IO    58   CAM_D_2    * 102     189* KBC_0       190    OU
*      IO    61   CAM_D_1    * 103     188* KBC_1        50    OU
*      IO   184   CAM_D_0    * 104     187* KBC_2       181    OU
*      IO     5   CAM_VS     * 105     186* KBC_3       191    OU
*      IO    62   CAM_HS     * 106     185* KBC_4        56    OU
*      IO   201   NEMU0      * 107     184* KBC_5        49    OU
*      IO   202   NEMU1      * 108     183* CAM_RSTZ    187    OU
*      IO   204   ARM_BOOT   * 109     182* CAM_EXCLK    16    OU
*      IO   205   TI_RESERd4 * 110     181* WIRE_SCLK    10    OU
*      IO    33   FDATA_15   * 111     180* WIRE_SDO      8    OU
*      IO    34   FDATA_14   * 112     179* TX           66    OU
*      IO    35   FDATA_13   * 113     178* RTS1        208    OU
*      IO    36   FDATA_12   * 114     177* TX1          84    OU
*      IO    37   FDATA_11   * 115     176* BT_PCM_DOU   83    OU
*      IO    38   FDATA_10   * 116     175* LCD_PIXEL_  192    OU
*      IO    39   FDATA_9    * 117     174* LCD_PIXEL1  169    OU
*      IO    40   FDATA_8    * 118     173* LCD_PIXEL2  180    OU
*      IO    41   FDATA_7    * 119     172* LCD_PIXEL3  157    OU
*      IO    42   FDATA_6    * 120     171* LCD_PIXEL4  173    OU
*      IO    43   FDATA_5    * 121     170* LCD_PIXEL5  166    OU
*      IO    44   FDATA_4    * 122     169* LCD_PIXEL6  176    OU
*      IO    45   FDATA_3    * 123     168* LCD_PIXEL7   63    OU
*      IO    46   FDATA_2    * 124     167* LCD_PIXEL8  185    OU
*      IO    47   FDATA_1    * 125     166* LCD_PIXEL9  186    OU
*      IO    48   FDATA_0    * 126     165* LCD_PIXE10   64    OU
*      IO   116   FCLK       * 127     164* LCD_PIXE11  175    OU
*      OU   155   SBANK_1    * 128     163* LCD_PIXE12  158    OU
*      OU   160   SBANK_0    * 129     162* LCD_PIXE13  165    OU
*      OU   145   SADD_12    * 130     161* LCD_PIXE14   54    OU
*      OU   106   SADD_11    * 131     160* LCD_PIXE15  179    OU
*      OU   162   SADD_10    * 132     159* LCD_PCLK     53    OU
*      OU   159   SADD_9     * 133     158* LCD_AC      172    OU
*      OU   150   SADD_8     * 134     157* LCD_VSYNC    51    OU
*      OU   167   SADD_7     * 135     156* LCD_HSYNC   153    OU
*      OU   170   SADD_6     * 136     155* BT_MCLK_OU   88    OU
*      OU   149   SADD_5     * 137     154* OSC1_OUT    228    OU
*      OU   171   SADD_4     * 138     153* TI_RESERVE  104    OU
*      OU   174   SADD_3     * 139     152* TX2          97    OU
*      OU   154   SADD_2     * 140     151* COM_PCM_DO  215    OU
*      OU    52   SADD_1     * 141     150* COM_MCLK_O  216    OU
*      OU   168   SADD_0     * 142     149* USB_CLKO    103    OU
*      OU   140   NSRAS      * 143     148* SDCLK_EN    151    OU
*      OU    28   NSCAS      * 144     147* NSDQMU      144    OU
*      OU   137   NSWE       * 145     146* NSDQML      141    OU
*                            **************
*
*
*
*         TESTER PIN CROSS-REFERENCE TABLE
*
* TESTER        DEVICE         PIN              PIN
*   PIN           PIN         NAME             TYPE
*     1          22(Y19)      TDI               IN
*     2         190(AA19)       TDO             OU
*     3          96(J15)      CAM_LCLK          IO
*     4          97(J18)      CAM_D_7           IO
*     5         105(L18)      CAM_VS            IO
*     6          98(J19)      CAM_D_6           IO
*     7          15(E19)      KBR_4             IN
*     8         180(W21)      WIRE_SDO          OU
*     9          16(E20)      KBR_3             IN
*    10         181(V19)      WIRE_SCLK         OU
*    11          17(H14)      KBR_2             IN
*    12          94(N14)      WIRE_NSCS0        IO
*    13          18(F19)      KBR_1             IN
*    14         191(P14)      COM_SHUTDO        OU
*    15          19(G18)      KBR_0             IN
*    16         182(H19)      CAM_EXCLK         OU
*    17          42(G8)       SDATA_3           IO
*    18          33(D6)       SDATA_12          IO
*    19          31(C4)       SDATA_14          IO
*    20          30(D5)       SDATA_15          IO
*    21          35(H8)       SDATA_10          IO
*    22          79(N20)      GPIO_11           IO
*    23          77(N19)      GPIO_13           IO
*    24          91(Y12)      CLK32K_OUT        IO
*    25          44(G9)       SDATA_1           IO
*    26          38(D7)       SDATA_7           IO
*    27          34(C5)       SDATA_11          IO
*    28         144(H9)       NSCAS             OU
*    29          71(H18)      PCM_DATA_O        IO
*    30          36(C6)       SDATA_9           IO
*    31           5(P13)      CLK32K_IN         IN
*    33         111(V3)       FDATA_15          IO
*    34         112(T4)       FDATA_14          IO
*    35         113(U3)       FDATA_13          IO
*    36         114(U1)       FDATA_12          IO
*    37         115(P8)       FDATA_11          IO
*    38         116(T3)       FDATA_10          IO
*    39         117(T2)       FDATA_9           IO
*    40         118(R4)       FDATA_8           IO
*    41         119(R3)       FDATA_7           IO
*    42         120(R2)       FDATA_6           IO
*    43         121(P7)       FDATA_5           IO
*    44         122(P4)       FDATA_4           IO
*    45         123(P2)       FDATA_3           IO
*    46         124(N7)       FDATA_2           IO
*    47         125(N2)       FDATA_1           IO
*    48         126(N4)       FDATA_0           IO
*    49         184(C20)      KBC_5             OU
*    50         188(D20)      KBC_1             OU
*    51         157(D14)      LCD_VSYNC         OU
*    52         141(C14)      SADD_1            OU
*    53         159(C15)      LCD_PCLK          OU
*    54         161(C16)      LCD_PIXE14        OU
*    55           8(G20)      PCM_CLKS          IN
*    56         185(C21)      KBC_4             OU
*    57          99(J14)      CAM_D_5           IO
*    58         102(K15)      CAM_D_2           IO
*    59         208(J1)       FADD_20           OU
*    60           9(H20)      PCM_DATA_I        IN
*    61         103(K14)      CAM_D_1           IO
*    62         106(L15)      CAM_HS            IO
*    63         168(C18)      LCD_PIXEL7        OU
*    64         165(C17)      LCD_PIXE10        OU
*    65          69(G21)      PCM_BIT_CL        IO
*    66         179(M18)      TX                OU
*    67          95(P15)      WIRE_NSCS3        IO
*    68          78(N18)      GPIO_12           IO
*    69          81(P19)      GPIO_6            IO
*    70          82(P20)      GPIO_4            IO
*    71          83(P18)      GPIO_3            IO
*    72          85(R19)      GPIO_1            IO
*    73          92(T18)      SCL               IO
*    74          86(R18)      GPIO_0            IO
*    75          88(T19)      ARMIO_4           IO
*    76          87(T20)      ARMIO_5           IO
*    77          90(U19)      ARMIO_1           IO
*    78          13(U18)      WIRE_SDI          IN
*    79          93(V20)      SDA               IO
*    80          84(M14)      GPIO_2            IO
*    81          12(R14)      CTS1              IN
*    82          11(V14)      RX1               IN
*    83         176(W14)      BT_PCM_DOU        OU
*    84         177(Y14)      TX1               OU
*    85           6(R13)      BT_MCLK_RE        IN
*    86          73(V13)      BT_PCM_SYN        IO
*    87          10(W13)      BT_PCM_DIN        IN
*    88         155(Y13)      BT_MCLK_OU        OU
*    89          47(R8)       USB_DM            IO
*    90          46(P9)       USB_DP            IO
*    91          67(W11)      MEDIA_DI          IO
*    92          72(AA13)       BT_PCM_BCL      IO
*    93          63(P11)      MEDIA_CS          IO
*    94          65(R11)      MEDIA_DO          IO
*    95          66(V11)      MEDIA_CLK         IO
*    96          68(W10)      MMC_DAT2          IO
*    97         152(V6)       TX2               OU
*    98          61(W5)       RTS2              IO
*    99          52(Y5)       CTS2              IO
*   100           2(R9)       RX2               IN
*   101         201(W2)       NFWE              OU
*   102         198(V4)       NFWP              OU
*   103         149(W4)       USB_CLKO          OU
*   104         153(Y4)       TI_RESERVE        OU
*   105         193(N8)       NFCS_3            OU
*   106         131(H10)      SADD_11           OU
*   107         200(U4)       NFOE              OU
*   108         199(W1)       NFRP              OU
*   109         207(L8)       FADD_21           OU
*   110         215(K8)       FADD_13           OU
*   111         227(J8)       FADD_1            OU
*   112         202(M8)       NFBE_1            OU
*   113         203(L3)       NFBE_0            OU
*   114         205(K3)       FADD_23           OU
*   115         195(M3)       NFCS_1            OU
*   116         127(N3)       FCLK              IO
*   117         209(J3)       FADD_19           OU
*   118         213(H3)       FADD_15           OU
*   119         196(M7)       NFCS_0            OU
*   120         204(L7)       FADD_24           OU
*   121         212(K7)       FADD_16           OU
*   122         220(J7)       FADD_8            OU
*   123         197(L4)       NFADV             OU
*   124         194(M4)       NFCS_2            OU
*   125         214(H4)       FADD_14           OU
*   126         210(J4)       FADD_18           OU
*   127         211(J2)       FADD_17           OU
*   128         206(K4)       FADD_22           OU
*   129          28(H7)       NFRDY             IN
*   130         216(G2)       FADD_12           OU
*   131         218(G4)       FADD_10           OU
*   132         217(G3)       FADD_11           OU
*   133         222(F4)       FADD_6            OU
*   134         219(F3)       FADD_9            OU
*   135         224(E4)       FADD_4            OU
*   136         221(E3)       FADD_7            OU
*   137         145(C3)       NSWE              OU
*   138         223(D2)       FADD_5            OU
*   139         225(C1)       FADD_3            OU
*   140         143(A2)       NSRAS             OU
*   141         146(B3)       NSDQML            OU
*   142         226(D3)       FADD_2            OU
*   143          32(B4)       SDATA_13          IO
*   144         147(D4)       NSDQMU            OU
*   145         130(G10)      SADD_12           OU
*   146          40(D8)       SDATA_5           IO
*   147          39(C7)       SDATA_6           IO
*   148          37(B6)       SDATA_8           IO
*   149         137(H11)      SADD_5            OU
*   150         134(G11)      SADD_8            OU
*   151         148(D9)       SDCLK_EN          OU
*   152          43(C8)       SDATA_2           IO
*   153         156(H12)      LCD_HSYNC         OU
*   154         140(G12)      SADD_2            OU
*   155         128(D10)      SBANK_1           OU
*   156          29(C9)       SDCLK             IO
*   157         172(G14)      LCD_PIXEL3        OU
*   158         163(G13)      LCD_PIXE12        OU
*   159         133(D11)      SADD_9            OU
*   160         129(C10)      SBANK_0           OU
*   161          70(H15)      PCM_SYNC          IO
*   162         132(C11)      SADD_10           OU
*   163          45(B9)       SDATA_0           IO
*   164          41(B8)       SDATA_4           IO
*   165         162(A17)      LCD_PIXE13        OU
*   166         170(A20)      LCD_PIXEL5        OU
*   167         135(C12)      SADD_7            OU
*   168         142(B14)      SADD_0            OU
*   169         174(B21)      LCD_PIXEL1        OU
*   170         136(D12)      SADD_6            OU
*   171         138(C13)      SADD_4            OU
*   172         158(B15)      LCD_AC            OU
*   173         171(H13)      LCD_PIXEL4        OU
*   174         139(D13)      SADD_3            OU
*   175         164(B17)      LCD_PIXE11        OU
*   176         169(B19)      LCD_PIXEL6        OU
*   177          74(L14)      RX                IO
*   178          80(M15)      GPIO_7            IO
*   179         160(D15)      LCD_PIXE15        OU
*   180         173(C19)      LCD_PIXEL2        OU
*   181         187(D19)      KBC_2             OU
*   182          89(N15)      ARMIO_2           IO
*   183         101(K19)      CAM_D_3           IO
*   184         104(L19)      CAM_D_0           IO
*   185         167(D17)      LCD_PIXEL8        OU
*   186         166(D16)      LCD_PIXEL9        OU
*   187         183(M19)      CAM_RSTZ          OU
*   188          75(M20)      GPIO_15           IO
*   189         100(K18)      CAM_D_4           IO
*   190         189(F18)      KBC_0             OU
*   191         186(E18)      KBC_3             OU
*   192         175(D18)      LCD_PIXEL_        OU
*   193          21(V18)      CONF              IN
*   194          14(W19)      EXT_FIQ           IN
*   195          20(AA20)       CLK32K_CTR      IN
*   196          76(N21)      GPIO_14           IO
*   197          23(V17)      TMS               IN
*   198           7(G19)      NRESPWRON         IN
*   199          24(W18)      TCK               IN
*   200          25(Y18)      NTRST             IN
*   201         107(V16)      NEMU0             IO
*   202         108(W17)      NEMU1             IO
*   203          26(Y17)      NBSCAN            IN
*   204         109(AA17)       ARM_BOOT        IO
*   205         110(W16)      TI_RESERd4        IO
*   206          27(V15)      MPU_NRESET        IN
*   207         192(W15)      NRESET_OUT        OU
*   208         178(AA15)       RTS1            OU
*   209          49(P10)      COM_SPI_DI        IO
*   210          48(R10)      COM_MCLK_R        IO
*   211          64(V10)      MEDIA_CMD         IO
*   212          50(Y10)      COM_PCM_CL        IO
*   213           1(AA9)      COM_PCM_DI        IN
*   214          51(V9)       COM_PCM_SY        IO
*   215         151(W9)       COM_PCM_DO        OU
*   216         150(Y9)       COM_MCLK_O        OU
*   217          57(W7)       COM_SPI_XS        IO
*   218          55(V8)       ARMIO_3           IO
*   219          54(Y8)       GPIO_8            IO
*   220          53(W8)       GPIO_9            IO
*   221          58(V7)       COM_SPI_kr        IO
*   222          59(Y6)       COM_SPI_CL        IO
*   223          56(W6)       COM_SPI_RS        IO
*   224          60(AA5)      COM_SPI_DO        IO
*   225           4(W12)      OSC32K_IN         IN
*   226           3(R12)      OSC32K_OUT        IN
*   227          62(Y2)       OSC1_IN           IO
*   228         154(W3)       OSC1_OUT          OU
*
*
*
*
*
*           SUMMARY OF ELECTRONIC CUSTOMER SPEC
*
*
*  TEXAS INSTRUMENTS
*  ASIC CMOS DESIGN SPECIFICATION
*
*  REVISION NO:  0.02
*
*  CUSTOMER PART NUMBER: F751686
*
*  CUSTOMER INFORMATION
*
*   TEXAS INSTRUMENTS
*   821, Ave Jack Kilby - BP 5
*   VILLENEUVE LOUBET,
*   FRANCE  06270
*
*
*1. PRODUCT DESCRIPTION
*
*   Technology         : gs40
*   Core Voltage       : 1.500000
*   Operating Cond     : 1.5V_INDUSTRIAL
*   Metal System       : 5lm
*   Total Gate Count   : 693439.00000
*
*
*
*   +---------------------------+---------------+---------------------------
*--+
*   |MEGAMODULE CELL NAME       | QUANTITY      | TYPE
*  |
*   +---------------------------+---------------+---------------------------
*--+
*   +---------------------------+---------------+---------------------------
*--+
*
*2. STATIC CURRENT MEASUREMENTS
*
*                                                      MAXIMUM            UN
*IT
* IDDQ - Static DC current on VCC with SRAMs and
*        pull-up/downs powered down and the device     1053.255
*UA
*        in a static state.
*
*        For the TGCXXXX product, the limit ZZZZ is extracted from the GOOD.
* For
*        the TSCXXXX product, the limit ZZZZ is a calculated value. The IDDQ
* Max
*        limit algorithm is :
*
*                             {  33.9 + (0.001470 * Gate Count) } UA    ;
*
*3. FREEFORM INFORMATION
*
*
*
*
*
*
*
*
*
*
*
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 2    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*4. DESIGN ENVIRONMENT
*
*       TIDSS release            :
*       Library release          : 3.2
*       Workstation              : Other
*       Schematic capture tool   :
*       Logic synthesis tool     : Design Compiler
*       Software simulator       : ViewSim
*       Hardware simulator       :
*       Timing verification tool : Other
*       Test synthesis tool      :
*       Fault grading tool       :
*       ATPG tool                : FastScan
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 3    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*5. MISCELLANEOUS STATISTICS
*
*---------------------------------------------------------------------------
*------
*NOTE:   SPECCAP WILL REPORT ZERO SITES USED, IF THE SITE DOES NOT EXIST IN
*THE
*        BASE ARRAY TECHNOLOGY SELECTED FOR THE DESIGN.  THE FOLLOWING TABLE
*        LISTS THE SITES THAT EXIST FOR EACH BASE ARRAY TECHNOLOGY.
*
*              TECHNOLOGY                      SITE TYPES
*              ----------                      ----------
*              TGC1000/TGC1000LV               C SITES
*              TGC2000/TGC2000LV               C SITES
*              TGC2500                         C SITES
*              TGC3000/TGC3000T                CS, CL SITES
*              TGC4000                         CS, CL SITES
*              TGB2000                         C, B, D, I SITES
*              TSC2000/TSC2000LV               DOES NOT APPLY
*              TSC3000                         DOES NOT APPLY
*---------------------------------------------------------------------------
*------
*
*      Bipolar Cell Count (b sites)                 : 0.000000
*      CMOS Cell Count (c sites)                    : 0.000000
*      Differential core cell count (d sites)       : 0.000000
*      Core-to-core interface  cell count (i sites) : 0.000000
*      Small CMOS cell count (cs sites)             : 0.000000
*      Large CMOS cell count (cl sites)             : 0.000000
*      BICMOS cell count (bn sites)                 : 0.000000
*      Total Gates used                             : 693439.000000
*
*6. ABSOLUTE MAXIMUM RATINGS OVER OPERATING FREE_AIR TEMPERATURE RANGE
*
*
*    VDD  Supply voltage                           -0.5  V to 1.7 V
*    VDDS Supply voltage (1533c035)                 -0.5  V to 4.0 V
*    VDDA  Supply voltage                          -0.5 V to 4.0 V
*    VDD3V  Supply voltage                         -0.5 V to 4.0 V
*    VI   Input voltage (15c035 - standard)         -0.5 V to VDD
*    VI   Input voltage (15c035 - failsafe)         -0.5 V to 1.7V
*    VI   Input voltage (1533c035 - standard ls)    -0.5 V to VDDS+ 0.5 V
*    VI   Input voltage (1533c035 - failsafe ls)    -0.5 V to 4.0V
*    VO   Input voltage (15c035 - standard)         -0.5 V to VDD
*    VO   Input voltage (15c035 - failsafe)         -0.5 V to 1.7V
*    VO   Input voltage (1533c035 - standard ls)    -0.5 V to VDDS+ 0.5 V
*    VO   Input voltage (1533c035 - failsafe ls)    -0.5 V to 4.0V
*    IIK  Input clamp current (VI<0 OR VI>VDD) #    +/-20 mA
*    IOK  Output clamp current (VO<0 OR VO>VDD)    +/-20 mA
*    Storage temperature range                      -65 oC to 150 oC
*
*    # - Applies for external input buffers.  Level shift inputs are
*        relative to VDDS.  VI>VDD or VDDS does not apply for failsafe
*         pins.
*     - Applies for external output buffers.  Level shift outputs are
*        relative to VDDS.  VO>VDD or VDDS does not apply for failsafe
*        pins.
*
*    Stresses beyond those listed under 'ABSOLUTE MAXIMUM RATINGS' may
*    cause permanent damage to the device.  These are stress ratings only
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 4    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*6. ABSOLUTE MAXIMUM RATINGS OVER OPERATING FREE_AIR TEMPERATURE RANGE (Cont
*inued..)
*
*    and operation of the device at these or any other condition(s) beyond
*    those indicated in the 'RECOMMENDED OPERATING CONDITIONS' section of
*    this specification is not implied.  Exposure to absolute maximum
*    rated conditions for extended periods may affect device reliability.
*
*
*7. RECOMMENDED OPERATING CONDITIONS
*
*   RECOMMENDED 1.5V_INDUSTRIAL OPERATING CONDITIONS
*               ------------
*
*                                                     MIN    NOM    MAX    U
*NIT
*                                                     ---    ---    ---    -
*---
*    VDD   Supply voltage                             1.35   1.50   1.65
*  V
*    VDD1 Supply voltage                              1.35   1.50   1.65
*  V
*    VDD2 Supply voltage                              1.35   1.50   1.65
*  V
*    VDD3 Supply voltage                              1.35   1.50   1.65
*  V
*    VDD4 Supply voltage                              1.35   1.50   1.65
*  V
*    VDDA Supply voltage                              1.35   1.50   1.65
*  V
*    VDDSHV1 Supply voltage                           2.50   2.75   3.00
*  V
*    VI    Input voltage                              0             VDDS
*  V
*    VO    Output voltage                             0             VDDS
*  V
*    VIH   15c035 non-level shifting (LVCMOS)          0.7VDD        VDD
*   V
*    VIH   1533c035 non-level shifting (LVCMOS)        0.7VDD        VDD
*   V
*    VIH   1533c035 level shifting (LVCMOS)            0.7VDDS       VDDS
*   V
*    VIH   1533c035 level shifting (LVTTL)             2.0           VDDS
*   V
*    VIH   1533c035 level shifting (PCI  )             0.475VDDS     VDDS
*   V
*    VIL   15c035 non-level shifting (LVCMOS)          0            0.3VDD
*   V
*    VIL   1533c035 non-level shifting (LVCMOS)        0            0.3VDD
*   V
*    VIL   1533c035 level shifting (LVCMOS)            0            0.3VDDS
*   V
*    VIL   1533c035 level shifting (LVTTL)             0            0.8
*   V
*    VIL   1533c035 level shifting (PCI  )             0            0.325VDD
*S  V
*    tt    Input transitions (tr & tf, 10% to 90
*  ns
*    TA    Operating Ambient Temperature Range        85     25     -40
*  oC
*    TJ    Junction Temperature Range                 125    25     -40
*    oC
*
*
*
*
*
*
*
*
*
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 5    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*USER REMARKS
*
*    VOLTAGE NAME           REMARKS
*    -----------------------------------------------------------------------
*-
*    VDD
*    VDDSHV1
*    VDD1
*    VDD2
*    VDD3
*    VDD4
*    VDDA
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 6    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*8. DIE-ID MACRO TABLE
*
*DIE ID MACRO TABLE LEGEND:
* BIT ORDER :
*     Bit Order  Build Order  BIT ORDER in Table
*     ---------  -----------  ------------------
*     LSBFIRST   LHBUID       LL
*     LSBFIRST   HLBUILD      LH
*     MSBFIRST   LHBUID       ML
*     MSBFIRST   HLBUILD      MH
* FORMAT CODE :
*     64H=64 HAMM
*+-----+-----+---+--+------------+----+--------------+--------+-----+-------
*---+
*|     |OPN  |   |  |            |FC  |              |        |     |
*   |
*|CPN  |UIA  |NOB|BO|            |OO  |              |        |     |
*   |
*|LIA  |TNM  |UFI|IR|            |RD  |              |        |     |    TDL
*   |
*|ONM  |P E  |M T|TD|            |ME  |              |        |     |  PATTE
*RN |
*|C E  |U S  |B  | E|  VARIABLE  |A   |   INSTANCE   |EXPECTED| DIE |    SET
*   |
*|K S  |T    |E  | R|    NAME    |T   |     NAME     | VALUE  | ID  |    NAM
*E  |
*+-----+-----+---+--+------------+----+--------------+--------+-----+-------
*---+
*+-----+-----+---+--+------------+----+--------------+--------+-----+-------
*---+
*
*9. RAM REPAIR DATA TABLE
*
*+--------------+------------+------------+------------+------------+-------
*---+
*|   INSTANCE   |    CELL    |  COMPSTAT  |    DONE    |   CLOCK    | PATTER
*N  |
*|     NAME     |    NAME    |    PIN     |    PIN     |    PIN     | SET NA
*ME |
*+--------------+------------+------------+------------+------------+-------
*---+
*+--------------+------------+------------+------------+------------+-------
*---+
*
*10. DIF FILE DATA TABLE
*
*+--------------------------------------------------------------------------
*---+
*|                           DIF FILE CONTENTS
*   |
*+--------------------------------------------------------------------------
*---+
*+--------------------------------------------------------------------------
*---+
*
*11. RAM CONFIG FILE DATA TABLE
*
*+--------------------------------------------------------------------------
*---+
*|                        RAM CONFIG FILE CONTENTS
*   |
*+--------------------------------------------------------------------------
*---+
*+--------------------------------------------------------------------------
*---+
*
*
*
*###########################################################################
*#####
* PACKAGE PART NUMBER : 4201100
* TI PART NUMBER      : F751686
*###########################################################################
*#####
*
*
*
*
*
*
*
*
*>>>>>>>>>>>>>>>>>>>>>> PRELIMINARY MSF REPORT <<<<<<<<<<<<<<<<<<<<<<<<<
* >>>>>>>>>>>> FOR CONTENT REVIEW ONLY .... NOT FOR SIGNATURE <<<<<<<<<<<
*
*     TEXAS INSTRUMENTS      10/19/2001  15:04:04    SpecCap Version: 7.1.3b
*eta3
*
*     ASIC PRELIMINARY SPECIFICATION                       PAGE 7    OF 163
*                           ****** MANUFACTURING ******
*                               REVISION NO : 0.02
*
*SPECIFICATIONS REVISIONS
*
*  REVISIONS    DATE         SECTIONS CHANGED
*-------------------------------------------------------------------------
*  0.01         10/17/2001   INITIAL VERSION
*  0.02         10/19/2001
*-------------------------------------------------------------------------
*
*12. FUNCTIONAL DESCRIPTION
*
*The following identifies the items that will be used in the production of t
*his
*ASIC device
*+--------------------------------------------------------------------------
*----+
*|                                                     REV
*    |
*|ITEMS           FILE NAME      TYPE                  NO.   DATE       TIME
*    |
*+--------------------------------------------------------------------------
*----+
*|Verilog Netlist netlist_in.v                         1.0.0 10/12/2001 05:5
*0:51|
*|GOOD Netlist    F751686                                    10/17/2001 11:3
*7:55|
*|GOOD Cell       cell                                 1.5.0 07/24/2001 21:0
*6:47|
*|GOOD Cell       uos205_charac                        1.1.& 05/29/2001 16:4
*1:20|
*|                                                     00
*    |
*|GOOD Cell       uis480                               1.0   07/2/2001  11:5
*4:46|
*|GOOD Cell       uc674                                1.1.& 08/22/2001 11:0
*0:52|
*|                                                     01
*    |
*|GOOD Cell       uc431_charac                         1.5.0 05/23/2001 12:0
*8:27|
*|GOOD Cell       SC_USBW2FC2KV&                       2.4_& 09/21/2001 14:4
*9:02|
*|                10GS40_v2.4_C&                       CTSi&
*    |
*|                TSins                                ns
*    |
*|GOOD Cell       SC_MMCSD32X16&                       2.2A& 09/28/2001 13:1
*9:59|
*|                V10GS40_v2.2A&                       _CTS&
*    |
*|                _CTSins                              ins
*    |
*|GOOD Cell       SC_DPLL31_TOP&                       3.0   09/5/2001  10:3
*6:47|
*|                _v3.0
*    |
*|GOOD Cell       SCL3M40L8V30G&                       1.0   09/21/2001 19:1
*7:29|
*|                S40A
*    |
*|GOOD Cell       MW01024016040                        1.0.0 06/05/2001 04:3
*7:34|
*|GOOD Cell       MW00256008040                        1.0.0 06/05/2001 04:3
*4:20|
*|GOOD Cell       MW00064016040                        1.0.0 06/05/2001 04:3
*1:29|
*|GOOD Cell       MW00032044040                        1.0.0 06/05/2001 04:2
*6:10|
*|GOOD Cell       MW00032016040                        1.0.0 06/05/2001 04:2
*3:58|
*|GOOD Cell       MG00064011040                        1.0.0 06/05/2001 07:5
*8:41|
*|GOOD Cell       MG00064009040                        1.0.0 06/05/2001 08:0
*0:48|
*|GOOD Cell       MG00064008040                        1.0.0 06/05/2001 04:1
*6:05|
*|GOOD Cell       MG00008016040                        1.0.0 06/05/2001 08:0
*4:17|
*|GOOD Cell       EY00128032040                        1.0.0 06/05/2001 04:1
*7:27|
*|GOOD Cell       EY00064011040                        1.0.0 06/05/2001 04:1
*5:11|
*|GOOD Cell       EY00064009040                        1.0.0 06/05/2001 04:1
*2:52|
*|GOOD Cell       EY00016016040                        1.0.0 06/05/2001 04:0
*9:49|
*|GOOD Cell       CUSTOM_io                            1.0.8 08/9/2001  15:1
*8:38|
*|GOOD Cell       io                                   1.5.0 07/6/2001  09:5
*1:00|
*|GOOD Cell       eco                                  1.3.0 02/2/2001  08:5
*2:08|
*|GOOD Cell       cell_dpll                            1.0.& 07/27/2001 11:0
*7:34|
*|                                                     11
*    |
*|GOOD Cell       arch                                 1.5.& 04/23/2001 17:0
*0:04|
*|                                                     0.1
*    |
*---------------------------------------------------------------------------
*-----
*|GOOD Cell       analog                               1.5.0 07/6/2001  09:5
*9:55|
*|GOOD Package    package                              1.1.5 07/8/2001  19:4
*0:25|
*|GOOD Package    289gzg_ustarb&                       1.0.0 10/20/2000 15:2
*2:07|
*|                ga_4201100
*    |
*|GOOD Tester     tester                               1.0.& 07/9/2001  14:3
*6:43|
*|                                                     10
*    |
*---------------------------------------------------------------------------
*-----
*
*
*  PACKAGE PIN COUNT: 289
*  PACKAGE TYPE:      289GZG_USTARBGA_4201100
*
*
*
*    SUPPLY VOLTAGE            MIN: 1.35V
*                              MAX: 1.65V
*
*    OUTPUT CAPACITANCE LOADING
*
*
*
            |==============================================|
            |          TEST CONDITIONS AND LIMITS          |
            |            0.08-MICRON CMOS GS40             |
            |==============================================|
            |         | VDD |MIN|        |        |  QRA   |
            |PARAMETER|     | OR|  ROOM  |  HOT   | AT ANY |
            |         |     |MAX|        |        |  TEMP  |
            |==============================================|
            |CONT. AND|     |MIN| -??-   | -??-   | -??-   |
            |  SHORTS |     |   |        |        |        |
            |  TEST   |     |MAX|1.4V    |1.4V    |1.4V    |
            |==============================================|
            |  ICCQ   |1.95V|   |        |        |        |
            |QUIESCENT|     |MIN| -5% OF MEASUREMENT RANGE |
            | SUPPLY  |     |   |        |        |        |
            | CURRENT |     |MAX|105.33UA|126.39UA|1053.255UA|
            |==============================================|
            |         |     |   | VIL=0.0V(TTL,CMOS)       |
            | FUNCT'L |1.35V|   | VIH=3.0V(TTL)            |
            |   AND   | AND |   | VIH=VDD(CMOS)            |
            |STUCK-@-0|1.50V|   |--------------------------|
            |   AND   | AND |   | VOL=0.25*VDD(TTL,CMOS)   |
            |STUCK-@-1|1.65V|   | VOH=0.75*VDD(TTL,CMOS)   |
            |==============================================|
            |         |     |   | VIL=0.0V(TTL,CMOS)       |
            |         |     |   | VIH=3.0V(TTL) VDD(CMOS)  |
            | FUNCT'L |1.35V|   |--------------------------|
            | AT-SPEED| AND |   | VOL=1.3V(TTL)            |
            |  TESTS  |1.65V|   | VOL=0.5*VDD(CMOS)        |
            |         |     |   | VOH=1.3V(TTL)            |
            |         |     |   | VOH=0.5*VDD(CMOS)        |
            |==============================================|
            | IIH: INPUT-HIGH LEAKAGE CURRENT              |
            |----------------------------------------------|
            |   NO    |1.95V|MAX|70NA    |70NA    |1UA     |
            |  INPUT  |     |   |        |        |        |
            |RESISTOR |     |MIN|-35NA   |-35NA   |-500NA  |
            |---------|     |---|--------|--------|--------|
            |  INPUT  |     |MAX|                          |
            |PULL-DOWN|     |   |LIMITS PER CELL DATA SHEET|
            |RESISTOR |     |MIN|                          |
            |==============================================|
            | IIL: INPUT-LOW LEAKAGE CURRENT               |
            |----------------------------------------------|
            |   NO    |1.95V|MAX|35NA    |35NA    |500NA   |
            |  INPUT  |     |   |        |        |        |
            |RESISTOR |     |MIN|-70NA   |-70NA   |-1UA    |
            |==============================================|
            | VOHL: HIGH-LEVEL OUTPUT VOLTAGE,LOADED       |
            |----------------------------------------------|
            | LOADED  |1.65V|MIN|VTMN1V-0.585V|VTMN1V-0.590V|VTMN1V-0.600V|
            |AT RATED |     |   |        |        |        |
            | BUFFER  |     |   |        |        |        |
            | CURRENT |     |   |        |        |        |
            |==============================================|
            | VOLL: LOW-LEVEL OUTPUT VOLTAGE,LOADED        |
            |----------------------------------------------|
            | LOADED  |1.65V|MAX|0.485V  |0.490V  |0.500V  |
            |AT RATED |     |   |        |        |        |
            | BUFFER  |     |   |        |        |        |
            | CURRENT |     |   |        |        |        |
            |==============================================|
            | VOHN: HIGH-LEVEL OUTPUT VOLTAGE,NO LOAD      |
            |----------------------------------------------|
            | LOADED  |1.65V|MIN|2.65V   |2.65V   |2.60V   |
            |AT 1% OF |     |   |        |        |        |
            | BUFFER  |     |   |        |        |        |
            | CURRENT |     |   |        |        |        |
            |==============================================|
            | VOLN: LOW-LEVEL OUTPUT VOLTAGE,NO LOAD       |
            |----------------------------------------------|
            | LOADED  |1.65V|MAX| -??-   | -??-   | -??-   |
            |AT 1% OF |     |   |        |        |        |
            | BUFFER  |     |   |        |        |        |
            | CURRENT |     |   |        |        |        |
            |---------|     |---|--------|--------|--------|
            |  INPUT  |     |MAX|                          |
            |PULL-DOWN|     |   |LIMITS PER CELL DATA SHEET|
            |RESISTOR |     |MIN|                          |
            |---------|     |---|--------|--------|--------|
            |  INPUT  |     |MAX|                          |
            | PULL-UP |     |   |LIMITS PER CELL DATA SHEET|
            |RESISTOR |     |MIN|                          |
            |==============================================|
*
*
*
*
*
*
*                SUMMARY OF 0.08-MICRON CMOS GS40 CELLS
*
*
*  PIN  LC  PIN                        SINK/SOURCE     OUTPUT    INPUT
*  NO.  NO. NAME              CELL TYPE  CURRENT        TYPE      TYPE
*      COM_PCM_DI UIS482                            CMOS,PULLDOWN 20UA
*      RX2        UIS482                            CMOS,PULLDOWN 20UA
*      OSC32K_OUT OS11V1                            OSC
*      OSC32K_IN  OS11D1                            OSC
*      CLK32K_IN  IDG091                            CMOS
*      BT_MCLK_RE IDG091                            CMOS,PULLDOWN 20UA
*      NRESPWRON  IDG091                            CMOS
*      PCM_CLKS   IDG091                            CMOS
*      PCM_DATA_I IDG091                            CMOS,PULLDOWN 20UA
*      BT_PCM_DIN IDG091                            CMOS,PULLDOWN 20UA
*      RX1        IDG091                            CMOS,PULLDOWN 20UA
*      CTS1       IDG091                            CMOS,PULLDOWN 20UA
*      WIRE_SDI   IDG091                            CMOS,PULLDOWN 20UA
*      EXT_FIQ    IDG091                            CMOS
*      KBR_4      IDI091                            CMOS
*      KBR_3      IDI091                            CMOS
*      KBR_2      IDI091                            CMOS
*      KBR_1      IDI091                            CMOS
*      KBR_0      IDI091                            CMOS
*      CLK32K_CTR IDG041                            CMOS
*      CONF       IDI041                            CMOS,PULLDOWN 100UA
*      TDI        IDG091                            CMOS,PULLDOWN 20UA
*      TMS        IDG091                            CMOS,PULLDOWN 20UA
*      TCK        IDG091                            CMOS,PULLDOWN 20UA
*      NTRST      IDG091                            CMOS,PULLDOWN 100UA
*      NBSCAN     IDI041                            CMOS
*      MPU_NRESET IDG091                            CMOS
*      NFRDY      UIS481                            CMOS
*      SDCLK      UIS481                            CMOS
*      SDCLK      UOS333              CMOS,3-STATE  CMOS
*      SDATA_15   UIS481                            CMOS
*      SDATA_15   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_14   UIS481                            CMOS
*      SDATA_14   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_13   UIS481                            CMOS
*      SDATA_13   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_12   UIS481                            CMOS
*      SDATA_12   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_11   UIS481                            CMOS
*      SDATA_11   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_10   UIS481                            CMOS
*      SDATA_10   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_9    UIS481                            CMOS
*      SDATA_9    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_8    UIS481                            CMOS
*      SDATA_8    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_7    UIS481                            CMOS
*      SDATA_7    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_6    UIS481                            CMOS
*      SDATA_6    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_5    UIS481                            CMOS
*      SDATA_5    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_4    UIS481                            CMOS
*      SDATA_4    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_3    UIS481                            CMOS
*      SDATA_3    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_2    UIS481                            CMOS
*      SDATA_2    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_1    UIS481                            CMOS
*      SDATA_1    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      SDATA_0    UIS481                            CMOS
*      SDATA_0    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      USB_DP     UIS246                            USB
*      USB_DP     UOS181              USB,3-STATE   USB
*      USB_DM     UIS246                            USB
*      USB_DM     UOS181              USB,3-STATE   USB
*      COM_MCLK_R UIS482                            CMOS,PULLDOWN 20UA
*      COM_MCLK_R UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_DI UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_DI UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_PCM_CL UIS482                            CMOS,PULLDOWN 20UA
*      COM_PCM_CL UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_PCM_SY UIS482                            CMOS,PULLDOWN 20UA
*      COM_PCM_SY UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      CTS2       UIS482                            CMOS,PULLDOWN 20UA
*      CTS2       UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_9     UIS482                            CMOS,PULLDOWN 20UA
*      GPIO_9     UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_8     UIS482                            CMOS,PULLDOWN 20UA
*      GPIO_8     UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      ARMIO_3    UIS482                            CMOS,PULLDOWN 20UA
*      ARMIO_3    UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_RS UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_RS UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_XS UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_XS UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_kr UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_kr UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_CL UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_CL UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      COM_SPI_DO UIS482                            CMOS,PULLDOWN 20UA
*      COM_SPI_DO UOS334    4MA  4MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      RTS2       UIS482                            CMOS
*      RTS2       UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      OSC1_IN    UIS488                            OSC
*      OSC1_IN    UIS488    2MA  2MA  OSC           OSC
*      MEDIA_CS   IDG091                            CMOS,PULLUP   100UA
*      MEDIA_CS   OUO431              CMOS,3-STATE  CMOS,PULLUP   100UA
*      MEDIA_CMD  IDG091                            CMOS,PULLUP   20UA
*      MEDIA_CMD  OUO431              CMOS,3-STATE  CMOS,PULLUP   20UA
*      MEDIA_DO   IDG091                            CMOS,PULLUP   20UA
*      MEDIA_DO   OUO431              CMOS,3-STATE  CMOS,PULLUP   20UA
*      MEDIA_CLK  IDG091                            CMOS
*      MEDIA_CLK  OUO431              CMOS,3-STATE  CMOS
*      MEDIA_DI   IDG091                            CMOS,PULLUP   20UA
*      MEDIA_DI   OUO431              CMOS,3-STATE  CMOS,PULLUP   20UA
*      MMC_DAT2   IDG091                            CMOS,PULLUP   20UA
*      MMC_DAT2   OUO431              CMOS,3-STATE  CMOS,PULLUP   20UA
*      PCM_BIT_CL IDG091                            CMOS
*      PCM_BIT_CL OUO431              CMOS,3-STATE  CMOS
*      PCM_SYNC   IDG091                            CMOS
*      PCM_SYNC   OUO431              CMOS,3-STATE  CMOS
*      PCM_DATA_O IDG091                            CMOS
*      PCM_DATA_O OUO431              CMOS,3-STATE  CMOS
*      BT_PCM_BCL IDG091                            CMOS,PULLDOWN 20UA
*      BT_PCM_BCL OUO231              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      BT_PCM_SYN IDG091                            CMOS,PULLDOWN 20UA
*      BT_PCM_SYN OUO231              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      RX         IDG091                            CMOS
*      RX         OUO431              CMOS,3-STATE  CMOS
*      GPIO_15    IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_15    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_14    IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_14    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_13    IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_13    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_12    IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_12    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_11    IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_11    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_7     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_7     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_6     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_6     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_4     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_4     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_3     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_3     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_2     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_2     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_1     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_1     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      GPIO_0     IDG091                            CMOS,PULLDOWN 20UA
*      GPIO_0     OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      ARMIO_5    IDG091                            CMOS,PULLDOWN 20UA
*      ARMIO_5    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      ARMIO_4    IDG091                            CMOS,PULLDOWN 20UA
*      ARMIO_4    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      ARMIO_2    IDG091                            CMOS,PULLDOWN 20UA
*      ARMIO_2    OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      ARMIO_1    IDG091                            CMOS
*      ARMIO_1    OUO431              CMOS,3-STATE  CMOS
*      CLK32K_OUT IDI091                            CMOS
*      CLK32K_OUT OUK831              CMOS,3-STATE  CMOS
*      SCL        IDI091                            CMOS
*      SCL        UOS205              CMOS          CMOS
*      SDA        IDI091                            CMOS
*      SDA        UOS205              CMOS          CMOS
*      WIRE_NSCS0 IDI041                            CMOS
*      WIRE_NSCS0 OUO431              CMOS,3-STATE  CMOS
*      WIRE_NSCS3 IDI041                            CMOS
*      WIRE_NSCS3 OUO431              CMOS,3-STATE  CMOS
*      CAM_LCLK   IDG091                            CMOS
*      CAM_LCLK   OUK831              CMOS,3-STATE  CMOS
*      CAM_D_7    IDG041                            CMOS
*      CAM_D_7    OUK831    8MA  8MA  CMOS,3-STATE  CMOS
*      CAM_D_6    IDG041                            CMOS
*      CAM_D_6    OUK831    8MA  8MA  CMOS,3-STATE  CMOS
*      CAM_D_5    IDG041                            CMOS,PULLDOWN 20UA
*      CAM_D_5    OUK831    8MA  8MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      CAM_D_4    IDG041                            CMOS
*      CAM_D_4    OUK831    8MA  8MA  CMOS,3-STATE  CMOS
*      CAM_D_3    IDG041                            CMOS,PULLDOWN 20UA
*      CAM_D_3    OUK831    8MA  8MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      CAM_D_2    IDG041                            CMOS,PULLDOWN 20UA
*      CAM_D_2    OUK831    8MA  8MA  CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      CAM_D_1    IDG041                            CMOS
*      CAM_D_1    OUK831    8MA  8MA  CMOS,3-STATE  CMOS
*      CAM_D_0    IDG041                            CMOS
*      CAM_D_0    OUK831    8MA  8MA  CMOS,3-STATE  CMOS
*      CAM_VS     IDG091                            CMOS
*      CAM_VS     OUK831              CMOS,3-STATE  CMOS
*      CAM_HS     IDG091                            CMOS,PULLDOWN 20UA
*      CAM_HS     OUK831              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      NEMU0      IDG091                            CMOS,PULLUP   100UA
*      NEMU0      OUO231              CMOS,3-STATE  CMOS,PULLUP   100UA
*      NEMU1      IDG091                            CMOS,PULLUP   100UA
*      NEMU1      OUO231              CMOS,3-STATE  CMOS,PULLUP   100UA
*      ARM_BOOT   IDG091                            CMOS,PULLDOWN 20UA
*      ARM_BOOT   OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      TI_RESERd4 IDI041                            CMOS,PULLDOWN 20UA
*      TI_RESERd4 OUO431              CMOS,3-STATE  CMOS,PULLDOWN 20UA
*      FDATA_15   UIS481                            CMOS
*      FDATA_15   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_14   UIS481                            CMOS
*      FDATA_14   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_13   UIS481                            CMOS
*      FDATA_13   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_12   UIS481                            CMOS
*      FDATA_12   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_11   UIS481                            CMOS
*      FDATA_11   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_10   UIS481                            CMOS
*      FDATA_10   UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_9    UIS481                            CMOS
*      FDATA_9    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_8    UIS481                            CMOS
*      FDATA_8    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_7    UIS481                            CMOS
*      FDATA_7    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_6    UIS481                            CMOS
*      FDATA_6    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_5    UIS481                            CMOS
*      FDATA_5    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_4    UIS481                            CMOS
*      FDATA_4    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_3    UIS481                            CMOS
*      FDATA_3    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_2    UIS481                            CMOS
*      FDATA_2    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_1    UIS481                            CMOS
*      FDATA_1    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FDATA_0    UIS481                            CMOS
*      FDATA_0    UOS334    4MA  4MA  CMOS,3-STATE  CMOS
*      FCLK       UIS481                            CMOS
*      FCLK       UOS333              CMOS,3-STATE  CMOS
*      SBANK_1    UOS334    4MA  4MA  CMOS,3-STATE
*      SBANK_0    UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_12    UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_11    UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_10    UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_9     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_8     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_7     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_6     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_5     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_4     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_3     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_2     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_1     UOS334    4MA  4MA  CMOS,3-STATE
*      SADD_0     UOS334    4MA  4MA  CMOS,3-STATE
*      NSRAS      UOS334    4MA  4MA  CMOS,3-STATE
*      NSCAS      UOS334    4MA  4MA  CMOS,3-STATE
*      NSWE       UOS334    4MA  4MA  CMOS,3-STATE
*      NSDQML     UOS334    4MA  4MA  CMOS,3-STATE
*      NSDQMU     UOS334    4MA  4MA  CMOS,3-STATE
*      SDCLK_EN   UOS334    4MA  4MA  CMOS,3-STATE
*      USB_CLKO   OUK831    8MA  8MA  CMOS,3-STATE
*      COM_MCLK_O UOS334    4MA  4MA  CMOS,3-STATE
*      COM_PCM_DO UOS334    4MA  4MA  CMOS,3-STATE
*      TX2        UOS334    4MA  4MA  CMOS,3-STATE
*      TI_RESERVE UOS334    4MA  4MA  CMOS,3-STATE
*      OSC1_OUT   UOS357    1MA  1MA  OSC
*      BT_MCLK_OU OUO431    4MA  4MA  CMOS,3-STATE
*      LCD_HSYNC  OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_VSYNC  OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_AC     OUO431    4MA  4MA  CMOS,3-STATE
*      LCD_PCLK   OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE15 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE14 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE13 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE12 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE11 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXE10 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL9 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL8 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL7 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL6 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL5 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL4 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL3 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL2 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL1 OUK431    4MA  4MA  CMOS,3-STATE
*      LCD_PIXEL_ OUK431    4MA  4MA  CMOS,3-STATE
*      BT_PCM_DOU OUO231    2MA  2MA  CMOS,3-STATE
*      TX1        OUO231    2MA  2MA  CMOS,3-STATE
*      RTS1       OUO231    2MA  2MA  CMOS,3-STATE
*      TX         OUO431    4MA  4MA  CMOS,3-STATE
*      WIRE_SDO   OUO431    4MA  4MA  CMOS,3-STATE
*      WIRE_SCLK  OUO431    4MA  4MA  CMOS,3-STATE
*      CAM_EXCLK  OUK831    8MA  8MA  CMOS,3-STATE
*      CAM_RSTZ   OUK831    8MA  8MA  CMOS,3-STATE
*      KBC_5      OUK431    4MA  4MA  CMOS,3-STATE
*      KBC_4      OUK431    4MA  4MA  CMOS,3-STATE
*      KBC_3      OUK431    4MA  4MA  CMOS,3-STATE
*      KBC_2      OUK431    4MA  4MA  CMOS,3-STATE
*      KBC_1      OUK431    4MA  4MA  CMOS,3-STATE
*      KBC_0      OUK431    4MA  4MA  CMOS,3-STATE
*      TDO        OUK431    4MA  4MA  CMOS,3-STATE
*      COM_SHUTDO OUO431    4MA  4MA  CMOS,3-STATE
*      NRESET_OUT OUO431    4MA  4MA  CMOS,3-STATE
*      NFCS_3     UOS334    4MA  4MA  CMOS,3-STATE
*      NFCS_2     UOS334    4MA  4MA  CMOS,3-STATE
*      NFCS_1     UOS334    4MA  4MA  CMOS,3-STATE
*      NFCS_0     UOS334    4MA  4MA  CMOS,3-STATE
*      NFADV      UOS334    4MA  4MA  CMOS,3-STATE
*      NFWP       UOS334    4MA  4MA  CMOS,3-STATE
*      NFRP       UOS334    4MA  4MA  CMOS,3-STATE
*      NFOE       UOS334    4MA  4MA  CMOS,3-STATE
*      NFWE       UOS334    4MA  4MA  CMOS,3-STATE
*      NFBE_1     UOS334    4MA  4MA  CMOS,3-STATE
*      NFBE_0     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_24    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_23    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_22    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_21    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_20    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_19    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_18    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_17    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_16    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_15    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_14    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_13    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_12    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_11    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_10    UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_9     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_8     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_7     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_6     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_5     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_4     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_3     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_2     UOS334    4MA  4MA  CMOS,3-STATE
*      FADD_1     UOS334    4MA  4MA  CMOS,3-STATE






                         Autogen DC Pattern Scanner


 Pin Pin                  Pin   In   In   In   In   In   In   Out  Out  Out
 No. Name                 Type  Low  Low  Low  Hi   Hi   Hi   Low  Hi   HiZ
                                UNK  ON   OFF  UNK  ON   OFF
 ---------------------------------------------------------------------------
C9   sdclk                IO      0    0    0    0    0    0    2   23    0
D5   sdata_15             IO     24    0    0    0    0    0    2   23    0
C4   sdata_14             IO     24    0    0    0    0    0    2   23    0
B4   sdata_13             IO     24    0    0    0    0    0    2   23    0
D6   sdata_12             IO     24    0    0    0    0    0    2   23    0
C5   sdata_11             IO     24    0    0    0    0    0    2   23    0
H8   sdata_10             IO     24    0    0    0    0    0    2   23    0
C6   sdata_9              IO     24    0    0    0    0    0    2   23    0
B6   sdata_8              IO     24    0    0    0    0    0    2   23    0
D7   sdata_7              IO     24    0    0    0    0    0    2   23    0
C7   sdata_6              IO     24    0    0    0    0    0    2   23    0
D8   sdata_5              IO     24    0    0    0    0    0    2   23    0
B8   sdata_4              IO     24    0    0    0    0    0    2   23    0
G8   sdata_3              IO     24    0    0    0    0    0    2   23    0
C8   sdata_2              IO     24    0    0    0    0    0    2   23    0
G9   sdata_1              IO     24    0    0    0    0    0    2   23    0
B9   sdata_0              IO     24    0    0    0    0    0    2   23    0
P9   usb_dp               IO      1    0    0    0    0    0    0    0    0
R8   usb_dm               IO      1    0    0    0    0    0    0    0    0
R10  com_mclk_req         IO      1    0    0   16    0    0    2    3    0
P10  com_spi_din          IO      1    0    0    0    0    0    2    3    0
Y10  com_pcm_clk          IO      1    0    0    0    0    0    2    3    0
V9   com_pcm_sync         IO      1    0    0    0    0    0    2    3    0
Y5   cts2                 IO      1    0    0    0    0    0    2    3    0
W8   gpio_9               IO      1    0    0    0    0    0    2    3    0
Y8   gpio_8               IO      1    0    0    0    0    0    2    3    0
V8   armio_3              IO      1    0    0    0    0    0    2    3    0
W6   com_spi_rsync        IO      1    0    0    0    0    0    2    3    0
W7   com_spi_xsync        IO      1    0    0    0    0    0    2    3    0
V7   com_spi_clkr         IO      1    0    0    0    0    0    2    3    0
Y6   com_spi_clkx         IO      1    0    0    0    0    0    2    3    0
AA5  com_spi_dout         IO      0    0    0    0    0    0    2    3    0
W5   rts2                 IO      0    0    0    0    0    0    2    4    0
Y2   osc1_in              IO      1    0    0    0    0    0   11    0    0
P11  media_cs             IO      0    0    0    0    0    0    2    4    0
V10  media_cmd            IO      1    0    0    0    0    0    2    4    0
R11  media_do             IO      1    0    0    0    0    0    2    4    0
V11  media_clk            IO      0    0    0    0    0    0    2    4    0
W11  media_di             IO      1    0    0    0    0    0    2    4    0
W10  mmc_dat2             IO      1    0    0    0    0    0    2    4    0
G21  pcm_bit_clk          IO      1    0    0    0    0    0    2    6    0
H15  pcm_sync             IO      1    0    0    0    0    0    2    6    0
H18  pcm_data_out         IO      0    0    0    0    0    0    2    6    0
AA13 bt_pcm_bclk          IO      1    0    0    0    0    0    2    6    0
V13  bt_pcm_sync          IO      1    0    0    0    0    0    2    6    0
L14  rx                   IO      1    0    0    0    0    0    2    6    0
M20  gpio_15              IO      1    0    0    0    0    0    2    6    0
N21  gpio_14              IO      1    0    0    0    0    0    2    6    0
N19  gpio_13              IO      1    0    0    0    0    0    2    6    0
N18  gpio_12              IO      1    0    0    0    0    0    2    6    0
N20  gpio_11              IO      1    0    0    0    0    0    2    6    0
M15  gpio_7               IO      1    0    0    0    0    0    2    6    0
P19  gpio_6               IO      1    0    0    0    0    0    2    6    0
P20  gpio_4               IO      1    0    0    0    0    0    2    6    0
P18  gpio_3               IO      1    0    0    0    0    0    2    6    0
M14  gpio_2               IO      1    0    0    0    0    0    2    6    0
R19  gpio_1               IO      1    0    0    0    0    0    2    6    0
R18  gpio_0               IO      1    0    0    0    0    0    2    6    0
T20  armio_5              IO      1    0    0    0    0    0    2    6    0
T19  armio_4              IO      1    0    0    0    0    0    2    6    0
N15  armio_2              IO      1    0    0    0    0    0    2    7    0
U19  armio_1              IO      1    0    0    0    0    0    2    7    0
Y12  clk32k_out           IO      0    0    0    0    0    0    2    7    0
T18  scl                  IO      1    0    0    0    0    0    2    0    0
V20  sda                  IO      1    0    0    0    0    0    2    0    0
N14  wire_nscs0           IO      1    0    0    0    0    0    2    8    0
P15  wire_nscs3           IO      1    0    0    0    0    0    2    8    0
J15  cam_lclk             IO      1    0    0    0    0    0    2    8    0
J18  cam_d_7              IO      1    0    0    0    0    0    2    8    0
J19  cam_d_6              IO      1    0    0    0    0    0    2    8    0
J14  cam_d_5              IO      1    0    0    0    0    0    2    8    0
K18  cam_d_4              IO      1    0    0    0    0    0    2    8    0
K19  cam_d_3              IO      1    0    0    0    0    0    2    8    0
K15  cam_d_2              IO      1    0    0    0    0    0    2    8    0
K14  cam_d_1              IO      1    0    0    0    0    0    2    8    0
L19  cam_d_0              IO      1    0    0    0    0    0    2    9    0
L18  cam_vs               IO      1    0    0    0    0    0    2    9    0
L15  cam_hs               IO      1    0    0    0    0    0    2   10    0
V16  nemu0                IO      1    0    0   16    0    0    0    0    0
W17  nemu1                IO      1    0    0   16    0    0    0    0    0
AA17 arm_boot             IO      1    0    0   16    0    0    2   10    0
W16  ti_reserved4         IO      1    0    0    0    0    0    2   10    0
V3   fdata_15             IO     14    0    0   16    0    0   25   20    0
T4   fdata_14             IO     14    0    0   16    0    0   25   23    0
U3   fdata_13             IO     14    0    0   16    0    0   25   20    0
U1   fdata_12             IO     15    0    0   16    0    0   25   20    0
P8   fdata_11             IO     14    0    0   16    0    0   25   23    0
T3   fdata_10             IO     15    0    0   16    0    0   22   20    0
T2   fdata_9              IO     19    0    0   16    0    0   25   20    0
R4   fdata_8              IO     15    0    0   16    0    0   22   20    0
R3   fdata_7              IO     15    0    0   16    0    0   25   20    0
R2   fdata_6              IO     15    0    0   16    0    0   25   20    0
P7   fdata_5              IO     15    0    0   16    0    0   25   20    0
P4   fdata_4              IO     15    0    0   16    0    0   25   23    0
P2   fdata_3              IO     15    0    0   16    0    0   25   20    0
N7   fdata_2              IO     15    0    0   16    0    0   25   23    0
N2   fdata_1              IO     15    0    0   16    0    0   25   20    0
N4   fdata_0              IO     15    0    0   17    0    0   25   18    0
N3   fclk                 IO      0    0    0    0    0    0   25    4    0
D10  sbank_1              OU      0    0    0    0    0    0    2   23    0
C10  sbank_0              OU      0    0    0    0    0    0    2   23    0
G10  sadd_12              OU      0    0    0    0    0    0    2   23    0
H10  sadd_11              OU      0    0    0    0    0    0    2   23    0
C11  sadd_10              OU      0    0    0    0    0    0    2   21    0
D11  sadd_9               OU      0    0    0    0    0    0    2   21    0
G11  sadd_8               OU      0    0    0    0    0    0    2   21    0
C12  sadd_7               OU      0    0    0    0    0    0    2   23    0
D12  sadd_6               OU      0    0    0    0    0    0    2   23    0
H11  sadd_5               OU      0    0    0    0    0    0    2   23    0
C13  sadd_4               OU      0    0    0    0    0    0    2   23    0
D13  sadd_3               OU      0    0    0    0    0    0    2   23    0
G12  sadd_2               OU      0    0    0    0    0    0    2   23    0
C14  sadd_1               OU      0    0    0    0    0    0    2   23    0
B14  sadd_0               OU      0    0    0    0    0    0    2   21    0
A2   nsras                OU      0    0    0    0    0    0    2   23    0
H9   nscas                OU      0    0    0    0    0    0    2   27    0
C3   nswe                 OU      0    0    0    0    0    0   12   27    0
B3   nsdqml               OU      0    0    0    0    0    0   22   27    0
D4   nsdqmu               OU      0    0    0    0    0    0   22   27    0
D9   sdclk_en             OU      0    0    0    0    0    0    2   23    0
W4   usb_clko             OU      0    0    0    0    0    0    2   23    0
Y9   com_mclk_out         OU      0    0    0    0    0    0    2    3    0
W9   com_pcm_dout         OU      0    0    0    0    0    0    2    4    0
V6   tx2                  OU      0    0    0    0    0    0    2    4    0
Y4   ti_reserved6         OU      0    0    0    0    0    0    2    4    0
W3   osc1_out             OU      0    0    0    0    0    0    0    0    0
Y13  bt_mclk_out          OU      0    0    0    0    0    0    2    4    0
H12  lcd_hsync            OU      0    0    0    0    0    0    2    4    0
D14  lcd_vsync            OU      0    0    0    0    0    0    2    4    0
B15  lcd_ac               OU      0    0    0    0    0    0    2    4    0
C15  lcd_pclk             OU      0    0    0    0    0    0    2    4    0
D15  lcd_pixel_15         OU      0    0    0    0    0    0    2    4    0
C16  lcd_pixel_14         OU      0    0    0    0    0    0    2    4    0
A17  lcd_pixel_13         OU      0    0    0    0    0    0    2    4    0
G13  lcd_pixel_12         OU      0    0    0    0    0    0    2    4    0
B17  lcd_pixel_11         OU      0    0    0    0    0    0    2    4    0
C17  lcd_pixel_10         OU      0    0    0    0    0    0    2    4    0
D16  lcd_pixel_9          OU      0    0    0    0    0    0    2    4    0
D17  lcd_pixel_8          OU      0    0    0    0    0    0    2    4    0
C18  lcd_pixel_7          OU      0    0    0    0    0    0    2    4    0
B19  lcd_pixel_6          OU      0    0    0    0    0    0    2    4    0
A20  lcd_pixel_5          OU      0    0    0    0    0    0    2    4    0
H13  lcd_pixel_4          OU      0    0    0    0    0    0    2    4    0
G14  lcd_pixel_3          OU      0    0    0    0    0    0    2    4    0
C19  lcd_pixel_2          OU      0    0    0    0    0    0    2    4    0
B21  lcd_pixel_1          OU      0    0    0    0    0    0    2    5    0
D18  lcd_pixel_0          OU      0    0    0    0    0    0    2    5    0
W14  bt_pcm_dout          OU      0    0    0    0    0    0    2    6    0
Y14  tx1                  OU      0    0    0    0    0    0    2    6    0
AA15 rts1                 OU      0    0    0    0    0    0    2    6    0
M18  tx                   OU      0    0    0    0    0    0    2    6    0
W21  wire_sdo             OU      0    0    0    0    0    0    2    8    0
V19  wire_sclk            OU      0    0    0    0    0    0    2    8    0
H19  cam_exclk            OU      0    0    0    0    0    0    2    8    0
M19  cam_rstz             OU      0    0    0    0    0    0    2   10    0
C20  kbc_5                OU      0    0    0    0    0    0    2   10    0
C21  kbc_4                OU      0    0    0    0    0    0    2   10    0
E18  kbc_3                OU      0    0    0    0    0    0    2   10    0
D19  kbc_2                OU      0    0    0    0    0    0    2   10    0
D20  kbc_1                OU      0    0    0    0    0    0    2   10    0
F18  kbc_0                OU      0    0    0    0    0    0    2   10    0
AA19 tdo                  OU      0    0    0    0    0    0    0    0    0
P14  com_shutdown         OU      0    0    0    0    0    0    2   10    0
W15  nreset_out           OU      0    0    0    0    0    0    2   23    0
N8   nfcs_3               OU      0    0    0    0    0    0   13   23    0
M4   nfcs_2               OU      0    0    0    0    0    0   28   23    0
M3   nfcs_1               OU      0    0    0    0    0    0   25   23    0
M7   nfcs_0               OU      0    0    0    0    0    0    0   23    0
L4   nfadv                OU      0    0    0    0    0    0   25   23    0
V4   nfwp                 OU      0    0    0    0    0    0    2    0    0
W1   nfrp                 OU      0    0    0    0    0    0   11   23    0
U4   nfoe                 OU      0    0    0    0    0    0   13   23    0
W2   nfwe                 OU      0    0    0    0    0    0   26   23    0
M8   nfbe_1               OU      0    0    0    0    0    0    2   12    0
L3   nfbe_0               OU      0    0    0    0    0    0    2    0    0
L7   fadd_24              OU      0    0    0    0    0    0    2   27    0
K3   fadd_23              OU      0    0    0    0    0    0    2   27    0
K4   fadd_22              OU      0    0    0    0    0    0    2   27    0
L8   fadd_21              OU      0    0    0    0    0    0    2   27    0
J1   fadd_20              OU      0    0    0    0    0    0    2   27    0
J3   fadd_19              OU      0    0    0    0    0    0    2   27    0
J4   fadd_18              OU      0    0    0    0    0    0    2   27    0
J2   fadd_17              OU      0    0    0    0    0    0    2   27    0
K7   fadd_16              OU      0    0    0    0    0    0    2   27    0
H3   fadd_15              OU      0    0    0    0    0    0    2   27    0
H4   fadd_14              OU      0    0    0    0    0    0    2   27    0
K8   fadd_13              OU      0    0    0    0    0    0    2   23    0
G2   fadd_12              OU      0    0    0    0    0    0    2   27    0
G3   fadd_11              OU      0    0    0    0    0    0    2   23    0
G4   fadd_10              OU      0    0    0    0    0    0    2   27    0
F3   fadd_9               OU      0    0    0    0    0    0    2   23    0
J7   fadd_8               OU      0    0    0    0    0    0    2   23    0
E3   fadd_7               OU      0    0    0    0    0    0    2   27    0
F4   fadd_6               OU      0    0    0    0    0    0    2   27    0
D2   fadd_5               OU      0    0    0    0    0    0    2   23    0
E4   fadd_4               OU      0    0    0    0    0    0    2   23    0
C1   fadd_3               OU      0    0    0    0    0    0    2   23    0
D3   fadd_2               OU      0    0    0    0    0    0    2   23    0
J8   fadd_1               OU      0    0    0    0    0    0    2   23    0
 ---------------------------------------------------------------------------

                                  I/Os In
 TDL Name        Pattern   PM     Z-State    DC PM     ICCQ PM
 --------        -------   --     -------    -----     -------
 dcp_voh_vol          18    1       No        Yes       No
 dcp_voh_vol         164    2       No        Yes       No
 dcp_voh_vol         356    3       No        Yes       No
 dcp_voh_vol        1008    4       No        Yes       No
 dcp_voh_vol        1130    5       No        Yes       No
 dcp_voh_vol        2194    6       No        Yes       No
 dcp_voh_vol        2390    7       No        Yes       No
 dcp_voh_vol        3267    8       No        Yes       No
 dcp_voh_vol        3514    9       No        Yes       No
 dcp_voh_vol        4563   10       No        Yes       No
 dcp_voh_vol_sdata_dual      42   11       No        Yes       No
 dcp_voh_vol_sdata_dual    2115   12       No        Yes       No
 dcp_voh_vol_sdata_dual    2120   13       No        Yes       No
 dcp_voh_vol_sdata_dual    2122   14       No        Yes       No
 dcp_voh_vol_sdata_dual    2125   15       No        Yes       No
 dcp_voh_vol_sdata_dual    2130   16       No        Yes       No
 dcp_voh_vol_sdata_dual    2133   17       No        Yes       No
 dcp_voh_vol_sdata_dual    2135   18       No        Yes       No
 dcp_voh_vol_sdata_dual    2138   19       No        Yes       No
 dcp_voh_vol_sdata_dual    2233   20       No        Yes       No
 dcp_voh_vol_sdata_dual    4438   21       No        Yes       No
 dcp_voh_vol_sdata_dual    4440   22       No        Yes       No
 dcp_voh_vol_sdata_dual    4442   23       No        Yes       No
 dcp_voh_vol_sdata_dual    4459   24       No        Yes       No
 dcp_voh_vol_sdata_dual    4568   25       No        Yes       No
 dcp_voh_vol_sdata_dual    4571   26       No        Yes       No
 dcp_voh_vol_sdata_dual    4755   27       No        Yes       No
 dcp_voh_vol_sdata_dual    4777   28       No        Yes       No
 hel_icc_10           96   29       No        No        Yes
 hel_icc_10          100   30       No        No        Yes
 hel_icc_10          104   31       No        No        Yes
 hel_icc_10          108   32       No        No        Yes
 hel_icc_10          112   33       No        No        Yes
 hel_icc_10          116   34       No        No        Yes
 hel_icc_10          120   35       No        No        Yes
 hel_icc_10          124   36       No        No        Yes
 hel_icc_10          128   37       No        No        Yes
 hel_icc_10          132   38       No        No        Yes
 hel_tdl_sleep_sync    4041   39       No        No        Yes
 hel_tdl_sleep_sync    4042   40       No        No        Yes
  None of these patterns contain I/O pins in Hi-Z state
**** WARNING: Cannot find PM stop to perform IILIO for pin sdclk(C9)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdclk(C9)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_15(D5)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_14(C4)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_13(B4)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_12(D6)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_11(C5)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_10(H8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_9(C6)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_8(B6)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_7(D7)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_6(C7)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_5(D8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_4(B8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_3(G8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_2(C8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_1(G9)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sdata_0(B9)
**** WARNING: Cannot find PM stop to perform VOL for pin usb_dp(P9)
**** WARNING: Cannot find PM stop to perform VOH for pin usb_dp(P9)
**** WARNING: Cannot find PM stop to perform IIHIO for pin usb_dp(P9)
**** WARNING: Cannot find PM stop to perform VOL for pin usb_dm(R8)
**** WARNING: Cannot find PM stop to perform VOH for pin usb_dm(R8)
**** WARNING: Cannot find PM stop to perform IIHIO for pin usb_dm(R8)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_mclk_req(R10)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_mclk_req(R10)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_mclk_req(R10)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_din(P10)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_din(P10)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_din(P10)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_pcm_clk(Y10)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_pcm_clk(Y10)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_pcm_clk(Y10)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_pcm_sync(V9)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_pcm_sync(V9)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_pcm_sync(V9)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin cts2(Y5)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin cts2(Y5)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin cts2(Y5)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_9(W8)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_9(W8)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_9(W8)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_8(Y8)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_8(Y8)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_8(Y8)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin armio_3(V8)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin armio_3(V8)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin armio_3(V8)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_rsync(W6)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_rsync(W6)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_rsync(W6)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_xsync(W7)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_xsync(W7)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_xsync(W7)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_clkr(V7)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_clkr(V7)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_clkr(V7)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_clkx(Y6)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_clkx(Y6)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_clkx(Y6)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin com_spi_dout(AA5)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin com_spi_dout(AA5)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin com_spi_dout(AA5)
**** WARNING: Cannot find PM stop to perform IILIO for pin rts2(W5)
**** WARNING: Cannot find PM stop to perform IIHIO for pin rts2(W5)
**** WARNING: Cannot find PM stop to perform VOH for pin osc1_in(Y2)
**** WARNING: Cannot find PM stop to perform IIHIO for pin osc1_in(Y2)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin media_cs(P11)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin media_cs(P11)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin media_cs(P11)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin media_cmd(V10)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin media_cmd(V10)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin media_cmd(V10)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin media_do(R11)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin media_do(R11)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin media_do(R11)
**** WARNING: Cannot find PM stop to perform IILIO for pin media_clk(V11)
**** WARNING: Cannot find PM stop to perform IIHIO for pin media_clk(V11)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin media_di(W11)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin media_di(W11)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin media_di(W11)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin mmc_dat2(W10)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin mmc_dat2(W10)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin mmc_dat2(W10)
**** WARNING: Cannot find PM stop to perform IIHIO for pin pcm_bit_clk(G21)
**** WARNING: Cannot find PM stop to perform IIHIO for pin pcm_sync(H15)
**** WARNING: Cannot find PM stop to perform IILIO for pin pcm_data_out(H18)
**** WARNING: Cannot find PM stop to perform IIHIO for pin pcm_data_out(H18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin bt_pcm_bclk(AA13)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin bt_pcm_bclk(AA13)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin bt_pcm_bclk(AA13)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin bt_pcm_sync(V13)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin bt_pcm_sync(V13)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin bt_pcm_sync(V13)
**** WARNING: Cannot find PM stop to perform IIHIO for pin rx(L14)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_15(M20)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_15(M20)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_15(M20)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_14(N21)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_14(N21)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_14(N21)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_13(N19)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_13(N19)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_13(N19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_12(N18)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_12(N18)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_12(N18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_11(N20)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_11(N20)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_11(N20)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_7(M15)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_7(M15)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_7(M15)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_6(P19)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_6(P19)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_6(P19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_4(P20)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_4(P20)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_4(P20)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_3(P18)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_3(P18)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_3(P18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_2(M14)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_2(M14)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_2(M14)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_1(R19)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_1(R19)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_1(R19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin gpio_0(R18)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin gpio_0(R18)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin gpio_0(R18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin armio_5(T20)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin armio_5(T20)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin armio_5(T20)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin armio_4(T19)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin armio_4(T19)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin armio_4(T19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin armio_2(N15)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin armio_2(N15)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin armio_2(N15)
**** WARNING: Cannot find PM stop to perform IIHIO for pin armio_1(U19)
**** WARNING: Cannot find PM stop to perform IILIO for pin clk32k_out(Y12)
**** WARNING: Cannot find PM stop to perform IIHIO for pin clk32k_out(Y12)
**** WARNING: Cannot find PM stop to perform IIHIO for pin scl(T18)
**** WARNING: Cannot find PM stop to perform IIHIO for pin sda(V20)
**** WARNING: Cannot find PM stop to perform IIHIO for pin wire_nscs0(N14)
**** WARNING: Cannot find PM stop to perform IIHIO for pin wire_nscs3(P15)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_lclk(J15)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_d_7(J18)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_d_6(J19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin cam_d_5(J14)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin cam_d_5(J14)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin cam_d_5(J14)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_d_4(K18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin cam_d_3(K19)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin cam_d_3(K19)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin cam_d_3(K19)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin cam_d_2(K15)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin cam_d_2(K15)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin cam_d_2(K15)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_d_1(K14)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_d_0(L19)
**** WARNING: Cannot find PM stop to perform IIHIO for pin cam_vs(L18)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin cam_hs(L15)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin cam_hs(L15)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin cam_hs(L15)
**** WARNING: Cannot find PM stop to perform VOL for pin nemu0(V16)
**** WARNING: Cannot find PM stop to perform VOH for pin nemu0(V16)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin nemu0(V16)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin nemu0(V16)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin nemu0(V16)
**** WARNING: Cannot find PM stop to perform VOL for pin nemu1(W17)
**** WARNING: Cannot find PM stop to perform VOH for pin nemu1(W17)
**** WARNING: Cannot find PM stop to perform ILPIO ON for pin nemu1(W17)
**** WARNING: Cannot find PM stop to perform ILPIO OFF for pin nemu1(W17)
**** WARNING: Cannot find PM stop to perform IHPIO OFF for pin nemu1(W17)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin arm_boot(AA17)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin arm_boot(AA17)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin arm_boot(AA17)
**** WARNING: Cannot find PM stop to perform IHDIO ON for pin ti_reserved4(W16)
**** WARNING: Cannot find PM stop to perform IHDIO OFF for pin ti_reserved4(W16)
**** WARNING: Cannot find PM stop to perform ILDIO OFF for pin ti_reserved4(W16)
**** WARNING: Cannot find PM stop to perform IILIO for pin fclk(N3)
**** WARNING: Cannot find PM stop to perform IIHIO for pin fclk(N3)
**** WARNING: Cannot find PM stop to perform IOZ for pin sbank_1(D10)
**** WARNING: Cannot find PM stop to perform IOZ for pin sbank_0(C10)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_12(G10)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_11(H10)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_10(C11)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_9(D11)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_8(G11)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_7(C12)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_6(D12)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_5(H11)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_4(C13)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_3(D13)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_2(G12)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_1(C14)
**** WARNING: Cannot find PM stop to perform IOZ for pin sadd_0(B14)
**** WARNING: Cannot find PM stop to perform IOZ for pin nsras(A2)
**** WARNING: Cannot find PM stop to perform IOZ for pin nscas(H9)
**** WARNING: Cannot find PM stop to perform IOZ for pin nswe(C3)
**** WARNING: Cannot find PM stop to perform IOZ for pin nsdqml(B3)
**** WARNING: Cannot find PM stop to perform IOZ for pin nsdqmu(D4)
**** WARNING: Cannot find PM stop to perform IOZ for pin sdclk_en(D9)
**** WARNING: Cannot find PM stop to perform IOZ for pin usb_clko(W4)
**** WARNING: Cannot find PM stop to perform IOZ for pin com_mclk_out(Y9)
**** WARNING: Cannot find PM stop to perform IOZ for pin com_pcm_dout(W9)
**** WARNING: Cannot find PM stop to perform IOZ for pin tx2(V6)
**** WARNING: Cannot find PM stop to perform IOZ for pin ti_reserved6(Y4)
**** WARNING: Cannot find PM stop to perform VOL for pin osc1_out(W3)
**** WARNING: Cannot find PM stop to perform VOH for pin osc1_out(W3)
**** WARNING: Cannot find PM stop to perform IOZ for pin bt_mclk_out(Y13)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_hsync(H12)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_vsync(D14)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_ac(B15)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pclk(C15)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_15(D15)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_14(C16)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_13(A17)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_12(G13)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_11(B17)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_10(C17)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_9(D16)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_8(D17)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_7(C18)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_6(B19)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_5(A20)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_4(H13)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_3(G14)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_2(C19)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_1(B21)
**** WARNING: Cannot find PM stop to perform IOZ for pin lcd_pixel_0(D18)
**** WARNING: Cannot find PM stop to perform IOZ for pin bt_pcm_dout(W14)
**** WARNING: Cannot find PM stop to perform IOZ for pin tx1(Y14)
**** WARNING: Cannot find PM stop to perform IOZ for pin rts1(AA15)
**** WARNING: Cannot find PM stop to perform IOZ for pin tx(M18)
**** WARNING: Cannot find PM stop to perform IOZ for pin wire_sdo(W21)
**** WARNING: Cannot find PM stop to perform IOZ for pin wire_sclk(V19)
**** WARNING: Cannot find PM stop to perform IOZ for pin cam_exclk(H19)
**** WARNING: Cannot find PM stop to perform IOZ for pin cam_rstz(M19)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_5(C20)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_4(C21)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_3(E18)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_2(D19)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_1(D20)
**** WARNING: Cannot find PM stop to perform IOZ for pin kbc_0(F18)
**** WARNING: Cannot find PM stop to perform VOL for pin tdo(AA19)
**** WARNING: Cannot find PM stop to perform VOH for pin tdo(AA19)
**** WARNING: Cannot find PM stop to perform IOZ for pin tdo(AA19)
**** WARNING: Cannot find PM stop to perform IOZ for pin com_shutdown(P14)
**** WARNING: Cannot find PM stop to perform IOZ for pin nreset_out(W15)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfcs_3(N8)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfcs_2(M4)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfcs_1(M3)
**** WARNING: Cannot find PM stop to perform VOL for pin nfcs_0(M7)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfcs_0(M7)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfadv(L4)
**** WARNING: Cannot find PM stop to perform VOH for pin nfwp(V4)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfwp(V4)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfrp(W1)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfoe(U4)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfwe(W2)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfbe_1(M8)
**** WARNING: Cannot find PM stop to perform VOH for pin nfbe_0(L3)
**** WARNING: Cannot find PM stop to perform IOZ for pin nfbe_0(L3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_24(L7)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_23(K3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_22(K4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_21(L8)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_20(J1)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_19(J3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_18(J4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_17(J2)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_16(K7)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_15(H3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_14(H4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_13(K8)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_12(G2)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_11(G3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_10(G4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_9(F3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_8(J7)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_7(E3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_6(F4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_5(D2)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_4(E4)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_3(C1)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_2(D3)
**** WARNING: Cannot find PM stop to perform IOZ for pin fadd_1(J8)
**** WARNING: No IOZ test will be performed.



                      Summary of ICCQ Measure Statements

                           Assigned
 TDL Name         Pattern     PM           Min               Max
 --------         -------  --------  ---------------   ----------------
 hel_icc_10            96     29
 hel_icc_10           100     30
 hel_icc_10           104     31
 hel_icc_10           108     32
 hel_icc_10           112     33
 hel_icc_10           116     34
 hel_icc_10           120     35
 hel_icc_10           124     36
 hel_icc_10           128     37
 hel_icc_10           132     38
 hel_tdl_sleep_sync    4041     39
 hel_tdl_sleep_sync    4042     40



TDL PATTERN SET NAME: hel_atpg_sc, hel_icc_sc, arm925_atpg_1,
                      arm925_atpg_2, arm925_atpg_3,
                      hel_atpg_0, hel_atpg_1, hel_atpg_2,
                      hel_atpg_3, hel_atpg_4, hel_atpg_sim,
                      hel_icc_10, omap31_p_atpg_0,
                      omap31_p_atpg_1, omap31_p_atpg_2,
                      omap31_p_atpg_3, omap31_p_atpg_4,
                      omap31_p_atpg_sim, omap31_s_atpg_0,
                      omap31_s_atpg_1, omap31_s_atpg_2,
                      omap31_s_atpg_sim

THE PERIOD FOR THIS TIMING SET IS:  100.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |   5.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  10.0|  10.0|  +  | P13,W18
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: omap31_p_atpg_sc, omap31_s_atpg_sc,
                      mgs3_atpg_20

THE PERIOD FOR THIS TIMING SET IS:  200.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  19.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  30.0|  90.0|  +  | P13,W18
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: dcp_voh_vol, dcp_vih_vil,
                      dcp_iih_iil_nopull, dcp_leak

THE PERIOD FOR THIS TIMING SET IS:  300.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 | 290.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  75.0| 150.0|  -  | R12
-----+------+------+-----+--------------------------------------
   2 |  75.0| 150.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   3 |  10.0|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P15,P18,P19,P2,P20
-----+------+------+-----+--------------------------------------
                         | P4,P7,P8,P9,R10,R11,R13,R14,R18,R19
-----+------+------+-----+--------------------------------------
                         | R2,R3,R4,R8,R9,T18,T19,T2,T20,T3,T4
-----+------+------+-----+--------------------------------------
                         | U1,U18,U19,U3,V10,V11,V13,V14,V15
-----+------+------+-----+--------------------------------------
                         | V16,V17,V18,V20,V3,V7,V8,V9,W10,W11
-----+------+------+-----+--------------------------------------
                         | W13,W16,W17,W19,W5,W6,W7,W8,Y10,Y12
-----+------+------+-----+--------------------------------------
                         | Y17,Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: dcp_voh_vol_sdata_dual

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  70.0| AA5,B14,B4,B8,B9,C14,C4,C5,C8,D10,D5,D6,D8,G12
-----+------+---------------------------------------------------
            | G8,G9,L4,M3,M8,N3,N8,U4,W1,W15,W2
-----+------+---------------------------------------------------
   2 |  75.0| A17,A2,A20,AA13,AA15,AA17,AA19,B15,B17,B19,B21
-----+------+---------------------------------------------------
            | B3,B6,C1,C10,C11,C12,C13,C15,C16,C17,C18,C19,C20
-----+------+---------------------------------------------------
            | C21,C3,C6,C7,C9,D11,D12,D13,D14,D15,D16,D17,D18
-----+------+---------------------------------------------------
            | D19,D2,D20,D3,D4,D7,D9,E18,E3,E4,F18,F3,F4,G10
-----+------+---------------------------------------------------
            | G11,G13,G14,G2,G21,G3,G4,H10,H11,H12,H13,H15,H18
-----+------+---------------------------------------------------
            | H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3,J4,J7
-----+------+---------------------------------------------------
            | J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18,L19
-----+------+---------------------------------------------------
            | L3,L7,L8,M14,M15,M18,M19,M20,M4,M7,N14,N15,N18
-----+------+---------------------------------------------------
            | N19,N2,N20,N21,N4,N7,P10,P11,P14,P15,P18,P19,P2
-----+------+---------------------------------------------------
            | P20,P4,P7,P8,P9,R10,R11,R18,R19,R2,R3,R4,R8,T18
-----+------+---------------------------------------------------
            | T19,T2,T20,T3,T4,U1,U19,U3,V10,V11,V13,V16,V19
-----+------+---------------------------------------------------
            | V20,V3,V4,V6,V7,V8,V9,W10,W11,W14,W16,W17,W21,W3
-----+------+---------------------------------------------------
            | W4,W5,W6,W7,W8,W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8
-----+------+---------------------------------------------------
            | Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | W18,Y2
-----+------+------+-----+--------------------------------------
   2 |   0.1|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P13,P15,P18,P19,P2
-----+------+------+-----+--------------------------------------
                         | P20,P4,P7,P8,P9,R10,R11,R12,R13,R14
-----+------+------+-----+--------------------------------------
                         | R18,R19,R2,R3,R4,R8,R9,T18,T19,T2
-----+------+------+-----+--------------------------------------
                         | T20,T3,T4,U1,U18,U19,U3,V10,V11,V13
-----+------+------+-----+--------------------------------------
                         | V14,V15,V16,V17,V18,V20,V3,V7,V8,V9
-----+------+------+-----+--------------------------------------
                         | W10,W11,W12,W13,W16,W17,W19,W5,W6
-----+------+------+-----+--------------------------------------
                         | W7,W8,Y10,Y12,Y17,Y18,Y19,Y5,Y6
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: E_FUSE

THE PERIOD FOR THIS TIMING SET IS:  100.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  80.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  10.0|  50.0|  +  | J19,P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  50.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: arm925_atpg_reset

THE PERIOD FOR THIS TIMING SET IS:  200.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  40.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  50.0|  10.0|  +  | P13,W18
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_icc_bsr

THE PERIOD FOR THIS TIMING SET IS:  500.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  25.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  50.0| 250.0|  +  | P13,W18
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: mgs3_atpg_0, mgs3_atpg_1, mgs3_atpg_2,
                      mgs3_atpg_3, mgs3_atpg_4, mgs3_atpg_5,
                      mgs3_atpg_6, mgs3_atpg_7, mgs3_atpg_8,
                      mgs3_atpg_sc

THE PERIOD FOR THIS TIMING SET IS:  200.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  10.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  20.0| 100.0|  +  | P13,W18
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_sleep_sync, Ls12_writeseq_14_1,
                      Ls12_writeseq_28_2, Ls14_writeseq_28_2,
                      Ls22_writeseq_28_2, Ls24_writeseq_28_2,
                      Ls2_32_16_ic_28_2, Ls2_cp15test31_28_2,
                      Ls2_dc_cl_ful_28_2, Ls2_dc_cln_idx_28_2,
                      Ls2_dc_rd_wr_28_2, Ls2_dche_hs1X_28_2,
                      Ls2_dchitmiss_28_2, Ls2_hel_diag_28_2,
                      Ls2_led_diag_2_28_2, Ls2_ichitmiss_28_2,
                      Ls2_mmu_w_dtlb_28_2,
                      Ls2_mrc_usr_md_28_2,
                      Ls2_o_dma_imif_28_2, Ls2_ostimer1_28_2,
                      Ls2_ostimer3_28_2, Ls2_prefetch_28_2,
                      Ls2_raw_1010_28_2, Ls2_raw_110x_28_2,
                      Ls2_raw_1110_28_2, Ls2_raw_1111_28_2,
                      Ls2_raw_111Xcoh_28_2, Ls2_raw_111x_28_2,
                      Ls2_swap_hzd_28_2, Ls2_swp_str_l1_28_2,
                      Ls2_tdl_api_access_28_2,
                      Ls2_tdl_led_ostimer2_28_2,
                      Ls2_tiny_icw_28_2, Ls2_tlb_bistp2_28_2,
                      Ls2_tlb_bistp3_28_2, Ls2_tlb_bistp_28_2,
                      Ls2_tlbfill_28_2, hel_tdl_diag1_sync,
                      hel_tdl_diag2_sync, hel_tdl_diag3_sync,
                      hel_tdl_diag4_sync, hel_tdl_diag5_sync

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  75.6| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | W18,Y2
-----+------+------+-----+--------------------------------------
   2 |   0.1|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P13,P15,P18,P19,P2
-----+------+------+-----+--------------------------------------
                         | P20,P4,P7,P8,P9,R10,R11,R12,R13,R14
-----+------+------+-----+--------------------------------------
                         | R18,R19,R2,R3,R4,R8,R9,T18,T19,T2
-----+------+------+-----+--------------------------------------
                         | T20,T3,T4,U1,U18,U19,U3,V10,V11,V13
-----+------+------+-----+--------------------------------------
                         | V14,V15,V16,V17,V18,V20,V3,V7,V8,V9
-----+------+------+-----+--------------------------------------
                         | W10,W11,W12,W13,W16,W17,W19,W5,W6
-----+------+------+-----+--------------------------------------
                         | W7,W8,Y10,Y12,Y17,Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: Die_ID

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  30.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  10.0|  20.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: ETLM, S_apirdwrapicntlstatu,
                      S_apirdwrrheareghom,
                      S_apirdwrrhearegsam,
                      S_apisimrdwrDARAM01sa,
                      S_apisimrdwrDARAM27sa,
                      S_apisimrdwrSARAMsam,
                      S_apisimrdwrrheahom,
                      S_apisimrdwrrheasam,
                      S_apisimtestforhabort,
                      S_apiwrapiintrreg, S_apiwrpostmemsam,
                      S_apiwrpostrheasam,
                      S_benchmark_agc_deint,
                      S_bmrkagcdeintbyte,
                      S_benchmark_agc_frame,
                      S_bmrkagcslotbyte,
                      S_benchmark_arith_enc,
                      S_benchmark_conv2d, S_benchmark_convdec,
                      S_benchmark_convenc, S_benchmark_corr2d,
                      S_benchmark_dagc_exp,
                      S_benchmark_dagc_slot,
                      S_bmrkdagcslotbyte, S_benchmark_deint1,
                      S_bmrkdigsmooth, S_benchmark_fir1,
                      S_benchmark_fir2, S_bmrkframedeint3G,
                      S_bmrkframedeint3Gbyt,
                      S_benchmark_fsdeint, S_benchmark_iir1,
                      S_benchmark_itg96, S_bmrkmotsearch,
                      S_bmrkmrccombine, S_benchmark_mrc_exp,
                      S_bmrkmrcmultiple, S_bmrkmrcsingle,
                      S_bmrkmrcsmooth, S_benchmark_puncture,
                      S_benchmark_qrle, S_bmrkratematch,
                      S_benchmark_reorder,
                      S_benchmark_sad_block, S_bmrksadmblock,
                      S_bmrkslotdeint, S_bmrksttdcombinepilo,
                      S_benchmark_sttd_mult, S_benchmark_vlc,
                      S_benchmark_vld, S_checkerboard,
                      S_checkerboard_d0,
                      S_cpu_access_rhea_reg,
                      S_cpu_blockrepeat, S_cpu_cf_brc_r20,
                      S_cpucfdurptxparar21,
                      S_cpucfretcparar20, S_cpu_cf_rptx_r20,
                      S_cpu_cf_xcn_swap_r20,
                      S_cpucircularlineart1,
                      S_cpucircularlineart2,
                      S_cpucircularlineart3,
                      S_cpu_idle_wakeup, S_cpu_ipsa_chk,
                      S_cpuleadbitdagenr21,
                      S_cpuleadbitnestloopr,
                      S_cpu_localrepeat, S_cpu_mmr_rw_min,
                      S_cpu_paral_au_au, S_cpu_paral_au_du,
                      S_cpuplaudubugfixr20,
                      S_cpu_paral_au_du_t1,
                      S_cpu_paral_au_du_t2,
                      S_cpu_paral_au_du_t3, S_cpu_paral_cf_au,
                      S_cpu_paral_cf_au_t1, S_cpu_paral_cf_cf,
                      S_cpu_paral_cf_du, S_cpu_paral_cf_du_t1,
                      S_cpu_paral_cf_du_t2, S_cpu_paral_du_du,
                      S_cpupldudubtsr20, S_cpu_paral_du_du_t1,
                      S_cpu_repeat, S_cpu_speedpath_alu16,
                      S_cpu_speedpath_alu40,
                      S_cpuspdptalu40r20, S_cpu_speedpath_bit,
                      S_cpuspdptbitr20, S_cpuspdptblockrpt,
                      S_cpuspdptcmprbrc,
                      S_cpu_speedpath_dagen, S_cpuspdptkillad,
                      S_cpuspdptkillex, S_cpuspdptkillexr20,
                      S_cpuspdptkillrd, S_cpu_speedpath_mac1,
                      S_cpuspdptmac1r20, S_cpu_speedpath_mac2,
                      S_cpuspdptmac2r20, S_cpu_speedpath_rf,
                      S_cpuspdptrfr20, S_cpu_speedpath_shift,
                      S_cpuspdptshiftr20, S_cpuspdptstallac1,
                      S_cpuspdptstallad, S_cpuspdptstalladr20,
                      S_cpuspdptstalldec, S_cpu_xar_mdp_r20,
                      S_dieid_led, S_dma_daram_daram,
                      S_dma_daram_emif, S_dma_daram_saram,
                      S_dma_emif_daram, S_dma_idle,
                      S_dma_rhea_emif, S_dma_rhea_rhea,
                      S_dma_saram_saram, S_fdbk_boot,
                      S_fdbk_boot1, S_fdbk_boot2,
                      S_fdbkdmadefaultvalue,
                      S_fdbk_dma_registers, S_fdbk_intr1,
                      S_fdbk_intr2, S_fdbk_pedbus,
                      S_fdbk_stio_dual_read,
                      S_fdbkstiolockaccess, S_fdbk_stio_rd_wr,
                      S_fdbk_stio_read, S_fdbk_stio_ready,
                      S_fdbk_stio_wpe, S_fdbk_stio_wr_e_f,
                      S_fill_0, S_fill_0_d0, S_fill_1,
                      S_fill_1_d0, S_fullrate_vocoder,
                      S_fullratevocoderintr,
                      S_icache_data_chkbd,
                      S_icache_data_fill_1,
                      S_icachedatainvchkbd, S_icache_fill_0,
                      S_icache_lvb_rs, S_icache_regs,
                      S_icache_tag_chkbd, S_icache_tag_fill_1,
                      S_icache_tag_invchkbd,
                      S_inv_checkerboard,
                      S_inv_checkerboard_d0, S_march13n_d0,
                      S_march13n_pd, S_rheaaccessallperiph,
                      S_rhea_int1_pr1, S_rhea_int1_pr10,
                      S_rhea_int1_pr11, S_rhea_int1_pr12,
                      S_rhea_int1_pr13, S_rhea_int1_pr14,
                      S_rhea_int1_pr15, S_rhea_int1_pr16,
                      S_rhea_int1_pr17, S_rhea_int1_pr18,
                      S_rhea_int1_pr19, S_rhea_int1_pr2,
                      S_rhea_int1_pr20, S_rhea_int1_pr21,
                      S_rhea_int1_pr22, S_rhea_int1_pr3,
                      S_rhea_int1_pr4, S_rhea_int1_pr5,
                      S_rhea_int1_pr6, S_rhea_int1_pr7,
                      S_rhea_int1_pr8, S_rhea_int1_pr9,
                      S_rhea_timeout_error1, S_rom_test,
                      S_rom_test_reg, S_testmmap,
                      S_wrapcombo1daram0x00,
                      S_wrapcombo1daram0x01,
                      S_wrapcombo1daram0x02,
                      S_wrapcombo1daram0x03,
                      S_wrapcombo1daram0x04,
                      S_wrapcombo1daram0x05,
                      S_wrapcombo1daram0x06,
                      S_wrapcombo1daram0x07,
                      S_wrapcombo1saram0x08,
                      S_wrapcombo1saram0x09,
                      S_wrapcombo1saram0x0a,
                      S_wrapcombo1saram0x0b,
                      S_wrapcombo1saram0x0c,
                      S_wrapcombo1saram0x0d,
                      S_wrapcombo1saram0x0e,
                      S_wrapcombo1saram0x0f,
                      S_wrapcombo1saram0x10,
                      S_wrapcombo1saram0x11,
                      S_wrapcombo1saram0x12,
                      S_wrapcombo1saram0x13,
                      S_wrapcombo2daram0x00,
                      S_wrapcombo2daram0x01,
                      S_wrapcombo2daram0x02,
                      S_wrapcombo2daram0x03,
                      S_wrapcombo2daram0x04,
                      S_wrapcombo2daram0x05,
                      S_wrapcombo2daram0x06,
                      S_wrapcombo2daram0x07,
                      S_wrapcombo2saram0x08,
                      S_wrapcombo2saram0x09,
                      S_wrapcombo2saram0x0a,
                      S_wrapcombo2saram0x0b,
                      S_wrapcombo2saram0x0c,
                      S_wrapcombo2saram0x0d,
                      S_wrapcombo2saram0x0e,
                      S_wrapcombo2saram0x0f,
                      S_wrapcombo2saram0x10,
                      S_wrapcombo2saram0x11,
                      S_wrapcombo2saram0x12,
                      S_wrapcombo2saram0x13,
                      S_wrapcombo3daram0x00,
                      S_wrapcombo3daram0x01,
                      S_wrapcombo3daram0x02,
                      S_wrapcombo3daram0x03,
                      S_wrapcombo3daram0x04,
                      S_wrapcombo3daram0x05,
                      S_wrapcombo3daram0x06,
                      S_wrapcombo3daram0x07,
                      S_wrapcombo3saram0x08,
                      S_wrapcombo3saram0x09,
                      S_wrapcombo3saram0x0a,
                      S_wrapcombo3saram0x0b,
                      S_wrapcombo3saram0x0c,
                      S_wrapcombo3saram0x0d,
                      S_wrapcombo3saram0x0e,
                      S_wrapcombo3saram0x0f,
                      S_wrapcombo3saram0x10,
                      S_wrapcombo3saram0x11,
                      S_wrapcombo3saram0x12,
                      S_wrapcombo3saram0x13, S_xpsa_api,
                      S_xpsa_cpu, S_xpsa_emif, S_xpsa_rhea,
                      TLM_arm9_r3_alu_extra, TLM_arm9_r3_ctl,
                      TLM_arm9_r3_dp, TLM_arm9_r3_ice,
                      TLM_arm9_r3_ice_extra, TLM_arm9_r3_mul,
                      TLM_arm9_r3_rev1, TLM_arm9_r3_rev2,
                      TLM_arm9_r3_rev3,
                      TLM_arm9_r3_scan_extra,
                      TLM_arm9_r3_tapid, TLM_arm9_r3_thumb,
                      TLM_arm9_r3_uni, TLM_arm9_r3_wpt,
                      USB_HELEN1, apirdwrapicntlstatu,
                      apirdwrrheareghom, apirdwrrhearegsam,
                      apisimrdwrDARAM01sa,
                      apisimrdwrDARAM27sa, apisimrdwrSARAMsam,
                      apisimrdwrrheahom, apisimrdwrrheasam,
                      apisimtestforhabort, apiwrapiintrreg,
                      apiwrpostmemsam, apiwrpostrheasam,
                      benchmark_agc_deint, bmrkagcdeintbyte,
                      benchmark_agc_frame, bmrkagcslotbyte,
                      benchmark_arith_enc, benchmark_conv2d,
                      benchmark_convdec, benchmark_convenc,
                      benchmark_corr2d, benchmark_dagc_exp,
                      benchmark_dagc_slot, bmrkdagcslotbyte,
                      benchmark_deint1, bmrkdigsmooth,
                      benchmark_fir1, benchmark_fir2,
                      bmrkframedeint3G, bmrkframedeint3Gbyt,
                      benchmark_fsdeint, benchmark_iir1,
                      benchmark_itg96, bmrkmotsearch,
                      bmrkmrccombine, benchmark_mrc_exp,
                      bmrkmrcmultiple, bmrkmrcsingle,
                      bmrkmrcsmooth, benchmark_puncture,
                      benchmark_qrle, bmrkratematch,
                      benchmark_reorder, benchmark_sad_block,
                      bmrksadmblock, bmrkslotdeint,
                      bmrksttdcombinepilo,
                      benchmark_sttd_mult, benchmark_vlc,
                      benchmark_vld, checkerboard,
                      checkerboard_d0, cpu_access_rhea_reg,
                      cpu_blockrepeat, cpu_cf_brc_r20,
                      cpucfdurptxparar21, cpucfretcparar20,
                      cpu_cf_rptx_r20, cpu_cf_xcn_swap_r20,
                      cpucircularlineart1,
                      cpucircularlineart2,
                      cpucircularlineart3, cpu_idle_wakeup,
                      cpu_ipsa_chk, cpuleadbitdagenr21,
                      cpuleadbitnestloopr, cpu_localrepeat,
                      cpu_mmr_rw_min, cpu_paral_au_au,
                      cpu_paral_au_du, cpuplaudubugfixr20,
                      cpu_paral_au_du_t1, cpu_paral_au_du_t2,
                      cpu_paral_au_du_t3, cpu_paral_cf_au,
                      cpu_paral_cf_au_t1, cpu_paral_cf_cf,
                      cpu_paral_cf_du, cpu_paral_cf_du_t1,
                      cpu_paral_cf_du_t2, cpu_paral_du_du,
                      cpupldudubtsr20, cpu_paral_du_du_t1,
                      cpu_repeat, cpu_speedpath_alu16,
                      cpu_speedpath_alu40, cpuspdptalu40r20,
                      cpu_speedpath_bit, cpuspdptbitr20,
                      cpuspdptblockrpt, cpuspdptcmprbrc,
                      cpu_speedpath_dagen, cpuspdptkillad,
                      cpuspdptkillex, cpuspdptkillexr20,
                      cpuspdptkillrd, cpu_speedpath_mac1,
                      cpuspdptmac1r20, cpu_speedpath_mac2,
                      cpuspdptmac2r20, cpu_speedpath_rf,
                      cpuspdptrfr20, cpu_speedpath_shift,
                      cpuspdptshiftr20, cpuspdptstallac1,
                      cpuspdptstallad, cpuspdptstalladr20,
                      cpuspdptstalldec, cpu_xar_mdp_r20,
                      dieid_led, dma_daram_daram,
                      dma_daram_emif, dma_daram_saram,
                      dma_emif_daram, dma_idle, dma_rhea_emif,
                      dma_rhea_rhea, dma_saram_saram,
                      fdbk_boot, fdbk_boot1, fdbk_boot2,
                      fdbkdmadefaultvalue, fdbk_dma_registers,
                      fdbk_intr1, fdbk_intr2, fdbk_pedbus,
                      fdbk_stio_dual_read, fdbkstiolockaccess,
                      fdbk_stio_rd_wr, fdbk_stio_read,
                      fdbk_stio_ready, fdbk_stio_wpe,
                      fdbk_stio_wr_e_f, fill_0, fill_0_d0,
                      fill_1, fill_1_d0, fullrate_vocoder,
                      fullratevocoderintr, hel_include_file,
                      icache_data_chkbd, icache_data_fill_1,
                      icachedatainvchkbd, icache_fill_0,
                      icache_lvb_rs, icache_regs,
                      icache_tag_chkbd, icache_tag_fill_1,
                      icache_tag_invchkbd, inv_checkerboard,
                      inv_checkerboard_d0, march13n_d0,
                      march13n_pd, rheaaccessallperiph,
                      rhea_int1_pr1, rhea_int1_pr10,
                      rhea_int1_pr11, rhea_int1_pr12,
                      rhea_int1_pr13, rhea_int1_pr14,
                      rhea_int1_pr15, rhea_int1_pr16,
                      rhea_int1_pr17, rhea_int1_pr18,
                      rhea_int1_pr19, rhea_int1_pr2,
                      rhea_int1_pr20, rhea_int1_pr21,
                      rhea_int1_pr22, rhea_int1_pr3,
                      rhea_int1_pr4, rhea_int1_pr5,
                      rhea_int1_pr6, rhea_int1_pr7,
                      rhea_int1_pr8, rhea_int1_pr9,
                      rhea_timeout_error1, rom_test,
                      rom_test_reg, testmmap,
                      wrapcombo1daram0x00,
                      wrapcombo1daram0x01,
                      wrapcombo1daram0x02,
                      wrapcombo1daram0x03,
                      wrapcombo1daram0x04,
                      wrapcombo1daram0x05,
                      wrapcombo1daram0x06,
                      wrapcombo1daram0x07,
                      wrapcombo1saram0x08,
                      wrapcombo1saram0x09,
                      wrapcombo1saram0x0a,
                      wrapcombo1saram0x0b,
                      wrapcombo1saram0x0c,
                      wrapcombo1saram0x0d,
                      wrapcombo1saram0x0e,
                      wrapcombo1saram0x0f,
                      wrapcombo1saram0x10,
                      wrapcombo1saram0x11,
                      wrapcombo1saram0x12,
                      wrapcombo1saram0x13,
                      wrapcombo2daram0x00,
                      wrapcombo2daram0x01,
                      wrapcombo2daram0x02,
                      wrapcombo2daram0x03,
                      wrapcombo2daram0x04,
                      wrapcombo2daram0x05,
                      wrapcombo2daram0x06,
                      wrapcombo2daram0x07,
                      wrapcombo2saram0x08,
                      wrapcombo2saram0x09,
                      wrapcombo2saram0x0a,
                      wrapcombo2saram0x0b,
                      wrapcombo2saram0x0c,
                      wrapcombo2saram0x0d,
                      wrapcombo2saram0x0e,
                      wrapcombo2saram0x0f,
                      wrapcombo2saram0x10,
                      wrapcombo2saram0x11,
                      wrapcombo2saram0x12,
                      wrapcombo2saram0x13,
                      wrapcombo3daram0x00,
                      wrapcombo3daram0x01,
                      wrapcombo3daram0x02,
                      wrapcombo3daram0x03,
                      wrapcombo3daram0x04,
                      wrapcombo3daram0x05,
                      wrapcombo3daram0x06,
                      wrapcombo3daram0x07,
                      wrapcombo3saram0x08,
                      wrapcombo3saram0x09,
                      wrapcombo3saram0x0a,
                      wrapcombo3saram0x0b,
                      wrapcombo3saram0x0c,
                      wrapcombo3saram0x0d,
                      wrapcombo3saram0x0e,
                      wrapcombo3saram0x0f,
                      wrapcombo3saram0x10,
                      wrapcombo3saram0x11,
                      wrapcombo3saram0x12,
                      wrapcombo3saram0x13, xpsa_api, xpsa_cpu,
                      xpsa_emif, xpsa_rhea

THE PERIOD FOR THIS TIMING SET IS:  100.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  80.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  40.0|  50.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  40.0|  50.0|  -  | R12
-----+------+------+-----+--------------------------------------
   3 |  10.0|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P15,P18,P19,P2,P20
-----+------+------+-----+--------------------------------------
                         | P4,P7,P8,P9,R10,R11,R13,R14,R18,R19
-----+------+------+-----+--------------------------------------
                         | R2,R3,R4,R8,R9,T18,T19,T2,T20,T3,T4
-----+------+------+-----+--------------------------------------
                         | U1,U18,U19,U3,V10,V11,V13,V14,V15
-----+------+------+-----+--------------------------------------
                         | V16,V17,V18,V20,V3,V7,V8,V9,W10,W11
-----+------+------+-----+--------------------------------------
                         | W13,W16,W17,W19,W5,W6,W7,W8,Y10,Y12
-----+------+------+-----+--------------------------------------
                         | Y17,Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: Ls2_timer32_28_2

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  75.6| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | P13,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |   0.1|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P15,P18,P19,P2,P20
-----+------+------+-----+--------------------------------------
                         | P4,P7,P8,P9,R10,R11,R12,R13,R14,R18
-----+------+------+-----+--------------------------------------
                         | R19,R2,R3,R4,R8,R9,T18,T19,T2,T20
-----+------+------+-----+--------------------------------------
                         | T3,T4,U1,U18,U19,U3,V10,V11,V13,V14
-----+------+------+-----+--------------------------------------
                         | V15,V16,V17,V18,V20,V3,V7,V8,V9,W10
-----+------+------+-----+--------------------------------------
                         | W11,W12,W13,W16,W17,W19,W5,W6,W7,W8
-----+------+------+-----+--------------------------------------
                         | Y10,Y12,Y17,Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: dcp_vih_vil_sdata

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  70.0| AA5,B14,B4,B8,B9,C14,C4,C5,C8,D10,D5,D6,D8,G12
-----+------+---------------------------------------------------
            | G8,G9,L4,M3,M8,N3,N8,U4,W1,W15,W2
-----+------+---------------------------------------------------
   2 |  75.0| A17,A2,A20,AA13,AA15,AA17,AA19,B15,B17,B19,B21
-----+------+---------------------------------------------------
            | B3,B6,C1,C10,C11,C12,C13,C15,C16,C17,C18,C19,C20
-----+------+---------------------------------------------------
            | C21,C3,C6,C7,C9,D11,D12,D13,D14,D15,D16,D17,D18
-----+------+---------------------------------------------------
            | D19,D2,D20,D3,D4,D7,D9,E18,E3,E4,F18,F3,F4,G10
-----+------+---------------------------------------------------
            | G11,G13,G14,G2,G21,G3,G4,H10,H11,H12,H13,H15,H18
-----+------+---------------------------------------------------
            | H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3,J4,J7
-----+------+---------------------------------------------------
            | J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18,L19
-----+------+---------------------------------------------------
            | L3,L7,L8,M14,M15,M18,M19,M20,M4,M7,N14,N15,N18
-----+------+---------------------------------------------------
            | N19,N2,N20,N21,N4,N7,P10,P11,P14,P15,P18,P19,P2
-----+------+---------------------------------------------------
            | P20,P4,P7,P8,P9,R10,R11,R18,R19,R2,R3,R4,R8,T18
-----+------+---------------------------------------------------
            | T19,T2,T20,T3,T4,U1,U19,U3,V10,V11,V13,V16,V19
-----+------+---------------------------------------------------
            | V20,V3,V4,V6,V7,V8,V9,W10,W11,W14,W16,W17,W21,W3
-----+------+---------------------------------------------------
            | W4,W5,W6,W7,W8,W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8
-----+------+---------------------------------------------------
            | Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | Y2
-----+------+------+-----+--------------------------------------
   2 |   0.1|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P13,P15,P18,P19,P2
-----+------+------+-----+--------------------------------------
                         | P20,P4,P7,P8,P9,R10,R11,R12,R13,R14
-----+------+------+-----+--------------------------------------
                         | R18,R19,R2,R3,R4,R8,R9,T18,T19,T2
-----+------+------+-----+--------------------------------------
                         | T20,T3,T4,U1,U18,U19,U3,V10,V11,V13
-----+------+------+-----+--------------------------------------
                         | V14,V15,V16,V17,V18,V20,V3,V7,V8,V9
-----+------+------+-----+--------------------------------------
                         | W10,W11,W12,W13,W16,W17,W18,W19,W5
-----+------+------+-----+--------------------------------------
                         | W6,W7,W8,Y10,Y12,Y17,Y18,Y19,Y5,Y6
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: dcp_voh_vol_dual_com

THE PERIOD FOR THIS TIMING SET IS:  300.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 | 290.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  75.0| 150.0|  -  | R12
-----+------+------+-----+--------------------------------------
   2 |  75.0| 150.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: dcp_voh_vol_dual_flash

THE PERIOD FOR THIS TIMING SET IS:  300.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 | 159.0| V16,W17
-----+------+---------------------------------------------------
   2 | 164.0| C10,C12,C13,C14,D10,G11,H10,L4,M3,M7,N8,U4,V4,W2
-----+------+---------------------------------------------------
   3 | 268.0| P14,Y12
-----+------+---------------------------------------------------
   4 | 290.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C11,C15,C16,C17,C18
-----+------+---------------------------------------------------
            | C19,C20,C21,C3,C4,C5,C6,C7,C8,C9,D11,D12,D13,D14
-----+------+---------------------------------------------------
            | D15,D16,D17,D18,D19,D2,D20,D3,D4,D5,D6,D7,D8,D9
-----+------+---------------------------------------------------
            | E18,E3,E4,F18,F3,F4,G10,G12,G13,G14,G2,G21,G3,G4
-----+------+---------------------------------------------------
            | G8,G9,H11,H12,H13,H15,H18,H19,H3,H4,H8,H9,J1,J14
-----+------+---------------------------------------------------
            | J15,J18,J19,J2,J3,J4,J7,J8,K14,K15,K18,K19,K3,K4
-----+------+---------------------------------------------------
            | K7,K8,L14,L15,L18,L19,L3,L7,L8,M14,M15,M18,M19
-----+------+---------------------------------------------------
            | M20,M4,M8,N14,N15,N18,N19,N2,N20,N21,N3,N4,N7
-----+------+---------------------------------------------------
            | P10,P11,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11
-----+------+---------------------------------------------------
            | R18,R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19
-----+------+---------------------------------------------------
            | U3,V10,V11,V13,V19,V20,V3,V6,V7,V8,V9,W1,W10,W11
-----+------+---------------------------------------------------
            | W14,W15,W16,W21,W3,W4,W5,W6,W7,W8,W9,Y10,Y13,Y14
-----+------+---------------------------------------------------
            | Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  75.0| 150.0|  -  | R12
-----+------+------+-----+--------------------------------------
   2 |  75.0| 150.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   3 |  28.0|      |     | M15,M20,N19,N21
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_critical_tc1a

THE PERIOD FOR THIS TIMING SET IS:   77.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  80.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N20,N21,N3,N8,P10,P11,P14,P15
-----+------+---------------------------------------------------
            | P18,P19,P20,P9,R10,R11,R18,R19,R8,T18,T19,T20
-----+------+---------------------------------------------------
            | U19,U4,V10,V11,V13,V16,V19,V20,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------
   2 |  76.0| N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3,T4,U1,U3,V3
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  42.0|  50.0|  +  | W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |   0.0|  38.0|  -  | P13
-----+------+------+-----+--------------------------------------
   3 |  40.0|  50.0|  -  | R12
-----+------+------+-----+--------------------------------------
   4 |  10.0|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N20,N21,N3
-----+------+------+-----+--------------------------------------
                         | P10,P11,P15,P18,P19,P20,P9,R10,R11
-----+------+------+-----+--------------------------------------
                         | R13,R14,R18,R19,R8,R9,T18,T19,T20
-----+------+------+-----+--------------------------------------
                         | U18,U19,V10,V11,V13,V14,V15,V16,V17
-----+------+------+-----+--------------------------------------
                         | V18,V20,V7,V8,V9,W10,W11,W13,W16
-----+------+------+-----+--------------------------------------
                         | W17,W19,W5,W6,W7,W8,Y10,Y12,Y17,Y18
-----+------+------+-----+--------------------------------------
                         | Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------
   5 |  69.0|      |     | N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3
-----+------+------+-----+--------------------------------------
                         | T4,U1,U3,V3
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_mem_init_0000, hel_mem_init_5555,
                      hel_mem_init_AAAA, hel_mem_init_FFFF

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  60.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | Y2
-----+------+------+-----+--------------------------------------
   2 |  33.0|      |     | N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3
-----+------+------+-----+--------------------------------------
                         | T4,U1,U3,V3
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_mpu_diagnostic

THE PERIOD FOR THIS TIMING SET IS:   77.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  80.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  40.0|  50.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  40.0|  50.0|  -  | R12
-----+------+------+-----+--------------------------------------
   3 |  10.0|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E19
-----+------+------+-----+--------------------------------------
                         | E20,F19,G18,G19,G20,G21,G8,G9,H14
-----+------+------+-----+--------------------------------------
                         | H15,H18,H20,H7,H8,J14,J15,J18,J19
-----+------+------+-----+--------------------------------------
                         | K14,K15,K18,K19,L14,L15,L18,L19,M14
-----+------+------+-----+--------------------------------------
                         | M15,M20,N14,N15,N18,N19,N2,N20,N21
-----+------+------+-----+--------------------------------------
                         | N3,N4,N7,P10,P11,P15,P18,P19,P2,P20
-----+------+------+-----+--------------------------------------
                         | P4,P7,P8,P9,R10,R11,R13,R14,R18,R19
-----+------+------+-----+--------------------------------------
                         | R2,R3,R4,R8,R9,T18,T19,T2,T20,T3,T4
-----+------+------+-----+--------------------------------------
                         | U1,U18,U19,U3,V10,V11,V13,V14,V15
-----+------+------+-----+--------------------------------------
                         | V16,V17,V18,V20,V3,V7,V8,V9,W10,W11
-----+------+------+-----+--------------------------------------
                         | W13,W16,W17,W19,W5,W6,W7,W8,Y10,Y12
-----+------+------+-----+--------------------------------------
                         | Y17,Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_apll

THE PERIOD FOR THIS TIMING SET IS:   77.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  60.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | E19,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  33.0|      |     | N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3
-----+------+------+-----+--------------------------------------
                         | T4,U1,U3,V3
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_bist

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  38.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |   5.0|  20.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_omap_arm0_T1,
                      hel_tdl_omap_arm1_T1,
                      hel_tdl_omap_arm10_T1,
                      hel_tdl_omap_arm11_T1,
                      hel_tdl_omap_arm12_T1,
                      hel_tdl_omap_arm2_T1,
                      hel_tdl_omap_arm3_T1,
                      hel_tdl_omap_arm4_T1,
                      hel_tdl_omap_arm5_T1,
                      hel_tdl_omap_arm6_T1,
                      hel_tdl_omap_arm7_T1,
                      hel_tdl_omap_arm8_T1,
                      hel_tdl_omap_arm9_T1,
                      hel_tdl_omap_brte0_T1,
                      hel_tdl_omap_brte1_T1,
                      hel_tdl_omap_brte2_T1

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  35.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  10.0|  20.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_arm0_w0r0, hel_tdl_arm0_w0r1,
                      hel_tdl_arm0_w1r0, hel_tdl_arm1_w0r0,
                      hel_tdl_arm1_w0r1, hel_tdl_arm1_w1r0

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  38.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |   4.0|  20.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_arm4_w0r0, hel_tdl_arm4_w0r1,
                      hel_tdl_arm4_w1r0, hel_tdl_arm5_w0r0,
                      hel_tdl_arm5_w0r1, hel_tdl_arm5_w1r0,
                      hel_tdl_arm6_w0r0, hel_tdl_arm6_w0r1,
                      hel_tdl_arm6_w1r0

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  39.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |   3.0|  20.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_brte0_w0r0, hel_tdl_brte0_w0r1,
                      hel_tdl_brte0_w1r0, hel_tdl_brte1_w0r0,
                      hel_tdl_brte1_w0r1, hel_tdl_brte1_w1r0,
                      hel_tdl_brte2_w0r0, hel_tdl_brte2_w0r1,
                      hel_tdl_brte2_w1r0

THE PERIOD FOR THIS TIMING SET IS:   40.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  38.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |   5.0|  33.0|  +  | P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  10.0|  20.0|  -  | R12
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_vbus_detect

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  42.0| AA19
-----+------+---------------------------------------------------
   2 |  45.0| V16,W17
-----+------+---------------------------------------------------
   3 |  50.0| C9,G21,M20,N15,N18,N19,N21,R18,U19,Y13
-----+------+---------------------------------------------------
   4 |  51.0| AA13,AA17,H15,L14,P10,P15,R10,T18,T19,T20,V13,V8
-----+------+---------------------------------------------------
            | V9,W10,W16,W6,W7,Y10,Y5,Y6,Y9
-----+------+---------------------------------------------------
   5 |  52.0| B15,B8,B9,C10,C12,C8,D11,D12,G10,G11,G9,H10,M14
-----+------+---------------------------------------------------
            | P18,R19,V20,V7,W5
-----+------+---------------------------------------------------
   6 |  53.0| A17,A20,B19,B3,B4,B6,C13,C15,C16,C18,C19,C4,C5
-----+------+---------------------------------------------------
            | C6,C7,D10,D13,D14,D15,D16,D17,D18,D4,D5,D6,D7,D8
-----+------+---------------------------------------------------
            | G13,G8,H12,H13,H19,H8,M18,M7,N3,P14,R11,V10,V11
-----+------+---------------------------------------------------
            | V19,V4,W11,W21
-----+------+---------------------------------------------------
   7 |  54.0| B17,B21,C17,G14,H3,H4,J1,J14,J2,J3,J4,K14,K15
-----+------+---------------------------------------------------
            | K18,K19,K3,K4,K7,L3,L8,M4,M8,P9,R8,V6,W9,Y12,Y2
-----+------+---------------------------------------------------
   8 |  55.0| C20,C21,D19,D20,E18,F18,J15,J18,J19,L15,L18,L19
-----+------+---------------------------------------------------
            | M15,M19,N14,N20,P19,P20,Y4
-----+------+---------------------------------------------------
   9 |  56.0| AA15,Y14
-----+------+---------------------------------------------------
  10 |  57.0| W14,W4
-----+------+---------------------------------------------------
  11 |  58.0| P11,W15
-----+------+---------------------------------------------------
  12 |  59.0| A2,B14,C1,C11,C14,C3,D2,D3,D9,E3,E4,F3,F4,G12,G2
-----+------+---------------------------------------------------
            | G3,G4,H11,H9,J7,J8,K8,L4,L7,M3,N8,U4,W1,W2
-----+------+---------------------------------------------------
  13 |  60.0| N2,N7,P8,T4,U1,U3,W8,Y8
-----+------+---------------------------------------------------
  14 |  61.0| H18,N4,P2,P4,P7,R2,R3,R4,T2,T3,V3
-----+------+---------------------------------------------------
  15 |  62.0| AA5
-----+------+---------------------------------------------------
  16 |  72.0| W3
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | Y2
-----+------+------+-----+--------------------------------------
   2 |   6.0|      |     | V16,W17
-----+------+------+-----+--------------------------------------
   3 |  15.0|      |     | N15
-----+------+------+-----+--------------------------------------
   4 |  16.0|      |     | M20,N19,N21,U19
-----+------+------+-----+--------------------------------------
   5 |  17.0|      |     | AA13,G21,N18,T19,T20,W16
-----+------+------+-----+--------------------------------------
   6 |  18.0|      |     | AA17,H15,L14,P15,T18
-----+------+------+-----+--------------------------------------
   7 |  19.0|      |     | V13,V20,V8,W10,W6,W7,Y6,Y8
-----+------+------+-----+--------------------------------------
   8 |  20.0|      |     | AA9,E19,E20,F19,G18,G20,H14,H20,M14
-----+------+------+-----+--------------------------------------
                         | P10,R10,R13,R14,R19,R9,U18,V14,V17
-----+------+------+-----+--------------------------------------
                         | V18,V7,V9,W13,W18,W8,Y10,Y19,Y5
-----+------+------+-----+--------------------------------------
   9 |  22.0|      |     | R11,W11
-----+------+------+-----+--------------------------------------
  10 |  23.0|      |     | V10
-----+------+------+-----+--------------------------------------
  11 |  25.0|      |     | J14,J19,K14,K15,K18,K19,L19
-----+------+------+-----+--------------------------------------
  12 |  26.0|      |     | J15,J18,L15,L18,M15,N14,N20,P18
-----+------+------+-----+--------------------------------------
  13 |  27.0|      |     | P19,P20
-----+------+------+-----+--------------------------------------
  14 |  28.0|      |     | R8
-----+------+------+-----+--------------------------------------
  15 |  29.0|      |     | P9
-----+------+------+-----+--------------------------------------
  16 |  33.0|      |     | N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3
-----+------+------+-----+--------------------------------------
                         | T4,U1,U3,V3
-----+------+------+-----+--------------------------------------
  17 |  34.0|      |     | R18
-----+------+------+-----+--------------------------------------
  18 |  36.0|      |     | P11
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: hel_tdl_vbusdetect2

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  42.0| AA19
-----+------+---------------------------------------------------
   2 |  45.0| V16,W17
-----+------+---------------------------------------------------
   3 |  50.0| C9,G21,M20,N15,N18,N19,N21,R18,U19,Y13
-----+------+---------------------------------------------------
   4 |  51.0| AA13,AA17,H15,L14,P10,P15,R10,T18,T19,T20,V13,V8
-----+------+---------------------------------------------------
            | V9,W10,W16,W6,W7,Y10,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------
   5 |  52.0| B15,B8,B9,C10,C12,C8,D11,D12,G10,G11,G9,H10,M14
-----+------+---------------------------------------------------
            | P18,R19,V20,V7,W5
-----+------+---------------------------------------------------
   6 |  53.0| A17,A20,B19,B3,B4,B6,C13,C15,C16,C18,C19,C4,C5
-----+------+---------------------------------------------------
            | C6,C7,D10,D13,D14,D15,D16,D17,D18,D4,D5,D6,D7,D8
-----+------+---------------------------------------------------
            | G13,G8,H12,H13,H19,H8,M18,M7,N3,P14,R11,V10,V11
-----+------+---------------------------------------------------
            | V19,V4,W11,W21
-----+------+---------------------------------------------------
   7 |  54.0| B17,B21,C17,G14,H3,H4,J1,J14,J2,J3,J4,K14,K15
-----+------+---------------------------------------------------
            | K18,K19,K3,K4,K7,L3,L8,M4,M8,P9,R8,V6,W9,Y12,Y2
-----+------+---------------------------------------------------
   8 |  55.0| C20,C21,D19,D20,E18,F18,J15,J18,J19,L15,L18,L19
-----+------+---------------------------------------------------
            | M15,M19,N14,N20,P19,P20,Y4
-----+------+---------------------------------------------------
   9 |  56.0| AA15,Y14
-----+------+---------------------------------------------------
  10 |  57.0| W14,W4
-----+------+---------------------------------------------------
  11 |  58.0| P11,W15
-----+------+---------------------------------------------------
  12 |  59.0| A2,B14,C1,C11,C14,C3,D2,D3,D9,E3,E4,F3,F4,G12,G2
-----+------+---------------------------------------------------
            | G3,G4,H11,H9,J7,J8,K8,L4,L7,M3,N8,U4,W1,W2
-----+------+---------------------------------------------------
  13 |  60.0| N2,N7,P8,T4,U1,U3,W8
-----+------+---------------------------------------------------
  14 |  61.0| H18,N4,P2,P4,P7,R2,R3,R4,T2,T3,V3
-----+------+---------------------------------------------------
  15 |  62.0| AA5
-----+------+---------------------------------------------------
  16 |  67.0| W3
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  21.0|  42.0|  +  | Y2
-----+------+------+-----+--------------------------------------
   2 |   6.0|      |     | V16,W17
-----+------+------+-----+--------------------------------------
   3 |  15.0|      |     | N15
-----+------+------+-----+--------------------------------------
   4 |  16.0|      |     | M20,N19,N21,U19
-----+------+------+-----+--------------------------------------
   5 |  17.0|      |     | AA13,G21,N18,T19,T20,W16
-----+------+------+-----+--------------------------------------
   6 |  18.0|      |     | AA17,H15,L14,P15,T18
-----+------+------+-----+--------------------------------------
   7 |  19.0|      |     | R18,V13,V20,V8,W10,W6,W7,Y6,Y8
-----+------+------+-----+--------------------------------------
   8 |  20.0|      |     | AA9,E19,E20,F19,G18,G20,H14,H20,M14
-----+------+------+-----+--------------------------------------
                         | P10,R10,R13,R14,R19,R9,U18,V14,V17
-----+------+------+-----+--------------------------------------
                         | V18,V7,V9,W13,W18,W8,Y10,Y19,Y5
-----+------+------+-----+--------------------------------------
   9 |  22.0|      |     | R11,W11
-----+------+------+-----+--------------------------------------
  10 |  23.0|      |     | V10
-----+------+------+-----+--------------------------------------
  11 |  25.0|      |     | J14,J19,K14,K15,K18,K19,L19
-----+------+------+-----+--------------------------------------
  12 |  26.0|      |     | J15,J18,L15,L18,M15,N14,N20,P18
-----+------+------+-----+--------------------------------------
  13 |  27.0|      |     | P19,P20
-----+------+------+-----+--------------------------------------
  14 |  28.0|      |     | R8
-----+------+------+-----+--------------------------------------
  15 |  29.0|      |     | P9
-----+------+------+-----+--------------------------------------
  16 |  33.0|      |     | N2,N4,N7,P2,P4,P7,P8,R2,R3,R4,T2,T3
-----+------+------+-----+--------------------------------------
                         | T4,U1,U3,V3
-----+------+------+-----+--------------------------------------
  17 |  36.0|      |     | P11
-----+------+------+-----+--------------------------------------



TDL PATTERN SET NAME: omap_DPLL1, omap_DPLL1_div1, omap_DPLL2,
                      omap_DPLL3

THE PERIOD FOR THIS TIMING SET IS:   84.0 NS

             =====> OUTPUT STROBE GROUPS <=====
GROUP DELAY                   PIN NUMBERS
 NO.   (NS)
-----+------+---------------------------------------------------
   1 |  70.0| A17,A2,A20,AA13,AA15,AA17,AA19,AA5,B14,B15,B17
-----+------+---------------------------------------------------
            | B19,B21,B3,B4,B6,B8,B9,C1,C10,C11,C12,C13,C14
-----+------+---------------------------------------------------
            | C15,C16,C17,C18,C19,C20,C21,C3,C4,C5,C6,C7,C8,C9
-----+------+---------------------------------------------------
            | D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D2,D20
-----+------+---------------------------------------------------
            | D3,D4,D5,D6,D7,D8,D9,E18,E3,E4,F18,F3,F4,G10,G11
-----+------+---------------------------------------------------
            | G12,G13,G14,G2,G21,G3,G4,G8,G9,H10,H11,H12,H13
-----+------+---------------------------------------------------
            | H15,H18,H19,H3,H4,H8,H9,J1,J14,J15,J18,J19,J2,J3
-----+------+---------------------------------------------------
            | J4,J7,J8,K14,K15,K18,K19,K3,K4,K7,K8,L14,L15,L18
-----+------+---------------------------------------------------
            | L19,L3,L4,L7,L8,M14,M15,M18,M19,M20,M3,M4,M7,M8
-----+------+---------------------------------------------------
            | N14,N15,N18,N19,N2,N20,N21,N3,N4,N7,N8,P10,P11
-----+------+---------------------------------------------------
            | P14,P15,P18,P19,P2,P20,P4,P7,P8,P9,R10,R11,R18
-----+------+---------------------------------------------------
            | R19,R2,R3,R4,R8,T18,T19,T2,T20,T3,T4,U1,U19,U3
-----+------+---------------------------------------------------
            | U4,V10,V11,V13,V16,V19,V20,V3,V4,V6,V7,V8,V9,W1
-----+------+---------------------------------------------------
            | W10,W11,W14,W15,W16,W17,W2,W21,W3,W4,W5,W6,W7,W8
-----+------+---------------------------------------------------
            | W9,Y10,Y12,Y13,Y14,Y2,Y4,Y5,Y6,Y8,Y9
-----+------+---------------------------------------------------

             =====> INPUT DELAY GROUPS <=====
GROUP DELAY  WIDTH  POLAR         PIN NUMBERS
 NO.   (NS)   (NS)  (+/-)
-----+------+------+-----+--------------------------------------
   1 |  30.0|  42.0|  +  | E19,P13,W12,W18,Y2
-----+------+------+-----+--------------------------------------
   2 |  30.0|  42.0|  -  | R12
-----+------+------+-----+--------------------------------------
   3 |   5.7|      |     | AA13,AA17,AA20,AA5,AA9,B4,B6,B8,B9
-----+------+------+-----+--------------------------------------
                         | C4,C5,C6,C7,C8,C9,D5,D6,D7,D8,E20
-----+------+------+-----+--------------------------------------
                         | F19,G18,G19,G20,G21,G8,G9,H14,H15
-----+------+------+-----+--------------------------------------
                         | H18,H20,H7,H8,J14,J15,J18,J19,K14
-----+------+------+-----+--------------------------------------
                         | K15,K18,K19,L14,L15,L18,L19,M14,M15
-----+------+------+-----+--------------------------------------
                         | M20,N14,N15,N18,N19,N2,N20,N21,N3
-----+------+------+-----+--------------------------------------
                         | N4,N7,P10,P11,P15,P18,P19,P2,P20,P4
-----+------+------+-----+--------------------------------------
                         | P7,P8,P9,R10,R11,R13,R14,R18,R19,R2
-----+------+------+-----+--------------------------------------
                         | R3,R4,R8,R9,T18,T19,T2,T20,T3,T4,U1
-----+------+------+-----+--------------------------------------
                         | U18,U19,U3,V10,V11,V13,V14,V15,V16
-----+------+------+-----+--------------------------------------
                         | V17,V18,V20,V3,V7,V8,V9,W10,W11,W13
-----+------+------+-----+--------------------------------------
                         | W16,W17,W19,W5,W6,W7,W8,Y10,Y12,Y17
-----+------+------+-----+--------------------------------------
                         | Y18,Y19,Y5,Y6,Y8
-----+------+------+-----+--------------------------------------






*
*

*)


#include '/usr/tc/vusp/TIglobal.h' {503a} {ftrev03c}
#define $SITE_TESTWARE_VALIDATE 'TRUE'

#define $BICMOS_VOD 'TRUE'
#define $TYPES 'asic_types.include'
#include '$TYPES'


#define $PinScrambleEnabled 'true'

#define $PARTIAL_LBC_PINLISTSET 'LBC_TEST_PINS'
#define $USER_DEVICE_SORT 'TRUE'; {rev03b}

#define $Device_SPC 'TRUE'

#include '/usr/tc/vusp/custom/bicmos_types.include'


    error_msg_type = string[60];
    file_string_type		 = string[80];		
    time_string_type		 = string[8];		
    string_digit_type            = string[1];		

    data_string_type             = string[40];		
  pass_fail_string_type	       = string[4];
    command_string_type          = string[240];		
    outstring_type		 = string[1024];		
    date_string_type		 = string[9];
    string40			 = string[40];
    String180			 = string[80];
    qual_type_string		 = string[4];
    readpoint_type_string        = string[8];
  die_id_lot_nb_type  = array[1..7] of integer;	{rev02c}


Use

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
	'/usr/tc/vusp/custom/TWVar.p',
	'/usr/tc/vusp/custom/TWPDL.p',
 	'/usr/tc/vusp/custom/TestWare.p',
#endif
#endif
{...(rev03a)}

#ifdef $Site_SPC_flag then
#if $Site_SPC_flag then
#if $Device_SPC then
    '/usr/tc/vusp/custom/bicmos_errortrap.usp',
    '/usr/tc/vusp/temp1/common.usp',
    '/usr/tc/vusp/custom/bicmos.lib',
    'char_checkout_amit_mod.mod',
    '/u/vseries/routines/sysspc/dd_common.itp';
#else
    '/usr/tc/vusp/custom/bicmos_errortrap.usp',
    '/usr/tc/vusp/temp1/common.usp',
    'char_checkout_amit_mod.mod',
    '/usr/tc/vusp/custom/bicmos.lib';
#endif
#else
    'char_checkout_amit_mod.mod',
    '/usr/tc/vusp/custom/bicmos_errortrap.usp',
    '/usr/tc/vusp/temp1/common.usp',
    '/usr/tc/vusp/custom/bicmos.lib';
#endif
#else
    '/usr/tc/programs/itp_shmoo',
    'char_checkout_amit_mod.mod',
    '/usr/tc/vusp/custom/bicmos_errortrap.usp',
    '/usr/tc/vusp/temp1/common.usp',
    '/usr/tc/vusp/custom/bicmos.lib';
#endif


	

TOOLUSE '/usr/tc/programs/search_t',
        '/usr/tc/programs/search_v',
        '/usr/tc/programs/lbc/lbc';

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
#include'/usr/tc/vusp/custom/TWglobal.h';
#include'/usr/tc/vusp/custom/TWVar.h';
#endif
#endif   
{...(rev03a)}

var

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
      TWSummaryBins	: array[SummBType,BinNames] of BinNames; Import;
#endif
#endif                             
{...(rev03a)}

{DSP24}
    trange  :real;
    vrange  :real;
    
    AC_marg_nom :boolean;
    AC_marg_min :boolean;
    AC_marg_max :boolean;
    DC_marg_nom :boolean;
    DC_marg_min :boolean;
    DC_marg_max :boolean;
    AC_marg_min2:boolean;
    AC_marg_max2:boolean;
    DC_marg_min2:boolean;
    DC_marg_max2:boolean;
    ALL_SCAN 	:boolean;
    DPLL_OFF	:boolean;   
    vddshmoo    :boolean;
    vddshmoo_tlb:boolean;
    iddqshmoo  	:boolean;
    delayshmoo	:boolean;
    LU_Enable  	:boolean;
    ICCQ_LOG 	:boolean;
    QUAL_LEG   	:boolean;
    READ_POINT 	:boolean;
{DSP24}


    Sia, Sib, Sic, Sid, Sif, Sig, Sih : integer;
    Sra, Srb, Src, Srd, Srf, Srg, Srh : treal;
    file001, file002, file003, file004 : text;

    FREQARM, FREQDSP, FREQTC : treal;


    Tc005, Tc480, Tc490 : treal;
    Tcmgs, Tcup0, Tcut0 : treal;
    Tcqh0, Tctd0, Tcv10 : treal;

    xs: treal;
    Flagstop	      : integer;

    pos_fail                       : boolean;
    neg_fail                       : boolean;
    post_fail_V                    : boolean;
    CR                             : Char;
    UPMU_NUM                       : Option;
    DeviceStatus, Blazing_Speed, Athena_Speed_1    : boolean;
    STACK_HF_TEST1, STACK_HF_TEST2    : boolean;
    OK_Speed			   : boolean;
    ICCQ1, ICCQ2		   : treal;
    iccq_dlog			   : text;
    log_file			   : text;
    ICCQ_VDD1, ICCQ_VDD1_PST       : treal; {rev03c}
    ICCQ_VDD2, ICCQ_VDD4           : treal; {rev03c}
    ICCQ_VDDSHV1, ICCQ_VDDSHV2     : treal; {rev03c}
    ICCQ_VDDSHV4, ICCQ_VDDSHV5     : treal; {rev03c}
    ICCQ_VDDSHV6                   : treal; {rev03c}
    ICCQ_VDDSHV                    : treal; {rev08c}
    Pass_Opens, Pass_Shorts	   : boolean;
    vddsearch			   : boolean;
    sms_lot_string		   : data_string_type;
    data_file			   : text;
    qual_string			   : qual_type_string;
    readpoint_string		   : readpoint_type_string;
    PreviousWafer_number,
    PreviousLot_number             : data_string_type;

    Status1			   : integer;
    Search_VMin                    : Boolean;
    Search_VMax                    : Boolean;
    Search_Speed                   : Boolean;
    Iddq_char			   : Boolean;
    Datalog_status		   : Boolean;
    use_die_id			   : Boolean;
    string_waferid_scribe          : data_string_type;


    device_string, Package_string  : data_string_type;
    test_program_string            : data_string_type;
    Product                        : data_string_type;
    PC_string                      : data_string_type;
    testhead_string		   : data_string_type;
    search_value_string		   : data_string_type;
    TestType			   : data_string_type;


    ICCQ_VDD2_PST                  : treal; {rev03e}
    TOTAL_ICCQ_FJ_1p5                  : treal; {rev15a}
    SearchValue			   : treal; Import;
    vboxmin_fail, vboxmax_fail,
    vmin_fail, vmax_fail	   : boolean;

    command_file_id                : command_string_type;
    command_file_path		   : command_string_type;
    command_date_path		   : command_string_type;
    command_time		   : command_string_type;

{(rev02c)...}
    valid_die_id                   : boolean; {rev02c}
	short_pgm                  : boolean;
    die_id_x                       : integer; Export;
    die_id_y                       : integer; Export; 
    die_id_wafer_nb                : integer; Export; 
    die_id_lot_nb                  : integer; Export; 
    die_id_fab                     : integer; Export; 
    die_id_ram_repair              : integer; Export; 
    wafer_prefix_string		   : data_string_type;
    lotnumber			   : integer;

    lot_number_string,
    wafer_number_string,
    lot1_number_string             : data_string_type;
    die_id_wafer_nb_string	   : data_string_type;
    die_id_lot_nb_string	   : data_string_type;
    lot_nb_string		   : string[10];

    die_id_lot_nb1                 : integer; Export; 
    die_id_lot_nb_arr		   : die_id_lot_nb_type;
    x,z,div1,mod1		   : integer;
    TWc	     		           : string[20];
    die_id_waferid 		   : string[20];
    die_id_x_string,
    die_id_y_string		   : data_string_type;
{...(rev02c)}

{(rev03b)...}
    usn_value, bin_num		   : integer;
    Log_Iddq                       : Boolean;
    ds_string    		   : data_string_type;
    ES25_RESULT    		   : pass_fail_string_type;
{...(rev03b)}

    Dut_Map                        : DutToChanArrayType;
    DiffArray                      : DiffArrayType;
    ICCQ_TEST_RESULT               : boolean;
    ICCQ_value                     : treal;
    ICCQ_READ                      : treal;
    ICCQ_MIN_ARR, ICCQ_MAX_ARR     : Limit_Array;

{kjog 8/16}
    ICCQSUPSHRT_MIN_ARR            : Limit_Array;
    ICCQSUPSHRT_MAX_ARR            : Limit_Array;
    ICCQSUPSHRT_RANGE_ARR          : Limit_Array;

    ICCQSUPSHRT_MIN                : treal;
    ICCQSUPSHRT_MAX                : treal;
    ICCQSUPSHRT_RANGE              : treal;
{kjog 8/16}

    ICCQ_CMIN_ARR, ICCQ_CMAX_ARR     : Limit_Array;
    ICCQ_IMIN_ARR, ICCQ_IMAX_ARR     : Limit_Array;
    ICCQ_DMIN_ARR, ICCQ_DMAX_ARR     : Limit_Array;
    ICCQ_AMIN_ARR, ICCQ_AMAX_ARR     : Limit_Array; {hijirev10h}
    ICCQ_MIN, ICCQ_MAX             : treal; Export;
    ICCQ_CMIN, ICCQ_CMAX             : treal; Export;
    ICCQ_IMIN, ICCQ_IMAX             : treal; Export;
    ICCQ_DMIN, ICCQ_DMAX             : treal; Export;
    ICCQ_AMIN, ICCQ_AMAX             : treal; Export; {hijirev10h}
    DELAY_MIN, DELAY_MAX           : treal; Export;
    COMP_DLY1, COMP_DLY2           : Option; Export;
    ICCQ_RANGE_ARR                 : Limit_Array;
    ICCQ_CRANGE_ARR                 : Limit_Array;
    ICCQ_IRANGE_ARR                 : Limit_Array;
    ICCQ_DRANGE_ARR                 : Limit_Array;
    ICCQ_ARANGE_ARR                 : Limit_Array; {hijirev10h}
    ICCQ_RANGE                     : treal;
    ICCQ_CRANGE                     : treal;
    ICCQ_IRANGE                     : treal;
    ICCQ_DRANGE                     : treal;
    ICCQ_ARANGE                     : treal;  {hijirev10h}
    ICCQ29_MIN_ARR, ICCQ29_MAX_ARR   : Limit_Array;
    ICCQ29_RANGE_ARR   : Limit_Array;
    ICCQ29_MIN, ICCQ29_MAX   : treal;
    ICCQ29_RANGE   : treal;
    ICCQ30_MIN_ARR, ICCQ30_MAX_ARR   : Limit_Array;
    ICCQ30_RANGE_ARR   : Limit_Array;
    ICCQ30_MIN, ICCQ30_MAX   : treal;
    ICCQ30_RANGE   : treal;
    ICCQ31_MIN_ARR, ICCQ31_MAX_ARR   : Limit_Array;
    ICCQ31_RANGE_ARR   : Limit_Array;
    ICCQ31_MIN, ICCQ31_MAX   : treal;
    ICCQ31_RANGE   : treal;
    ICCQ32_MIN_ARR, ICCQ32_MAX_ARR   : Limit_Array;
    ICCQ32_RANGE_ARR   : Limit_Array;
    ICCQ32_MIN, ICCQ32_MAX   : treal;
    ICCQ32_RANGE   : treal;
    ICCQ33_MIN_ARR, ICCQ33_MAX_ARR   : Limit_Array;
    ICCQ33_RANGE_ARR   : Limit_Array;
    ICCQ33_MIN, ICCQ33_MAX   : treal;
    ICCQ33_RANGE   : treal;
    ICCQ34_MIN_ARR, ICCQ34_MAX_ARR   : Limit_Array;
    ICCQ34_RANGE_ARR   : Limit_Array;
    ICCQ34_MIN, ICCQ34_MAX   : treal;
    ICCQ34_RANGE   : treal;
    ICCQ35_MIN_ARR, ICCQ35_MAX_ARR   : Limit_Array;
    ICCQ35_RANGE_ARR   : Limit_Array;
    ICCQ35_MIN, ICCQ35_MAX   : treal;
    ICCQ35_RANGE   : treal;
    ICCQ36_MIN_ARR, ICCQ36_MAX_ARR   : Limit_Array;
    ICCQ36_RANGE_ARR   : Limit_Array;
    ICCQ36_MIN, ICCQ36_MAX   : treal;
    ICCQ36_RANGE   : treal;
    ICCQ37_MIN_ARR, ICCQ37_MAX_ARR   : Limit_Array;
    ICCQ37_RANGE_ARR   : Limit_Array;
    ICCQ37_MIN, ICCQ37_MAX   : treal;
    ICCQ37_RANGE   : treal;
    ICCQ38_MIN_ARR, ICCQ38_MAX_ARR   : Limit_Array;
    ICCQ38_RANGE_ARR   : Limit_Array;
    ICCQ38_MIN, ICCQ38_MAX   : treal;
    ICCQ38_RANGE   : treal;
    ICCQ39_MIN_ARR, ICCQ39_MAX_ARR   : Limit_Array;
    ICCQ39_RANGE_ARR   : Limit_Array;
    ICCQ39_MIN, ICCQ39_MAX   : treal;
    ICCQ39_RANGE   : treal;
    ICCQ40_MIN_ARR, ICCQ40_MAX_ARR   : Limit_Array;
    ICCQ40_RANGE_ARR   : Limit_Array;
    ICCQ40_MIN, ICCQ40_MAX   : treal;
    ICCQ40_RANGE   : treal;

    (*  VIHVIL DRIVEHI, DRIVELO VARS  *)
    VIHCMOSa3V_VMAX_ARR     : Limit_Array;
    VILCMOSa3V_VMAX_ARR     : Limit_Array;
    VIHCMOSa3V_VMIN_ARR     : Limit_Array;
    VILCMOSa3V_VMIN_ARR     : Limit_Array;
    VIHCMOSa3V_VMAX,VILCMOSa3V_VMAX        : treal;
    VIHCMOSa3V_VMIN,VILCMOSa3V_VMIN        : treal;

{rev08a...}
    VIHCMOSa18V_VMAX_ARR     : Limit_Array;
    VILCMOSa18V_VMAX_ARR     : Limit_Array;
    VIHCMOSa18V_VMIN_ARR     : Limit_Array;
    VILCMOSa18V_VMIN_ARR     : Limit_Array;
    VIHCMOSa18V_VMAX,VILCMOSa18V_VMAX        : treal;
    VIHCMOSa18V_VMIN,VILCMOSa18V_VMIN        : treal;
{...rev08a}

    VIHOSC1V_VMAX_ARR     : Limit_Array;
    VILOSC1V_VMAX_ARR     : Limit_Array;
    VIHOSC1V_VMIN_ARR     : Limit_Array;
    VILOSC1V_VMIN_ARR     : Limit_Array;
    VIHOSC1V_VMAX,VILOSC1V_VMAX        : treal;
    VIHOSC1V_VMIN,VILOSC1V_VMIN        : treal;
    IIH_MIN_ARR, IIH_MAX_ARR       : Limit_Array;
    IIH_MIN, IIH_MAX               : treal;
    IIL_MIN_ARR, IIL_MAX_ARR       : Limit_Array;
    IIL_MIN, IIL_MAX               : treal;
    IIH_SINK_ARR, IIH_SOURCE_ARR   : Limit_Array;
    IIH_SINK, IIH_SOURCE           : treal;
    IIL_SINK_ARR, IIL_SOURCE_ARR   : Limit_Array;
    IIL_SINK, IIL_SOURCE           : treal;
    IIHD1_MIN_ARR, IIHD1_MAX_ARR   : Limit_Array;
    IIHD1_SINK_ARR, IIHD1_SOURCE_ARR : Limit_Array;
    IIHD1_MIN, IIHD1_MAX           : treal;
    IIHD1_SINK, IIHD1_SOURCE : treal;
    IIHD1_ENABLED : boolean;
    IIHD2_MIN_ARR, IIHD2_MAX_ARR   : Limit_Array;
    IIHD2_SINK_ARR, IIHD2_SOURCE_ARR : Limit_Array;
    IIHD2_MIN, IIHD2_MAX           : treal;
    IIHD2_SINK, IIHD2_SOURCE : treal;
    IIHD2_ENABLED : boolean;
    Osc_R_State                              : integer;
    VOHL_MIN_ARR, VOLL_MAX_ARR     : Limit_Array;
    VOHL_MIN, VOLL_MAX             : treal;
    VOHL_MAX_ARR                   : Limit_Array;
    VOHL_MAX                       : treal;
    VOHL3V_MIN_ARR, VOLL3V_MAX_ARR : Limit_Array;
    VOHL3V_MIN, VOLL3V_MAX         : treal;
    VOHL3V_MAX_ARR                         : Limit_Array;
    VOHL3V_MAX                             : treal;
{rev08a...}
    VOHL18V_MIN_ARR, VOLL18V_MAX_ARR : Limit_Array;
    VOHL18V_MIN, VOLL18V_MAX         : treal;
{...rev08a}
    VIDUSB3V_ARR                        : Limit_Array;
    VIDUSB3V                            : treal;
    IIHIO_MIN_ARR, IIHIO_MAX_ARR     : Limit_Array;
    IIHIO_MIN, IIHIO_MAX             : treal;
    IILIO_MIN_ARR, IILIO_MAX_ARR     : Limit_Array;
    IILIO_MIN, IILIO_MAX             : treal;
    IIHIO_SINK_ARR, IIHIO_SOURCE_ARR : Limit_Array;
    IIHIO_SINK, IIHIO_SOURCE         : treal;
    IILIO_SINK_ARR, IILIO_SOURCE_ARR : Limit_Array;
    IILIO_SINK, IILIO_SOURCE         : treal;
    IOHD1_MIN_ARR, IOHD1_MAX_ARR   : Limit_Array;
    IOHD1_SINK_ARR, IOHD1_SOURCE_ARR : Limit_Array;
    IOHD1_MIN, IOHD1_MAX           : treal;
    IOHD1_SINK, IOHD1_SOURCE : treal;
    IOLP1_MIN_ARR, IOLP1_MAX_ARR   : Limit_Array;
    IOLP1_SINK_ARR, IOLP1_SOURCE_ARR : Limit_Array;
    IOLP1_MIN, IOLP1_MAX           : treal;
    IOLP1_SINK, IOLP1_SOURCE : treal;
    IOLP2_MIN_ARR, IOLP2_MAX_ARR   : Limit_Array;
    IOLP2_SINK_ARR, IOLP2_SOURCE_ARR : Limit_Array;
    IOLP2_MIN, IOLP2_MAX           : treal;
    IOLP2_SINK, IOLP2_SOURCE : treal;
    IIHCMOSa3V_MIN_ARR, IIHCMOSa3V_MAX_ARR   : Limit_Array;
    IILCMOSa3V_MIN_ARR, IILCMOSa3V_MAX_ARR   : Limit_Array;
    IIHCMOSa3V_MIN, IIHCMOSa3V_MAX           : treal;
    IILCMOSa3V_MIN, IILCMOSa3V_MAX           : treal;
    IIHCMOSa3V_FORCEV_ARR, IILCMOSa3V_FORCEV_ARR   : Limit_Array;
    IIHCMOSa3V_FORCEV, IILCMOSa3V_FORCEV           : treal;
    IIHCMOSa3V_SINK_ARR, IIHCMOSa3V_SOURCE_ARR   : Limit_Array;
    IIHCMOSa3V_SINK, IIHCMOSa3V_SOURCE           : treal;
    IILCMOSa3V_SINK_ARR, IILCMOSa3V_SOURCE_ARR   : Limit_Array;
    IILCMOSa3V_SINK, IILCMOSa3V_SOURCE           : treal;
    IIHIOCMOSa3V_MIN_ARR, IIHIOCMOSa3V_MAX_ARR   : Limit_Array;
    IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_MAX           : treal;
    IIHIOCMOSa3V_FORCEV_ARR       : Limit_Array;
    IIHIOCMOSa3V_FORCEV           : treal;
{rev08a...}
    IIHIOCMOSa18V_FORCEV_ARR       : Limit_Array;
    IIHIOCMOSa18V_FORCEV           : treal;
{...rev08a}
    IIHIOCMOSa3V_SINK_ARR, IIHIOCMOSa3V_SOURCE_ARR   : Limit_Array;
    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE           : treal;
    IILIOCMOSa3V_MIN_ARR, IILIOCMOSa3V_MAX_ARR   : Limit_Array;
    IILIOCMOSa3V_MIN, IILIOCMOSa3V_MAX           : treal;
    IILIOCMOSa3V_FORCEV_ARR       : Limit_Array;
    IILIOCMOSa3V_FORCEV           : treal;
    IILIOCMOSa3V_SINK_ARR, IILIOCMOSa3V_SOURCE_ARR   : Limit_Array;
    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE           : treal;
    VOHCMOSa3V_MIN_ARR, VOHCMOSa3V_MAX_ARR   : Limit_Array;
    VOLCMOSa3V_MIN_ARR, VOLCMOSa3V_MAX_ARR   : Limit_Array;
    VOHCMOSa3V_MIN, VOHCMOSa3V_MAX           : treal;
    VOLCMOSa3V_MIN, VOLCMOSa3V_MAX           : treal;
    VOHCMOSa3V_FORCEV_ARR, VOLCMOSa3V_FORCEV_ARR   : Limit_Array;
    VOHCMOSa3V_FORCEV, VOLCMOSa3V_FORCEV           : treal;

{rev08a...}
    VOHCMOSa18V_MIN_ARR, VOHCMOSa18V_MAX_ARR   : Limit_Array;
    VOHCMOSa18V_MIN, VOHCMOSa18V_MAX           : treal;
    VOHCMOSa18V_FORCEV_ARR                    : Limit_Array;
    VOHCMOSa18V_FORCEV                        : treal;
{...rev08a}

    IIHOSC1V_MIN_ARR, IIHOSC1V_MAX_ARR   : Limit_Array;
    IILOSC1V_MIN_ARR, IILOSC1V_MAX_ARR   : Limit_Array;
    IIHOSC1V_MIN, IIHOSC1V_MAX           : treal;
    IILOSC1V_MIN, IILOSC1V_MAX           : treal;
    IIHOSC1V_FORCEV_ARR, IILOSC1V_FORCEV_ARR   : Limit_Array;
    IIHOSC1V_FORCEV, IILOSC1V_FORCEV           : treal;
    IIHOSC1V_SINK_ARR, IIHOSC1V_SOURCE_ARR   : Limit_Array;
    IIHOSC1V_SINK, IIHOSC1V_SOURCE           : treal;
    IILOSC1V_SINK_ARR, IILOSC1V_SOURCE_ARR   : Limit_Array;
    IILOSC1V_SINK, IILOSC1V_SOURCE           : treal;

    IIHIOOSC1V_MIN_ARR, IIHIOOSC1V_MAX_ARR   : Limit_Array;
    IIHIOOSC1V_MIN, IIHIOOSC1V_MAX           : treal;
    IIHIOOSC1V_FORCEV_ARR       : Limit_Array;
    IIHIOOSC1V_FORCEV           : treal;
    IIHIOOSC1V_SINK_ARR, IIHIOOSC1V_SOURCE_ARR   : Limit_Array;
    IIHIOOSC1V_SINK, IIHIOOSC1V_SOURCE           : treal;
    IILIOOSC1V_MIN_ARR, IILIOOSC1V_MAX_ARR   : Limit_Array;
    IILIOOSC1V_MIN, IILIOOSC1V_MAX           : treal;
    IILIOOSC1V_FORCEV_ARR       : Limit_Array;
    IILIOOSC1V_FORCEV           : treal;
    IILIOOSC1V_SINK_ARR, IILIOOSC1V_SOURCE_ARR   : Limit_Array;
    IILIOOSC1V_SINK, IILIOOSC1V_SOURCE           : treal;

    VOHOSC1V_MIN_ARR, VOHOSC1V_MAX_ARR   : Limit_Array;
    VOLOSC1V_MIN_ARR, VOLOSC1V_MAX_ARR   : Limit_Array;
    VOHOSC1V_MIN, VOHOSC1V_MAX           : treal;
    VOLOSC1V_MIN, VOLOSC1V_MAX           : treal;
    VOHOSC1V_FORCEV_ARR, VOLOSC1V_FORCEV_ARR   : Limit_Array;
    VOHOSC1V_FORCEV, VOLOSC1V_FORCEV           : treal;
    VOHUSB3V_MIN_ARR, VOHUSB3V_MAX_ARR   : Limit_Array;
    VOLUSB3V_MIN_ARR, VOLUSB3V_MAX_ARR   : Limit_Array;
    VOHUSB3V_MIN, VOHUSB3V_MAX           : treal;
    VOLUSB3V_MIN, VOLUSB3V_MAX           : treal;
    VOHUSB3V_FORCEV_ARR, VOLUSB3V_FORCEV_ARR   : Limit_Array;
    VOHUSB3V_FORCEV, VOLUSB3V_FORCEV           : treal;

    I1MA_ARR            : Limit_Array;
    I1MA                : treal;
    I2MA_ARR            : Limit_Array;
    I2MA                : treal;
    I4MA_ARR            : Limit_Array;
    I4MA                : treal;
    I8MA_ARR            : Limit_Array;
    I8MA                : treal;

    PS_VDDSHV4     : Option;
    PS_GND     : Option;
    PS_VDDSHV6     : Option;
    PS_VDDSHV2     : Option;
    PS_VDDSHV5     : Option;
    PS_VDDSHV8     : Option;
    PS_VDDSHV9     : Option;
    PS_VDDSHV7     : Option;
    PS_VDDSHV3     : Option;
    PS_VDDSHV1     : Option;
    PS_VDDSHV     : Option;
    PS_VDD1     : Option;
    PS_VDD     : Option;
    PS_VPP     : Option;
    PS_VDD2     : Option;
    PS_VDD3     : Option;
    PS_VDD4     : Option;
    PS_VDDA     : Option;


    SuppliesUsed  : SupplyInfoType; Export;

    TGB_ARR                        : Limit_Array;
    TGB                            : treal;
    PROPGB_ARR                     : Limit_Array;
    PROPGB                         : treal;

    VNM1V                  : treal;
    VMX1V                  : treal;
    VMN1V                  : treal;

    VTMX1V                 : treal;
    VTMX1V_LV                 : treal;
    VTMN1V                 : treal;
    VGOI1V                 : treal;

    VNM3V                  : treal;
    VMX3V                  : treal;
    VMN3V                  : treal;
    VGOI18V                  : treal; 
    VTNM18V                  : treal; 
    VOUT18V                : treal;
    VTMX3V                 : treal;
    VTMN3V                 : treal;
    VGOI3V                 : treal;
    
    VMX1V_I		: treal;
    VMX3V_I		: treal;
    
    VOSC1V : treal;
    VOSC3V : treal; 
    
     VMN1V_VIHL,  VMN3V_VIHL, VMX1V_VIHL, VMX3V_VIHL: treal;


(************* ADDED BY insert_code.pl SCRIPT   **********************)
    VMN1LV                 : treal;
(************* END OF CODE ADDED BY insert_code.pl SCRIPT   **********)


    VNM2V               : treal;
    VMX2V               : treal;
    VMN2V               : treal;
    VTNM2V              : treal;
    VTMX2V              : treal;
    VTMN2V              : treal;
    VGOI2V              : treal;

    VFREQS1V              : treal;
    VFREQS3V              : treal;


  TEST_RESULT :boolean;

vboxmin_pass, vboxmax_pass :boolean;



    t_range : treal;
    v_range : treal;
    VMINF, VMAXF, VSTEPF   : treal;
    VMINI, VMAXI, VSTEPI   : treal;
    VMIND, VMAXD, VSTEPD   : treal;
    TMINF, TMAXF, TSTEPF   : treal; {rev01f}

{ ### QUAL VARIABLES ### }

AVMINPRE090, AVMINPRE080, AVMINPRE010 : TReal;
AVMINPRE120, AVMINPRE130, AVMINPRE140 : TReal;
AVMINPRE150, AVMINPRE160, AVMINPRE170 : TReal; 
AVMINPRE310, AVMINPRE320, AVMINPRE330 : TReal;
AVMINPRE340, AVMINPRE350, AVMINPRE360 : TReal;
AVMINPRE370, AVMINPRE380, AVMINPRE390 : TReal;
AVMINPRE400, AVMINPRE030, AVMINPRE040 : TReal;
AVMINPRE230, AVMINPRE110, AVMINPRE190 : TReal;
AVMINPRE200, AVMINPRE210, AVMINPRE220, 
AVMINPRE240 : TReal;
AVMINPRE250, AVMINPRE260, AVMINPRE270 : TReal;
AVMINPRE280, AVMINPRE290, AVMINPRE300 : TReal;
AVMINPOST090   : TReal;
AVMINPOST080   : TReal;
AVMINPOST010   : TReal;
AVMINPOST120   : TReal;
AVMINPOST130   : TReal;
AVMINPOST140   : TReal;
AVMINPOST150   : TReal;
AVMINPOST160   : TReal;
AVMINPOST170   : TReal;
AVMINPOST310   : TReal;
AVMINPOST320   : TReal;
AVMINPOST330   : TReal;
AVMINPOST340   : TReal;
AVMINPOST350   : TReal;
AVMINPOST360   : TReal;
AVMINPOST370   : TReal;
AVMINPOST380   : TReal;
AVMINPOST390   : TReal;
AVMINPOST400   : TReal;
AVMINPOST030   : TReal;
AVMINPOST040   : TReal;
AVMINPOST230   : TReal;
AVMINPOST110   : TReal;
AVMINPOST190   : TReal;
AVMINPOST200   : TReal;
AVMINPOST210   : TReal;
AVMINPOST220   : TReal;
AVMINPOST240   : TReal;
AVMINPOST250   : TReal;
AVMINPOST260   : TReal;
AVMINPOST270   : TReal;
AVMINPOST280   : TReal;
AVMINPOST290   : TReal;
AVMINPOST300   : TReal;
MVMINPREDR0, MVMINPREDS0, MVMINPREMM0 : TReal;
MVMINPREMN0, MVMINPREKZ0, MVMINPREKZ1 : TReal;
MVMINPOSTDR0, MVMINPOSTDS0, MVMINPOSTMM0 : TReal;
MVMINPOSTMN0, MVMINPOSTKZ0, MVMINPOSTKZ1 : TReal;

MVMINPRER901, MVMINPREL60, MVMINPRELY0 : TReal;
MVMINPREM20, MVMINPREM60, MVMAXPRER90 : TReal;
MVMINPRER902, MVMINPRER903 : Treal;
CVMINPREA20     : TReal;
CVMINPREH80     : TReal;
CVMINPREAF0     : TReal;
CVMINPREHL0     : TReal;
CVMINPREA10     : TReal;
CVMINPREH70     : TReal;
CVMINPREBY0     : TReal;
CVMINPREJ40     : TReal;
CVMINPREC40     : TReal;
CVMINPREJA0     : TReal;
CVMINPRE490     : TReal;
CVMINPRE500     : TReal;
CVMINPRE510     : TReal;
CVMINPRE520     : TReal;
CVMINPREPB0     : TReal;
CVMINPREPC0     : TReal;
CVMINPREPD0     : TReal;
CVMINPOSTA20    : TReal;
CVMINPOSTH80    : TReal;
CVMINPOSTAF0    : TReal;
CVMINPOSTHL0    : TReal;
CVMINPOSTA10    : TReal;
CVMINPOSTH70    : TReal;
CVMINPOSTBY0    : TReal;
CVMINPOSTJ40    : TReal;
CVMINPOSTC40    : TReal;
CVMINPOSTJA0    : TReal;
CVMINPOST490    : TReal;
CVMINPOST500    : TReal;
CVMINPOST510    : TReal;
CVMINPOST520    : TReal;
CVMINPOSTPB0    : TReal;
CVMINPOSTPC0    : TReal;
CVMINPOSTPD0    : TReal;
CFREQPREA20     : TReal;
CFREQPREH80  	  : TReal;
CFREQPREAF0  	  : TReal;
CFREQPREHL0  	  : TReal;
CFREQPREA10  	  : TReal;
CFREQPREH70  	  : TReal;
CFREQPREBY0  	  : TReal;
CFREQPREJ40  	  : TReal;
CFREQPREC40  	  : TReal;
CFREQPREJA0  	  : TReal;
CFREQPRE490  	  : TReal;
CFREQPRE500  	 : TReal;
CFREQPRE510  	 : TReal;
CFREQPRE520  	 : TReal;
CFREQPOSTA20 	 : TReal;
CFREQPOSTH80 	 : TReal;
CFREQPOSTAF0 	 : TReal;
CFREQPOSTHL0 	 : TReal;
CFREQPOSTA10 	 : TReal;
CFREQPOSTH70 	 : TReal;
CFREQPOSTBY0 	 : TReal;
CFREQPOSTJ40 	 : TReal;
CFREQPOSTC40 	 : TReal;
CFREQPOSTJA0 	 : TReal;
CFREQPOST490 	 : TReal;
CFREQPOST500 	  : TReal;
CFREQPOST510	  : TReal;
CFREQPOST520	   : TReal;
CFREQPREPB0	: Treal;
CFREQPREPC0	: Treal;
CFREQPREPD0	: Treal;
CFREQPOSTPB0	: Treal;
CFREQPOSTPC0	: Treal;
CFREQPOSTPD0	: Treal;
MDELTADR0, MDELTADS0, MDELTAMM0 : TReal;
MDELTAMN0, MDELTAKZ0, MDELTAKZ1 : TReal;
MDELTADP0, MVMINPREDP0, MVMINPOSTDP0 : TReal;
MDELTADQ0, MVMINPREDQ0, MVMINPOSTDQ0 : TReal;
MDELTAML0, MVMINPREML0, MVMINPOSTML0 : TReal;
MDELTAMK0, MVMINPREMK0, MVMINPOSTMK0 : TReal;
ADELTA090   : TReal;
ADELTA080   : TReal;
ADELTA010   : TReal;
ADELTA120   : TReal;
ADELTA130   : TReal;
ADELTA140   : TReal;
ADELTA150   : TReal;
ADELTA160   : TReal;
ADELTA170   : TReal;
ADELTA310   : TReal;
ADELTA320   : TReal;
ADELTA330   : TReal;
ADELTA340   : TReal;
ADELTA350   : TReal;
ADELTA360   : TReal;
ADELTA370   : TReal;
ADELTA380   : TReal;
ADELTA390   : TReal;
ADELTA400   : TReal;
ADELTA030   : TReal;
ADELTA040   : TReal;
ADELTA230   : TReal;
ADELTA110   : TReal;
ADELTA190   : TReal;
ADELTA200   : TReal;
ADELTA210   : TReal;
ADELTA220   : TReal;
ADELTA240   : TReal;
ADELTA250   : TReal;
ADELTA260   : TReal;
ADELTA270   : TReal;
ADELTA280   : TReal;
ADELTA290   : TReal;
ADELTA300   : TReal;
CDELTAA20 :  TReal;
CDELTAH80 :  TReal;
CDELTAAF0 :  TReal;
CDELTAHL0 :  TReal;
CDELTAA10 :  TReal;
CDELTAH70 :  TReal;
CDELTABY0 :  TReal;
CDELTAJ40 :  TReal;
CDELTAC40 :  TReal;
CDELTAJA0 :  TReal;
CDELTA490 :  TReal;
CDELTA500 :  TReal;
CDELTA510 :  TReal;
CDELTA520 :  TReal;
CDELTAPB0 :  TReal;
CDELTAPC0 :  TReal;
CDELTAPD0 :  TReal;



{ ### VARIABLES FOR QUAL ICCQ ### }
QICCQ_VDD2 : TReal;
QVTMX1V : TReal;
QVTMX3V : TReal;
QICCQ_VDD2_PST : TReal;
QICCQ_VDD4 : TReal;
QICCQ_VDD1 : TReal;
QICCQ_VDDSHV1 : TReal;
QUAL_PRE_ICCQ : boolean;
BIN2FREQS : boolean;
BIN3FREQS : boolean;
PM391P5VDD2PRE     : TReal;
PM391P5VDD21PRE    : TReal;
PM391P5VDD4PRE     : TReal;
PM391P5VDD1PRE     : TReal;
PM391P5VDDSHVPRE   : TReal;
PM391P1VDD2PRE     : TReal;
PM391P1VDD21PRE    : TReal;
PM391P1VDD4PRE     : TReal;
PM391P1VDD1PRE     : TReal;
PM391P1VDDSHVPRE   : TReal;
PM401P5VDD2PRE     : TReal;
PM401P5VDD21PRE    : TReal;
PM401P5VDD4PRE     : TReal;
PM401P5VDD1PRE     : TReal;
PM401P5VDDSHVPRE   : TReal;
PM401P1VDD2PRE     : TReal;
PM401P1VDD21PRE    : TReal;
PM401P1VDD4PRE     : TReal;
PM401P1VDD1PRE     : TReal;
PM401P1VDDSHVPRE   : TReal;
PM381P5VDD2PRE     : TReal;
PM381P5VDD21PRE    : TReal;
PM381P5VDD4PRE     : TReal;
PM381P5VDD1PRE     : TReal;
PM381P5VDDSHVPRE   : TReal;
PM371P5VDD2PRE     : TReal;
PM371P5VDD21PRE    : TReal;
PM371P5VDD4PRE     : TReal;
PM371P5VDD1PRE     : TReal;
PM371P5VDDSHVPRE     : TReal;
PM361P5VDD2PRE       : TReal;
PM361P5VDD21PRE      : TReal;
PM361P5VDD4PRE       : TReal;
PM361P5VDD1PRE       : TReal;
PM361P5VDDSHVPRE     : TReal;
PM351P5VDD2PRE       : TReal;
PM351P5VDD21PRE      : TReal;
PM351P5VDD4PRE       : TReal;
PM351P5VDD1PRE       : TReal;
PM351P5VDDSHVPRE    : TReal;
PM341P5VDD2PRE      : TReal;
PM341P5VDD21PRE     : TReal;
PM341P5VDD4PRE      : TReal;
PM341P5VDD1PRE      : TReal;
PM341P5VDDSHVPRE    : TReal;
PM331P5VDD2PRE      : TReal;
PM331P5VDD21PRE     : TReal;
PM331P5VDD4PRE      : TReal;
PM331P5VDD1PRE      : TReal;
PM331P5VDDSHVPRE    : TReal;
PM321P5VDD2PRE      : TReal;
PM321P5VDD21PRE     : TReal;
PM321P5VDD4PRE      : TReal;
PM321P5VDD1PRE       : TReal;
PM321P5VDDSHVPRE     : TReal;
PM311P5VDD2PRE        : TReal;
PM311P5VDD21PRE     : TReal;
PM311P5VDD4PRE	    : TReal;
PM311P5VDD1PRE	    : TReal;
PM311P5VDDSHVPRE    : TReal;
PM301P5VDD2PRE	    : TReal;
PM301P5VDD21PRE     : TReal;
PM301P5VDD4PRE	    : TReal;
PM301P5VDD1PRE	     : TReal;
PM301P5VDDSHVPRE     : TReal;
PM291P5VDD2PRE	      : TReal;
PM291P5VDD21PRE       : TReal;
PM291P5VDD4PRE	      : TReal;
PM291P5VDD1PRE	       : TReal;
PM291P5VDDSHVPRE       : TReal;
PM291P5VDDSHV2PRE       : TReal;  {...rev08c}
PM291P5VDDSHV1PRE       : TReal;  {...rev08c}

PM391P5VDD2POST       : TReal;
PM391P5VDD21POST      : TReal;
PM391P5VDD4POST       : TReal;
PM391P5VDD1POST       : TReal;
PM391P5VDDSHVPOST     : TReal;
PM391P1VDD2POST       : TReal;
PM391P1VDD21POST      : TReal;
PM391P1VDD4POST       : TReal;
PM391P1VDD1POST       : TReal;
PM391P1VDDSHVPOST     : TReal;
PM401P5VDD2POST       : TReal;
PM401P5VDD21POST      : TReal;
PM401P5VDD4POST       : TReal;
PM401P5VDD1POST       : TReal;
PM401P5VDDSHVPOST     : TReal;
PM401P1VDD2POST       : TReal;
PM401P1VDD21POST      : TReal;
PM401P1VDD4POST       : TReal;
PM401P1VDD1POST       : TReal;
PM401P1VDDSHVPOST     : TReal;
PM381P5VDD2POST       : TReal;
PM381P5VDD21POST      : TReal;
PM381P5VDD4POST       : TReal;
PM381P5VDD1POST       : TReal;
PM381P5VDDSHVPOST     : TReal;
PM371P5VDD2POST       : TReal;
PM371P5VDD21POST      : TReal;
PM371P5VDD4POST       : TReal;
PM371P5VDD1POST       : TReal;
PM371P5VDDSHVPOST   	: TReal;
PM361P5VDD2POST     	: TReal;
PM361P5VDD21POST    	: TReal;
PM361P5VDD4POST     	: TReal;
PM361P5VDD1POST     	: TReal;
PM361P5VDDSHVPOST   	: TReal;
PM351P5VDD2POST     	: TReal;
PM351P5VDD21POST    	: TReal;
PM351P5VDD4POST     	: TReal;
PM351P5VDD1POST     	: TReal;
PM351P5VDDSHVPOST      : TReal;
PM341P5VDD2POST        : TReal;
PM341P5VDD21POST       : TReal;
PM341P5VDD4POST        : TReal;
PM341P5VDD1POST        : TReal;
PM341P5VDDSHVPOST      : TReal;
PM331P5VDD2POST        : TReal;
PM331P5VDD21POST       : TReal;
PM331P5VDD4POST        : TReal;
PM331P5VDD1POST        : TReal;
PM331P5VDDSHVPOST      : TReal;
PM321P5VDD2POST        : TReal;
PM321P5VDD21POST       : TReal;
PM321P5VDD4POST        : TReal;
PM321P5VDD1POST     	: TReal;
PM321P5VDDSHVPOST   	: TReal;
PM311P5VDD2POST     	 : TReal;
PM311P5VDD21POST       : TReal;
PM311P5VDD4POST        : TReal;
PM311P5VDD1POST        : TReal;
PM311P5VDDSHVPOST      : TReal;
PM301P5VDD2POST        : TReal;
PM301P5VDD21POST       : TReal;
PM301P5VDD4POST        : TReal;
PM301P5VDD1POST     	: TReal;
PM301P5VDDSHVPOST   	: TReal;
PM291P5VDD2POST     	 : TReal;
PM291P5VDD21POST    	 : TReal;
PM291P5VDD4POST     	 : TReal;
PM291P5VDD1POST     	  : TReal;
PM291P5VDDSHVPOST   	  : TReal;
OSC32KINPM1		: TReal;
OSC32KINPM3		: TReal;

FREQMGS3ALL  : TReal;
FREQARMALL  : TReal;
FREQTCALL  : TReal;
FREQOMAPALL  : TReal;

    CP                             : integer; Export;
    Reload_the_Setups              : boolean;  Export;
    Have_not_datalogged            : boolean;
    Datalog_In_Production          : boolean;
    Helen1_Die          : boolean;
    Temp_Limit                     : Tmp_Limit_Type;
    VCC_PGM                        : treal; Export;
    PIN_COUNT                      : integer;
    PIN_ARRAY                      : PinListArrayType;
    I,J                            : integer;
    APP_ARRAY                      : PinListArrayType;
    APP_COUNT                      : integer;
    DL_ARRAY                       : DLArrayType;
    Handler_Temp                   : Integer; Export;
    RlyCheckDone, RelayCheckDone   : boolean;
    I_Fail                         : boolean;
    V_Fail                         : boolean;
    pin_latch_result               : boolean;
    NumPMs                         : integer;
    IccqPMResult                   : boolean;

    PIN_ARRAY_VMARGIN              : PinListArrayType;  {rev01h}
    PIN_COUNT_VMARGIN              : integer; {rev01h}
    PIN_COUNT_9		           : integer; {rev01h}
    PIN_ARRAY_9		           : PinListArrayType; {rev01h}

    ds_string1    		   : data_string_type;
    TWVarString			   : TIString80;
    PinMapString                   : string[1];

    Test_Limit                     : Test_Limit_Type;    Export;

WindowVar
    TIDeviceType :  DeviceType;      'Device Type';   Export;
    Pin_Maps     :  Pin_maps_type ;   'Pin Map:';      Export;
    TITestTemp   :  Temp_Limit_Type ; 'Temp Type:';    Export;
    TITestType   :  Test_Limit_Type;  'Test Limits:';  Export;
    Perpin_Data  :  boolean;          'Per Pin Data:'; Export; 
    Datalog_mode :  Datalog_mode_type; 'Datalog_mode' ; Export;	{rev03b}
    TITestSite   :  TITestSiteType;   Import;{503a}{ftrev03c}            
    DSP_SHMOO_ON :  boolean;          'DSP SHMOO  ON:';
    DSP_SEARCH_ON   : boolean;       'DSP SEARCH ON:';
    Test_Timer   :  boolean;          'Test Timer:';
    

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
#include'/usr/tc/vusp/custom/TWUtilities.h';
#endif
#endif      
{...(rev03a)}    

(* start main shmoo code *)
#define $T_USER_PARM 'true'
#define $T_USER_EXEC 'true'
#define $T_USER_PARAMETRIC 'true'

procedure ShmooAll(CharDCSetup, CharACSetup : String20;
                   PatternName1, PatternName2 : Pattern;
                   V1, V2, DV, T1, T2, DT: TReal;
                   fail_report_option, shmoo_output_option : char;
                   FileName : String80); Import; {char}

procedure SearchVdd(CharDCSetup : String20; SearchOption : Option;
                    PatternName1, PatternName2 : Pattern;
                    V1, V2, DV : TReal; shmoo_output_option : char); Import;
{char}

procedure ShmooIddq(CharDCSetup : String20; PatternName : Pattern;
                    V1, V2, DV : TReal; pmexit_number : integer;
                    OpenPinList, ForcePinList : PinList;
                    IddqSupplyName : SupplyName; WaitTime, SupplyClamp : TReal;
                    search_range : boolean;
                    FileName : String20); Import; {char}

procedure ShmooDelay(CharDCSetup : String20; PatternName : Pattern;
                     V1, V2, DV : TReal; delay_cycles : integer;
                     StartPin : PinList; StartTrigger : Option;
                     StopPin : PinList; StopTrigger : Option;
                     FileName : String20); Import; {char}


{(revq01d) ...}
procedure ACTableSet(Period : TReal; SelectACTable : String20); Import;
procedure DCTableSet(Vdd : TReal; SelectDCTable : String20); Import;
{(revq01d) ...}


{ VOH and VOL binary search }
{function bin_srch_vout(ttype:test_type; termination: l50_l25_ohms;
                       spec_min, spec_max : treal;
                       pin_group : pinlist) : boolean; Import;}


{ VIH and VIL binary search }
{function bin_srch(ttype:test_type; start_srch, stop_srch : treal;
                  spec_min, spec_max : treal;
                  pattern_name : pattern;
                  plist : pinlist) : boolean; Import;}
{procedure init_vout_array(var vout_array : vout_array_type); Import;}
{
function SE_vout(spec_min               : treal;
                 spec_max               : treal;
                 termination            : TerminationType;
                 vref                   : treal;
                 pin_group              : PinList  ) : boolean ; Import;}

procedure lbc_routine; Import;
procedure TMULBCCompVoltage(StartEdgeDir,StopEdgeDir:Option); Import;
Function TMULBCCompTime(ACMeas:TReal) : TReal; Import;

Procedure T_timing_search(file_name:String80; pattern_name:Pattern;
                          cycle_name:Cycle; num_pins:integer;
                          pins:PinListArrayType; edge:integer;
                          search_type, search_range_type:char;
                          range, limit, res:treal; comment:String80); Import;

Procedure T_voltage_search(file_name:String80; pattern_name:Pattern;
                           num_pins:integer; pins:PinListArrayType;
                           volt: integer;
                           search_type, search_range_type:char;
                           range, limit, res:treal; comment:String80); Import;

Procedure Operator_Setup; Import;
Procedure Test; Import;
Procedure Error_Trap( prog,line : integer;
                      routine,error : ErrorArrayType ); Import;

#ifdef $Site_SPC_flag then
#if $Site_SPC_flag then
#if ($Device_SPC = 'TRUE') then
procedure Find_Parameter_File(VAR Pin_Maps : Pin_Maps_Type); Import;
#endif;
#endif;
#endif;


Procedure INITIALIZE_PINS;                        Export;

(*
***********************************************************************
****            INITIALIZE PINS                                    ****
***********************************************************************
*)
var
  I : integer;

  begin

    CR := chr(10);
    Have_not_datalogged := TRUE;

  CASE TIDeviceType OF   (* Supply Assignments *)
    FT_1_HV ,
    FT_1_LV :
      BEGIN
        PS_VDDSHV1 := s_DPS1A;
        PS_VDD1 := s_DPS1B;
        PS_VDD2 := s_DPS2B;
        PS_VDD4 := s_DPS2A;
      END;

{ftstack01a...}
    FT_STACK_HV :
      BEGIN
        PS_VDDSHV := s_DPS1A; {Helen1 IO - 2.8V} 
        PS_VDDSHV1 := s_DDPS1A; {Flash CORE - 2.75V}
        PS_VDD1 := s_DPS1B; {Helen1 CORE - 1.5V}
        PS_VDD2 := s_DPS2B; {Flash IO - 1.8V}
        PS_VDD4 := s_DPS2A; {Helen1 DPLL - 1.5V}
      END;
    FT_STACK_LV :
      BEGIN
        PS_VDDSHV := s_DPS1A; {Helen1 IO - 2.8V} 
        PS_VDDSHV1 := s_DDPS1A; {Flash CORE - 2.75V}
        PS_VDD1 := s_DPS1B; {Helen1 CORE - 1.5V}
        PS_VDD2 := s_DPS2B; {Flash IO - 1.8V}
        PS_VDD4 := s_DPS2A; {Helen1 DPLL - 1.5V}
      END;
{...ftstack01a}
    OTHERWISE  (* CASE DEFAULT *)
      BEGIN
        PS_VDDSHV4 := s_DPS1A;
        PS_VDDSHV1 := s_DPS2A;
        PS_VDD1 := s_DPS2B;
        PS_VDDSHV6 := s_DDPS1A;
        PS_VDDSHV2 := s_DPS1B;
        PS_VDDSHV5 := s_DDPS1B;
      END;
  END; {case of TIDeviceType}

  (* Initialize Shmoo Supplies *)
  SuppliesUsed[VDDSHV4].PS     := PS_VDDSHV4; (* 2V *)
  SuppliesUsed[VDDSHV4].Shmoo  := OFF;
  SuppliesUsed[VDDSHV6].PS     := PS_VDDSHV6; (* 2V *)
  SuppliesUsed[VDDSHV6].Shmoo  := OFF;
  SuppliesUsed[VDDSHV2].PS     := PS_VDDSHV2; (* 2V *)
  SuppliesUsed[VDDSHV2].Shmoo  := OFF;
  SuppliesUsed[VDDSHV5].PS     := PS_VDDSHV5; (* 2V *)
  SuppliesUsed[VDDSHV5].Shmoo  := OFF;
  SuppliesUsed[VDDSHV8].PS     := PS_VDDSHV8; (* 2V *)
  SuppliesUsed[VDDSHV8].Shmoo  := OFF;
  SuppliesUsed[VDDSHV9].PS     := PS_VDDSHV9; (* 2V *)
  SuppliesUsed[VDDSHV9].Shmoo  := OFF;
  SuppliesUsed[VDDSHV7].PS     := PS_VDDSHV7; (* 2V *)
  SuppliesUsed[VDDSHV7].Shmoo  := OFF;
  SuppliesUsed[VDDSHV3].PS     := PS_VDDSHV3; (* 2V *)
  SuppliesUsed[VDDSHV3].Shmoo  := OFF;
  SuppliesUsed[VDDSHV1].PS     := PS_VDDSHV1; (* 2V *)
  SuppliesUsed[VDDSHV1].Shmoo  := OFF;
  SuppliesUsed[VDD1].PS     := PS_VDD1; (* 1V *)
  SuppliesUsed[VDD1].Shmoo  := ON; {rev01f}
  SuppliesUsed[VDD].PS     := PS_VDD; (* 1V *)
  SuppliesUsed[VDD].Shmoo  := OFF; {rev01f}
  SuppliesUsed[VPP].PS     := PS_VPP; (* 1V *)
  SuppliesUsed[VPP].Shmoo  := OFF; {rev01f}
  SuppliesUsed[VDD2].PS     := PS_VDD2; (* 1V *)
  SuppliesUsed[VDD2].Shmoo  := ON;
  SuppliesUsed[VDD3].PS     := PS_VDD3; (* 1V *)
  SuppliesUsed[VDD3].Shmoo  := OFF;
  SuppliesUsed[VDD4].PS     := PS_VDD4; (* 1V *)
  SuppliesUsed[VDD4].Shmoo  := ON;
  SuppliesUsed[VDDA].PS     := PS_VDDA; (* 1V *)
  SuppliesUsed[VDDA].Shmoo  := OFF;

  CASE TIDeviceType OF
    FT_1_HV ,
    FT_1_LV :
      BEGIN
        Dut_Map[198] :=   1; {NRESPWRON }  Dut_Map[ 63] := 145; {LCD_PIXEL7}
        Dut_Map[206] :=   2; {MPU_NRESET}  Dut_Map[176] := 146; {LCD_PIXEL6}
        Dut_Map[204] :=   3; {ARM_BOOT  }  Dut_Map[166] := 147; {LCD_PIXEL5}
        Dut_Map[199] :=   4; {TCK       }  Dut_Map[173] := 148; {LCD_PIXEL4}
        Dut_Map[197] :=   5; {TMS       }  Dut_Map[157] := 149; {LCD_PIXEL3}
        Dut_Map[  1] :=   6; {TDI       }  Dut_Map[180] := 150; {LCD_PIXEL2}
        Dut_Map[200] :=   7; {NTRST     }  Dut_Map[169] := 151; {LCD_PIXEL1}
        Dut_Map[  2] :=   8; {TDO       }  Dut_Map[192] := 152; {LCD_PIXEL_}
        Dut_Map[202] :=   9; {NEMU1     }  Dut_Map[ 55] := 153; {PCM_CLKS  }
        Dut_Map[201] :=  10; {NEMU0     }  Dut_Map[ 65] := 154; {PCM_BIT_CL}
        Dut_Map[ 31] :=  11; {CLK32K_IN }  Dut_Map[161] := 155; {PCM_SYNC  }
        Dut_Map[227] :=  12; {OSC1_IN   }  Dut_Map[ 29] := 156; {PCM_DATA_O}
        Dut_Map[225] :=  13; {OSC32K_IN }  Dut_Map[ 60] := 157; {PCM_DATA_I}
        Dut_Map[226] :=  14; {OSC32K_OUT}  Dut_Map[ 87] := 158; {BT_PCM_DIN}
        Dut_Map[193] :=  15; {CONF      }  Dut_Map[ 83] := 159; {BT_PCM_DOU}
        Dut_Map[203] :=  16; {NBSCAN    }  Dut_Map[ 92] := 160; {BT_PCM_BCL}
        Dut_Map[ 33] :=  17; {FDATA_15  }  Dut_Map[ 86] := 161; {BT_PCM_SYN}
        Dut_Map[ 34] :=  18; {FDATA_14  }  Dut_Map[ 84] := 162; {TX1       }
        Dut_Map[ 35] :=  19; {FDATA_13  }  Dut_Map[ 82] := 163; {RX1       }
        Dut_Map[ 36] :=  20; {FDATA_12  }  Dut_Map[ 81] := 164; {CTS1      }
        Dut_Map[ 37] :=  21; {FDATA_11  }  Dut_Map[208] := 165; {RTS1      }
        Dut_Map[ 38] :=  22; {FDATA_10  }  Dut_Map[ 66] := 166; {TX        }
        Dut_Map[ 39] :=  23; {FDATA_9   }  Dut_Map[177] := 167; {RX        }
        Dut_Map[ 40] :=  24; {FDATA_8   }  Dut_Map[188] := 168; {GPIO_15   }
        Dut_Map[ 41] :=  25; {FDATA_7   }  Dut_Map[196] := 169; {GPIO_14   }
        Dut_Map[ 42] :=  26; {FDATA_6   }  Dut_Map[ 23] := 170; {GPIO_13   }
        Dut_Map[ 43] :=  27; {FDATA_5   }  Dut_Map[ 68] := 171; {GPIO_12   }
        Dut_Map[ 44] :=  28; {FDATA_4   }  Dut_Map[ 22] := 172; {GPIO_11   }
        Dut_Map[ 45] :=  29; {FDATA_3   }  Dut_Map[178] := 173; {GPIO_7    }
        Dut_Map[ 46] :=  30; {FDATA_2   }  Dut_Map[ 69] := 174; {GPIO_6    }
        Dut_Map[ 47] :=  31; {FDATA_1   }  Dut_Map[ 76] := 175; {ARMIO_5   }
        Dut_Map[ 48] :=  32; {FDATA_0   }  Dut_Map[ 75] := 176; {ARMIO_4   }
        Dut_Map[129] :=  33; {NFRDY     }  Dut_Map[182] := 177; {ARMIO_2   }
        Dut_Map[ 80] :=  34; {GPIO_2    }  Dut_Map[ 77] := 178; {ARMIO_1   }
        Dut_Map[ 74] :=  35; {GPIO_0    }  Dut_Map[ 24] := 179; {CLK32K_OUT}
        Dut_Map[ 70] :=  36; {GPIO_4    }  Dut_Map[ 73] := 180; {SCL       }
        Dut_Map[ 72] :=  37; {GPIO_1    }  Dut_Map[ 79] := 181; {SDA       }
        Dut_Map[ 71] :=  38; {GPIO_3    }  Dut_Map[ 78] := 182; {WIRE_SDI  }
        Dut_Map[120] :=  39; {FADD_24   }  Dut_Map[  8] := 183; {WIRE_SDO  }
        Dut_Map[114] :=  40; {FADD_23   }  Dut_Map[ 10] := 184; {WIRE_SCLK }
        Dut_Map[128] :=  41; {FADD_22   }  Dut_Map[ 12] := 185; {WIRE_NSCS0}
        Dut_Map[109] :=  42; {FADD_21   }  Dut_Map[ 67] := 186; {WIRE_NSCS3}
        Dut_Map[ 59] :=  43; {FADD_20   }  Dut_Map[194] := 187; {EXT_FIQ   }
        Dut_Map[117] :=  44; {FADD_19   }  Dut_Map[ 16] := 188; {CAM_EXCLK }
        Dut_Map[126] :=  45; {FADD_18   }  Dut_Map[  3] := 189; {CAM_LCLK  }
        Dut_Map[127] :=  46; {FADD_17   }  Dut_Map[  4] := 190; {CAM_D_7   }
        Dut_Map[121] :=  47; {FADD_16   }  Dut_Map[  6] := 191; {CAM_D_6   }
        Dut_Map[118] :=  48; {FADD_15   }  Dut_Map[ 57] := 192; {CAM_D_5   }
        Dut_Map[125] :=  49; {FADD_14   }  Dut_Map[189] := 193; {CAM_D_4   }
        Dut_Map[110] :=  50; {FADD_13   }  Dut_Map[183] := 194; {CAM_D_3   }
        Dut_Map[130] :=  51; {FADD_12   }  Dut_Map[ 58] := 195; {CAM_D_2   }
        Dut_Map[132] :=  52; {FADD_11   }  Dut_Map[ 61] := 196; {CAM_D_1   }
        Dut_Map[131] :=  53; {FADD_10   }  Dut_Map[184] := 197; {CAM_D_0   }
        Dut_Map[134] :=  54; {FADD_9    }  Dut_Map[  5] := 198; {CAM_VS    }
        Dut_Map[122] :=  55; {FADD_8    }  Dut_Map[ 62] := 199; {CAM_HS    }
        Dut_Map[136] :=  56; {FADD_7    }  Dut_Map[187] := 200; {CAM_RSTZ  }
        Dut_Map[133] :=  57; {FADD_6    }  Dut_Map[ 49] := 201; {KBC_5     }
        Dut_Map[138] :=  58; {FADD_5    }  Dut_Map[ 56] := 202; {KBC_4     }
        Dut_Map[135] :=  59; {FADD_4    }  Dut_Map[191] := 203; {KBC_3     }
        Dut_Map[139] :=  60; {FADD_3    }  Dut_Map[181] := 204; {KBC_2     }
        Dut_Map[142] :=  61; {FADD_2    }  Dut_Map[ 50] := 205; {KBC_1     }
        Dut_Map[111] :=  62; {FADD_1    }  Dut_Map[190] := 206; {KBC_0     }
        Dut_Map[155] :=  63; {SBANK_1   }  Dut_Map[  7] := 207; {KBR_4     }
        Dut_Map[160] :=  64; {SBANK_0   }  Dut_Map[  9] := 208; {KBR_3     }
        Dut_Map[145] :=  65; {SADD_12   }  Dut_Map[ 11] := 209; {KBR_2     }
        Dut_Map[106] :=  66; {SADD_11   }  Dut_Map[ 13] := 210; {KBR_1     }
        Dut_Map[162] :=  67; {SADD_10   }  Dut_Map[ 15] := 211; {KBR_0     }
        Dut_Map[159] :=  68; {SADD_9    }  Dut_Map[195] := 212; {CLK32K_CTR}
        Dut_Map[150] :=  69; {SADD_8    }  Dut_Map[ 14] := 213; {COM_SHUTDO}
        Dut_Map[167] :=  70; {SADD_7    }  Dut_Map[205] := 214; {TI_RESERd4}
        Dut_Map[170] :=  71; {SADD_6    }  Dut_Map[207] := 215; {NRESET_OUT}
        Dut_Map[149] :=  72; {SADD_5    }  Dut_Map[105] := 216; {NFCS_3    }
        Dut_Map[171] :=  73; {SADD_4    }  Dut_Map[124] := 217; {NFCS_2    }
        Dut_Map[174] :=  74; {SADD_3    }  Dut_Map[115] := 218; {NFCS_1    }
        Dut_Map[154] :=  75; {SADD_2    }  Dut_Map[119] := 219; {NFCS_0    }
        Dut_Map[ 52] :=  76; {SADD_1    }  Dut_Map[116] := 220; {FCLK      }
        Dut_Map[168] :=  77; {SADD_0    }  Dut_Map[123] := 221; {NFADV     }
        Dut_Map[140] :=  78; {NSRAS     }  Dut_Map[102] := 222; {NFWP      }
        Dut_Map[ 28] :=  79; {NSCAS     }  Dut_Map[108] := 223; {NFRP      }
        Dut_Map[137] :=  80; {NSWE      }  Dut_Map[107] := 224; {NFOE      }
        Dut_Map[141] :=  81; {NSDQML    }  Dut_Map[101] := 225; {NFWE      }
        Dut_Map[144] :=  82; {NSDQMU    }  Dut_Map[112] := 226; {NFBE_1    }
        Dut_Map[151] :=  83; {SDCLK_EN  }  Dut_Map[113] := 227; {NFBE_0    }
        Dut_Map[156] :=  84; {SDCLK     }{ Dut_Map[ -1] := 228;  VDDSHV4   }
        Dut_Map[ 20] :=  85; {SDATA_15  }{ Dut_Map[ -1] := 229;  GND       }
        Dut_Map[ 19] :=  86; {SDATA_14  }{ Dut_Map[ -1] := 230;  GND       }
        Dut_Map[143] :=  87; {SDATA_13  }{ Dut_Map[ -1] := 231;  VDDSHV1   }
        Dut_Map[ 18] :=  88; {SDATA_12  }{ Dut_Map[ -1] := 232;  VDDSHV1   }
        Dut_Map[ 27] :=  89; {SDATA_11  }{ Dut_Map[ -1] := 233;  GND       }
        Dut_Map[ 21] :=  90; {SDATA_10  }{ Dut_Map[ -1] := 234;  VDD1      }
        Dut_Map[ 30] :=  91; {SDATA_9   }{ Dut_Map[ -1] := 235;  VDDSHV4   }
        Dut_Map[148] :=  92; {SDATA_8   }{ Dut_Map[ -1] := 236;  VDDSHV4   }
        Dut_Map[ 26] :=  93; {SDATA_7   }{ Dut_Map[ -1] := 237;  VDD       }
        Dut_Map[147] :=  94; {SDATA_6   }{ Dut_Map[ -1] := 238;  GND       }
        Dut_Map[146] :=  95; {SDATA_5   }{ Dut_Map[ -1] := 239;  VDDSHV6   }
        Dut_Map[164] :=  96; {SDATA_4   }{ Dut_Map[ -1] := 240;  VDDSHV2   }
        Dut_Map[ 17] :=  97; {SDATA_3   }{ Dut_Map[ -1] := 241;  GND       }
        Dut_Map[152] :=  98; {SDATA_2   }{ Dut_Map[ -1] := 242;  VDD2      }
        Dut_Map[ 25] :=  99; {SDATA_1   }{ Dut_Map[ -1] := 243;  GND       }
        Dut_Map[163] := 100; {SDATA_0   }{ Dut_Map[ -1] := 244;  GND       }
        Dut_Map[ 90] := 101; {USB_DP    }{ Dut_Map[ -1] := 245;  VDDSHV4   }
        Dut_Map[ 89] := 102; {USB_DM    }{ Dut_Map[ -1] := 246;  VDDSHV4   }
        Dut_Map[103] := 103; {USB_CLKO  }{ Dut_Map[ -1] := 247;  VDD3      }
        Dut_Map[210] := 104; {COM_MCLK_R}{ Dut_Map[ -1] := 248;  GND       }
        Dut_Map[209] := 105; {COM_SPI_DI}{ Dut_Map[ -1] := 249;  GND       }
        Dut_Map[212] := 106; {COM_PCM_CL}{ Dut_Map[ -1] := 250;  GND       }
        Dut_Map[214] := 107; {COM_PCM_SY}{ Dut_Map[ -1] := 251;  VDD3      }
        Dut_Map[213] := 108; {COM_PCM_DI}{ Dut_Map[ -1] := 252;  GND       }
        Dut_Map[100] := 109; {RX2       }{ Dut_Map[ -1] := 253;  GND       }
        Dut_Map[ 99] := 110; {CTS2      }{ Dut_Map[ -1] := 254;  VDDSHV5   }
        Dut_Map[220] := 111; {GPIO_9    }{ Dut_Map[ -1] := 255;  VDDSHV5   }
        Dut_Map[219] := 112; {GPIO_8    }{ Dut_Map[ -1] := 256;  GND       }
        Dut_Map[218] := 113; {ARMIO_3   }{ Dut_Map[ -1] := 257;  VDDSHV1   }
        Dut_Map[223] := 114; {COM_SPI_RS}{ Dut_Map[ -1] := 258;  VDD       }
        Dut_Map[217] := 115; {COM_SPI_XS}{ Dut_Map[ -1] := 259;  GND       }
        Dut_Map[221] := 116; {COM_SPI_kr}{ Dut_Map[ -1] := 260;  GND       }
        Dut_Map[222] := 117; {COM_SPI_CL}{ Dut_Map[ -1] := 261;  VDDSHV5   }
        Dut_Map[224] := 118; {COM_SPI_DO}{ Dut_Map[ -1] := 262;  GND       }
        Dut_Map[216] := 119; {COM_MCLK_O}{ Dut_Map[ -1] := 263;  VDD3      }
        Dut_Map[ 98] := 120; {RTS2      }{ Dut_Map[ -1] := 264;  GND       }
        Dut_Map[215] := 121; {COM_PCM_DO}{ Dut_Map[ -1] := 265;  GND       }
        Dut_Map[ 97] := 122; {TX2       }{ Dut_Map[ -1] := 266;  VDDSHV5   }
        Dut_Map[104] := 123; {TI_RESERVE}{ Dut_Map[ -1] := 267;  VDDSHV8   }
        Dut_Map[228] := 124; {OSC1_OUT  }{ Dut_Map[ -1] := 268;  VDD4      }
        Dut_Map[ 93] := 125; {MEDIA_CS  }{ Dut_Map[ -1] := 269;  GND       }
        Dut_Map[211] := 126; {MEDIA_CMD }{ Dut_Map[ -1] := 270;  VDD       }
        Dut_Map[ 94] := 127; {MEDIA_DO  }{ Dut_Map[ -1] := 271;  VDDSHV5   }
        Dut_Map[ 95] := 128; {MEDIA_CLK }{ Dut_Map[ -1] := 272;  VDDSHV5   }
        Dut_Map[ 91] := 129; {MEDIA_DI  }{ Dut_Map[ -1] := 273;  VDD3      }
        Dut_Map[ 96] := 130; {MMC_DAT2  }{ Dut_Map[ -1] := 274;  GND       }
        Dut_Map[ 88] := 131; {BT_MCLK_OU}{ Dut_Map[ -1] := 275;  GND       }
        Dut_Map[ 85] := 132; {BT_MCLK_RE}{ Dut_Map[ -1] := 276;  GND       }
        Dut_Map[153] := 133; {LCD_HSYNC }{ Dut_Map[ -1] := 277;  VDDSHV9   }
        Dut_Map[ 51] := 134; {LCD_VSYNC }{ Dut_Map[ -1] := 278;  GND       }
        Dut_Map[172] := 135; {LCD_AC    }{ Dut_Map[ -1] := 279;  VDDSHV5   }
        Dut_Map[ 53] := 136; {LCD_PCLK  }{ Dut_Map[ -1] := 280;  GND       }
        Dut_Map[179] := 137; {LCD_PIXE15}{ Dut_Map[ -1] := 281;  GND       }
        Dut_Map[ 54] := 138; {LCD_PIXE14}{ Dut_Map[ -1] := 282;  VDD2      }
        Dut_Map[165] := 139; {LCD_PIXE13}{ Dut_Map[ -1] := 283;  GND       }
        Dut_Map[158] := 140; {LCD_PIXE12}{ Dut_Map[ -1] := 284;  VDDSHV7   }
        Dut_Map[175] := 141; {LCD_PIXE11}{ Dut_Map[ -1] := 285;  VDD       }
        Dut_Map[ 64] := 142; {LCD_PIXE10}{ Dut_Map[ -1] := 286;  VDDA      }
        Dut_Map[186] := 143; {LCD_PIXEL9}{ Dut_Map[ -1] := 287;  GND       }
        Dut_Map[185] := 144; {LCD_PIXEL8}{ Dut_Map[ -1] := 288;  VDDSHV3   }

        (* The following pins were assigned unused tester  *)
        (* channels for compatability with other pin maps: *)
        Dut_Map[ 32] := 228; {VDDSHV4   }
        Dut_Map[229] := 229; {GND       }
        Dut_Map[230] := 230; {GND       }
        Dut_Map[231] := 231; {VDDSHV1   }
        Dut_Map[232] := 232; {VDDSHV1   }
        Dut_Map[233] := 233; {GND       }
        Dut_Map[234] := 234; {VDD1      }
        Dut_Map[235] := 235; {VDDSHV4   }
        Dut_Map[236] := 236; {VDDSHV4   }
        Dut_Map[237] := 237; {VDD       }
        Dut_Map[238] := 238; {GND       }
        Dut_Map[239] := 239; {VDDSHV6   }
        Dut_Map[240] := 240; {VDDSHV2   }
        Dut_Map[241] := 241; {GND       }
        Dut_Map[242] := 242; {VDD2      }
        Dut_Map[243] := 243; {GND       }
        Dut_Map[244] := 244; {GND       }
        Dut_Map[245] := 245; {VDDSHV4   }
        Dut_Map[246] := 246; {VDDSHV4   }
        Dut_Map[247] := 247; {VDD3      }
        Dut_Map[248] := 248; {GND       }
        Dut_Map[249] := 249; {GND       }
        Dut_Map[250] := 250; {GND       }
        Dut_Map[251] := 251; {VDD3      }
        Dut_Map[252] := 252; {GND       }
        Dut_Map[253] := 253; {GND       }
        Dut_Map[254] := 254; {VDDSHV5   }
        Dut_Map[255] := 255; {VDDSHV5   }
        Dut_Map[256] := 256; {GND       }
      END;

{ftstack01a...}
    FT_STACK_HV :
      BEGIN
        Dut_Map[214] :=   1; {NRESPWRON }  Dut_Map[173] := 145; {LCD_PIXEL7}
        Dut_Map[225] :=   2; {MPU_NRESET}  Dut_Map[192] := 146; {LCD_PIXEL6}
        Dut_Map[224] :=   3; {ARM_BOOT  }  Dut_Map[177] := 147; {LCD_PIXEL5}
        Dut_Map[ 32] :=   4; {TCK       }  Dut_Map[146] := 148; {LCD_PIXEL4}
        Dut_Map[227] :=   5; {TMS       }  Dut_Map[141] := 149; {LCD_PIXEL3}
        Dut_Map[  1] :=   6; {TDI       }  Dut_Map[216] := 150; {LCD_PIXEL2}
        Dut_Map[105] :=   7; {NTRST     }  Dut_Map[184] := 151; {LCD_PIXEL1}
        Dut_Map[  2] :=   8; {TDO       }  Dut_Map[202] := 152; {LCD_PIXEL_}
        Dut_Map[240] :=   9; {NEMU1     }  Dut_Map[196] := 153; {PCM_CLKS  }
        Dut_Map[226] :=  10; {NEMU0     }  Dut_Map[182] := 154; {PCM_BIT_CL}
        Dut_Map[ 31] :=  11; {CLK32K_IN }  Dut_Map[181] := 155; {PCM_SYNC  }
        Dut_Map[ 19] :=  12; {OSC1_IN   }  Dut_Map[ 29] := 156; {PCM_DATA_O}
        Dut_Map[ 17] :=  13; {OSC32K_IN }  Dut_Map[195] := 157; {PCM_DATA_I}
        Dut_Map[ 18] :=  14; {OSC32K_OUT}  Dut_Map[116] := 158; {BT_PCM_DIN}
        Dut_Map[228] :=  15; {CONF      }  Dut_Map[115] := 159; {BT_PCM_DOU}
        Dut_Map[107] :=  16; {NBSCAN    }  Dut_Map[100] := 160; {BT_PCM_BCL}
        Dut_Map[ 33] :=  17; {FDATA_15  }  Dut_Map[231] := 161; {BT_PCM_SYN}
        Dut_Map[ 34] :=  18; {FDATA_14  }  Dut_Map[110] := 162; {TX1       }
        Dut_Map[ 35] :=  19; {FDATA_13  }  Dut_Map[232] := 163; {RX1       }
        Dut_Map[ 36] :=  20; {FDATA_12  }  Dut_Map[ 98] := 164; {CTS1      }
        Dut_Map[ 37] :=  21; {FDATA_11  }  Dut_Map[ 97] := 165; {RTS1      }
        Dut_Map[ 38] :=  22; {FDATA_10  }  Dut_Map[206] := 166; {TX        }
        Dut_Map[ 39] :=  23; {FDATA_9   }  Dut_Map[193] := 167; {RX        }
        Dut_Map[ 40] :=  24; {FDATA_8   }  Dut_Map[199] := 168; {GPIO_15   }
        Dut_Map[ 41] :=  25; {FDATA_7   }  Dut_Map[185] := 169; {GPIO_14   }
        Dut_Map[ 42] :=  26; {FDATA_6   }  Dut_Map[ 23] := 170; {GPIO_13   }
        Dut_Map[ 43] :=  27; {FDATA_5   }  Dut_Map[205] := 171; {GPIO_12   }
        Dut_Map[ 44] :=  28; {FDATA_4   }  Dut_Map[ 22] := 172; {GPIO_11   }
        Dut_Map[ 45] :=  29; {FDATA_3   }  Dut_Map[186] := 173; {GPIO_7    }
        Dut_Map[ 46] :=  30; {FDATA_2   }  Dut_Map[218] := 174; {GPIO_6    }
        Dut_Map[ 47] :=  31; {FDATA_1   }  Dut_Map[197] := 175; {ARMIO_5   }
        Dut_Map[ 48] :=  32; {FDATA_0   }  Dut_Map[238] := 176; {ARMIO_4   }
        Dut_Map[ 78] :=  33; {NFRDY     }  Dut_Map[222] := 177; {ARMIO_2   }
        Dut_Map[200] :=  34; {GPIO_2    }  Dut_Map[237] := 178; {ARMIO_1   }
        Dut_Map[211] :=  35; {GPIO_0    }  Dut_Map[ 24] := 179; {CLK32K_OUT}
        Dut_Map[198] :=  36; {GPIO_4    }  Dut_Map[210] := 180; {SCL	   }
        Dut_Map[217] :=  37; {GPIO_1    }  Dut_Map[106] := 181; {SDA	   }
        Dut_Map[212] :=  38; {GPIO_3    }  Dut_Map[209] := 182; {WIRE_SDI  }
        Dut_Map[ 72] :=  39; {FADD_24	}  Dut_Map[  8] := 183; {WIRE_SDO  }
        Dut_Map[ 49] :=  40; {FADD_23	}  Dut_Map[ 10] := 184; {WIRE_SCLK }
        Dut_Map[ 50] :=  41; {FADD_22	}  Dut_Map[ 12] := 185; {WIRE_NSCS0}
        Dut_Map[ 51] :=  42; {FADD_21	}  Dut_Map[221] := 186; {WIRE_NSCS3}
        Dut_Map[ 52] :=  43; {FADD_20	}  Dut_Map[239] := 187; {EXT_FIQ   }
        Dut_Map[ 53] :=  44; {FADD_19	}  Dut_Map[ 16] := 188; {CAM_EXCLK }
        Dut_Map[ 54] :=  45; {FADD_18	}  Dut_Map[  3] := 189; {CAM_LCLK  }
        Dut_Map[ 55] :=  46; {FADD_17	}  Dut_Map[  4] := 190; {CAM_D_7   }
        Dut_Map[ 56] :=  47; {FADD_16	}  Dut_Map[  6] := 191; {CAM_D_6   }
        Dut_Map[ 57] :=  48; {FADD_15	}  Dut_Map[189] := 192; {CAM_D_5   }
        Dut_Map[ 58] :=  49; {FADD_14	}  Dut_Map[207] := 193; {CAM_D_4   }
        Dut_Map[ 59] :=  50; {FADD_13	}  Dut_Map[213] := 194; {CAM_D_3   }
        Dut_Map[ 60] :=  51; {FADD_12	}  Dut_Map[188] := 195; {CAM_D_2   }
        Dut_Map[ 61] :=  52; {FADD_11	}  Dut_Map[194] := 196; {CAM_D_1   }
        Dut_Map[ 62] :=  53; {FADD_10	}  Dut_Map[220] := 197; {CAM_D_0   }
        Dut_Map[ 63] :=  54; {FADD_9	}  Dut_Map[  5] := 198; {CAM_VS    }
        Dut_Map[ 64] :=  55; {FADD_8	}  Dut_Map[187] := 199; {CAM_HS    }
        Dut_Map[ 65] :=  56; {FADD_7	}  Dut_Map[219] := 200; {CAM_RSTZ  }
        Dut_Map[ 66] :=  57; {FADD_6	}  Dut_Map[191] := 201; {KBC_5     }
        Dut_Map[ 67] :=  58; {FADD_5	}  Dut_Map[183] := 202; {KBC_4     }
        Dut_Map[ 68] :=  59; {FADD_4	}  Dut_Map[201] := 203; {KBC_3     }
        Dut_Map[ 69] :=  60; {FADD_3	}  Dut_Map[215] := 204; {KBC_2     }
        Dut_Map[ 70] :=  61; {FADD_2	}  Dut_Map[190] := 205; {KBC_1     }
        Dut_Map[ 71] :=  62; {FADD_1	}  Dut_Map[208] := 206; {KBC_0     }
        Dut_Map[154] :=  63; {SBANK_1	}  Dut_Map[  7] := 207; {KBR_4     }
        Dut_Map[165] :=  64; {SBANK_0	}  Dut_Map[  9] := 208; {KBR_3     }
        Dut_Map[137] :=  65; {SADD_12	}  Dut_Map[ 11] := 209; {KBR_2     }
        Dut_Map[130] :=  66; {SADD_11	}  Dut_Map[ 13] := 210; {KBR_1     }
        Dut_Map[172] :=  67; {SADD_10	}  Dut_Map[ 15] := 211; {KBR_0     }
        Dut_Map[153] :=  68; {SADD_9	}  Dut_Map[223] := 212; {CLK32K_CTR}
        Dut_Map[144] :=  69; {SADD_8	}  Dut_Map[ 14] := 213; {COM_SHUTDO}
        Dut_Map[171] :=  70; {SADD_7	}  Dut_Map[114] := 214; {TI_RESERd4}
        Dut_Map[160] :=  71; {SADD_6	}  Dut_Map[113] := 215; {NRESET_OUT}
        Dut_Map[129] :=  72; {SADD_5	}  Dut_Map[ 85] := 216; {NFCS_3    }
        Dut_Map[170] :=  73; {SADD_4	}  Dut_Map[ 84] := 217; {NFCS_2    }
        Dut_Map[159] :=  74; {SADD_3	}  Dut_Map[ 83] := 218; {NFCS_1    }
        Dut_Map[143] :=  75; {SADD_2	}  Dut_Map[ 73] := 219; {NFCS_0    }
        Dut_Map[169] :=  76; {SADD_1	}  Dut_Map[ 76] := 220; {FCLK	   }
        Dut_Map[180] :=  77; {SADD_0	}  Dut_Map[ 80] := 221; {NFADV     }
        Dut_Map[140] :=  78; {NSRAS	}  Dut_Map[ 79] := 222; {NFWP	   }
        Dut_Map[131] :=  79; {NSCAS	}  Dut_Map[ 77] := 223; {NFRP	   }
        Dut_Map[164] :=  80; {NSWE	}  Dut_Map[ 75] := 224; {NFOE	   }
        Dut_Map[136] :=  81; {NSDQML	}  Dut_Map[ 74] := 225; {NFWE	   }
        Dut_Map[152] :=  82; {NSDQMU	}  Dut_Map[ 82] := 226; {NFBE_1    }
        Dut_Map[155] :=  83; {SDCLK_EN  }  Dut_Map[ 81] := 227; {NFBE_0    }
        Dut_Map[166] :=  84; {SDCLK	}{ Dut_Map[ -1] := 228;  VDDSHV4   }
        Dut_Map[151] :=  85; {SDATA_15  }{ Dut_Map[ -1] := 229;  GND	   }
        Dut_Map[163] :=  86; {SDATA_14  }{ Dut_Map[ -1] := 230;  GND	   }
        Dut_Map[135] :=  87; {SDATA_13  }{ Dut_Map[ -1] := 231;  VDDSHV1   }
        Dut_Map[150] :=  88; {SDATA_12  }{ Dut_Map[ -1] := 232;  VDDSHV1   }
        Dut_Map[162] :=  89; {SDATA_11  }{ Dut_Map[ -1] := 233;  GND	   }
        Dut_Map[132] :=  90; {SDATA_10  }{ Dut_Map[ -1] := 234;  VDD1	   }
        Dut_Map[161] :=  91; {SDATA_9	}{ Dut_Map[ -1] := 235;  VDDSHV4   }
        Dut_Map[134] :=  92; {SDATA_8	}{ Dut_Map[ -1] := 236;  VDDSHV4   }
        Dut_Map[149] :=  93; {SDATA_7	}{ Dut_Map[ -1] := 237;  VDD	   }
        Dut_Map[168] :=  94; {SDATA_6	}{ Dut_Map[ -1] := 238;  GND	   }
        Dut_Map[156] :=  95; {SDATA_5	}{ Dut_Map[ -1] := 239;  VDDSHV6   }
        Dut_Map[133] :=  96; {SDATA_4	}{ Dut_Map[ -1] := 240;  VDDSHV2   }
        Dut_Map[139] :=  97; {SDATA_3	}{ Dut_Map[ -1] := 241;  GND	   }
        Dut_Map[167] :=  98; {SDATA_2	}{ Dut_Map[ -1] := 242;  VDD2	   }
        Dut_Map[138] :=  99; {SDATA_1	}{ Dut_Map[ -1] := 243;  GND	   }
        Dut_Map[148] := 100; {SDATA_0	}{ Dut_Map[ -1] := 244;  GND	   }
        Dut_Map[112] := 101; {USB_DP	}{ Dut_Map[ -1] := 245;  VDDSHV4   }
        Dut_Map[244] := 102; {USB_DM	}{ Dut_Map[ -1] := 246;  VDDSHV4   }
        Dut_Map[124] := 103; {USB_CLKO  }{ Dut_Map[ -1] := 247;  VDD3      }
        Dut_Map[101] := 104; {COM_MCLK_R}{ Dut_Map[ -1] := 248;  GND	   }
        Dut_Map[111] := 105; {COM_SPI_DI}{ Dut_Map[ -1] := 249;  GND	   }
        Dut_Map[126] := 106; {COM_PCM_CL}{ Dut_Map[ -1] := 250;  GND	   }
        Dut_Map[236] := 107; {COM_PCM_SY}{ Dut_Map[ -1] := 251;  VDD3	   }
        Dut_Map[103] := 108; {COM_PCM_DI}{ Dut_Map[ -1] := 252;  GND       }
        Dut_Map[104] := 109; {RX2       }{ Dut_Map[ -1] := 253;  GND       }
        Dut_Map[241] := 110; {CTS2      }{ Dut_Map[ -1] := 254;  VDDSHV5   }
        Dut_Map[120] := 111; {GPIO_9	}{ Dut_Map[ -1] := 255;  VDDSHV5   }
        Dut_Map[127] := 112; {GPIO_8	}{ Dut_Map[ -1] := 256;  GND	   }
        Dut_Map[235] := 113; {ARMIO_3	}{ Dut_Map[ -1] := 257;  VDDSHV1   }
        Dut_Map[121] := 114; {COM_SPI_RS}{ Dut_Map[ -1] := 258;  VDD	   }
        Dut_Map[122] := 115; {COM_SPI_XS}{ Dut_Map[ -1] := 259;  GND	   }
        Dut_Map[234] := 116; {COM_SPI_kr}{ Dut_Map[ -1] := 260;  GND	   }
        Dut_Map[128] := 117; {COM_SPI_CL}{ Dut_Map[ -1] := 261;  VDDSHV5   }
        Dut_Map[242] := 118; {COM_SPI_DO}{ Dut_Map[ -1] := 262;  GND	   }
        Dut_Map[125] := 119; {COM_MCLK_O}{ Dut_Map[ -1] := 263;  VDD3      }
        Dut_Map[123] := 120; {RTS2      }{ Dut_Map[ -1] := 264;  GND       }
        Dut_Map[119] := 121; {COM_PCM_DO}{ Dut_Map[ -1] := 265;  GND       }
        Dut_Map[233] := 122; {TX2       }{ Dut_Map[ -1] := 266;  VDDSHV5   }
        Dut_Map[243] := 123; {TI_RESERVE}{ Dut_Map[ -1] := 267;  VDDSHV8   }
        Dut_Map[ 20] := 124; {OSC1_OUT  }{ Dut_Map[ -1] := 268;  VDD4      }
        Dut_Map[108] := 125; {MEDIA_CS  }{ Dut_Map[ -1] := 269;  GND	   }
        Dut_Map[229] := 126; {MEDIA_CMD }{ Dut_Map[ -1] := 270;  VDD	   }
        Dut_Map[102] := 127; {MEDIA_DO  }{ Dut_Map[ -1] := 271;  VDDSHV5   }
        Dut_Map[230] := 128; {MEDIA_CLK }{ Dut_Map[ -1] := 272;  VDDSHV5   }
        Dut_Map[118] := 129; {MEDIA_DI  }{ Dut_Map[ -1] := 273;  VDD3	   }
        Dut_Map[117] := 130; {MMC_DAT2  }{ Dut_Map[ -1] := 274;  GND	   }
        Dut_Map[109] := 131; {BT_MCLK_OU}{ Dut_Map[ -1] := 275;  GND       }
        Dut_Map[ 99] := 132; {BT_MCLK_RE}{ Dut_Map[ -1] := 276;  GND       }
        Dut_Map[147] := 133; {LCD_HSYNC }{ Dut_Map[ -1] := 277;  VDDSHV9   }
        Dut_Map[158] := 134; {LCD_VSYNC }{ Dut_Map[ -1] := 278;  GND	   }
        Dut_Map[179] := 135; {LCD_AC	}{ Dut_Map[ -1] := 279;  VDDSHV5   }
        Dut_Map[176] := 136; {LCD_PCLK  }{ Dut_Map[ -1] := 280;  GND	   }
        Dut_Map[157] := 137; {LCD_PIXE15}{ Dut_Map[ -1] := 281;  GND	   }
        Dut_Map[175] := 138; {LCD_PIXE14}{ Dut_Map[ -1] := 282;  VDD2	   }
        Dut_Map[178] := 139; {LCD_PIXE13}{ Dut_Map[ -1] := 283;  GND	   }
        Dut_Map[142] := 140; {LCD_PIXE12}{ Dut_Map[ -1] := 284;  VDDSHV7   }
        Dut_Map[145] := 141; {LCD_PIXE11}{ Dut_Map[ -1] := 285;  VDD	   }
        Dut_Map[174] := 142; {LCD_PIXE10}{ Dut_Map[ -1] := 286;  VDDA	   }
        Dut_Map[204] := 143; {LCD_PIXEL9}{ Dut_Map[ -1] := 287;  GND	   }
        Dut_Map[203] := 144; {LCD_PIXEL8}{ Dut_Map[ -1] := 288;  VDDSHV3   }

        (* The following pins were assigned unused tester  *)
        (* channels for compatability with other pin maps: *)
        Dut_Map[245] := 245; {VDDSHV4   }
        Dut_Map[246] := 246; {VDDSHV4   }
        Dut_Map[247] := 247; {VDD3      }
        Dut_Map[248] := 248; {GND       }
        Dut_Map[249] := 249; {GND       }
        Dut_Map[250] := 250; {GND       }
        Dut_Map[251] := 251; {VDD3      }
        Dut_Map[252] := 252; {GND       }
        Dut_Map[253] := 253; {GND       }
        Dut_Map[254] := 254; {VDDSHV5   }
        Dut_Map[255] := 255; {VDDSHV5   }
        Dut_Map[256] := 256; {GND       }
      END;

    FT_STACK_LV :
      BEGIN
        Dut_Map[214] :=   1; {NRESPWRON }  Dut_Map[173] := 145; {LCD_PIXEL7}
        Dut_Map[225] :=   2; {MPU_NRESET}  Dut_Map[192] := 146; {LCD_PIXEL6}
        Dut_Map[224] :=   3; {ARM_BOOT  }  Dut_Map[177] := 147; {LCD_PIXEL5}
        Dut_Map[ 32] :=   4; {TCK       }  Dut_Map[146] := 148; {LCD_PIXEL4}
        Dut_Map[227] :=   5; {TMS       }  Dut_Map[141] := 149; {LCD_PIXEL3}
        Dut_Map[  1] :=   6; {TDI       }  Dut_Map[216] := 150; {LCD_PIXEL2}
        Dut_Map[105] :=   7; {NTRST     }  Dut_Map[184] := 151; {LCD_PIXEL1}
        Dut_Map[  2] :=   8; {TDO       }  Dut_Map[202] := 152; {LCD_PIXEL_}
        Dut_Map[240] :=   9; {NEMU1     }  Dut_Map[196] := 153; {PCM_CLKS  }
        Dut_Map[226] :=  10; {NEMU0     }  Dut_Map[182] := 154; {PCM_BIT_CL}
        Dut_Map[ 31] :=  11; {CLK32K_IN }  Dut_Map[181] := 155; {PCM_SYNC  }
        Dut_Map[ 19] :=  12; {OSC1_IN   }  Dut_Map[ 29] := 156; {PCM_DATA_O}
        Dut_Map[ 17] :=  13; {OSC32K_IN }  Dut_Map[195] := 157; {PCM_DATA_I}
        Dut_Map[ 18] :=  14; {OSC32K_OUT}  Dut_Map[116] := 158; {BT_PCM_DIN}
        Dut_Map[228] :=  15; {CONF      }  Dut_Map[115] := 159; {BT_PCM_DOU}
        Dut_Map[107] :=  16; {NBSCAN    }  Dut_Map[100] := 160; {BT_PCM_BCL}
        Dut_Map[ 33] :=  17; {FDATA_15  }  Dut_Map[231] := 161; {BT_PCM_SYN}
        Dut_Map[ 34] :=  18; {FDATA_14  }  Dut_Map[110] := 162; {TX1       }
        Dut_Map[ 35] :=  19; {FDATA_13  }  Dut_Map[232] := 163; {RX1       }
        Dut_Map[ 36] :=  20; {FDATA_12  }  Dut_Map[ 98] := 164; {CTS1      }
        Dut_Map[ 37] :=  21; {FDATA_11  }  Dut_Map[ 97] := 165; {RTS1      }
        Dut_Map[ 38] :=  22; {FDATA_10  }  Dut_Map[206] := 166; {TX        }
        Dut_Map[ 39] :=  23; {FDATA_9   }  Dut_Map[193] := 167; {RX        }
        Dut_Map[ 40] :=  24; {FDATA_8   }  Dut_Map[199] := 168; {GPIO_15   }
        Dut_Map[ 41] :=  25; {FDATA_7   }  Dut_Map[185] := 169; {GPIO_14   }
        Dut_Map[ 42] :=  26; {FDATA_6   }  Dut_Map[ 23] := 170; {GPIO_13   }
        Dut_Map[ 43] :=  27; {FDATA_5   }  Dut_Map[205] := 171; {GPIO_12   }
        Dut_Map[ 44] :=  28; {FDATA_4   }  Dut_Map[ 22] := 172; {GPIO_11   }
        Dut_Map[ 45] :=  29; {FDATA_3   }  Dut_Map[186] := 173; {GPIO_7    }
        Dut_Map[ 46] :=  30; {FDATA_2   }  Dut_Map[218] := 174; {GPIO_6    }
        Dut_Map[ 47] :=  31; {FDATA_1   }  Dut_Map[197] := 175; {ARMIO_5   }
        Dut_Map[ 48] :=  32; {FDATA_0   }  Dut_Map[238] := 176; {ARMIO_4   }
        Dut_Map[ 78] :=  33; {NFRDY     }  Dut_Map[222] := 177; {ARMIO_2   }
        Dut_Map[200] :=  34; {GPIO_2    }  Dut_Map[237] := 178; {ARMIO_1   }
        Dut_Map[211] :=  35; {GPIO_0    }  Dut_Map[ 24] := 179; {CLK32K_OUT}
        Dut_Map[198] :=  36; {GPIO_4    }  Dut_Map[210] := 180; {SCL	   }
        Dut_Map[217] :=  37; {GPIO_1    }  Dut_Map[106] := 181; {SDA	   }
        Dut_Map[212] :=  38; {GPIO_3    }  Dut_Map[209] := 182; {WIRE_SDI  }
        Dut_Map[ 72] :=  39; {FADD_24	}  Dut_Map[  8] := 183; {WIRE_SDO  }
        Dut_Map[ 49] :=  40; {FADD_23	}  Dut_Map[ 10] := 184; {WIRE_SCLK }
        Dut_Map[ 50] :=  41; {FADD_22	}  Dut_Map[ 12] := 185; {WIRE_NSCS0}
        Dut_Map[ 51] :=  42; {FADD_21	}  Dut_Map[221] := 186; {WIRE_NSCS3}
        Dut_Map[ 52] :=  43; {FADD_20	}  Dut_Map[239] := 187; {EXT_FIQ   }
        Dut_Map[ 53] :=  44; {FADD_19	}  Dut_Map[ 16] := 188; {CAM_EXCLK }
        Dut_Map[ 54] :=  45; {FADD_18	}  Dut_Map[  3] := 189; {CAM_LCLK  }
        Dut_Map[ 55] :=  46; {FADD_17	}  Dut_Map[  4] := 190; {CAM_D_7   }
        Dut_Map[ 56] :=  47; {FADD_16	}  Dut_Map[  6] := 191; {CAM_D_6   }
        Dut_Map[ 57] :=  48; {FADD_15	}  Dut_Map[189] := 192; {CAM_D_5   }
        Dut_Map[ 58] :=  49; {FADD_14	}  Dut_Map[207] := 193; {CAM_D_4   }
        Dut_Map[ 59] :=  50; {FADD_13	}  Dut_Map[213] := 194; {CAM_D_3   }
        Dut_Map[ 60] :=  51; {FADD_12	}  Dut_Map[188] := 195; {CAM_D_2   }
        Dut_Map[ 61] :=  52; {FADD_11	}  Dut_Map[194] := 196; {CAM_D_1   }
        Dut_Map[ 62] :=  53; {FADD_10	}  Dut_Map[220] := 197; {CAM_D_0   }
        Dut_Map[ 63] :=  54; {FADD_9	}  Dut_Map[  5] := 198; {CAM_VS    }
        Dut_Map[ 64] :=  55; {FADD_8	}  Dut_Map[187] := 199; {CAM_HS    }
        Dut_Map[ 65] :=  56; {FADD_7	}  Dut_Map[219] := 200; {CAM_RSTZ  }
        Dut_Map[ 66] :=  57; {FADD_6	}  Dut_Map[191] := 201; {KBC_5     }
        Dut_Map[ 67] :=  58; {FADD_5	}  Dut_Map[183] := 202; {KBC_4     }
        Dut_Map[ 68] :=  59; {FADD_4	}  Dut_Map[201] := 203; {KBC_3     }
        Dut_Map[ 69] :=  60; {FADD_3	}  Dut_Map[215] := 204; {KBC_2     }
        Dut_Map[ 70] :=  61; {FADD_2	}  Dut_Map[190] := 205; {KBC_1     }
        Dut_Map[ 71] :=  62; {FADD_1	}  Dut_Map[208] := 206; {KBC_0     }
        Dut_Map[154] :=  63; {SBANK_1	}  Dut_Map[  7] := 207; {KBR_4     }
        Dut_Map[165] :=  64; {SBANK_0	}  Dut_Map[  9] := 208; {KBR_3     }
        Dut_Map[137] :=  65; {SADD_12	}  Dut_Map[ 11] := 209; {KBR_2     }
        Dut_Map[130] :=  66; {SADD_11	}  Dut_Map[ 13] := 210; {KBR_1     }
        Dut_Map[172] :=  67; {SADD_10	}  Dut_Map[ 15] := 211; {KBR_0     }
        Dut_Map[153] :=  68; {SADD_9	}  Dut_Map[223] := 212; {CLK32K_CTR}
        Dut_Map[144] :=  69; {SADD_8	}  Dut_Map[ 14] := 213; {COM_SHUTDO}
        Dut_Map[171] :=  70; {SADD_7	}  Dut_Map[114] := 214; {TI_RESERd4}
        Dut_Map[160] :=  71; {SADD_6	}  Dut_Map[113] := 215; {NRESET_OUT}
        Dut_Map[129] :=  72; {SADD_5	}  Dut_Map[ 85] := 216; {NFCS_3    }
        Dut_Map[170] :=  73; {SADD_4	}  Dut_Map[ 84] := 217; {NFCS_2    }
        Dut_Map[159] :=  74; {SADD_3	}  Dut_Map[ 83] := 218; {NFCS_1    }
        Dut_Map[143] :=  75; {SADD_2	}  Dut_Map[ 73] := 219; {NFCS_0    }
        Dut_Map[169] :=  76; {SADD_1	}  Dut_Map[ 76] := 220; {FCLK	   }
        Dut_Map[180] :=  77; {SADD_0	}  Dut_Map[ 80] := 221; {NFADV     }
        Dut_Map[140] :=  78; {NSRAS	}  Dut_Map[ 79] := 222; {NFWP	   }
        Dut_Map[131] :=  79; {NSCAS	}  Dut_Map[ 77] := 223; {NFRP	   }
        Dut_Map[164] :=  80; {NSWE	}  Dut_Map[ 75] := 224; {NFOE	   }
        Dut_Map[136] :=  81; {NSDQML	}  Dut_Map[ 74] := 225; {NFWE	   }
        Dut_Map[152] :=  82; {NSDQMU	}  Dut_Map[ 82] := 226; {NFBE_1    }
        Dut_Map[155] :=  83; {SDCLK_EN  }  Dut_Map[ 81] := 227; {NFBE_0    }
        Dut_Map[166] :=  84; {SDCLK	}{ Dut_Map[ -1] := 228;  VDDSHV4   }
        Dut_Map[151] :=  85; {SDATA_15  }{ Dut_Map[ -1] := 229;  GND	   }
        Dut_Map[163] :=  86; {SDATA_14  }{ Dut_Map[ -1] := 230;  GND	   }
        Dut_Map[135] :=  87; {SDATA_13  }{ Dut_Map[ -1] := 231;  VDDSHV1   }
        Dut_Map[150] :=  88; {SDATA_12  }{ Dut_Map[ -1] := 232;  VDDSHV1   }
        Dut_Map[162] :=  89; {SDATA_11  }{ Dut_Map[ -1] := 233;  GND	   }
        Dut_Map[132] :=  90; {SDATA_10  }{ Dut_Map[ -1] := 234;  VDD1	   }
        Dut_Map[161] :=  91; {SDATA_9	}{ Dut_Map[ -1] := 235;  VDDSHV4   }
        Dut_Map[134] :=  92; {SDATA_8	}{ Dut_Map[ -1] := 236;  VDDSHV4   }
        Dut_Map[149] :=  93; {SDATA_7	}{ Dut_Map[ -1] := 237;  VDD	   }
        Dut_Map[168] :=  94; {SDATA_6	}{ Dut_Map[ -1] := 238;  GND	   }
        Dut_Map[156] :=  95; {SDATA_5	}{ Dut_Map[ -1] := 239;  VDDSHV6   }
        Dut_Map[133] :=  96; {SDATA_4	}{ Dut_Map[ -1] := 240;  VDDSHV2   }
        Dut_Map[139] :=  97; {SDATA_3	}{ Dut_Map[ -1] := 241;  GND	   }
        Dut_Map[167] :=  98; {SDATA_2	}{ Dut_Map[ -1] := 242;  VDD2	   }
        Dut_Map[138] :=  99; {SDATA_1	}{ Dut_Map[ -1] := 243;  GND	   }
        Dut_Map[148] := 100; {SDATA_0	}{ Dut_Map[ -1] := 244;  GND	   }
        Dut_Map[112] := 101; {USB_DP	}{ Dut_Map[ -1] := 245;  VDDSHV4   }
        Dut_Map[244] := 102; {USB_DM	}{ Dut_Map[ -1] := 246;  VDDSHV4   }
        Dut_Map[124] := 103; {USB_CLKO  }{ Dut_Map[ -1] := 247;  VDD3      }
        Dut_Map[101] := 104; {COM_MCLK_R}{ Dut_Map[ -1] := 248;  GND	   }
        Dut_Map[111] := 105; {COM_SPI_DI}{ Dut_Map[ -1] := 249;  GND	   }
        Dut_Map[126] := 106; {COM_PCM_CL}{ Dut_Map[ -1] := 250;  GND	   }
        Dut_Map[236] := 107; {COM_PCM_SY}{ Dut_Map[ -1] := 251;  VDD3	   }
        Dut_Map[103] := 108; {COM_PCM_DI}{ Dut_Map[ -1] := 252;  GND       }
        Dut_Map[104] := 109; {RX2       }{ Dut_Map[ -1] := 253;  GND       }
        Dut_Map[241] := 110; {CTS2      }{ Dut_Map[ -1] := 254;  VDDSHV5   }
        Dut_Map[120] := 111; {GPIO_9	}{ Dut_Map[ -1] := 255;  VDDSHV5   }
        Dut_Map[127] := 112; {GPIO_8	}{ Dut_Map[ -1] := 256;  GND	   }
        Dut_Map[235] := 113; {ARMIO_3	}{ Dut_Map[ -1] := 257;  VDDSHV1   }
        Dut_Map[121] := 114; {COM_SPI_RS}{ Dut_Map[ -1] := 258;  VDD	   }
        Dut_Map[122] := 115; {COM_SPI_XS}{ Dut_Map[ -1] := 259;  GND	   }
        Dut_Map[234] := 116; {COM_SPI_kr}{ Dut_Map[ -1] := 260;  GND	   }
        Dut_Map[128] := 117; {COM_SPI_CL}{ Dut_Map[ -1] := 261;  VDDSHV5   }
        Dut_Map[242] := 118; {COM_SPI_DO}{ Dut_Map[ -1] := 262;  GND	   }
        Dut_Map[125] := 119; {COM_MCLK_O}{ Dut_Map[ -1] := 263;  VDD3      }
        Dut_Map[123] := 120; {RTS2      }{ Dut_Map[ -1] := 264;  GND       }
        Dut_Map[119] := 121; {COM_PCM_DO}{ Dut_Map[ -1] := 265;  GND       }
        Dut_Map[233] := 122; {TX2       }{ Dut_Map[ -1] := 266;  VDDSHV5   }
        Dut_Map[243] := 123; {TI_RESERVE}{ Dut_Map[ -1] := 267;  VDDSHV8   }
        Dut_Map[ 20] := 124; {OSC1_OUT  }{ Dut_Map[ -1] := 268;  VDD4      }
        Dut_Map[108] := 125; {MEDIA_CS  }{ Dut_Map[ -1] := 269;  GND	   }
        Dut_Map[229] := 126; {MEDIA_CMD }{ Dut_Map[ -1] := 270;  VDD	   }
        Dut_Map[102] := 127; {MEDIA_DO  }{ Dut_Map[ -1] := 271;  VDDSHV5   }
        Dut_Map[230] := 128; {MEDIA_CLK }{ Dut_Map[ -1] := 272;  VDDSHV5   }
        Dut_Map[118] := 129; {MEDIA_DI  }{ Dut_Map[ -1] := 273;  VDD3	   }
        Dut_Map[117] := 130; {MMC_DAT2  }{ Dut_Map[ -1] := 274;  GND	   }
        Dut_Map[109] := 131; {BT_MCLK_OU}{ Dut_Map[ -1] := 275;  GND       }
        Dut_Map[ 99] := 132; {BT_MCLK_RE}{ Dut_Map[ -1] := 276;  GND       }
        Dut_Map[147] := 133; {LCD_HSYNC }{ Dut_Map[ -1] := 277;  VDDSHV9   }
        Dut_Map[158] := 134; {LCD_VSYNC }{ Dut_Map[ -1] := 278;  GND	   }
        Dut_Map[179] := 135; {LCD_AC	}{ Dut_Map[ -1] := 279;  VDDSHV5   }
        Dut_Map[176] := 136; {LCD_PCLK  }{ Dut_Map[ -1] := 280;  GND	   }
        Dut_Map[157] := 137; {LCD_PIXE15}{ Dut_Map[ -1] := 281;  GND	   }
        Dut_Map[175] := 138; {LCD_PIXE14}{ Dut_Map[ -1] := 282;  VDD2	   }
        Dut_Map[178] := 139; {LCD_PIXE13}{ Dut_Map[ -1] := 283;  GND	   }
        Dut_Map[142] := 140; {LCD_PIXE12}{ Dut_Map[ -1] := 284;  VDDSHV7   }
        Dut_Map[145] := 141; {LCD_PIXE11}{ Dut_Map[ -1] := 285;  VDD	   }
        Dut_Map[174] := 142; {LCD_PIXE10}{ Dut_Map[ -1] := 286;  VDDA	   }
        Dut_Map[204] := 143; {LCD_PIXEL9}{ Dut_Map[ -1] := 287;  GND	   }
        Dut_Map[203] := 144; {LCD_PIXEL8}{ Dut_Map[ -1] := 288;  VDDSHV3   }

        (* The following pins were assigned unused tester  *)
        (* channels for compatability with other pin maps: *)
        Dut_Map[245] := 245; {VDDSHV4   }
        Dut_Map[246] := 246; {VDDSHV4   }
        Dut_Map[247] := 247; {VDD3      }
        Dut_Map[248] := 248; {GND       }
        Dut_Map[249] := 249; {GND       }
        Dut_Map[250] := 250; {GND       }
        Dut_Map[251] := 251; {VDD3      }
        Dut_Map[252] := 252; {GND       }
        Dut_Map[253] := 253; {GND       }
        Dut_Map[254] := 254; {VDDSHV5   }
        Dut_Map[255] := 255; {VDDSHV5   }
        Dut_Map[256] := 256; {GND       }
      END;

{...ftstack01a}
  END; {case of TIDeviceType}

  DutToChanMap(Dut_Map);


    PinTableOpen;


(*    PIN TYPE GROUPS  *)
      PinSet( NRESPWRON ,   1, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MPU_NRESET,   2, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARM_BOOT  ,   3, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TCK       ,   4, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TMS       ,   5, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TDI       ,   6, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NTRST     ,   7, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TDO       ,   8, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NEMU1     ,   9, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NEMU0     ,  10, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CLK32K_IN ,  11, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( OSC1_IN   ,  12, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( OSC32K_IN ,  13, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( OSC32K_OUT,  14, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CONF      ,  15, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NBSCAN    ,  16, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_15  ,  17, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_14  ,  18, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_13  ,  19, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_12  ,  20, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_11  ,  21, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_10  ,  22, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_9   ,  23, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_8   ,  24, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_7   ,  25, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_6   ,  26, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_5   ,  27, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_4   ,  28, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_3   ,  29, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_2   ,  30, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_1   ,  31, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FDATA_0   ,  32, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFRDY     ,  33, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_2    ,  34, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_0    ,  35, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_4    ,  36, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_1    ,  37, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_3    ,  38, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_24   ,  39, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_23   ,  40, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_22   ,  41, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_21   ,  42, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_20   ,  43, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_19   ,  44, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_18   ,  45, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_17   ,  46, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_16   ,  47, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_15   ,  48, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_14   ,  49, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_13   ,  50, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_12   ,  51, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_11   ,  52, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_10   ,  53, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_9    ,  54, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_8    ,  55, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_7    ,  56, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_6    ,  57, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_5    ,  58, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_4    ,  59, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_3    ,  60, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_2    ,  61, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FADD_1    ,  62, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SBANK_1   ,  63, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SBANK_0   ,  64, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_12   ,  65, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_11   ,  66, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_10   ,  67, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_9    ,  68, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_8    ,  69, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_7    ,  70, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_6    ,  71, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_5    ,  72, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_4    ,  73, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_3    ,  74, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_2    ,  75, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_1    ,  76, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SADD_0    ,  77, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NSRAS     ,  78, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NSCAS     ,  79, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NSWE      ,  80, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NSDQML    ,  81, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NSDQMU    ,  82, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDCLK_EN  ,  83, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDCLK     ,  84, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_15  ,  85, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_14  ,  86, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_13  ,  87, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_12  ,  88, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_11  ,  89, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_10  ,  90, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_9   ,  91, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_8   ,  92, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_7   ,  93, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_6   ,  94, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_5   ,  95, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_4   ,  96, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_3   ,  97, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_2   ,  98, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_1   ,  99, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDATA_0   , 100, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( USB_DP    , 101, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( USB_DM    , 102, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( USB_CLKO  , 103, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_MCLK_R, 104, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_DI, 105, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_PCM_CL, 106, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_PCM_SY, 107, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_PCM_DI, 108, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( RX2       , 109, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CTS2      , 110, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_9    , 111, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_8    , 112, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARMIO_3   , 113, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_RS, 114, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_XS, 115, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_kr, 116, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_CL, 117, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SPI_DO, 118, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_MCLK_O, 119, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( RTS2      , 120, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_PCM_DO, 121, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TX2       , 122, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TI_RESERVE, 123, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( OSC1_OUT  , 124, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MEDIA_CS  , 125, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MEDIA_CMD , 126, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MEDIA_DO  , 127, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MEDIA_CLK , 128, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MEDIA_DI  , 129, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( MMC_DAT2  , 130, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_MCLK_OU, 131, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_MCLK_RE, 132, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_HSYNC , 133, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_VSYNC , 134, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_AC    , 135, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PCLK  , 136, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE15, 137, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE14, 138, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE13, 139, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE12, 140, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE11, 141, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXE10, 142, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL9, 143, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL8, 144, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL7, 145, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL6, 146, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL5, 147, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL4, 148, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL3, 149, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL2, 150, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL1, 151, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( LCD_PIXEL_, 152, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( PCM_CLKS  , 153, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( PCM_BIT_CL, 154, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( PCM_SYNC  , 155, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( PCM_DATA_O, 156, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( PCM_DATA_I, 157, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_PCM_DIN, 158, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_PCM_DOU, 159, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_PCM_BCL, 160, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( BT_PCM_SYN, 161, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TX1       , 162, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( RX1       , 163, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CTS1      , 164, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( RTS1      , 165, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TX        , 166, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( RX        , 167, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_15   , 168, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_14   , 169, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_13   , 170, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_12   , 171, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_11   , 172, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_7    , 173, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( GPIO_6    , 174, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARMIO_5   , 175, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARMIO_4   , 176, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARMIO_2   , 177, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( ARMIO_1   , 178, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CLK32K_OUT, 179, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SCL       , 180, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( SDA       , 181, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( WIRE_SDI  , 182, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( WIRE_SDO  , 183, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( WIRE_SCLK , 184, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( WIRE_NSCS0, 185, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( WIRE_NSCS3, 186, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( EXT_FIQ   , 187, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_EXCLK , 188, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_LCLK  , 189, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_7   , 190, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_6   , 191, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_5   , 192, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_4   , 193, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_3   , 194, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_2   , 195, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_1   , 196, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_D_0   , 197, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_VS    , 198, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_HS    , 199, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CAM_RSTZ  , 200, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_5     , 201, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_4     , 202, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_3     , 203, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_2     , 204, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_1     , 205, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBC_0     , 206, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBR_4     , 207, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBR_3     , 208, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBR_2     , 209, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBR_1     , 210, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( KBR_0     , 211, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( CLK32K_CTR, 212, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( COM_SHUTDO, 213, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( TI_RESERd4, 214, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NRESET_OUT, 215, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFCS_3    , 216, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFCS_2    , 217, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFCS_1    , 218, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFCS_0    , 219, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( FCLK      , 220, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFADV     , 221, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFWP      , 222, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFRP      , 223, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFOE      , 224, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFWE      , 225, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFBE_1    , 226, s_IOpin, -1V, 8V, -60mA, 60mA );
      PinSet( NFBE_0    , 227, s_IOpin, -1V, 8V, -60mA, 60mA );

{ftstack01a...}
if (TIDeviceType = FT_STACK_HV) then 
if (TIDeviceType = FT_STACK_LV) then
begin
PinDedicate( s_UPMU2B, 245 );{upmu}
      PinDedicate( s_PWR, {228, 229, 230, 231, 232, 233, 234, 235,
                  236, 237, 238, 239, 240, 241, 242, 243,
                  244, 245,} 246, 247, 248, 249, 250, 251,
                  252, 253, 254, 255, 256 );
end
else
      PinDedicate( s_PWR, 228, 229, 230, 231, 232, 233, 234, 235,
                  236, 237, 238, 239, 240, 241, 242, 243,
                  244, 245, 246, 247, 248, 249, 250, 251,
                  252, 253, 254, 255, 256 );
{...ftstack01a}

      PinListSet( LBC_TEST_PINS,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET,
              NFRDY, SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12,
              SDATA_11, SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6,
              SDATA_5, SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0,
              USB_DP, USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4 );

      PinListSet( LBC_TEST_PINS,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0,
              NEMU1, ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13,
              FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7,
              FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1,
              FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10,
              SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3,
              SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU,
              SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE,
              OSC1_OUT, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK,
              LCD_PIXE15, LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11,
              LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6,
              LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1,
              LCD_PIXEL_, BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK,
              CAM_EXCLK, CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1,
              KBC_0, TDO, COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1,
              NFCS_0, NFADV, NFWP, NFRP, NFOE );

      PinListSet( LBC_TEST_PINS,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ALL_IOR,
              MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_DI, MMC_DAT2, NEMU0,
              NEMU1 );

      PinListSet( CONT_EVEN_VCC_DIODES, {rev01c}
              OSC32K_OUT, OSC32K_IN, KBR_3, KBR_2, KBR_0, CONF, OSC1_IN,
              CLK32K_OUT, SCL, SDA, WIRE_NSCS0, {CAM_VS,} NEMU0, TI_RESERd4,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_7, SADD_6, SADD_2,
              SADD_1, SADD_0, NSRAS, NSDQMU, {USB_CLKO,} TX2, TI_RESERVE,
              LCD_HSYNC, LCD_VSYNC, LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7,
              LCD_PIXEL5, LCD_PIXEL3, LCD_PIXEL_, BT_PCM_DOU, TX1,
              TX, KBC_5, KBC_3, KBC_1, KBC_0, COM_SHUTDO, NFCS_3, NFCS_2,
              NFADV, NFWP, NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18,
              FADD_17, FADD_14, FADD_13, FADD_12, FADD_10, FADD_6,
              FADD_5, FADD_4, FADD_1 );

      PinListSet( CONT_ODD_VCC_DIODES, {rev01c}
              KBR_4, KBR_1, NBSCAN, SDCLK, MEDIA_CLK, WIRE_NSCS3, {CAM_LCLK,}
              {CAM_HS,} NEMU1, ARM_BOOT, FCLK, SADD_10, SADD_9, SADD_8,
              SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML, SDCLK_EN,
              COM_MCLK_O, COM_PCM_DO, OSC1_OUT, BT_MCLK_OU, LCD_AC,
              LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11,
              LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4, LCD_PIXEL2,
              LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, {CAM_RSTZ,}
              KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0, NFRP,
              NFBE_0, FADD_24, FADD_23, FADD_20, FADD_19, FADD_16,
              FADD_15, FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );


      PinListSet( CONT_EVEN_GND_DIODES,
              OSC32K_OUT, OSC32K_IN, PCM_CLKS, PCM_DATA_I, RX1, CTS1,
              WIRE_SDI, KBR_3, KBR_2, KBR_0, CLK32K_CTR, CONF, TCK,
              NTRST, SDATA_14, SDATA_13, SDATA_12, SDATA_10, SDATA_9,
              SDATA_8, SDATA_5, SDATA_4, SDATA_3, SDATA_2, USB_DM,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_CL, OSC1_IN, MEDIA_CMD, MMC_DAT2,
              PCM_DATA_O, RX, GPIO_15, GPIO_12, GPIO_11, GPIO_4, GPIO_3,
              GPIO_2, GPIO_0, ARMIO_5, CLK32K_OUT, SCL, SDA, WIRE_NSCS0,
              CAM_D_7, CAM_D_5, CAM_D_4, CAM_D_1, CAM_VS, NEMU0, TI_RESERd4,
              FDATA_14, FDATA_11, FDATA_9, FDATA_8, FDATA_6, FDATA_4,
              FDATA_3, FDATA_1, FDATA_0, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_7, SADD_6, SADD_2, SADD_1, SADD_0, NSRAS,
              NSDQMU, USB_CLKO, TX2, TI_RESERVE, LCD_HSYNC, LCD_VSYNC,
              LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7, LCD_PIXEL5, LCD_PIXEL3,
              LCD_PIXEL_, BT_PCM_DOU, TX1, TX, KBC_5, KBC_3, KBC_1,
              KBC_0, COM_SHUTDO, NFCS_3, NFCS_2, NFADV, NFWP );

      PinListSet( CONT_EVEN_GND_DIODES,
              NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18, FADD_17,
              FADD_14, FADD_13, FADD_12, FADD_10, FADD_6, FADD_5, FADD_4,
              FADD_1 );

      PinListSet( CONT_ODD_GND_DIODES,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, BT_PCM_DIN,
              EXT_FIQ, KBR_4, KBR_1, TDI, TMS, NBSCAN, MPU_NRESET,
              NFRDY, SDCLK, SDATA_15, SDATA_11, SDATA_7, SDATA_6, SDATA_1,
              SDATA_0, USB_DP, COM_PCM_SY, CTS2, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              PCM_BIT_CL, PCM_SYNC, BT_PCM_BCL, BT_PCM_SYN, GPIO_14,
              GPIO_13, GPIO_7, GPIO_6, GPIO_1, ARMIO_4, ARMIO_2, ARMIO_1,
              WIRE_NSCS3, CAM_LCLK, CAM_D_6, CAM_D_3, CAM_D_2, CAM_D_0,
              CAM_HS, NEMU1, ARM_BOOT, FDATA_15, FDATA_13, FDATA_12,
              FDATA_10, FDATA_7, FDATA_5, FDATA_2, FCLK, SADD_10, SADD_9,
              SADD_8, SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML,
              SDCLK_EN, COM_MCLK_O, COM_PCM_DO, OSC1_OUT, BT_MCLK_OU,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXE11, LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4,
              LCD_PIXEL2, LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0,
              NFRP, NFBE_0 );

      PinListSet( CONT_ODD_GND_DIODES,
              FADD_24, FADD_23, FADD_20, FADD_19, FADD_16, FADD_15,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );

      PinListSet( SHORT_EVEN_VCC_DIODES,
              OSC32K_OUT, OSC32K_IN, KBR_3, KBR_2, KBR_0, CONF, OSC1_IN,
              CLK32K_OUT, SCL, SDA, WIRE_NSCS0, CAM_VS, NEMU0, TI_RESERd4,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_7, SADD_6, SADD_2,
              SADD_1, SADD_0, NSRAS, NSDQMU, USB_CLKO, TX2, TI_RESERVE,
              LCD_HSYNC, LCD_VSYNC, LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7,
              LCD_PIXEL5, LCD_PIXEL3, LCD_PIXEL_, BT_PCM_DOU, TX1,
              TX, KBC_5, KBC_3, KBC_1, KBC_0, COM_SHUTDO, NFCS_3, NFCS_2,
              NFADV, NFWP, NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18,
              FADD_17, FADD_14, FADD_13, FADD_12, FADD_10, FADD_6,
              FADD_5, FADD_4, FADD_1 );

      PinListSet( SHORT_ODD_VCC_DIODES,
              KBR_4, KBR_1, NBSCAN, SDCLK, MEDIA_CLK, WIRE_NSCS3, CAM_LCLK,
              CAM_HS, NEMU1, ARM_BOOT, FCLK, SADD_10, SADD_9, SADD_8,
              SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML, SDCLK_EN,
              COM_MCLK_O, COM_PCM_DO, OSC1_OUT, BT_MCLK_OU, LCD_AC,
              LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11,
              LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4, LCD_PIXEL2,
              LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ,
              KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0, NFRP,
              NFBE_0, FADD_24, FADD_23, FADD_20, FADD_19, FADD_16,
              FADD_15, FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );

      PinListSet( SHORT_EVEN_GND_DIODES,
              OSC32K_OUT, OSC32K_IN, PCM_CLKS, PCM_DATA_I, RX1, CTS1,
              WIRE_SDI, KBR_3, KBR_2, KBR_0, CLK32K_CTR, CONF, TCK,
              NTRST, SDATA_14, SDATA_13, SDATA_12, SDATA_10, SDATA_9,
              SDATA_8, SDATA_5, SDATA_4, SDATA_3, SDATA_2, USB_DM,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_CL, OSC1_IN, MEDIA_CMD, MMC_DAT2,
              PCM_DATA_O, RX, GPIO_15, GPIO_12, GPIO_11, GPIO_4, GPIO_3,
              GPIO_2, GPIO_0, ARMIO_5, CLK32K_OUT, SCL, SDA, WIRE_NSCS0,
              CAM_D_7, CAM_D_5, CAM_D_4, CAM_D_1, CAM_VS, NEMU0, TI_RESERd4,
              FDATA_14, FDATA_11, FDATA_9, FDATA_8, FDATA_6, FDATA_4,
              FDATA_3, FDATA_1, FDATA_0, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_7, SADD_6, SADD_2, SADD_1, SADD_0, NSRAS,
              NSDQMU, USB_CLKO, TX2, TI_RESERVE, LCD_HSYNC, LCD_VSYNC,
              LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7, LCD_PIXEL5, LCD_PIXEL3,
              LCD_PIXEL_, BT_PCM_DOU, TX1, TX, KBC_5, KBC_3, KBC_1,
              KBC_0, COM_SHUTDO, NFCS_3, NFCS_2, NFADV, NFWP );

      PinListSet( SHORT_EVEN_GND_DIODES,
              NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18, FADD_17,
              FADD_14, FADD_13, FADD_12, FADD_10, FADD_6, FADD_5, FADD_4,
              FADD_1 );

      PinListSet( SHORT_ODD_GND_DIODES,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, BT_PCM_DIN,
              EXT_FIQ, KBR_4, KBR_1, TDI, TMS, NBSCAN, MPU_NRESET,
              NFRDY, SDCLK, SDATA_15, SDATA_11, SDATA_7, SDATA_6, SDATA_1,
              SDATA_0, USB_DP, COM_PCM_SY, CTS2, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              PCM_BIT_CL, PCM_SYNC, BT_PCM_BCL, BT_PCM_SYN, GPIO_14,
              GPIO_13, GPIO_7, GPIO_6, GPIO_1, ARMIO_4, ARMIO_2, ARMIO_1,
              WIRE_NSCS3, CAM_LCLK, CAM_D_6, CAM_D_3, CAM_D_2, CAM_D_0,
              CAM_HS, NEMU1, ARM_BOOT, FDATA_15, FDATA_13, FDATA_12,
              FDATA_10, FDATA_7, FDATA_5, FDATA_2, FCLK, SADD_10, SADD_9,
              SADD_8, SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML,
              SDCLK_EN, COM_MCLK_O, COM_PCM_DO, {OSC1_OUT,} BT_MCLK_OU,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXE11, LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4,
              LCD_PIXEL2, LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0,
              NFRP, NFBE_0 );

      PinListSet( SHORT_ODD_GND_DIODES,
              FADD_24, FADD_23, FADD_20, FADD_19, FADD_16, FADD_15,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );

      PinListSet( ALL_CMOSa,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, PCM_CLKS,
              PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ,
              KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF,
              TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET, NFRDY, SDCLK,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_MCLK_R, COM_SPI_DI,
              COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL, COM_SPI_DO,
              RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O, BT_PCM_BCL,
              BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13, GPIO_12, GPIO_11,
              GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0,
              ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT, SCL,
              SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7, CAM_D_6,
              CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0,
              CAM_VS );

      PinListSet( ALL_CMOSa,
              CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22 );

      PinListSet( ALL_CMOSa,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14, FADD_13, FADD_12, FADD_11, FADD_10,
              FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3,
              FADD_2, FADD_1 );

      PinListSet( CMOSa3V_INS,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, PCM_CLKS,
              PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ,
              KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF,
              TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET{, NFRDY} );

      PinListSet( CMOSa3V_OUTS,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU,
              LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU,
              TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ,
              KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO,
              NRESET_OUT {, NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP,
              NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14, FADD_13, FADD_12, FADD_11, FADD_10,
              FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3,
              FADD_2, FADD_1} );

      PinListSet( CMOSa3V_IOS,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_MCLK_R,
              COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8,
              ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O,
              BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13,
              GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4 {,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK} );

      PinListSet( CMOSa18V_INS,
              NFRDY );

      PinListSet( CMOSa18V_OUTS,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP,
              NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14, FADD_13, FADD_12, FADD_11, FADD_10,
              FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3,
              FADD_2, FADD_1 );

      PinListSet( CMOSa18V_IOS,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK );

      PinListSet( ALL_OSC,
              OSC32K_OUT, OSC32K_IN, OSC1_IN, OSC1_OUT );

      PinListSet( OSC1V_INS,
              OSC32K_OUT, OSC32K_IN );

      PinListSet( OSC1V_OUTS,
              OSC1_OUT );

      PinListSet( OSC1V_IOS,
              OSC1_IN );

      PinListSet( ALL_USB,
              USB_DP, USB_DM );

      PinListSet( USB3V_IOSY,
              USB_DP );

      PinListSet( USB3V_IOSYZ,
              USB_DM );

      PinListSet( CMOS3V2MA,
              BT_PCM_DOU, TX1, RTS1 );

      PinListSet( CMOS3V4MA,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_MCLK_R, COM_SPI_DI,
              COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL, COM_SPI_DO,
              RTS2, SBANK_1,
              SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7,
              SADD_6, SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, SADD_0,
              NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, TX, WIRE_SDO, WIRE_SCLK,
              KBC_5, KBC_4, KBC_3, KBC_2, KBC_1 );

      PinListSet( CMOS3V4MA,
              KBC_0, TDO, COM_SHUTDO, NRESET_OUT );

      PinListSet( CMOS18V4MA,
              NFCS_3, NFCS_2, NFCS_1,
              NFCS_0, NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0,
              FADD_24, FADD_23, FADD_22, FADD_21, FADD_20, FADD_19,
              FADD_18, FADD_17, FADD_16, FADD_15, FADD_14, FADD_13,
              FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6,
              FADD_5, FADD_4, FADD_3, FADD_2, FADD_1,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, 
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( CMOS3V8MA,
              CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2,
              CAM_D_1, CAM_D_0, USB_CLKO, CAM_EXCLK, CAM_RSTZ );

      PinListSet( IN0_TS1,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS1,
              CLK32K_IN );

      PinListSet( IN2_TS1,
              TCK );

      PinListSet( IO1_TS1,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS1,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS2,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS2,
              CLK32K_IN, TCK );

      PinListSet( IO1_TS2,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS2,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS3,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS3,
              OSC32K_OUT );

      PinListSet( IN3_TS3,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS3,
              OSC1_IN );

      PinListSet( IO2_TS3,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( IO3_TS3,
              GPIO_15,  GPIO_13); {rev01i}

      PinListSet( OUT1_TS3,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS4,
              TCK );

      PinListSet( IN2_TS4,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS4,
              OSC1_IN );

      PinListSet( IO2_TS4,
              SDCLK, SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6,
              USB_DP, USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_CL, RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O,
              BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13,
              GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO3_TS4,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_SPI_DO,
              FCLK );

      PinListSet( IO4_TS4,
              GPIO_8 );

      PinListSet( OUT1_TS4,
              SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7,
              SADD_6, SADD_5, SADD_4, SADD_3, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, OSC1_OUT, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NFCS_2,
              NFCS_0, NFWP, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( OUT2_TS4,
              SBANK_1, SADD_2, SADD_1, SADD_0, NRESET_OUT, NFCS_3,
              NFCS_1, NFADV, NFRP, NFOE, NFWE, NFBE_1 );

      PinListSet( IN0_TS5,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS5,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS5,
              OSC32K_OUT );

      PinListSet( IO1_TS5,
              OSC1_IN, CAM_D_6 );

      PinListSet( IO2_TS5,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2,
              CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT,
              TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11,
              FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5,
              FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK );

      PinListSet( OUT1_TS5,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS6,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS6,
              CLK32K_IN, TCK );

      PinListSet( IO1_TS6,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS6,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS7,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS7,
              CLK32K_IN, TCK );

      PinListSet( IO1_TS7,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS7,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS8,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS8,
              CLK32K_IN, TCK );

      PinListSet( IO1_TS8,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS8,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS9,
              TCK );

      PinListSet( IN2_TS9,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS9,
              OSC1_IN );

      PinListSet( IO2_TS9,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS9,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );



      PinListSet( IN1_TS9z,
              TCK );

      PinListSet( IN2_TS9z,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS9z,
              OSC1_IN );

      PinListSet( IO2_TS9z,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS9z,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );





      PinListSet( IN0_TS10,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS10,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS10,
              OSC32K_OUT );

      PinListSet( IO1_TS10,
              OSC1_IN );

      PinListSet( IO2_TS10,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS10,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS11,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS11,
              OSC32K_OUT );

      PinListSet( IN3_TS11,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS11,
              OSC1_IN );

      PinListSet( IO2_TS11,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS11,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS12,
              CLK32K_IN, TCK );

      PinListSet( IN2_TS12,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS12,
              OSC1_IN );

      PinListSet( IO2_TS12,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS12,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS13,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS13,
              OSC1_IN );

      PinListSet( IO2_TS13,
              SDCLK, SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6,
              USB_DP, USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_CL, RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O,
              BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13,
              GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO3_TS13,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_SPI_DO,
              FCLK );

      PinListSet( IO4_TS13,
              GPIO_8 );

      PinListSet( OUT1_TS13,
              SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7,
              SADD_6, SADD_5, SADD_4, SADD_3, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, OSC1_OUT, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NFCS_2,
              NFCS_0, NFWP, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( OUT2_TS13,
              SBANK_1, SADD_2, SADD_1, SADD_0, NRESET_OUT, NFCS_3,
              NFCS_1, NFADV, NFRP, NFOE, NFWE, NFBE_1 );

      PinListSet( IN0_TS14,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS14,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS14,
              OSC32K_OUT );

      PinListSet( IO1_TS14,
              OSC1_IN );

      PinListSet( IO2_TS14,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS14,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS15,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS15,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS15,
              OSC32K_OUT );

      PinListSet( IO1_TS15,
              OSC1_IN );

      PinListSet( IO2_TS15,
              GPIO_15, GPIO_14, GPIO_13, GPIO_7 );

      PinListSet( IO3_TS15,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_12,
              GPIO_11, GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0,
              ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, SCL, SDA, WIRE_NSCS0,
              WIRE_NSCS3, CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, ARM_BOOT,
              TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11,
              FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5,
              FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK );

      PinListSet( IO4_TS15,
              NEMU0, NEMU1 );

      PinListSet( IO5_TS15,
              CLK32K_OUT );

      PinListSet( OUT1_TS15,
              SADD_12, SADD_10, SADD_9, SADD_6, SADD_5, SADD_3, SADD_2,
              SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              NRESET_OUT, NFCS_2, NFRP, NFBE_1, NFBE_0, FADD_24, FADD_23,
              FADD_22, FADD_21, FADD_20, FADD_19, FADD_18, FADD_17,
              FADD_16, FADD_15, FADD_14, FADD_13, FADD_12, FADD_11,
              FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4,
              FADD_3, FADD_2, FADD_1 );

      PinListSet( OUT2_TS15,
              SBANK_1, SBANK_0, SADD_11, SADD_8, SADD_7, SADD_4, SADD_1,
              NFCS_3, NFCS_1, NFCS_0, NFADV, NFWP, NFOE, NFWE );

      PinListSet( OUT3_TS15,
              COM_SHUTDO );

      PinListSet( IN1_TS16,
              OSC32K_IN, TCK );

      PinListSet( IN2_TS16,
              CLK32K_IN );

      PinListSet( IN3_TS16,
              OSC32K_OUT );

      PinListSet( IN4_TS16,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS16,
              OSC1_IN );

      PinListSet( IO2_TS16,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FCLK );

      PinListSet( IO3_TS16,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( OUT1_TS16,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS17,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS17,
              OSC1_IN );

      PinListSet( IO2_TS17,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO3_TS17,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FCLK );

      PinListSet( OUT1_TS17,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS18,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS18,
              OSC32K_OUT );

      PinListSet( IN3_TS18,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS18,
              OSC1_IN );

      PinListSet( IO2_TS18,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS18,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS19,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS19,
              KBR_4, TCK );

      PinListSet( IO1_TS19,
              OSC1_IN );

      PinListSet( IO2_TS19,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO3_TS19,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FCLK );

      PinListSet( OUT1_TS19,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS20,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS20,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS20,
              OSC32K_OUT );

      PinListSet( IO1_TS20,
              OSC1_IN );

      PinListSet( IO2_TS20,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS20,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS21,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS21,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS21,
              OSC32K_OUT );

      PinListSet( IO1_TS21,
              OSC1_IN );

      PinListSet( IO2_TS21,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS21,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS22,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS22,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS22,
              OSC32K_OUT );

      PinListSet( IO1_TS22,
              OSC1_IN );

      PinListSet( IO2_TS22,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS22,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS23,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS23,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS23,
              OSC32K_OUT );

      PinListSet( IO1_TS23,
              OSC1_IN );

      PinListSet( IO2_TS23,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS23,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS24,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS24,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS24,
              OSC32K_OUT );

      PinListSet( IO1_TS24,
              OSC1_IN );

      PinListSet( IO2_TS24,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS24,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS25,
              OSC32K_OUT, OSC32K_IN, CLK32K_IN, NRESPWRON, EXT_FIQ,
              CLK32K_CTR, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS25,
              COM_PCM_DI, RX2, BT_MCLK_RE, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN,
              RX1, CTS1, WIRE_SDI, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CONF, TDI, TMS, TCK );

      PinListSet( IO1_TS25,
              OSC1_IN );

      PinListSet( IO2_TS25,
              NEMU0, NEMU1 );

      PinListSet( IO3_TS25,
              GPIO_6, GPIO_4 );

      PinListSet( IO4_TS25,
              GPIO_3 );

      PinListSet( IO5_TS25,
              GPIO_15, GPIO_14, GPIO_13, ARMIO_1 );

      PinListSet( IO6_TS25,
              GPIO_11, GPIO_7, WIRE_NSCS0, CAM_LCLK, CAM_D_7, CAM_VS,
              CAM_HS );

      PinListSet( IO7_TS25,
              MEDIA_DO, MEDIA_DI );

      PinListSet( IO8_TS25,
              CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1 );

      PinListSet( IO9_TS25,
              COM_SPI_kr, GPIO_2, GPIO_1 );

      PinListSet( IO10_TS25,
              GPIO_0 );

      PinListSet( IO11_TS25,
              CAM_D_6, CAM_D_0 );

      PinListSet( IO12_TS25,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2 );

      PinListSet( IO13_TS25,
              PCM_SYNC, RX, SCL, WIRE_NSCS3, ARM_BOOT );

      PinListSet( IO14_TS25,
              BT_PCM_BCL, ARMIO_5, ARMIO_4, TI_RESERd4 );

      PinListSet( IO15_TS25,
              PCM_BIT_CL, GPIO_12 );

      PinListSet( IO16_TS25,
              ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_CL, MMC_DAT2,
              BT_PCM_SYN );

      PinListSet( IO17_TS25,
              SDA );

      PinListSet( IO18_TS25,
              GPIO_8 );

      PinListSet( IO19_TS25,
              GPIO_9 );

      PinListSet( IO20_TS25,
              USB_DM );

      PinListSet( IO21_TS25,
              USB_DP );

      PinListSet( IO22_TS25,
              FDATA_15, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_0 );

      PinListSet( IO23_TS25,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_2, FDATA_1 );

      PinListSet( IO24_TS25,
              ARMIO_2 );

      PinListSet( IO25_TS25,
              MEDIA_CS );

      PinListSet( IO26_TS25,
              MEDIA_CMD );

      PinListSet( IO27_TS25,
              PCM_DATA_O );

      PinListSet( IO28_TS25,
              COM_SPI_DO );

      PinListSet( IO29_TS25,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_3,
              MEDIA_CLK, FCLK );

      PinListSet( IO30_TS25,
              CLK32K_OUT );

      PinListSet( IO31_TS25,
              SDCLK );

      PinListSet( IO32_TS25,
              SDATA_4, SDATA_2, SDATA_1, SDATA_0, RTS2 );

      PinListSet( OUT1_TS25,
              TDO );

      PinListSet( OUT2_TS25,
              SBANK_1, SADD_4, SADD_3, NSDQML, NSDQMU, LCD_HSYNC, LCD_VSYNC,
              LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL2, LCD_PIXEL_, TX, WIRE_SDO, WIRE_SCLK,
              CAM_EXCLK, COM_SHUTDO, NFCS_0, NFWP );

      PinListSet( OUT3_TS25,
              COM_PCM_DO, TX2, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL3,
              LCD_PIXEL1, NFCS_2, NFBE_1, NFBE_0, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14 );

      PinListSet( OUT4_TS25,
              USB_CLKO, BT_PCM_DOU );

      PinListSet( OUT5_TS25,
              TI_RESERVE, CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1,
              KBC_0 );

      PinListSet( OUT6_TS25,
              NRESET_OUT );

      PinListSet( OUT7_TS25,
              SADD_10, SADD_5, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, SDCLK_EN, NFCS_3, NFCS_1, NFADV, NFRP, NFOE, NFWE,
              FADD_24, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( OUT8_TS25,
              BT_MCLK_OU );

      PinListSet( OUT9_TS25,
              OSC1_OUT );

      PinListSet( OUT10_TS25,
              COM_MCLK_O );

      PinListSet( OUT11_TS25,
              TX1, RTS1 );

      PinListSet( OUT12_TS25,
              SBANK_0, SADD_12, SADD_11, SADD_9, SADD_8, SADD_7, SADD_6,
              LCD_AC );

      PinListSet( IN0_TS26,
              OSC32K_OUT, OSC32K_IN, CLK32K_IN, NRESPWRON, EXT_FIQ,
              CLK32K_CTR, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IN1_TS26,
              COM_PCM_DI, RX2, BT_MCLK_RE, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN,
              RX1, CTS1, WIRE_SDI, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CONF, TDI, TMS, TCK );

      PinListSet( IO1_TS26,
              OSC1_IN );

      PinListSet( IO2_TS26,
              NEMU0, NEMU1 );

      PinListSet( IO3_TS26,
              GPIO_6, GPIO_4 );

      PinListSet( IO4_TS26,
              GPIO_3 );

      PinListSet( IO5_TS26,
              GPIO_15, GPIO_14, GPIO_13, ARMIO_1 );

      PinListSet( IO6_TS26,
              GPIO_11, GPIO_7, WIRE_NSCS0, CAM_LCLK, CAM_D_7, CAM_VS,
              CAM_HS );

      PinListSet( IO7_TS26,
              MEDIA_DO, MEDIA_DI );

      PinListSet( IO8_TS26,
              CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1 );

      PinListSet( IO9_TS26,
              COM_SPI_kr, GPIO_2, GPIO_1 );

      PinListSet( IO10_TS26,
              GPIO_0 );

      PinListSet( IO11_TS26,
              CAM_D_6, CAM_D_0 );

      PinListSet( IO12_TS26,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2 );

      PinListSet( IO13_TS26,
              PCM_SYNC, RX, SCL, WIRE_NSCS3, ARM_BOOT );

      PinListSet( IO14_TS26,
              BT_PCM_BCL, ARMIO_5, ARMIO_4, TI_RESERd4 );

      PinListSet( IO15_TS26,
              PCM_BIT_CL, GPIO_12 );

      PinListSet( IO16_TS26,
              GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_CL,
              MMC_DAT2, BT_PCM_SYN );

      PinListSet( IO17_TS26,
              SDA );

      PinListSet( IO18_TS26,
              GPIO_9 );

      PinListSet( IO19_TS26,
              USB_DM );

      PinListSet( IO20_TS26,
              USB_DP );

      PinListSet( IO21_TS26,
              FDATA_15, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_0 );

      PinListSet( IO22_TS26,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_2, FDATA_1 );

      PinListSet( IO23_TS26,
              ARMIO_2 );

      PinListSet( IO24_TS26,
              MEDIA_CS );

      PinListSet( IO25_TS26,
              MEDIA_CMD );

      PinListSet( IO26_TS26,
              PCM_DATA_O );

      PinListSet( IO27_TS26,
              COM_SPI_DO );

      PinListSet( IO28_TS26,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_3,
              MEDIA_CLK, FCLK );

      PinListSet( IO29_TS26,
              CLK32K_OUT );

      PinListSet( IO30_TS26,
              SDCLK );

      PinListSet( IO31_TS26,
              SDATA_4, SDATA_2, SDATA_1, SDATA_0, RTS2 );

      PinListSet( OUT1_TS26,
              TDO );

      PinListSet( OUT2_TS26,
              SBANK_1, SADD_4, SADD_3, NSDQML, NSDQMU, LCD_HSYNC, LCD_VSYNC,
              LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL2, LCD_PIXEL_, TX, WIRE_SDO, WIRE_SCLK,
              CAM_EXCLK, COM_SHUTDO, NFCS_0, NFWP );

      PinListSet( OUT3_TS26,
              COM_PCM_DO, TX2, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL3,
              LCD_PIXEL1, NFCS_2, NFBE_1, NFBE_0, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14 );

      PinListSet( OUT4_TS26,
              USB_CLKO, BT_PCM_DOU );

      PinListSet( OUT5_TS26,
              TI_RESERVE, CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1,
              KBC_0 );

      PinListSet( OUT6_TS26,
              NRESET_OUT );

      PinListSet( OUT7_TS26,
              SADD_10, SADD_5, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, SDCLK_EN, NFCS_3, NFCS_1, NFADV, NFRP, NFOE, NFWE,
              FADD_24, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( OUT8_TS26,
              BT_MCLK_OU );

      PinListSet( OUT9_TS26,
              OSC1_OUT );

      PinListSet( OUT10_TS26,
              COM_MCLK_O );

      PinListSet( OUT11_TS26,
              TX1, RTS1 );

      PinListSet( OUT12_TS26,
              SBANK_0, SADD_12, SADD_11, SADD_9, SADD_8, SADD_7, SADD_6,
              LCD_AC );

      PinListSet( IN1_TS27,
              OSC32K_IN, CLK32K_IN, KBR_4, TCK );

      PinListSet( IN2_TS27,
              OSC32K_OUT );

      PinListSet( IN3_TS27,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_3, KBR_2,
              KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST, NBSCAN,
              MPU_NRESET, NFRDY );

      PinListSet( IO1_TS27,
              OSC1_IN );

      PinListSet( IO2_TS27,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS27,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS28,
              OSC32K_IN, CLK32K_IN, TCK );

      PinListSet( IN2_TS28,
              OSC32K_OUT );

      PinListSet( IN3_TS28,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, TDI, TMS, NTRST,
              NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS28,
              OSC1_IN );

      PinListSet( IO2_TS28,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_MCLK_R,
              COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8,
              ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O,
              BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13,
              GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK );

      PinListSet( IO3_TS28,
              USB_DP );

      PinListSet( IO4_TS28,
              USB_DM );

      PinListSet( OUT1_TS28,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

{revqb01 ...}
      PinListSet( IN0_TS29,
              TDI, TMS, NTRST, MPU_NRESET );

      PinListSet( IN1_TS29,
              OSC32K_IN, TCK );

      PinListSet( IN2_TS29,
              CLK32K_IN );

      PinListSet( IN3_TS29,
              OSC32K_OUT );

      PinListSet( IN4_TS29,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, NBSCAN, NFRDY );

      PinListSet( IO1_TS29,
              OSC1_IN );

      PinListSet( IO2_TS29,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO,
              MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC,
              PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14,
              GPIO_13, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4,
              FCLK );

      PinListSet( IO3_TS29,
              GPIO_0 );

      PinListSet( IO4_TS29,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO5_TS29,
              MEDIA_CMD, GPIO_12 );

      PinListSet( OUT1_TS29,
              TDO );

      PinListSet( OUT2_TS29,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO,
              NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP,
              NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14, FADD_13, FADD_12, FADD_11, FADD_10,
              FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3,
              FADD_2, FADD_1 );
{... revqb01}

      PinListSet( IN1_TS30,
              TCK );

      PinListSet( IN2_TS30,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0,
              CLK32K_CTR, CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET,
              NFRDY );

      PinListSet( IO1_TS30,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CS,
              MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS30,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN1_TS31,
              CLK32K_IN );

      PinListSet( IN2_TS31,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1, WIRE_SDI,
              EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, TCK, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS31,
              OSC1_IN );

      PinListSet( IO2_TS31,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS31,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( IN0_TS32,
              TDI, TMS, NTRST, MPU_NRESET );

      PinListSet( IN1_TS32,
              OSC32K_IN, TCK );

      PinListSet( IN2_TS32,
              CLK32K_IN );

      PinListSet( IN3_TS32,
              OSC32K_OUT );

      PinListSet( IN4_TS32,
              COM_PCM_DI, RX2, BT_MCLK_RE, NRESPWRON, PCM_CLKS, PCM_DATA_I,
              BT_PCM_DIN, RX1, CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3,
              KBR_2, KBR_1, KBR_0, CLK32K_CTR, CONF, NBSCAN, NFRDY );

      PinListSet( IO1_TS32,
              OSC1_IN );

      PinListSet( IO2_TS32,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO,
              MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC,
              PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14,
              GPIO_13, GPIO_11, GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2,
              GPIO_1, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_D_7,
              CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1,
              CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1, ARM_BOOT, TI_RESERd4,
              FCLK );

      PinListSet( IO3_TS32,
              GPIO_0 );

      PinListSet( IO4_TS32,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IO5_TS32,
              MEDIA_CMD, GPIO_12 );

      PinListSet( OUT1_TS32,
              TDO );

      PinListSet( OUT2_TS32,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO,
              NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP,
              NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22,
              FADD_21, FADD_20, FADD_19, FADD_18, FADD_17, FADD_16,
              FADD_15, FADD_14, FADD_13, FADD_12, FADD_11, FADD_10,
              FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3,
              FADD_2, FADD_1 );

{es26v01f...}
      PinListSet( IN1_TS33,
              KBR_4, TCK );

      PinListSet( IN2_TS33,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, CLK32K_IN, BT_MCLK_RE,
              NRESPWRON, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1, CTS1,
              WIRE_SDI, EXT_FIQ, KBR_3, KBR_2, KBR_1, KBR_0, CLK32K_CTR,
              CONF, TDI, TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY );

      PinListSet( IO1_TS33,
              OSC1_IN );

      PinListSet( IO2_TS33,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS,
              COM_SPI_kr, COM_SPI_CL, COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, NEMU0, NEMU1,
              ARM_BOOT, TI_RESERd4, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              FCLK );

      PinListSet( OUT1_TS33,
              SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN,
              USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT,
              BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15,
              LCD_PIXE14, LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10,
              LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5,
              LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_,
              BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO,
              COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2, NFCS_1, NFCS_0,
              NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1, NFBE_0, FADD_24,
              FADD_23, FADD_22, FADD_21, FADD_20, FADD_19, FADD_18,
              FADD_17, FADD_16, FADD_15, FADD_14, FADD_13, FADD_12,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );
{...es26v01f}

{rev20a...}
      PinListSet( IN1_TS34,
              NRESPWRON, MPU_NRESET, TCK, TMS, TDI, NTRST, CLK32K_IN,
              OSC32K_IN, OSC32K_OUT, CONF, NBSCAN, NFRDY, COM_PCM_DI,
              RX2, BT_MCLK_RE, PCM_CLKS, PCM_DATA_I, BT_PCM_DIN, RX1,
              CTS1, WIRE_SDI, EXT_FIQ, KBR_4, KBR_3, KBR_2, KBR_1,
              KBR_0, CLK32K_CTR );

      PinListSet( IO1_TS34,
              OSC1_IN );

      PinListSet( IO2_TS34,
              SDCLK );

      PinListSet( IO3_TS34,
              ARM_BOOT, NEMU1, NEMU0, FDATA_15, FDATA_14, FDATA_13,
              FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7,
              FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1,
              FDATA_0, GPIO_2, GPIO_0, GPIO_4, GPIO_1, GPIO_3, SDATA_15,
              SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10, SDATA_9,
              SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4, SDATA_3,
              SDATA_2, SDATA_1, SDATA_0, USB_DP, USB_DM, COM_MCLK_R,
              COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8,
              ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O,
              BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13,
              GPIO_12, GPIO_11, GPIO_7, GPIO_6, ARMIO_5, ARMIO_4, ARMIO_2,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, TI_RESERVE,
              FCLK );

      PinListSet( OUT1_TS34,
              TDO, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20, FADD_19,
              FADD_18, FADD_17, FADD_16, FADD_15, FADD_14, FADD_13,
              FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6,
              FADD_5, FADD_4, FADD_3, FADD_2, FADD_1, SBANK_1, SBANK_0,
              SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6,
              SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS,
              NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0 );

      PinListSet( OUT2_TS34,
              BT_MCLK_OU );
{...rev20a}

      PinListSet( ICCQ_OPEN_PM1,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_SPI_DO,
              RTS2, MEDIA_CS, MEDIA_CLK, PCM_DATA_O, CLK32K_OUT, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT, BT_MCLK_OU, LCD_HSYNC,
              LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU,
              TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ,
              KBC_5, KBC_4, KBC_3, KBC_2 );

      PinListSet( ICCQ_OPEN_PM1,
              KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT, NFCS_3, NFCS_2,
              NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE, NFWE, NFBE_1,
              NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20,
              FADD_19, FADD_18, FADD_17, FADD_16, FADD_15, FADD_14,
              FADD_13, FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7,
              FADD_6, FADD_5, FADD_4, FADD_3, FADD_2, FADD_1 );
{rev21a...
      PinListSet( ICCQ_OPEN_PM29,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM29,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

...rev21a}

{rev21a...}
      PinListSet( ICCQ_OPEN_PM29,
              SDCLK, USB_DP, USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2,
              OSC1_IN, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2,
              PCM_DATA_O, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7,
              GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, OSC1_OUT, BT_MCLK_OU, LCD_HSYNC,
              LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3 );


      PinListSet( ICCQ_OPEN_PM29,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );
{...rev21a}

      PinListSet( ICCQ_OPEN_PM30,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM30,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM31,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM31,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM32,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM32,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM33,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM33,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM34,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );

      PinListSet( ICCQ_OPEN_PM34,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM35,
              SDCLK, USB_DP, USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2,
              OSC1_IN, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2,
              PCM_DATA_O, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7,
              GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2 );

      PinListSet( ICCQ_OPEN_PM35,
              LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO,
              WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5, KBC_4, KBC_3,
              KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT, NFCS_3,
              NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE, NFWE,
              NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20,
              FADD_19, FADD_18, FADD_17, FADD_16, FADD_15, FADD_14,
              FADD_13, FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7,
              FADD_6, FADD_5, FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( ICCQ_OPEN_PM36,
              SDCLK, USB_DP, USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2,
              OSC1_IN, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2,
              PCM_DATA_O, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7,
              GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2 );

      PinListSet( ICCQ_OPEN_PM36,
              LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO,
              WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5, KBC_4, KBC_3,
              KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT, NFCS_3,
              NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE, NFWE,
              NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20,
              FADD_19, FADD_18, FADD_17, FADD_16, FADD_15, FADD_14,
              FADD_13, FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7,
              FADD_6, FADD_5, FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( ICCQ_OPEN_PM37,
              SDCLK, USB_DP, USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2,
              OSC1_IN, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2,
              PCM_DATA_O, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7,
              GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT,
              SCL, SDA, WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4,
              CAM_D_3, CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5,
              SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS,
              NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2 );

      PinListSet( ICCQ_OPEN_PM37,
              LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1, RTS1, TX, WIRE_SDO,
              WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5, KBC_4, KBC_3,
              KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT, NFCS_3,
              NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE, NFWE,
              NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20,
              FADD_19, FADD_18, FADD_17, FADD_16, FADD_15, FADD_14,
              FADD_13, FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7,
              FADD_6, FADD_5, FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( ICCQ_OPEN_PM38,

{
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, USB_DP,
              USB_DM, GPIO_9, GPIO_8, COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CMD,
              MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2, PCM_DATA_O,
              GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, GPIO_4,
              GPIO_3, GPIO_2, GPIO_1, GPIO_0, CLK32K_OUT, SCL, SDA,
              WIRE_NSCS0, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, FDATA_15, FDATA_14,
              FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9, FDATA_8,
              FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, USB_CLKO, COM_MCLK_O, COM_PCM_DO, TX2,
              TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC );
}

              {TDO,} OSC1_IN, FDATA_15, FDATA_14, FDATA_13, FDATA_12,
              FDATA_11, FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6,
              FDATA_5, FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0,
              GPIO_2, GPIO_0, GPIO_4, GPIO_1, GPIO_3, FADD_24, FADD_23,
              FADD_22, FADD_21, FADD_20, FADD_19, FADD_18, FADD_17,
              FADD_16, FADD_15, FADD_14, FADD_13, FADD_12, FADD_11,
              FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5, FADD_4,
              FADD_3, FADD_2, FADD_1, SBANK_1, SBANK_0, SADD_12, SADD_11,
              SADD_10, SADD_9, SADD_8, SADD_7, SADD_6, SADD_5, SADD_4,
              SADD_3, SADD_2, SADD_1, SADD_0, NSRAS, NSCAS, NSWE, NSDQML,
              NSDQMU, SDCLK_EN, SDCLK, USB_DP, {USB_DM,} USB_CLKO, GPIO_9,
              GPIO_8, COM_SPI_DO, COM_MCLK_O, RTS2, COM_PCM_DO, TX2,
              TI_RESERVE, {OSC1_OUT,} MEDIA_CMD, MEDIA_DO, MEDIA_CLK,
              MEDIA_DI, MMC_DAT2, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7 );

      PinListSet( ICCQ_OPEN_PM38,

{
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU, TX1,
              RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, TDO, COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );
}
              LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2,
              LCD_PIXEL1, LCD_PIXEL_, PCM_DATA_O, BT_PCM_DOU, TX1,
              RTS1, TX, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_7,
              GPIO_6, CLK32K_OUT, SCL, SDA, WIRE_SDO, WIRE_SCLK, WIRE_NSCS0,
              CAM_EXCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_HS, CAM_RSTZ, KBC_5, KBC_4,
              KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO, NRESET_OUT, NFCS_3,
              NFCS_2, NFCS_1, NFCS_0, FCLK, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0 );


      PinListSet( ICCQ_OPEN_PM39,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, GPIO_9,
              COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CLK, PCM_DATA_O, ARMIO_5,
              CLK32K_OUT, FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11,
              FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5,
              FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1,
              SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7,
              SADD_6, SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, SADD_0,
              NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO,
              COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, {OSC1_OUT,} BT_MCLK_OU,
              LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU,
              TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ,
              KBC_5, KBC_4 );

      PinListSet( ICCQ_OPEN_PM39,
              KBC_3, KBC_2, KBC_1, KBC_0, {TDO, }COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_OPEN_PM40,
              SDCLK, SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11,
              SDATA_10, SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5,
              SDATA_4, SDATA_3, SDATA_2, SDATA_1, SDATA_0, GPIO_9,
              COM_SPI_DO, RTS2, OSC1_IN, MEDIA_CLK, PCM_DATA_O, ARMIO_5,
              CLK32K_OUT, FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11,
              FDATA_10, FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5,
              FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0, FCLK, SBANK_1,
              SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7,
              SADD_6, SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, SADD_0,
              NSRAS, NSCAS, NSWE, NSDQML, NSDQMU, SDCLK_EN, USB_CLKO,
              COM_MCLK_O, COM_PCM_DO, TX2, TI_RESERVE, {OSC1_OUT,} BT_MCLK_OU,
              LCD_HSYNC, LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3, LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, BT_PCM_DOU,
              TX1, RTS1, TX, WIRE_SDO, WIRE_SCLK, CAM_EXCLK, CAM_RSTZ,
              KBC_5, KBC_4 );

      PinListSet( ICCQ_OPEN_PM40,
              KBC_3, KBC_2, KBC_1, KBC_0, {TDO,} COM_SHUTDO, NRESET_OUT,
              NFCS_3, NFCS_2, NFCS_1, NFCS_0, NFADV, NFWP, NFRP, NFOE,
              NFWE, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12, FADD_11, FADD_10, FADD_9,
              FADD_8, FADD_7, FADD_6, FADD_5, FADD_4, FADD_3, FADD_2,
              FADD_1 );

      PinListSet( ICCQ_ZPINS_PM29,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM30,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM31,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM32,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM33,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM34,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM35,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM36,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM37,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM38,
              OSC1_OUT );

      PinListSet( ICCQ_ZPINS_PM39,
              USB_DP, USB_DM, COM_SPI_RS, COM_SPI_kr, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, RX, ARMIO_1, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, TI_RESERd4, TDO );

      PinListSet( ICCQ_ZPINS_PM40,
              USB_DP, USB_DM, COM_SPI_RS, COM_SPI_kr, MMC_DAT2, PCM_BIT_CL,
              PCM_SYNC, RX, ARMIO_1, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1, CAM_D_0, CAM_VS, CAM_HS, TI_RESERd4, TDO );

      PinListSet( LU_INS,
              OSC32K_OUT, NRESPWRON, PCM_CLKS, EXT_FIQ, KBR_4, KBR_2,
              KBR_0, CLK32K_CTR, NTRST, MPU_NRESET, NFRDY, NEMU0 );

      PinListSet( EVEN3V_INS,
              PCM_CLKS, KBR_3, KBR_2, KBR_0, CLK32K_CTR );

      PinListSet( ODD3V_INS,
              CLK32K_IN, NRESPWRON, EXT_FIQ, KBR_4, KBR_1, NBSCAN,
              MPU_NRESET, NFRDY );

      PinListSet( EVEN_PINS,
              OSC32K_OUT, OSC32K_IN, PCM_CLKS, PCM_DATA_I, RX1, CTS1,
              WIRE_SDI, KBR_3, KBR_2, KBR_0, CLK32K_CTR, CONF, TCK,
              NTRST, SDATA_14, SDATA_13, SDATA_12, SDATA_10, SDATA_9,
              SDATA_8, SDATA_5, SDATA_4, SDATA_3, SDATA_2, USB_DM,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_CL, OSC1_IN, MEDIA_CMD, MMC_DAT2,
              PCM_DATA_O, RX, GPIO_15, GPIO_12, GPIO_11, GPIO_4, GPIO_3,
              GPIO_2, GPIO_0, ARMIO_5, CLK32K_OUT, SCL, SDA, WIRE_NSCS0,
              CAM_D_7, CAM_D_5, CAM_D_4, CAM_D_1, CAM_VS, NEMU0, TI_RESERd4,
              FDATA_14, FDATA_11, FDATA_9, FDATA_8, FDATA_6, FDATA_4,
              FDATA_3, FDATA_1, FDATA_0, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_7, SADD_6, SADD_2, SADD_1, SADD_0, NSRAS,
              NSDQMU, USB_CLKO, TX2, TI_RESERVE, LCD_HSYNC, LCD_VSYNC,
              LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7, LCD_PIXEL5, LCD_PIXEL3,
              LCD_PIXEL_, BT_PCM_DOU, TX1, TX, KBC_5, KBC_3, KBC_1,
              KBC_0, COM_SHUTDO, NFCS_3, NFCS_2, NFADV, NFWP );

      PinListSet( EVEN_PINS,
              NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18, FADD_17,
              FADD_14, FADD_13, FADD_12, FADD_10, FADD_6, FADD_5, FADD_4,
              FADD_1 );

      PinListSet( ODD_PINS,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, BT_PCM_DIN,
              EXT_FIQ, KBR_4, KBR_1, TDI, TMS, NBSCAN, MPU_NRESET,
              NFRDY, SDCLK, SDATA_15, SDATA_11, SDATA_7, SDATA_6, SDATA_1,
              SDATA_0, USB_DP, COM_PCM_SY, CTS2, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              PCM_BIT_CL, PCM_SYNC, BT_PCM_BCL, BT_PCM_SYN, GPIO_14,
              GPIO_13, GPIO_7, GPIO_6, GPIO_1, ARMIO_4, ARMIO_2, ARMIO_1,
              WIRE_NSCS3, CAM_LCLK, CAM_D_6, CAM_D_3, CAM_D_2, CAM_D_0,
              CAM_HS, NEMU1, ARM_BOOT, FDATA_15, FDATA_13, FDATA_12,
              FDATA_10, FDATA_7, FDATA_5, FDATA_2, FCLK, SADD_10, SADD_9,
              SADD_8, SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML,
              SDCLK_EN, COM_MCLK_O, COM_PCM_DO, OSC1_OUT, BT_MCLK_OU,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXE11, LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4,
              LCD_PIXEL2, LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0,
              NFRP, NFBE_0 );

      PinListSet( ODD_PINS,
              FADD_24, FADD_23, FADD_20, FADD_19, FADD_16, FADD_15,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );

      PinListSet( PINS_EVEN_ROWS,
              CLK32K_IN, PCM_DATA_I, RX1, KBR_2, KBR_1, CONF, TDI,
              TMS, NTRST, NBSCAN, MPU_NRESET, NFRDY, SDATA_15, SDATA_13,
              SDATA_12, SDATA_10, SDATA_8, SDATA_7, SDATA_5, SDATA_4,
              SDATA_0, USB_DP, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY,
              CTS2, GPIO_8, ARMIO_3, COM_SPI_kr, COM_SPI_CL, OSC1_IN,
              MEDIA_CS, MEDIA_CMD, MEDIA_CLK, PCM_SYNC, PCM_DATA_O,
              BT_PCM_SYN, GPIO_15, GPIO_7, GPIO_6, GPIO_4, GPIO_3,
              GPIO_2, ARMIO_5, ARMIO_4, CLK32K_OUT, SCL, SDA, WIRE_NSCS3,
              CAM_D_4, CAM_D_3, CAM_D_2, CAM_D_1, NEMU0, FDATA_15,
              FDATA_14, FDATA_11, FDATA_10, FDATA_9, FDATA_5, FDATA_4,
              FDATA_3, SBANK_1, SADD_11, SADD_9, SADD_6, SADD_5, SADD_3,
              SADD_0, NSCAS, NSDQML, NSDQMU, SDCLK_EN, COM_MCLK_O,
              TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC,
              LCD_PIXE15, LCD_PIXE11, LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL6,
              LCD_PIXEL4, LCD_PIXEL1, LCD_PIXEL_, TX1, TX, WIRE_SCLK,
              CAM_EXCLK, CAM_RSTZ, KBC_2, KBC_1, KBC_0, COM_SHUTDO,
              NFCS_2, NFCS_1, NFCS_0 );

      PinListSet( PINS_EVEN_ROWS,
              NFWP, NFBE_1, FADD_23, FADD_22, FADD_16, FADD_15, FADD_14,
              FADD_13, FADD_9, FADD_6, FADD_5, FADD_2 );

      PinListSet( PINS_ODD_ROWS,
              COM_PCM_DI, RX2, OSC32K_OUT, OSC32K_IN, BT_MCLK_RE, NRESPWRON,
              PCM_CLKS, BT_PCM_DIN, CTS1, WIRE_SDI, EXT_FIQ, KBR_4,
              KBR_3, KBR_0, CLK32K_CTR, TCK, SDCLK, SDATA_14, SDATA_11,
              SDATA_9, SDATA_6, SDATA_3, SDATA_2, SDATA_1, USB_DM,
              COM_MCLK_R, GPIO_9, COM_SPI_RS, COM_SPI_XS, COM_SPI_DO,
              RTS2, MEDIA_DO, MEDIA_DI, MMC_DAT2, PCM_BIT_CL, BT_PCM_BCL,
              RX, GPIO_14, GPIO_13, GPIO_12, GPIO_11, GPIO_1, GPIO_0,
              ARMIO_2, ARMIO_1, WIRE_NSCS0, CAM_LCLK, CAM_D_7, CAM_D_6,
              CAM_D_5, CAM_D_0, CAM_VS, CAM_HS, NEMU1, ARM_BOOT, TI_RESERd4,
              FDATA_13, FDATA_12, FDATA_8, FDATA_7, FDATA_6, FDATA_2,
              FDATA_1, FDATA_0, FCLK, SBANK_0, SADD_12, SADD_10, SADD_8,
              SADD_7, SADD_4, SADD_2, SADD_1, NSRAS, NSWE, USB_CLKO,
              COM_PCM_DO, OSC1_OUT, LCD_PCLK, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE10, LCD_PIXEL7, LCD_PIXEL5, LCD_PIXEL3,
              LCD_PIXEL2, BT_PCM_DOU, RTS1, WIRE_SDO, KBC_5, KBC_4,
              KBC_3, TDO, NRESET_OUT, NFCS_3, NFADV, NFRP, NFOE, NFWE,
              NFBE_0 );

      PinListSet( PINS_ODD_ROWS,
              FADD_24, FADD_21, FADD_20, FADD_19, FADD_18, FADD_17,
              FADD_12, FADD_11, FADD_10, FADD_8, FADD_7, FADD_4, FADD_3,
              FADD_1 );

      PinListSet( PINS_EVEN_COLUMNS,
              OSC32K_OUT, OSC32K_IN, PCM_CLKS, PCM_DATA_I, RX1, CTS1,
              WIRE_SDI, KBR_3, KBR_2, KBR_0, CLK32K_CTR, CONF, TCK,
              NTRST, SDATA_14, SDATA_13, SDATA_12, SDATA_10, SDATA_9,
              SDATA_8, SDATA_5, SDATA_4, SDATA_3, SDATA_2, USB_DM,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_CL, OSC1_IN, MEDIA_CMD, MMC_DAT2,
              PCM_DATA_O, RX, GPIO_15, GPIO_12, GPIO_11, GPIO_4, GPIO_3,
              GPIO_2, GPIO_0, ARMIO_5, CLK32K_OUT, SCL, SDA, WIRE_NSCS0,
              CAM_D_7, CAM_D_5, CAM_D_4, CAM_D_1, CAM_VS, NEMU0, TI_RESERd4,
              FDATA_14, FDATA_11, FDATA_9, FDATA_8, FDATA_6, FDATA_4,
              FDATA_3, FDATA_1, FDATA_0, SBANK_1, SBANK_0, SADD_12,
              SADD_11, SADD_7, SADD_6, SADD_2, SADD_1, SADD_0, NSRAS,
              NSDQMU, USB_CLKO, TX2, TI_RESERVE, LCD_HSYNC, LCD_VSYNC,
              LCD_PIXE14, LCD_PIXEL9, LCD_PIXEL7, LCD_PIXEL5, LCD_PIXEL3,
              LCD_PIXEL_, BT_PCM_DOU, TX1, TX, KBC_5, KBC_3, KBC_1,
              KBC_0, COM_SHUTDO, NFCS_3, NFCS_2, NFADV, NFWP );

      PinListSet( PINS_EVEN_COLUMNS,
              NFOE, NFWE, NFBE_1, FADD_22, FADD_21, FADD_18, FADD_17,
              FADD_14, FADD_13, FADD_12, FADD_10, FADD_6, FADD_5, FADD_4,
              FADD_1 );

      PinListSet( PINS_ODD_COLUMNS,
              COM_PCM_DI, RX2, CLK32K_IN, BT_MCLK_RE, NRESPWRON, BT_PCM_DIN,
              EXT_FIQ, KBR_4, KBR_1, TDI, TMS, NBSCAN, MPU_NRESET,
              NFRDY, SDCLK, SDATA_15, SDATA_11, SDATA_7, SDATA_6, SDATA_1,
              SDATA_0, USB_DP, COM_PCM_SY, CTS2, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_DO, RTS2, MEDIA_CS, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              PCM_BIT_CL, PCM_SYNC, BT_PCM_BCL, BT_PCM_SYN, GPIO_14,
              GPIO_13, GPIO_7, GPIO_6, GPIO_1, ARMIO_4, ARMIO_2, ARMIO_1,
              WIRE_NSCS3, CAM_LCLK, CAM_D_6, CAM_D_3, CAM_D_2, CAM_D_0,
              CAM_HS, NEMU1, ARM_BOOT, FDATA_15, FDATA_13, FDATA_12,
              FDATA_10, FDATA_7, FDATA_5, FDATA_2, FCLK, SADD_10, SADD_9,
              SADD_8, SADD_5, SADD_4, SADD_3, NSCAS, NSWE, NSDQML,
              SDCLK_EN, COM_MCLK_O, COM_PCM_DO, OSC1_OUT, BT_MCLK_OU,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXE11, LCD_PIXE10, LCD_PIXEL8, LCD_PIXEL6, LCD_PIXEL4,
              LCD_PIXEL2, LCD_PIXEL1, RTS1, WIRE_SDO, WIRE_SCLK, CAM_EXCLK,
              CAM_RSTZ, KBC_4, KBC_2, TDO, NRESET_OUT, NFCS_1, NFCS_0,
              NFRP, NFBE_0 );

      PinListSet( PINS_ODD_COLUMNS,
              FADD_24, FADD_23, FADD_20, FADD_19, FADD_16, FADD_15,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_3, FADD_2 );

      PinListSet( EVN_IN_PD1,
              PCM_DATA_I, RX1, {CTS1,} WIRE_SDI, TCK );

      PinListSet( ODD_IN_PD1,
              COM_PCM_DI, RX2, BT_MCLK_RE, BT_PCM_DIN, TDI, TMS );

      PinListSet( EVN_IN_PD2,
              CONF, NTRST );

      PinListSet( CMOSa3V_IN_ODD,
              CLK32K_IN, NRESPWRON, EXT_FIQ, KBR_4, KBR_1, NBSCAN,
              MPU_NRESET, NFRDY );

      PinListSet( CMOSa3V_IN_EVEN,
              PCM_CLKS, KBR_3, KBR_2, KBR_0, CLK32K_CTR );

      PinListSet( OSC1V_IN_EVEN,
              OSC32K_OUT, OSC32K_IN );

      PinListSet( VOHCMOSa3V1_PM6,
              NSWE, NSDQML, NSDQMU, NRESET_OUT );

      PinListSet( VOHCMOSa3V1_PM8,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2,
              GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_CL, COM_SPI_DO, NFRP, NFOE, NFWE );

      PinListSet( VOHCMOSa3V2_PM8,
              USB_CLKO );

      PinListSet( VOHCMOSa3V1_PM9,
              COM_MCLK_O );

{new VOUT pingroups...}
      PinListSet( VOHCMOSa3V1_PM1,
              FCLK );

{rev08a...}
      PinListSet( VOHCMOSa3V2_PM1,
              NSWE, NSDQML, NSDQMU, NRESET_OUT {, NFCS_3, NFCS_2, NFCS_1,
              NFCS_0, NFADV, NFRP, NFOE, NFWE} );

      PinListSet( VOHCMOSa18V2_PM1,
              NFCS_3, NFCS_2, NFCS_1,
              NFCS_0, NFADV, NFRP, NFOE, NFWE );
{...rev08a}
      PinListSet( VOHCMOSa3V3_PM1,
              USB_CLKO );

      PinListSet( VOLCMOSa3V1_PM1,
              SDCLK, MEDIA_CS, MEDIA_CLK, PCM_DATA_O, CLK32K_OUT );

      PinListSet( VOLCMOSa3V2_PM1,
              BT_PCM_DOU, TX1, RTS1 );

      PinListSet( VOLCMOSa3V3_PM1,
              FADD_24, FADD_23, FADD_22, FADD_21, FADD_20, FADD_19,
              FADD_18, FADD_17, FADD_16, FADD_15, FADD_14, FADD_13,
              FADD_12, FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6,
              FADD_5, FADD_4, FADD_3, FADD_2, FADD_1, SBANK_1, SBANK_0,
              SADD_12, SADD_11, SADD_10, SADD_9, SADD_8, SADD_7, SADD_6,
              SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, SADD_0, SDATA_15,
              SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10, SDATA_9,
              SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4, SDATA_3,
              SDATA_2, SDATA_1, SDATA_0, COM_SPI_DO, COM_MCLK_O, RTS2,
              COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC,
              LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13,
              LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8,
              LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3,
              LCD_PIXEL2, LCD_PIXEL1, LCD_PIXEL_, TX, WIRE_SDO, WIRE_SCLK,
              KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO,
              NFWP, NFBE_1, NFBE_0 );

      PinListSet( VOLCMOSa3V4_PM1,
              CAM_EXCLK, CAM_RSTZ );

      PinListSet( VOLCMOSa3V1_PM3,
              NRESET_OUT );

      PinListSet( VOLCMOSa3V2_PM3,
              USB_CLKO );

      PinListSet( VOLCMOSa3V1_PM5,
              NFRP );

      PinListSet( VOHCMOSa3V1_PM12,
              FDATA_13, FDATA_12, FDATA_10, FDATA_9, FDATA_8, FDATA_7,
              FDATA_6, FDATA_4, FDATA_2, FDATA_1 );

      PinListSet( VOLCMOSa3V1_PM13,
              NSRAS, NSCAS, NSWE, NFCS_3, NFADV, NFOE );

      PinListSet( VOHCMOSa3V1_PM14,
              SADD_10, SADD_9, SADD_8, SADD_0 );

      PinListSet( VOLCMOSa3V1_PM15,
              FDATA_15, NSDQML, NSDQMU );

{rev08a...}
      PinListSet( VOHCMOSa3V1_PM16,
              FDATA_14, FDATA_11, FDATA_5, FDATA_3, FDATA_0, FADD_13,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_4, FADD_3, FADD_2,
              FADD_1, SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_7, SADD_6,
              SADD_5, SADD_4, SADD_3, SADD_2, SADD_1, NSRAS, SDCLK_EN,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_SHUTDO );

      PinListSet( VOHCMOSa18V1_PM16,
              FDATA_14, FDATA_11, FDATA_5, FDATA_3, FDATA_0, FADD_13,
              FADD_11, FADD_9, FADD_8, FADD_7, FADD_4, FADD_3, FADD_2,
              FADD_1 );
{...rev08a}

      PinListSet( VOLCMOSa3V1_PM18,
              FCLK );

      PinListSet( VOLCMOSa3V2_PM18,
              FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10, FDATA_9,
              FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4, FDATA_3,
              FDATA_2, FDATA_1, FDATA_0, SDCLK_EN, NFCS_1, NFWE );

{rev08a...}
      PinListSet( VOHCMOSa3V1_PM20,
              NSCAS );

      PinListSet( VOHCMOSa18V1_PM20,
              FDATA_15, FADD_24, FADD_23, FADD_22, FADD_21, FADD_20,
              FADD_19, FADD_18, FADD_17, FADD_16, FADD_15, FADD_14,
              FADD_12, FADD_10, FADD_6, FADD_5 );
{...rev08a}

      PinListSet( VOLCMOSa3V1_PM21,
              NFCS_2 );


      PinListSet( VOLCMOSa3V1_PM22,
              ARM_BOOT, GPIO_2, GPIO_0, GPIO_4, GPIO_1, GPIO_3, MEDIA_CMD,
              MEDIA_DO, MEDIA_DI, MMC_DAT2, PCM_BIT_CL, PCM_SYNC, BT_PCM_BCL,
              BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13, GPIO_12, GPIO_11,
              GPIO_7, GPIO_6, ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, SCL,
              SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_VS, CAM_HS,
              TI_RESERVE );

      PinListSet( VOLCMOSa3V2_PM22,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2,
              GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_CL );

      PinListSet( VOLCMOSa3V3_PM22,
              CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2,
              CAM_D_1, CAM_D_0 );


      PinListSet( VOHCMOSa3V1_PM23,
              COM_MCLK_R, COM_SPI_DI, COM_PCM_CL, COM_PCM_SY, CTS2,
              GPIO_9, GPIO_8, ARMIO_3, COM_SPI_RS, COM_SPI_XS, COM_SPI_kr,
              COM_SPI_CL, COM_SPI_DO, COM_MCLK_O );


      PinListSet( VOHCMOSa3V1_PM24,
              MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI, MMC_DAT2 );

      PinListSet( VOHCMOSa3V2_PM24,
              RTS2, COM_PCM_DO, TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC,
              LCD_VSYNC, LCD_AC, LCD_PCLK, LCD_PIXE15, LCD_PIXE14,
              LCD_PIXE13, LCD_PIXE12, LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9,
              LCD_PIXEL8, LCD_PIXEL7, LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4,
              LCD_PIXEL3, LCD_PIXEL2 );


      PinListSet( VOHCMOSa3V1_PM25,
              LCD_PIXEL1, LCD_PIXEL_ );

      PinListSet( VOHCMOSa3V1_PM26,
              GPIO_2, GPIO_0, GPIO_4, GPIO_1, GPIO_3, PCM_BIT_CL, PCM_SYNC,
              PCM_DATA_O, BT_PCM_BCL, BT_PCM_SYN, RX, GPIO_15, GPIO_14,
              GPIO_13, GPIO_12, GPIO_11, GPIO_7, GPIO_6, ARMIO_5, ARMIO_4 );

      PinListSet( VOHCMOSa3V2_PM26,
              BT_PCM_DOU, TX1, RTS1 );

      PinListSet( VOHCMOSa3V3_PM26,
              TX );

      PinListSet( VOHCMOSa3V1_PM27,
              ARMIO_2, ARMIO_1, CLK32K_OUT );

      PinListSet( VOHCMOSa3V1_PM28,
              WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK );

      PinListSet( VOHCMOSa3V2_PM28,
              WIRE_SDO, WIRE_SCLK );

      PinListSet( VOHCMOSa3V3_PM28,
              CAM_EXCLK, CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3,
              CAM_D_2, CAM_D_1 );

      PinListSet( VOHCMOSa3V1_PM29,
              CAM_VS );

      PinListSet( VOHCMOSa3V2_PM29,
              CAM_D_0 );

      PinListSet( VOHCMOSa3V1_PM30,
              ARM_BOOT, CAM_HS, TI_RESERVE );

      PinListSet( VOHCMOSa3V2_PM30,
              KBC_5, KBC_4, KBC_3, KBC_2, KBC_1, KBC_0 );

      PinListSet( VOHCMOSa3V3_PM30,
              CAM_RSTZ );

      PinListSet( VOHCMOSa3V1_PM31,
              TDO );


      PinListSet( VOLCMOSa3V1_PM32,
              TDO );

      PinListSet( VOLOSC1V1_PM5,
              OSC1_IN );



{...xyz}



{xyz...}
{new LEAKAGE pingroups...}


      PinListSet( IILIOCMOSa3V_PM2,
              RTS2, MEDIA_CLK, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O, RX,
              ARMIO_1, CLK32K_OUT, SCL, SDA, WIRE_NSCS0, WIRE_NSCS3,
              CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_4, CAM_D_1, CAM_D_0,
              CAM_VS );


      PinListSet( IILIOOSC1V_PM2,
              OSC1_IN );


      PinListSet( IOP1_PM2,
              NEMU1, NEMU0, MEDIA_CS );


      PinListSet( IOP2_PM2,
              MEDIA_CMD, MEDIA_DO, MEDIA_DI, MMC_DAT2 );


      PinListSet( IIHIOCMOSa3V_PM3,
              RTS2, PCM_SYNC, RX, ARMIO_1, SCL, WIRE_NSCS3, CAM_LCLK,
              CAM_D_6, CAM_D_4, CAM_D_0 );


      PinListSet( IOD1_PM3,
              GPIO_2, GPIO_0, GPIO_4, COM_SPI_DI, COM_PCM_SY, GPIO_9,
              ARMIO_3, COM_SPI_XS, COM_SPI_CL, BT_PCM_BCL, GPIO_14,
              GPIO_12, GPIO_7, ARMIO_4, CAM_D_2, CAM_HS, TI_RESERVE );


      PinListSet( IIHIOCMOSa3V_PM4,
              MEDIA_CLK, PCM_BIT_CL, PCM_DATA_O, CLK32K_OUT, SDA, WIRE_NSCS0,
              CAM_D_7, CAM_D_1, CAM_VS );


      PinListSet( IOD1_PM4,
              ARM_BOOT, GPIO_1, GPIO_3, COM_MCLK_R, COM_PCM_CL, CTS2,
              GPIO_8, COM_SPI_RS, COM_SPI_kr, COM_SPI_DO, BT_PCM_SYN,
              GPIO_15, GPIO_13, GPIO_11, GPIO_6, ARMIO_5, ARMIO_2,
              CAM_D_5, CAM_D_3 );


      PinListSet( IILIOCMOSa3V_PM7,
              FDATA_11 );


      PinListSet( IILIOCMOSa3V_PM8,
              FDATA_7, FDATA_3, FDATA_0 );


      PinListSet( IIHIOCMOSa3V_PM9,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1 );


      PinListSet( IIHIOCMOSa3V_PM10,
              FDATA_0 );


      PinListSet( IILIOCMOSa3V_PM11,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_10, FDATA_9,
              FDATA_8, FDATA_6, FDATA_5, FDATA_4, FDATA_2, FDATA_1 );


      PinListSet( IIHIOCMOSa3V_PM17,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0 );


      PinListSet( IILIOCMOSa3V_PM19,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0 );

{...xyz}


      PinListSet( VOLCMOSa3V1_PM7,
              SDCLK, MEDIA_CS, MEDIA_CMD, MEDIA_DO, MEDIA_CLK, MEDIA_DI,
              MMC_DAT2, PCM_BIT_CL, PCM_SYNC, PCM_DATA_O, BT_PCM_BCL,
              BT_PCM_SYN, RX, GPIO_15, GPIO_14, GPIO_13, GPIO_12, GPIO_11,
              GPIO_7, GPIO_6, GPIO_4, GPIO_3, GPIO_2, GPIO_1, GPIO_0,
              ARMIO_5, ARMIO_4, ARMIO_2, ARMIO_1, CLK32K_OUT, SCL,
              SDA, WIRE_NSCS0, WIRE_NSCS3, CAM_LCLK, CAM_VS, CAM_HS,
              ARM_BOOT, TI_RESERd4 );

      PinListSet( VOLCMOSa3V2_PM7,
              BT_PCM_DOU, TX1, RTS1 );

      PinListSet( VOLCMOSa3V3_PM7,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0, COM_MCLK_R, COM_SPI_DI,
              COM_PCM_CL, COM_PCM_SY, CTS2, GPIO_9, GPIO_8, ARMIO_3,
              COM_SPI_RS, COM_SPI_XS, COM_SPI_kr, COM_SPI_CL, COM_SPI_DO,
              RTS2, SBANK_1, SBANK_0, SADD_12, SADD_11, SADD_10, SADD_9,
              SADD_8, SADD_7, SADD_6, SADD_5, SADD_4, SADD_3, SADD_2,
              SADD_1, SADD_0, NSRAS, NSCAS, SDCLK_EN, COM_MCLK_O, COM_PCM_DO,
              TX2, TI_RESERVE, BT_MCLK_OU, LCD_HSYNC, LCD_VSYNC, LCD_AC,
              LCD_PCLK, LCD_PIXE15, LCD_PIXE14, LCD_PIXE13, LCD_PIXE12,
              LCD_PIXE11, LCD_PIXE10, LCD_PIXEL9, LCD_PIXEL8, LCD_PIXEL7,
              LCD_PIXEL6, LCD_PIXEL5, LCD_PIXEL4, LCD_PIXEL3, LCD_PIXEL2,
              LCD_PIXEL1, LCD_PIXEL_, TX, WIRE_SDO, WIRE_SCLK, KBC_5,
              KBC_4, KBC_3, KBC_2, KBC_1, KBC_0, COM_SHUTDO, NRESET_OUT,
              NFWP, NFBE_1, NFBE_0, FADD_24, FADD_23, FADD_22, FADD_21,
              FADD_20, FADD_19, FADD_18, FADD_17, FADD_16, FADD_15,
              FADD_14, FADD_13, FADD_12 );

      PinListSet( VOLCMOSa3V3_PM7,
              FADD_11, FADD_10, FADD_9, FADD_8, FADD_7, FADD_6, FADD_5,
              FADD_4, FADD_3, FADD_2, FADD_1 );

      PinListSet( VOLCMOSa3V4_PM7,
              CAM_D_7, CAM_D_6, CAM_D_5, CAM_D_4, CAM_D_3, CAM_D_2,
              CAM_D_1, CAM_D_0, USB_CLKO, CAM_EXCLK, CAM_RSTZ );

      PinListSet( IIHIOCMOSa3V_PM16,
              FDATA_15, FDATA_14, FDATA_13, FDATA_12, FDATA_11, FDATA_10,
              FDATA_9, FDATA_8, FDATA_7, FDATA_6, FDATA_5, FDATA_4,
              FDATA_3, FDATA_2, FDATA_1 );

      PinListSet( IILIOCMOSa3V_PM1,
              PCM_BIT_CL, PCM_SYNC, RX, ARMIO_1, SCL, SDA, WIRE_NSCS0,
              WIRE_NSCS3, CAM_LCLK, CAM_D_7, CAM_D_6, CAM_D_4, CAM_D_1,
              CAM_D_0, CAM_VS );

      PinListSet( IILIOCMOSa3V_PM14,
              FDATA_15, FDATA_14, FDATA_13, FDATA_11 );

      PinListSet( IILIOCMOSa3V_PM15,
              FDATA_12, FDATA_10, FDATA_8, FDATA_7, FDATA_6, FDATA_5,
              FDATA_4, FDATA_3, FDATA_2, FDATA_1, FDATA_0 );

      PinListSet( IILIOCMOSa3V_PM24,
              SDATA_15, SDATA_14, SDATA_13, SDATA_12, SDATA_11, SDATA_10,
              SDATA_9, SDATA_8, SDATA_7, SDATA_6, SDATA_5, SDATA_4,
              SDATA_3, SDATA_2, SDATA_1, SDATA_0 );

      PinListSet( IILIOOSC1V_PM1,
              OSC1_IN );

      PinListSet( IOP1_PM1,
              NEMU0, NEMU1 );

      PinListSet( IOP2_PM1,
              MEDIA_CMD, MEDIA_DO, MEDIA_DI, MMC_DAT2 );

      PinListSet( IOD1_PM16,
              COM_MCLK_R, ARM_BOOT );


      PinListSet (ALL_PINS_9,
              IN1_TS9, IN2_TS9, IO1_TS9, IO2_TS9, OUT1_TS9 ); {rev01h}

      PinListSet( ALL_PINS, ALL_CMOSa, ALL_OSC, ALL_USB );

      PinListSet( ALL_PINS_VMARGIN, CMOSa3V_INS, CMOSa3V_OUTS, CMOSa3V_IOS,
                  USB3V_IOSY, USB3V_IOSYZ ); {rev01h}

      (* All signal pins plus all PMU power pins. *)
      PinListSet( ALL_PINS_PLUS, ALL_PINS );

#ifdef $Site_SPC_flag then
#if $Site_SPC_flag then
#if ($Device_SPC = 'TRUE') then
Find_Parameter_File(Pin_Maps);
#endif;
#endif;
#endif;

    PinTableClose;

    lbc_routine;

    for I := 1 to 512 do
      begin
        DL_ARRAY[I] := FALSE;
      end;

    (* Array of differential pin pairs *)
    DiffArray[1,1] := USB_DP;             DiffArray[1,2] := USB_DM;

  end;  (* INITIALIZE_PINS *)


procedure SetSupplyVars;
(*
***********************************************************************
****                                                               ****
**** Set or modify Supply variables.                               ****
****                                                               ****
***********************************************************************
*)
var
  mult : real;
  temp : treal;
  scf, tcf, nbti : treal;

begin

scf:= 10mV;

if TITestTemp = Temp_N45_deg 
   then tcf:=  40mV
   else tcf:=   0mV;      
   
    VMN3V  := 2.50V - scf; 		
    VNM3V  := 2.75V; 
    VMX3V  := 3.60V + scf; 	
 
    VMX1V_I:= 1.50V;		{ICCQ 1.5V}
    VMX3V_I:= 3.00V;		{ICCQ 3.0V}

    VMN1LV :=  1.025V;    	{LoMin test}

    VOUT18V:= (VMX3V/2);        {Vout 1.8V}
    
    VOSC1V := 1.5V;		{Osc 1.5V}
    VOSC3V := 3.0V;		{Osc 3.0V}

case TIDeviceType of
  FT_1_HV    ,
  FT_STACK_HV,
  PB_1_HV    ,
  FT_13_HV   ,
  PB_12_HV   :
  begin

    nbti:= 40mV;
   
    FREQARM := 77.7ns;  {180MHz with Multiplier = 14}
    FREQDSP := 40ns;    {200MHz with Multiplier =  8}
    FREQTC  := 60ns;    {100MHz with Multiplier =  6}

    VMN1V  := 1.66V - scf - tcf - nbti;  		 
    VNM1V  := 1.72V;
    VMX1V  := 1.79V + scf;  		 			 

    VTMN1V := 1.66V - scf - tcf - nbti; {Vout    1.35V}
    VTMN3V := 2.50V - scf;  		{Vout    2.50V} 
    VMN1V_VIHL := 1.66V - scf;	        {VIHL_MIN 1.3V}
    VMN3V_VIHL := 2.50V - scf;	        {VIHL_MIN 2.5V}
    
    VTMX1V := 1.79V + scf;              {Leakage 1.50V}
    VTMX3V := 3.60V + scf; 		{Leakage 3.00V}
    VMX1V_VIHL := 1.79V + scf;	        {VIHL_MAX 1.9V}	
    VMX3V_VIHL := 3.60V + scf;	        {VIHL_MAX 3.6V}

  end;

  FT_1_LV    ,
  FT_STACK_LV,
  PB_1_LV    ,
  FT_13_LV   ,
  PB_12_LV   :
  begin

    nbti:= 25mV;

    FREQARM := 86ns;    {162MHz with Multiplier = 14}
    FREQDSP := 42ns;    {190MHz with Multiplier =  8}
    FREQTC  := 63ns;    { 95MHz with Multiplier =  6}	 			

    VMN1V  := 1.525V - scf - tcf - nbti;  		 
    VNM1V  := 1.500V;
    VMX1V  := 1.675V + scf;  		 			 

    VTMN1V := 1.525V - scf - tcf - nbti; {Vout    1.35V}
    VTMN3V := 2.500V - scf;  		 {Vout    2.50V} 
    VMN1V_VIHL := 1.525V - scf;	         {VIHL_MIN 1.3V}
    VMN3V_VIHL := 2.500V - scf;	         {VIHL_MIN 2.5V}
    
    VTMX1V := 1.675V + scf;              {Leakage 1.50V}
    VTMX3V := 3.600V + scf; 		 {Leakage 3.00V}
    VMX1V_VIHL := 1.675V + scf;	         {VIHL_MAX 1.9V}	
    VMX3V_VIHL := 3.600V + scf;	         {VIHL_MAX 3.6V}

  end;    
end; {CASE}    
       
end;  (* SetSupplyVars *)


procedure INITIALIZE_TEST_LIMIT_ARRAYS;
(*
***********************************************************************
****            INITIALIZE TEMP LIMIT ARRAYS                       ****
****                                                               ****
****            TEMP TYPES ARE:                                    ****
****                                                               ****
****              HOT                                              ****
****              ROOM                                             ****
****                                                               ****
****                                                               ****
****                                                               ****
***********************************************************************
*)

 begin

    (* TIMING GUARDBAND *)

    TGB_ARR[HOT_CHUCKS] := 1nS;
    TGB_ARR[HOT]        := 1nS;
    TGB_ARR[ROOM]       := 1nS;
    TGB_ARR[TEMP]       := 0nS;
    TGB_ARR[COLD]       := 0nS;

    PROPGB_ARR[HOT_CHUCKS] := 0.5nS;
    PROPGB_ARR[HOT]        := 0.5nS;
    PROPGB_ARR[ROOM]       := 0.5nS;
    PROPGB_ARR[TEMP]       := 0nS;
    PROPGB_ARR[COLD]       := 0nS;

    (* Shmoo Voltage Range *)

    SetSupplyVars;

    { Functional }
    VMINF  := 750mV; {rev01f}
    VMAXF  := 2.50V; {rev01f}
    VSTEPF := 25mV;  {rev01f}

    TMINF  := 0nS;  {rev01f}
    TMAXF  := 0nS; {rev01f}
    TSTEPF := 0nS;   {rev01f}

    { IDDQ }
    VMINI  := 2.0V;
    VMAXI  := 2.145V;
    VSTEPI := 100mV;

    { Delay }
    VMIND  := 1.5V;
    VMAXD  := 0.8V;
    VSTEPD := -25mV;

    CP := 50;    (* Cal per centage *)

    (* ICCQ *)

{## SUPPLY SHORTS ##}
{OMAP-DSP to 2mA and 2.5mA clamp}

    ICCQSUPSHRT_MIN_ARR[HOT] :=  -125.00UA;
    ICCQSUPSHRT_MAX_ARR[HOT] :=  2.0mA;		{hijirev10e}
    ICCQSUPSHRT_RANGE_ARR[HOT] := 2.5mA;

    ICCQSUPSHRT_MIN_ARR[ROOM] :=  -125.00UA;
    ICCQSUPSHRT_MAX_ARR[ROOM] :=  1mA;		{hijirev10e}
    ICCQSUPSHRT_RANGE_ARR[ROOM] := 1.5mA;

    ICCQ_MIN_ARR[HOT] :=  -125.00UA;
    ICCQ_MAX_ARR[HOT] :=  5mA;			{hijirev10e}
    ICCQ_RANGE_ARR[HOT] :=  5mA;

    ICCQ_MIN_ARR[ROOM] :=  -50.00UA;
    ICCQ_MAX_ARR[ROOM] :=  1mA;			{hijirev10e}
    ICCQ_RANGE_ARR[ROOM] :=  1.5mA;



{hijirev10h...}
{## ICCQ ARM ##}

{OMAP-DSP to 400uA}

    ICCQ_AMIN_ARR[HOT] :=  -12.5UA;
    ICCQ_AMAX_ARR[HOT] :=  400uA;{hijirev05n}
    ICCQ_ARANGE_ARR[HOT] :=  499uA;{hijirev19b}

    ICCQ_AMIN_ARR[ROOM] :=  -10.00UA;
    ICCQ_AMAX_ARR[ROOM] :=  40.0UA;
    ICCQ_ARANGE_ARR[ROOM] :=  49.0UA;

{## ICCQ DPLL ##}
    ICCQ_DMIN_ARR[HOT] :=  -12.5UA;
    ICCQ_DMAX_ARR[HOT] :=  200uA;
    ICCQ_DRANGE_ARR[HOT] :=  499uA;{hijirev19b}

    ICCQ_DMIN_ARR[ROOM] :=  -10.00UA;
    ICCQ_DMAX_ARR[ROOM] :=  45uA;
    ICCQ_DRANGE_ARR[ROOM] :=  49.0UA;

{## ICCQ IO ##}
    ICCQ_IMIN_ARR[HOT] :=  -12.5UA;
    ICCQ_IMAX_ARR[HOT] :=  25uA;
    ICCQ_IRANGE_ARR[HOT] :=  49uA;

{OMAP-DSP from 15uA to 100uA}

    ICCQ_IMIN_ARR[ROOM] :=  -10.00UA;
    ICCQ_IMAX_ARR[ROOM] :=  100.00UA;
    ICCQ_IRANGE_ARR[ROOM] :=  499.0UA;

{## ICCQ CORE ##}

{OMAP-DSP to 5.0mA}

    ICCQ_CMIN_ARR[HOT] :=  -125.00UA;
    ICCQ_CMAX_ARR[HOT] :=  5mA;{hijirev05n}
    ICCQ_CRANGE_ARR[HOT] :=  6.0mA;

    ICCQ_CMIN_ARR[ROOM] :=  -30.00UA;
    ICCQ_CMAX_ARR[ROOM] :=  225uA;
    ICCQ_CRANGE_ARR[ROOM] :=  499.0UA;

{...hijirev10h}

    (*  VIHVIL DRIVEHI, DRIVELO VARS  *)

    VIHCMOSa3V_VMAX_ARR[HOT] := VMX3V_VIHL*0.7;
    VILCMOSa3V_VMAX_ARR[HOT] := VMX3V_VIHL*0.3;		{OMAP-DSP21}
    VIHCMOSa3V_VMAX_ARR[ROOM] := VMX3V_VIHL*0.7;
    VILCMOSa3V_VMAX_ARR[ROOM] := VMX3V_VIHL*0.3;	{OMAP-DSP21}

    VIHCMOSa3V_VMIN_ARR[HOT] := VMN3V_VIHL*0.7;
    VILCMOSa3V_VMIN_ARR[HOT] := VMN3V_VIHL*0.3;		{OMAP-DSP21}
    VIHCMOSa3V_VMIN_ARR[ROOM] := VMN3V_VIHL*0.7;
    VILCMOSa3V_VMIN_ARR[ROOM] := VMN3V_VIHL*0.3;	{OMAP-DSP21}

    VIHCMOSa18V_VMAX_ARR[HOT] := VMX3V_VIHL*0.7;
    VILCMOSa18V_VMAX_ARR[HOT] := VMX3V_VIHL*0.3;	{OMAP-DSP21}
    VIHCMOSa18V_VMAX_ARR[ROOM] := VMX3V_VIHL*0.7;
    VILCMOSa18V_VMAX_ARR[ROOM] := VMX3V_VIHL*0.3;	{OMAP-DSP21}
 
    VIHCMOSa18V_VMIN_ARR[HOT] := VMN3V_VIHL*0.7;	
    VILCMOSa18V_VMIN_ARR[HOT] := VMN3V_VIHL*0.3;	{OMAP-DSP21}
    VIHCMOSa18V_VMIN_ARR[ROOM] := VMN3V_VIHL*0.7;
    VILCMOSa18V_VMIN_ARR[ROOM] := VMN3V_VIHL*0.3;	{OMAP-DSP21}

    VIHOSC1V_VMAX_ARR[HOT] := VMX1V_VIHL*0.7;
    VILOSC1V_VMAX_ARR[HOT] := VMX1V_VIHL*0.3;		{OMAP-DSP21}
    VIHOSC1V_VMAX_ARR[ROOM] := VMX1V_VIHL*0.7;
    VILOSC1V_VMAX_ARR[ROOM] := VMX1V_VIHL*0.3;		{OMAP-DSP21}

    VIHOSC1V_VMIN_ARR[HOT] := VMN1V_VIHL*0.7;
    VILOSC1V_VMIN_ARR[HOT] := VMN1V_VIHL*0.3;		{OMAP-DSP21}
    VIHOSC1V_VMIN_ARR[ROOM] := VMN1V_VIHL*0.7;
    VILOSC1V_VMIN_ARR[ROOM] := VMN1V_VIHL*0.3;		{OMAP-DSP21}
 

    (* IIH/IIL *)

    IIH_MIN_ARR[HOT] :=  -35NA;
    IIH_MAX_ARR[HOT] :=   70NA;

{OMAP-DSP to 200uA}

    IIH_MIN_ARR[ROOM] :=  -35NA;
    IIH_MAX_ARR[ROOM] :=  235NA;	{OMAP-DSP21 06/01/04}

    IIL_MIN_ARR[HOT] :=  -70NA;
    IIL_MAX_ARR[HOT] :=  35NA;

{OMAP-DSP21 06/01/04 -70 to -235}

    IIL_MIN_ARR[ROOM] :=  -235NA;	{OMAP-DSP21 06/01/04}
    IIL_MAX_ARR[ROOM] :=  35NA;

    IIH_SINK_ARR[HOT] :=   -230.0NA;
    IIH_SOURCE_ARR[HOT] :=   230.0NA;

    IIH_SINK_ARR[ROOM] :=   -230.0NA;
    IIH_SOURCE_ARR[ROOM] :=   230.0NA;

    IIL_SINK_ARR[HOT] :=   -230.0NA;
    IIL_SOURCE_ARR[HOT] :=   230.0NA;

    IIL_SINK_ARR[ROOM] :=   -230.0NA;
    IIL_SOURCE_ARR[ROOM] :=   230.0NA;

    (* IIHD (PULLDOWNS) *)


    (* Edit to FALSE if pulldowns are not enabled. *)
    IIHD1_ENABLED := TRUE;

    if (IIHD1_ENABLED) then
    begin   (* Limits for enabled pulldowns.  *)

    (* Limits for pulldown cell PE0201 *)

    IIHD1_MIN_ARR[HOT] :=  6.9UA;
    IIHD1_MAX_ARR[HOT] :=  43.8UA;

    IIHD1_MIN_ARR[ROOM] :=  7.8UA;
    IIHD1_MAX_ARR[ROOM] :=  55.8UA;

    IIHD1_SINK_ARR[HOT] :=  -60.00UA;
    IIHD1_SOURCE_ARR[HOT] :=  60.00UA;

    IIHD1_SINK_ARR[ROOM] :=  -60.00UA;
    IIHD1_SOURCE_ARR[ROOM] :=  60.00UA;

    end

    else

    begin  (* Limits for disabled pulldowns.  *)

    IIHD1_MIN_ARR[HOT] :=  -175.0NA;
    IIHD1_MAX_ARR[HOT] :=  350.0NA;

    IIHD1_MIN_ARR[ROOM] :=  -175.0NA;
    IIHD1_MAX_ARR[ROOM] :=  350.0NA;

    IIHD1_SINK_ARR[HOT] :=   -950.0NA;
    IIHD1_SOURCE_ARR[HOT] :=   950.0NA;

    IIHD1_SINK_ARR[ROOM] :=   -950.0NA;
    IIHD1_SOURCE_ARR[ROOM] :=   950.0NA;

    end;


    (* Edit to FALSE if pulldowns are not enabled. *)
    IIHD2_ENABLED := TRUE;

    if (IIHD2_ENABLED) then
    begin   (* Limits for enabled pulldowns.  *)

    (* Limits for pulldown cell PE1001 *)

    IIHD2_MIN_ARR[HOT] :=  34.5UA;
    IIHD2_MAX_ARR[HOT] :=  219.0UA;

    IIHD2_MIN_ARR[ROOM] :=  39.0UA;
    IIHD2_MAX_ARR[ROOM] :=  279.0UA;

    IIHD2_SINK_ARR[HOT] :=  -240.0UA;
    IIHD2_SOURCE_ARR[HOT] :=  240.0UA;

    IIHD2_SINK_ARR[ROOM] :=  -970.0UA;
    IIHD2_SOURCE_ARR[ROOM] :=  970.0UA;

    end

    else

    begin  (* Limits for disabled pulldowns.  *)
    
    IIHD2_MIN_ARR[HOT] :=  -175.0NA;
    IIHD2_MAX_ARR[HOT] :=  350.0NA;

    IIHD2_MIN_ARR[ROOM] :=  -175.0NA;
    IIHD2_MAX_ARR[ROOM] :=  350.0NA;

    IIHD2_SINK_ARR[HOT] :=   -950.0NA;
    IIHD2_SOURCE_ARR[HOT] :=   950.0NA;

    IIHD2_SINK_ARR[ROOM] :=   -950.0NA;
    IIHD2_SOURCE_ARR[ROOM] :=   950.0NA;

    end;


{OMAP-DSP to 150nA}

    IIHCMOSa3V_MIN_ARR[HOT] := -35.00nA;
    IIHCMOSa3V_MAX_ARR[HOT] := 150.00nA;
    IIHCMOSa3V_FORCEV_ARR[HOT] := VTMX3V;
    IIHCMOSa3V_SINK_ARR[HOT] := -230.0NA;
    IIHCMOSa3V_SOURCE_ARR[HOT] := 230.0NA;
    IILCMOSa3V_MIN_ARR[HOT] := -70.00nA;
    IILCMOSa3V_MAX_ARR[HOT] := 35.00nA;
    IILCMOSa3V_FORCEV_ARR[HOT] := 0.0V;
    IILCMOSa3V_SINK_ARR[HOT] := -230.0NA;
    IILCMOSa3V_SOURCE_ARR[HOT] := 230.0NA;

{OMAP-DSP from 35nA to 230nA IILCMOSa3V_MAX_ARR}

    IIHCMOSa3V_MIN_ARR[ROOM] := -35.00nA;
    IIHCMOSa3V_MAX_ARR[ROOM] := 235.00nA;		{OMAP-DSP21 06/01/04}
    IIHCMOSa3V_FORCEV_ARR[ROOM] := VTMX3V;
    IIHCMOSa3V_SINK_ARR[ROOM] := -230.0NA;
    IIHCMOSa3V_SOURCE_ARR[ROOM] := 230.0NA;
    IILCMOSa3V_MIN_ARR[ROOM] := -235.00nA;		{OMAP-DSP21 06/01/04}
    IILCMOSa3V_MAX_ARR[ROOM] := 235.00nA;		{OMAP-DSP21 06/01/04}
    IILCMOSa3V_FORCEV_ARR[ROOM] := 0.0V;
    IILCMOSa3V_SINK_ARR[ROOM] := -230.0NA;
    IILCMOSa3V_SOURCE_ARR[ROOM] := 230.0NA;


    (* High speed OSC feedback resistor IIH,IIL Limits. *)
    (* Edit Osc_R_State to 1 for 30K R, 2 for 150K R, 3 for disabled *)

    Osc_R_State := 1;

    CASE Osc_R_State OF

    1: BEGIN     (* 30K feedback R *)


    IIHOSC1V_MIN_ARR[HOT] := 41.400uA;
    IIHOSC1V_MAX_ARR[HOT] := 252.000uA;
    IIHOSC1V_FORCEV_ARR[HOT] := VTMX1V;
    IIHOSC1V_SINK_ARR[HOT] := -970.0UA;
    IIHOSC1V_SOURCE_ARR[HOT] := 970.0UA;
    IILOSC1V_MIN_ARR[HOT] := -252.000uA;
    IILOSC1V_MAX_ARR[HOT] := -41.400uA;
    IILOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILOSC1V_SINK_ARR[HOT] := -970.0UA;
    IILOSC1V_SOURCE_ARR[HOT] := 970.0UA;

    IIHOSC1V_MIN_ARR[ROOM] := 46.800uA;
    IIHOSC1V_MAX_ARR[ROOM] := 324.000uA;
    IIHOSC1V_FORCEV_ARR[ROOM] := VTMX1V;
    IIHOSC1V_SINK_ARR[ROOM] := -970.0UA;
    IIHOSC1V_SOURCE_ARR[ROOM] := 970.0UA;
    IILOSC1V_MIN_ARR[ROOM] := -324.000uA;
    IILOSC1V_MAX_ARR[ROOM] := -46.800uA;
    IILOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILOSC1V_SINK_ARR[ROOM] := -970.0UA;
    IILOSC1V_SOURCE_ARR[ROOM] := 970.0UA;


    END;

    2: BEGIN     (* 150K feedback R *)

    IIHOSC1V_MIN_ARR[HOT] := 8.280uA;
    IIHOSC1V_MAX_ARR[HOT] := 50.400uA;
    IIHOSC1V_FORCEV_ARR[HOT] := VTMX1V;
    IIHOSC1V_SINK_ARR[HOT] := -60.00UA;
    IIHOSC1V_SOURCE_ARR[HOT] := 60.00UA;
    IILOSC1V_MIN_ARR[HOT] := -50.400uA;
    IILOSC1V_MAX_ARR[HOT] := -8.280uA;
    IILOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILOSC1V_SINK_ARR[HOT] := -60.00UA;
    IILOSC1V_SOURCE_ARR[HOT] := 60.00UA;

    IIHOSC1V_MIN_ARR[ROOM] := 9.360uA;
    IIHOSC1V_MAX_ARR[ROOM] := 64.800uA;
    IIHOSC1V_FORCEV_ARR[ROOM] := VTMX1V;
    IIHOSC1V_SINK_ARR[ROOM] := -240.0UA;
    IIHOSC1V_SOURCE_ARR[ROOM] := 240.0UA;
    IILOSC1V_MIN_ARR[ROOM] := -64.800uA;
    IILOSC1V_MAX_ARR[ROOM] := -9.360uA;
    IILOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILOSC1V_SINK_ARR[ROOM] := -240.0UA;
    IILOSC1V_SOURCE_ARR[ROOM] := 240.0UA;

    END;

    3: BEGIN     (* feedback R disabled *)

    IIHOSC1V_MIN_ARR[HOT] := -170.0nA;
    IIHOSC1V_MAX_ARR[HOT] := 350.0nA;
    IIHOSC1V_FORCEV_ARR[HOT] := VTMX1V;
    IIHOSC1V_SINK_ARR[HOT] := -950.0NA;
    IIHOSC1V_SOURCE_ARR[HOT] := 950.0NA;
    IILOSC1V_MIN_ARR[HOT] := -350.0nA;
    IILOSC1V_MAX_ARR[HOT] := 170.0nA;
    IILOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILOSC1V_SINK_ARR[HOT] := -950.0NA;
    IILOSC1V_SOURCE_ARR[HOT] := 950.0NA;

    IIHOSC1V_MIN_ARR[ROOM] := -170.0nA;
    IIHOSC1V_MAX_ARR[ROOM] := 350.0nA;
    IIHOSC1V_FORCEV_ARR[ROOM] := VTMX1V;
    IIHOSC1V_SINK_ARR[ROOM] := -950.0NA;
    IIHOSC1V_SOURCE_ARR[ROOM] := 950.0NA;
    IILOSC1V_MIN_ARR[ROOM] := -350.0nA;
    IILOSC1V_MAX_ARR[ROOM] := 170.0nA;
    IILOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILOSC1V_SINK_ARR[ROOM] := -950.0NA;
    IILOSC1V_SOURCE_ARR[ROOM] := 950.0NA;

    END;


    END; (* case *)


    (* VOUT *)

    VOHL_MIN_ARR[HOT_CHUCKS] :=  VTMN1V-0.580V;

    VOHL_MIN_ARR[HOT] :=  VTMN1V-0.590V;

    VOHL_MIN_ARR[ROOM] :=  VTMN1V-0.585V;

    VOHL_MIN_ARR[TEMP] :=  VTMN1V-0.600V;

    VOHL_MIN_ARR[COLD] :=  VTMN1V-0.600V;

    VOLL_MAX_ARR[HOT_CHUCKS] :=  0.480V;

    VOLL_MAX_ARR[HOT] :=  0.490V;

    VOLL_MAX_ARR[ROOM] :=  0.485V;

    VOLL_MAX_ARR[TEMP] :=  0.500V;

    VOLL_MAX_ARR[COLD] :=  0.500V;

    VOHL3V_MIN_ARR[HOT_CHUCKS] :=  VTMN3V-0.580V;

    VOHL3V_MIN_ARR[HOT] :=  VTMN3V-0.590V;

    VOHL3V_MIN_ARR[ROOM] :=  VTMN3V-0.585V;

    VOHL3V_MIN_ARR[TEMP] :=  VTMN3V-0.600V;

    VOHL3V_MIN_ARR[COLD] :=  VTMN3V-0.600V;

    VOLL3V_MAX_ARR[HOT_CHUCKS] :=  0.480V;

    VOLL3V_MAX_ARR[HOT] :=  0.490V;

    VOLL3V_MAX_ARR[ROOM] :=  0.485V;

    VOLL3V_MAX_ARR[TEMP] :=  0.500V;

    VOLL3V_MAX_ARR[COLD] :=  0.500V;

{rev08a...}
    VOHL18V_MIN_ARR[HOT_CHUCKS] := VOUT18V-0.580V;

    VOHL18V_MIN_ARR[HOT] := VOUT18V - 0.590V;

    VOHL18V_MIN_ARR[ROOM] := VOUT18V - 0.585V;

    VOHL18V_MIN_ARR[TEMP] := VOUT18V - 0.600V;

    VOHL18V_MIN_ARR[COLD] := VOUT18V - 0.600V;

    VOLL18V_MAX_ARR[HOT_CHUCKS] :=  0.480V;

    VOLL18V_MAX_ARR[HOT] :=  0.490V;

    VOLL18V_MAX_ARR[ROOM] :=  0.485V;

    VOLL18V_MAX_ARR[TEMP] :=  0.500V;

    VOLL18V_MAX_ARR[COLD] :=  0.500V;
{...rev08a}

{(rev01d)...
    VIDUSB3V_ARR[HOT_CHUCKS] := ;
    VIDUSB3V_ARR[HOT] := ;
    VIDUSB3V_ARR[ROOM] := ;
    VIDUSB3V_ARR[TEMP] := ;
    VIDUSB3V_ARR[COLD] := ;
...(rev01d)}


    VOHCMOSa3V_MIN_ARR[HOT] := VTMN3V*0.8;
    VOHCMOSa3V_MAX_ARR[HOT] := VTMN3V;
    VOHCMOSa3V_FORCEV_ARR[HOT] := VTMN3V*0.65;
    VOLCMOSa3V_MIN_ARR[HOT] := 0.0V;
    VOLCMOSa3V_MAX_ARR[HOT] := VTMN3V*0.22;
    VOLCMOSa3V_FORCEV_ARR[HOT] := VTMN3V*0.65;

    VOHCMOSa3V_MIN_ARR[ROOM] := VTMN3V*0.8;
    VOHCMOSa3V_MAX_ARR[ROOM] := VTMN3V;
    VOHCMOSa3V_FORCEV_ARR[ROOM] := VTMN3V*0.65;
    VOLCMOSa3V_MIN_ARR[ROOM] := 0.0V;
    VOLCMOSa3V_MAX_ARR[ROOM] := VTMN3V*0.22;
    VOLCMOSa3V_FORCEV_ARR[ROOM] := VTMN3V*0.65;
 
    VOHCMOSa18V_MIN_ARR[HOT] := VOUT18V*0.8;
    VOHCMOSa18V_MAX_ARR[HOT] := VOUT18V;
    VOHCMOSa18V_FORCEV_ARR[HOT] := VOUT18V*0.65;
    VOHCMOSa18V_MIN_ARR[ROOM] := VOUT18V*0.8;
    VOHCMOSa18V_MAX_ARR[ROOM] := VOUT18V;
    VOHCMOSa18V_FORCEV_ARR[ROOM] := VOUT18V*0.65;

    VOHOSC1V_MIN_ARR[HOT] := VTMN1V-0.750V;
    VOHOSC1V_MAX_ARR[HOT] := VTMN1V;
    VOHOSC1V_FORCEV_ARR[HOT] := VTMN1V;
    VOLOSC1V_MIN_ARR[HOT] := 0.0V;
    VOLOSC1V_MAX_ARR[HOT] := 0.490V;
    VOLOSC1V_FORCEV_ARR[HOT] := VTMN1V;

    VOHOSC1V_MIN_ARR[ROOM] := VTMN1V-0.700V;
    VOHOSC1V_MAX_ARR[ROOM] := VTMN1V;
    VOHOSC1V_FORCEV_ARR[ROOM] := VTMN1V;
    VOLOSC1V_MIN_ARR[ROOM] := 0.0V;
    VOLOSC1V_MAX_ARR[ROOM] := 0.485V;
    VOLOSC1V_FORCEV_ARR[ROOM] := VTMN1V;

    VOHUSB3V_MIN_ARR[HOT] := VTMN3V-0.590V;
    VOHUSB3V_MAX_ARR[HOT] := 2.7V;
    VOHUSB3V_FORCEV_ARR[HOT] := 1.755V;
    VOLUSB3V_MIN_ARR[HOT] := 0.0V;
    VOLUSB3V_MAX_ARR[HOT] := 0.490V;
    VOLUSB3V_FORCEV_ARR[HOT] := 1.080V;

    VOHUSB3V_MIN_ARR[ROOM] := VTMN3V-0.585V;
    VOHUSB3V_MAX_ARR[ROOM] := 2.7V;
    VOHUSB3V_FORCEV_ARR[ROOM] := 1.755V;
    VOLUSB3V_MIN_ARR[ROOM] := 0.0V;
    VOLUSB3V_MAX_ARR[ROOM] := 0.485V;
    VOLUSB3V_FORCEV_ARR[ROOM] := 1.080V;

    (* LEAKAGE *)


    IIHIO_MIN_ARR[HOT] :=  -175NA;
    IIHIO_MAX_ARR[HOT] :=  350NA; 

{OMAP-DSP from 350nA to 950nA}

    IIHIO_MIN_ARR[ROOM] :=  -175NA;
    IIHIO_MAX_ARR[ROOM] :=  950nA;		{OMAP-DSP}

    IILIO_MIN_ARR[HOT] :=  -350NA;
    IILIO_MAX_ARR[HOT] :=  175NA;

    IILIO_MIN_ARR[ROOM] :=  -950NA;		{OMAP-DSP21 06/01/04}
    IILIO_MAX_ARR[ROOM] :=  175NA;

    IIHIO_SINK_ARR[HOT] :=   -950.0NA;
    IIHIO_SOURCE_ARR[HOT] :=   950.0NA;

    IIHIO_SINK_ARR[ROOM] :=   -950.0NA;
    IIHIO_SOURCE_ARR[ROOM] :=   950.0NA;

    IILIO_SINK_ARR[HOT] :=   -950.0NA;
    IILIO_SOURCE_ARR[HOT] :=   950.0NA;

    IILIO_SINK_ARR[ROOM] :=   -950.0NA;
    IILIO_SOURCE_ARR[ROOM] :=   950.0NA;


    IIHIOCMOSa3V_MIN_ARR[HOT] := -175.00nA;
    IIHIOCMOSa3V_MAX_ARR[HOT] := 350.00nA; 
    IIHIOCMOSa3V_FORCEV_ARR[HOT] := VTMX3V;
    IIHIOCMOSa18V_FORCEV_ARR[HOT] := VOUT18V;  {...rev08a}
    IIHIOCMOSa3V_SINK_ARR[HOT] := -950.0NA;
    IIHIOCMOSa3V_SOURCE_ARR[HOT] := 950.0NA;

    IILIOCMOSa3V_MIN_ARR[HOT] := -350.00nA;
    IILIOCMOSa3V_MAX_ARR[HOT] := 175.00nA;
    IILIOCMOSa3V_FORCEV_ARR[HOT] := 0V;
    IILIOCMOSa3V_SINK_ARR[HOT] := -950.0NA;
    IILIOCMOSa3V_SOURCE_ARR[HOT] := 950.0NA;

{OMAP-DSP from 350nA to 950nA}

    IIHIOCMOSa3V_MIN_ARR[ROOM] := -175.00nA;
    IIHIOCMOSa3V_MAX_ARR[ROOM] := 950nA;
    IIHIOCMOSa3V_FORCEV_ARR[ROOM] := VTMX3V;
    IIHIOCMOSa18V_FORCEV_ARR[ROOM] := VOUT18V;  {...rev08a}
    IIHIOCMOSa3V_SINK_ARR[ROOM] := -950.0NA;
    IIHIOCMOSa3V_SOURCE_ARR[ROOM] := 950.0NA;

    IILIOCMOSa3V_MIN_ARR[ROOM] := -350.00nA;
    IILIOCMOSa3V_MAX_ARR[ROOM] := 175.00nA;
    IILIOCMOSa3V_FORCEV_ARR[ROOM] := 0V;
    IILIOCMOSa3V_SINK_ARR[ROOM] := -950.0NA;
    IILIOCMOSa3V_SOURCE_ARR[ROOM] := 950.0NA;



    (* High speed OSC feedback resistor IIHIO,IILIO Limits. *)
    (* Edit Osc_R_State to 1 for 30K R, 2 for 150K R, 3 for disabled *)

    Osc_R_State := 2;

    CASE Osc_R_State OF

    1: BEGIN     (* 30K feedback R *)


    IILIOOSC1V_MIN_ARR[HOT] := -252.000uA;
    IILIOOSC1V_MAX_ARR[HOT] := -41.400uA;
    IILIOOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILIOOSC1V_SINK_ARR[HOT] := -970.0UA;
    IILIOOSC1V_SOURCE_ARR[HOT] := 970.0UA;

    IILIOOSC1V_MIN_ARR[ROOM] := -324.000uA;
    IILIOOSC1V_MAX_ARR[ROOM] := -46.800uA;
    IILIOOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILIOOSC1V_SINK_ARR[ROOM] := -970.0UA;
    IILIOOSC1V_SOURCE_ARR[ROOM] := 970.0UA;

    END;

    2: BEGIN     (* 150K feedback R *)

    IILIOOSC1V_MIN_ARR[HOT] := -50.400uA;
    IILIOOSC1V_MAX_ARR[HOT] := -8.280uA;
    IILIOOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILIOOSC1V_SINK_ARR[HOT] := -60.00UA;
    IILIOOSC1V_SOURCE_ARR[HOT] := 60.00UA;

    IILIOOSC1V_MIN_ARR[ROOM] := -64.800uA;
    IILIOOSC1V_MAX_ARR[ROOM] := -9.360uA;
    IILIOOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILIOOSC1V_SINK_ARR[ROOM] := -240.0UA;
    IILIOOSC1V_SOURCE_ARR[ROOM] := 240.0UA;

    END;

    3: BEGIN     (* feedback R disabled *)

    IILIOOSC1V_MIN_ARR[HOT] := -350.0nA;
    IILIOOSC1V_MAX_ARR[HOT] := 170.0nA;
    IILIOOSC1V_FORCEV_ARR[HOT] := 0.0V;
    IILIOOSC1V_SINK_ARR[HOT] := -950.0NA;
    IILIOOSC1V_SOURCE_ARR[HOT] := 950.0NA;

    IILIOOSC1V_MIN_ARR[ROOM] := -350.0nA;
    IILIOOSC1V_MAX_ARR[ROOM] := 170.0nA;
    IILIOOSC1V_FORCEV_ARR[ROOM] := 0.0V;
    IILIOOSC1V_SINK_ARR[ROOM] := -950.0NA;
    IILIOOSC1V_SOURCE_ARR[ROOM] := 950.0NA;

    END;


    END; (* case *)

    IOHD1_MIN_ARR[HOT] :=  6.9UA;
    IOHD1_MAX_ARR[HOT] :=  43.8UA;

    IOHD1_MIN_ARR[ROOM] :=  7.8UA;
    IOHD1_MAX_ARR[ROOM] :=  55.8UA;

    IOHD1_SINK_ARR[HOT] :=  -15.00UA;
    IOHD1_SOURCE_ARR[HOT] :=  60.00UA;

    IOHD1_SINK_ARR[ROOM] :=  -15.00UA;
    IOHD1_SOURCE_ARR[ROOM] :=  60.00UA;

    IOLP1_MIN_ARR[HOT] :=  -219.0UA;
    IOLP1_MAX_ARR[HOT] :=  -34.5UA;

    IOLP1_MIN_ARR[ROOM] :=  -279.0UA;
    IOLP1_MAX_ARR[ROOM] :=  -39.0UA;
    
    IOLP1_SINK_ARR[HOT] :=  -1mA;{xyz}
    IOLP1_SOURCE_ARR[HOT] :=  1mA;{xyz}

    IOLP1_SINK_ARR[ROOM] :=  -1mA;{xyz}
    IOLP1_SOURCE_ARR[ROOM] :=  1mA;{xyz}

    IOLP2_MIN_ARR[HOT] :=  -43.8UA;
    IOLP2_MAX_ARR[HOT] :=  -6.9UA;

    IOLP2_MIN_ARR[ROOM] :=  -55.8UA;
    IOLP2_MAX_ARR[ROOM] :=  -7.8UA;

    IOLP2_SINK_ARR[HOT] :=  -60.00UA;
    IOLP2_SOURCE_ARR[HOT] :=  60.00UA;

    IOLP2_SINK_ARR[ROOM] :=  -60.00UA;
    IOLP2_SOURCE_ARR[ROOM] :=  60.00UA;


    I1MA_ARR[HOT_CHUCKS]      := 1MA;
    I2MA_ARR[HOT_CHUCKS]      := 2MA;
    I4MA_ARR[HOT_CHUCKS]      := 4MA;
    I8MA_ARR[HOT_CHUCKS]      := 8MA;

    I1MA_ARR[HOT]             := 1MA;
    I2MA_ARR[HOT]             := 2MA;
    I4MA_ARR[HOT]             := 4MA;
    I8MA_ARR[HOT]             := 8MA;

    I1MA_ARR[ROOM]            := 1MA;
    I2MA_ARR[ROOM]            := 2MA;
    I4MA_ARR[ROOM]            := 4MA;
    I8MA_ARR[ROOM]            := 8MA;

    I1MA_ARR[TEMP]            := 1MA;
    I2MA_ARR[TEMP]            := 2MA;
    I4MA_ARR[TEMP]            := 4MA;
    I8MA_ARR[TEMP]            := 8MA;

    I1MA_ARR[COLD]            := 1MA;
    I2MA_ARR[COLD]            := 2MA;
    I4MA_ARR[COLD]            := 4MA;
    I8MA_ARR[COLD]            := 8MA;



  end;  (* INITIALIZE_TEST_LIMIT_ARRAYS *)


procedure SELECT_TEST_LIMITS; Export;
(*
***********************************************************************
****            SELECT TEST LIMITS                                 ****
****                                                               ****
****            TEMP TYPES ARE:                                    ****
****                                                               ****
****              HOT                                              ****
****              ROOM                                             ****
****                                                               ****
****                                                               ****
****                                                               ****
****                                                               ****
****            TEST TYPES ARE:                                    ****
****                                                               ****
****              PREBI_RM                                         ****
****              FT1_105C                                          ****
****              POSTBI_100C                                      ****
****              PREBI_N45                                        ****
****              POSTBI_N45                                       ****
****                                                               ****
***********************************************************************
*)

  begin

    Have_not_datalogged := TRUE;

    SetSupplyVars;
    
    Temp_Limit := HOT;
    
    (* INITIALIZE TEMP_LIMIT *)

Case TITestTemp of
  TEMP_110_DEG: Handler_Temp := 110;  
  TEMP_100_DEG: Handler_Temp := 100;
  TEMP_90_DEG:  Handler_Temp :=  90;
  TEMP_30_DEG:  Handler_Temp :=  30;
  TEMP_N45_DEG: Handler_Temp := -45;
end;

    if (TITestTemp = TEMP_N45_DEG) then Temp_Limit := ROOM;  

    (* TIMING GUARDBAND *)

    TGB  := TGB_ARR[Temp_Limit];

    PROPGB  := PROPGB_ARR[Temp_Limit];


    (* ICCQ *)

    ICCQ_MIN := ICCQ_MIN_ARR[Temp_Limit];
    ICCQ_MAX := ICCQ_MAX_ARR[Temp_Limit];
    ICCQ_RANGE := ICCQ_RANGE_ARR[Temp_Limit];

{kjog 8/16}
    ICCQSUPSHRT_MIN := ICCQSUPSHRT_MIN_ARR[Temp_Limit];
    ICCQSUPSHRT_MAX := ICCQSUPSHRT_MAX_ARR[Temp_Limit];
    ICCQSUPSHRT_RANGE := ICCQSUPSHRT_RANGE_ARR[Temp_Limit];
{kjog 8/16}


{hijirev10h...}
    ICCQ_CMIN := ICCQ_CMIN_ARR[Temp_Limit];
    ICCQ_CMAX := ICCQ_CMAX_ARR[Temp_Limit];
    ICCQ_CRANGE := ICCQ_CRANGE_ARR[Temp_Limit];

    ICCQ_DMIN := ICCQ_DMIN_ARR[Temp_Limit];
    ICCQ_DMAX := ICCQ_DMAX_ARR[Temp_Limit];
    ICCQ_DRANGE := ICCQ_DRANGE_ARR[Temp_Limit];

    ICCQ_IMIN := ICCQ_IMIN_ARR[Temp_Limit];
    ICCQ_IMAX := ICCQ_IMAX_ARR[Temp_Limit];
    ICCQ_IRANGE := ICCQ_IRANGE_ARR[Temp_Limit];

    ICCQ_AMIN := ICCQ_AMIN_ARR[Temp_Limit];
    ICCQ_AMAX := ICCQ_AMAX_ARR[Temp_Limit];
    ICCQ_ARANGE := ICCQ_ARANGE_ARR[Temp_Limit];
{...hijirev10h}


    ICCQ29_MIN := ICCQ29_MIN_ARR[Temp_Limit];
    ICCQ29_MAX := ICCQ29_MAX_ARR[Temp_Limit];
    ICCQ29_RANGE := ICCQ29_RANGE_ARR[Temp_Limit];

    ICCQ30_MIN := ICCQ30_MIN_ARR[Temp_Limit];
    ICCQ30_MAX := ICCQ30_MAX_ARR[Temp_Limit];
    ICCQ30_RANGE := ICCQ30_RANGE_ARR[Temp_Limit];

    ICCQ31_MIN := ICCQ31_MIN_ARR[Temp_Limit];
    ICCQ31_MAX := ICCQ31_MAX_ARR[Temp_Limit];
    ICCQ31_RANGE := ICCQ31_RANGE_ARR[Temp_Limit];

    ICCQ32_MIN := ICCQ32_MIN_ARR[Temp_Limit];
    ICCQ32_MAX := ICCQ32_MAX_ARR[Temp_Limit];
    ICCQ32_RANGE := ICCQ32_RANGE_ARR[Temp_Limit];

    ICCQ33_MIN := ICCQ33_MIN_ARR[Temp_Limit];
    ICCQ33_MAX := ICCQ33_MAX_ARR[Temp_Limit];
    ICCQ33_RANGE := ICCQ33_RANGE_ARR[Temp_Limit];

    ICCQ34_MIN := ICCQ34_MIN_ARR[Temp_Limit];
    ICCQ34_MAX := ICCQ34_MAX_ARR[Temp_Limit];
    ICCQ34_RANGE := ICCQ34_RANGE_ARR[Temp_Limit];

    ICCQ35_MIN := ICCQ35_MIN_ARR[Temp_Limit];
    ICCQ35_MAX := ICCQ35_MAX_ARR[Temp_Limit];
    ICCQ35_RANGE := ICCQ35_RANGE_ARR[Temp_Limit];

    ICCQ36_MIN := ICCQ36_MIN_ARR[Temp_Limit];
    ICCQ36_MAX := ICCQ36_MAX_ARR[Temp_Limit];
    ICCQ36_RANGE := ICCQ36_RANGE_ARR[Temp_Limit];

    ICCQ37_MIN := ICCQ37_MIN_ARR[Temp_Limit];
    ICCQ37_MAX := ICCQ37_MAX_ARR[Temp_Limit];
    ICCQ37_RANGE := ICCQ37_RANGE_ARR[Temp_Limit];

    ICCQ38_MIN := ICCQ38_MIN_ARR[Temp_Limit];
    ICCQ38_MAX := ICCQ38_MAX_ARR[Temp_Limit];
    ICCQ38_RANGE := ICCQ38_RANGE_ARR[Temp_Limit];

    ICCQ39_MIN := ICCQ39_MIN_ARR[Temp_Limit];
    ICCQ39_MAX := ICCQ39_MAX_ARR[Temp_Limit];
    ICCQ39_RANGE := ICCQ39_RANGE_ARR[Temp_Limit];

    ICCQ40_MIN := ICCQ40_MIN_ARR[Temp_Limit];
    ICCQ40_MAX := ICCQ40_MAX_ARR[Temp_Limit];
    ICCQ40_RANGE := ICCQ40_RANGE_ARR[Temp_Limit];
    (*  VIHVIL DRIVEHI, DRIVELO VARS  *)

    VIHCMOSa3V_VMAX := VIHCMOSa3V_VMAX_ARR[Temp_Limit];
    VILCMOSa3V_VMAX := VILCMOSa3V_VMAX_ARR[Temp_Limit];
    VIHCMOSa3V_VMIN := VIHCMOSa3V_VMIN_ARR[Temp_Limit];
    VILCMOSa3V_VMIN := VILCMOSa3V_VMIN_ARR[Temp_Limit];

{rev08a...}
    VIHCMOSa18V_VMAX := VIHCMOSa18V_VMAX_ARR[Temp_Limit];
    VILCMOSa18V_VMAX := VILCMOSa18V_VMAX_ARR[Temp_Limit];
    VIHCMOSa18V_VMIN := VIHCMOSa18V_VMIN_ARR[Temp_Limit];
    VILCMOSa18V_VMIN := VILCMOSa18V_VMIN_ARR[Temp_Limit];
{...rev08a}

    VIHOSC1V_VMAX := VIHOSC1V_VMAX_ARR[Temp_Limit];
    VILOSC1V_VMAX := VILOSC1V_VMAX_ARR[Temp_Limit];
    VIHOSC1V_VMIN := VIHOSC1V_VMIN_ARR[Temp_Limit];
    VILOSC1V_VMIN := VILOSC1V_VMIN_ARR[Temp_Limit];

    (* IIH/IIL *)

    IIH_MIN := IIH_MIN_ARR[Temp_Limit];
    IIH_MAX := IIH_MAX_ARR[Temp_Limit];
    IIL_MIN := IIL_MIN_ARR[Temp_Limit];
    IIL_MAX := IIL_MAX_ARR[Temp_Limit];
    IIH_SINK := IIH_SINK_ARR[Temp_Limit];
    IIH_SOURCE := IIH_SOURCE_ARR[Temp_Limit];
    IIL_SINK := IIL_SINK_ARR[Temp_Limit];
    IIL_SOURCE := IIL_SOURCE_ARR[Temp_Limit];

    (* IIHD (PULLDOWNS) *)

    IIHD1_MIN := IIHD1_MIN_ARR[Temp_Limit];
    IIHD1_MAX := IIHD1_MAX_ARR[Temp_Limit];
    IIHD1_SINK := IIHD1_SINK_ARR[Temp_Limit];
    IIHD1_SOURCE := IIHD1_SOURCE_ARR[Temp_Limit];
    IIHD2_MIN := IIHD2_MIN_ARR[Temp_Limit];
    IIHD2_MAX := IIHD2_MAX_ARR[Temp_Limit];
    IIHD2_SINK := IIHD2_SINK_ARR[Temp_Limit];
    IIHD2_SOURCE := IIHD2_SOURCE_ARR[Temp_Limit];

    IIHCMOSa3V_MAX := IIHCMOSa3V_MAX_ARR[Temp_Limit];
    IIHCMOSa3V_MIN := IIHCMOSa3V_MIN_ARR[Temp_Limit];
    IIHCMOSa3V_FORCEV := IIHCMOSa3V_FORCEV_ARR[Temp_Limit];
    IIHCMOSa3V_SINK := IIHCMOSa3V_SINK_ARR[Temp_Limit];
    IIHCMOSa3V_SOURCE := IIHCMOSa3V_SOURCE_ARR[Temp_Limit];
    IILCMOSa3V_MAX := IILCMOSa3V_MAX_ARR[Temp_Limit];
    IILCMOSa3V_MIN := IILCMOSa3V_MIN_ARR[Temp_Limit];
    IILCMOSa3V_FORCEV := IILCMOSa3V_FORCEV_ARR[Temp_Limit];
    IILCMOSa3V_SINK := IILCMOSa3V_SINK_ARR[Temp_Limit];
    IILCMOSa3V_SOURCE := IILCMOSa3V_SOURCE_ARR[Temp_Limit];

    IIHOSC1V_MAX := IIHOSC1V_MAX_ARR[Temp_Limit];
    IIHOSC1V_MIN := IIHOSC1V_MIN_ARR[Temp_Limit];
    IIHOSC1V_FORCEV := IIHOSC1V_FORCEV_ARR[Temp_Limit];
    IIHOSC1V_SINK := IIHOSC1V_SINK_ARR[Temp_Limit];
    IIHOSC1V_SOURCE := IIHOSC1V_SOURCE_ARR[Temp_Limit];
    IILOSC1V_MAX := IILOSC1V_MAX_ARR[Temp_Limit];
    IILOSC1V_MIN := IILOSC1V_MIN_ARR[Temp_Limit];
    IILOSC1V_FORCEV := IILOSC1V_FORCEV_ARR[Temp_Limit];
    IILOSC1V_SINK := IILOSC1V_SINK_ARR[Temp_Limit];
    IILOSC1V_SOURCE := IILOSC1V_SOURCE_ARR[Temp_Limit];

    IIHIOCMOSa3V_MAX := IIHIOCMOSa3V_MAX_ARR[Temp_Limit];
    IIHIOCMOSa3V_MIN := IIHIOCMOSa3V_MIN_ARR[Temp_Limit];
    IIHIOCMOSa3V_FORCEV := IIHIOCMOSa3V_FORCEV_ARR[Temp_Limit];
    IIHIOCMOSa18V_FORCEV := IIHIOCMOSa18V_FORCEV_ARR[Temp_Limit];  {...rev08a}
    IIHIOCMOSa3V_SINK := IIHIOCMOSa3V_SINK_ARR[Temp_Limit];
    IIHIOCMOSa3V_SOURCE := IIHIOCMOSa3V_SOURCE_ARR[Temp_Limit];

    IILIOCMOSa3V_MAX := IILIOCMOSa3V_MAX_ARR[Temp_Limit];
    IILIOCMOSa3V_MIN := IILIOCMOSa3V_MIN_ARR[Temp_Limit];
    IILIOCMOSa3V_FORCEV := IILIOCMOSa3V_FORCEV_ARR[Temp_Limit];
    IILIOCMOSa3V_SINK := IILIOCMOSa3V_SINK_ARR[Temp_Limit];
    IILIOCMOSa3V_SOURCE := IILIOCMOSa3V_SOURCE_ARR[Temp_Limit];

    IILIOOSC1V_MAX := IILIOOSC1V_MAX_ARR[Temp_Limit];
    IILIOOSC1V_MIN := IILIOOSC1V_MIN_ARR[Temp_Limit];
    IILIOOSC1V_FORCEV := IILIOOSC1V_FORCEV_ARR[Temp_Limit];
    IILIOOSC1V_SINK := IILIOOSC1V_SINK_ARR[Temp_Limit];
    IILIOOSC1V_SOURCE := IILIOOSC1V_SOURCE_ARR[Temp_Limit];

    (* VOUT *)

    VOHL_MIN := VOHL_MIN_ARR[Temp_Limit];
    VOLL_MAX := VOLL_MAX_ARR[Temp_Limit];
    VOHL3V_MIN := VOHL3V_MIN_ARR[Temp_Limit];
    VOLL3V_MAX := VOLL3V_MAX_ARR[Temp_Limit];

{rev08a...}
    VOHL18V_MIN := VOHL18V_MIN_ARR[Temp_Limit];
    VOLL18V_MAX := VOLL18V_MAX_ARR[Temp_Limit];
{...rev08a}

{    VIDUSB3V := VIDUSB3V_ARR[Temp_Limit]; }{rev01d}

    (* LEAKAGE *)

    IIHIO_MIN := IIHIO_MIN_ARR[Temp_Limit];
    IIHIO_MAX := IIHIO_MAX_ARR[Temp_Limit];
    IILIO_MIN := IILIO_MIN_ARR[Temp_Limit];
    IILIO_MAX := IILIO_MAX_ARR[Temp_Limit];
    IIHIO_SINK := IIHIO_SINK_ARR[Temp_Limit];
    IIHIO_SOURCE := IIHIO_SOURCE_ARR[Temp_Limit];
    IILIO_SINK := IILIO_SINK_ARR[Temp_Limit];
    IILIO_SOURCE := IILIO_SOURCE_ARR[Temp_Limit];
    IOHD1_MIN := IOHD1_MIN_ARR[Temp_Limit];
    IOHD1_MAX := IOHD1_MAX_ARR[Temp_Limit];
    IOHD1_SINK := IOHD1_SINK_ARR[Temp_Limit];
    IOHD1_SOURCE := IOHD1_SOURCE_ARR[Temp_Limit];
    IOLP1_MIN := IOLP1_MIN_ARR[Temp_Limit];
    IOLP1_MAX := IOLP1_MAX_ARR[Temp_Limit];
    IOLP1_SINK := IOLP1_SINK_ARR[Temp_Limit];
    IOLP1_SOURCE := IOLP1_SOURCE_ARR[Temp_Limit];
    IOLP2_MIN := IOLP2_MIN_ARR[Temp_Limit];
    IOLP2_MAX := IOLP2_MAX_ARR[Temp_Limit];
    IOLP2_SINK := IOLP2_SINK_ARR[Temp_Limit];
    IOLP2_SOURCE := IOLP2_SOURCE_ARR[Temp_Limit];



    VOHCMOSa3V_MAX := VOHCMOSa3V_MAX_ARR[Temp_Limit];
    VOHCMOSa3V_MIN := VOHCMOSa3V_MIN_ARR[Temp_Limit];
    VOHCMOSa3V_FORCEV := VOHCMOSa3V_FORCEV_ARR[Temp_Limit];
    VOLCMOSa3V_MAX := VOLCMOSa3V_MAX_ARR[Temp_Limit];
    VOLCMOSa3V_MIN := VOLCMOSa3V_MIN_ARR[Temp_Limit];
    VOLCMOSa3V_FORCEV := VOLCMOSa3V_FORCEV_ARR[Temp_Limit];

{rev08a...}
    VOHCMOSa18V_MAX := VOHCMOSa18V_MAX_ARR[Temp_Limit];
    VOHCMOSa18V_MIN := VOHCMOSa18V_MIN_ARR[Temp_Limit];
    VOHCMOSa18V_FORCEV := VOHCMOSa18V_FORCEV_ARR[Temp_Limit];
{...rev08a}

    VOHOSC1V_MAX := VOHOSC1V_MAX_ARR[Temp_Limit];
    VOHOSC1V_MIN := VOHOSC1V_MIN_ARR[Temp_Limit];
    VOHOSC1V_FORCEV := VOHOSC1V_FORCEV_ARR[Temp_Limit];
    VOLOSC1V_MAX := VOLOSC1V_MAX_ARR[Temp_Limit];
    VOLOSC1V_MIN := VOLOSC1V_MIN_ARR[Temp_Limit];
    VOLOSC1V_FORCEV := VOLOSC1V_FORCEV_ARR[Temp_Limit];

    VOHUSB3V_MAX := VOHUSB3V_MAX_ARR[Temp_Limit];
    VOHUSB3V_MIN := VOHUSB3V_MIN_ARR[Temp_Limit];
    VOHUSB3V_FORCEV := VOHUSB3V_FORCEV_ARR[Temp_Limit];
    VOLUSB3V_MAX := VOLUSB3V_MAX_ARR[Temp_Limit];
    VOLUSB3V_MIN := VOLUSB3V_MIN_ARR[Temp_Limit];
    VOLUSB3V_FORCEV := VOLUSB3V_FORCEV_ARR[Temp_Limit];

    I1MA     := I1MA_ARR[Temp_Limit];
    I2MA     := I2MA_ARR[Temp_Limit];
    I4MA     := I4MA_ARR[Temp_Limit];
    I8MA     := I8MA_ARR[Temp_Limit];

  end;  (* SELECT_TEST_LIMITS *)


procedure LOAD_FAST_SETS;
(*
***********************************************************************
****            LOAD FAST SETS INTO HARDWARE                       ****
****                                                               ****
***********************************************************************
*)

begin


DCTableOpen( DEFAULT_DC_TABLE );
  DCSetOpen( ALL_PINS_PLUS );
DCTableClose;

DCTableOpen( VOUT_DC_TABLE );
  DCSetLDOFF( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, CMOSa3V_INS );
  DCSetDyn( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, VTMN3V*0.65, -2.0mA,
              2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, VTMN3V*0.65, -2.0mA,
              2.0mA, CMOSa3V_IOS );
  DCSetLDOFF( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, CMOSa18V_INS );
  DCSetDyn( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, VTMN3V*0.65, -2.0mA,
              2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VTMN3V, 0V,CP, VTMN3V*0.75, VTMN3V*0.25, VTMN3V*0.65, -2.0mA,
              2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VTMN1V, 0V,CP, VTMN1V*0.75, VTMN1V*0.25, OSC1V_INS );
  DCSetDyn( VTMN1V, 0V,CP, VTMN1V*0.75, VTMN1V*0.25, VTMN1V*0.65, -10.0uA,
              10.0uA, OSC1V_OUTS );
  DCSetDyn( VTMN1V, 0V,CP, VTMN1V*0.75, VTMN1V*0.25, VTMN1V*0.65, -10.0uA,
              10.0uA, OSC1V_IOS );
  DCSetDyn( 2.5V, 0V,CP, 2.025V, 0.675V, 1.755V,
            -2mA, 2mA, USB3V_IOSY );
  DCSetDyn( 2.5V, 0V,CP, 2.025V, 0.675V, 1.755V,
            -2mA, 2mA, USB3V_IOSYZ );
DCTableClose;

DCTableOpen( LEAKAGE_DC_TABLE );
  DCSetLDOFF( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, CMOSa3V_INS );
  DCSetDyn( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, VTMX3V*0.65, -2.0mA,
              2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, VTMX3V*0.65, -2.0mA,
              2.0mA, CMOSa3V_IOS );
  DCSetLDOFF( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, CMOSa18V_INS );
  DCSetDyn( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, VTMX3V*0.65, -2.0mA,
              2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VTMX3V, 0V,CP, VTMX3V*0.75, VTMX3V*0.25, VTMX3V*0.65, -2.0mA,
              2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VTMX1V, 0V,CP, VTMX1V*0.75, VTMX1V*0.25, OSC1V_INS );
  DCSetLDOFF( VTMX1V, 0V,CP, VTMX1V*0.75, VTMX1V*0.25, OSC1V_OUTS );
  DCSetLDOFF( VTMX1V, 0V,CP, VTMX1V*0.75, VTMX1V*0.25, OSC1V_IOS );
  DCSetDyn( VTMX3V, 0.0V,CP, VTMX3V*0.5, VTMX3V*0.5, VTMX3V*0.65, -10uA, 10uA, 
            USB3V_IOSY );
  DCSetDyn( VTMX3V, 0.0V,CP, VTMX3V*0.5, VTMX3V*0.5, VTMX3V*0.65, -10uA, 10uA,
              USB3V_IOSYZ );
DCTableClose;

FormatTableOpen( DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
FormatTableClose;

ACTableOpen( DEFAULT_AC_TABLE );
  ACSetInOut( DEFAULT_TIMING, 0nS, 0nS, 5nS, 0nS, 5nS );
ACTableClose;

CycleTableOpen( DEFAULT_CYCLE_TABLE );
  CycleSet( NORMAL, DEFAULT_TIMING, ALL_PINS_PLUS );
CycleTableClose;

PeriodTableOpen( DEFAULT_PERIOD_TABLE );
  PeriodSet( 1, NORMAL );
PeriodTableClose;

DCSetupOpen( OPEN_PINS_DC, DEFAULT_DC_TABLE );
DCSetupClose;

(*  CONTINUITY/SHORTS *)

DCSetupOpen( DIODE_ODD_DC, DEFAULT_DC_TABLE );
          DCSetPMU( -0.3V, -1.0V, -1.5V,
                    -1.0MA, 1.0MA, CONT_ODD_GND_DIODES );
          DCSetPMU( 1.4V, 0.3V, 1.5V,
                    -1.0MA, 1.0MA, CONT_EVEN_VCC_DIODES );
DCSetupClose;

DCSetupOpen( DIODE_EVEN_DC, DEFAULT_DC_TABLE );
          DCSetPMU( -0.3V, -1.0V, -1.5V,
                    -1.0MA, 1.0MA, CONT_EVEN_GND_DIODES );
          DCSetPMU( 1.4V, 0.3V, 1.5V,
                    -1.0MA, 1.0MA, CONT_ODD_VCC_DIODES );
DCSetupClose;


DCSetupOpen( OPEN_ODD_DC, DEFAULT_DC_TABLE );
          DCSetPMU( +0.5V, -1.0V, -1.5V,
                    -1.0MA, 1.0MA, CONT_ODD_GND_DIODES );
          DCSetPMU( 1.4V, -0.5V, 1.5V,
                    -1.0MA, 1.0MA, CONT_EVEN_VCC_DIODES );
DCSetupClose;

DCSetupOpen( OPEN_EVEN_DC, DEFAULT_DC_TABLE );
          DCSetPMU( +0.5V, -1.0V, -1.5V,
                    -1.0MA, 1.0MA, CONT_EVEN_GND_DIODES );
          DCSetPMU( 1.4V, -0.5V, 1.5V,
                    -1.0MA, 1.0MA, CONT_ODD_VCC_DIODES );
DCSetupClose;


DCSetupOpen( SHORT_ODD_DC, DEFAULT_DC_TABLE );
          DCSetPMU( -0.3V, -2.0V, -1.5V,
                    -1.0MA, 1.0MA, SHORT_ODD_GND_DIODES );
          DCSetPMU( 2.0V, 0.3V, 1.5V,
                    -1.0MA, 1.0MA, SHORT_EVEN_VCC_DIODES );
          DCSetPMU( -0.2V, -2.0V, -1.5V,
                    -1.0MA, 1.0MA, OSC1_OUT );
DCSetupClose;

DCSetupOpen( SHORT_EVEN_DC, DEFAULT_DC_TABLE );
          DCSetPMU( -0.3V, -2.0V, -1.5V,
                    -1.0MA, 1.0MA, SHORT_EVEN_GND_DIODES );
          DCSetPMU( 2.0V, 0.3V, 1.5V,
                    -1.0MA, 1.0MA, SHORT_ODD_VCC_DIODES );
DCSetupClose;


DCSetupOpen( PIN2PIN_ROWS_DC, DEFAULT_DC_TABLE );
   DCSetPMU( 70NA, -70NA, -0.1V,
              -230.0NA, 230.0NA, PINS_ODD_ROWS );
   DCSetPMU( 70NA, -70NA, 0.1V,
               -230.0NA, 230.0NA, PINS_EVEN_ROWS );
DCSetupClose;

DCSetupOpen( PIN2PIN_COLUMNS_DC, DEFAULT_DC_TABLE );
   DCSetPMU( 70NA, -70NA, -0.1V,
             -230.0NA, 230.0NA, PINS_ODD_COLUMNS );
   DCSetPMU( 70NA, -70NA, 0.1V,
             -230.0NA, 230.0NA, PINS_EVEN_COLUMNS );
DCSetupClose;

FormatSetupOpen( CONTY_FORMAT, DEFAULT_FORMAT_TABLE );
FormatSetupClose;

ACSetupOpen( CONTY_AC, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 1000nS, OPEN_ODD_DC, CONTY_FORMAT );
ACSetupClose;

(*  GOI  *)

DCSetupOpen( GOI_DC, DEFAULT_DC_TABLE );
DCSetupClose;

(*  ICCQ SETUP  *)

DCSetupOpen( ICCQ_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa18V_INS );
  DCSetDyn( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, -2.0mA,
              2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, -2.0mA,
              2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, -2.0mA,
              2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, -2.0mA,
              2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, OSC1V_INS );
  DCSetDyn( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, VMX1V_I*0.65, -10.0uA,
              10.0uA, OSC1V_OUTS );
  DCSetDyn( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, VMX1V_I*0.65, -10.0uA,
              10.0uA, OSC1V_IOS );
  DCSetDyn( VMX3V_I, 0.0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, 
            -10.0uA, 10.0uA, USB3V_IOSY );
  DCSetDyn( VMX3V_I, 0.0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, VMX3V_I*0.65, 
            -10.0uA, 10.0uA, USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( ICCQ_PM_BLEED, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa18V_INS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa3V_OUTS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa18V_OUTS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa3V_IOS );
  DCSetLDOFF( VMX3V_I, 0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, CMOSa18V_IOS );
  DCSetLDOFF( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, OSC1V_INS );
  DCSetLDOFF( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, OSC1V_OUTS );
  DCSetLDOFF( VMX1V_I, 0V,CP, VMX1V_I*0.75, VMX1V_I*0.25, OSC1V_IOS );
  DCSetLDOFF( VMX3V_I, 0.0V,CP, VMX3V_I*0.75, VMX3V_I*0.25, USB3V_IOSY );
  DCSetLDOFF( VMX3V_I, 0.0V,CP, VMX3V_I*0.75, VMX3V_I*0.25,  USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( SLOW_MIN_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65, -2.0mA, 2.0mA,
              CMOSa18V_IOS );
  DCSetLDOFF( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, OSC1V_INS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.65, -10.0uA, 10.0uA,
              OSC1V_OUTS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.65, -10.0uA, 10.0uA,
              OSC1V_IOS );
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( SLOW_MIN_DC_VIHL_MIN, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa3V_INS )
;
  DCSetLDOFF( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa18V_INS 
);
  DCSetDyn( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65
, 
  -2.0mA, 2.0mA,CMOSa3V_OUTS );
  DCSetDyn( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65
, 
  -2.0mA, 2.0mA,CMOSa18V_OUTS );
  DCSetDyn( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65
,
   -2.0mA, 2.0mA,CMOSa3V_IOS );
  DCSetDyn( VMN3V_VIHL, 0V,CP, VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65
, 
  -2.0mA, 2.0mA,CMOSa18V_IOS );
  DCSetLDOFF( VMN1V_VIHL, 0V,CP, VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, OSC1V_INS );
  DCSetDyn( VMN1V_VIHL, 0V,CP, VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, VMN1V_VIHL*0.65
, 
  -10.0uA, 10.0uA,OSC1V_OUTS );
  DCSetDyn( VMN1V_VIHL, 0V,CP, VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, VMN1V_VIHL*0.65
, 
  -10.0uA, 10.0uA,OSC1V_IOS );
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,USB3V_IOSY )
;
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,USB3V_IOSYZ 
);
DCSetupClose;

DCSetupOpen( SLOW_LOMIN_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65,
              -2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.65,
	      -2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, OSC1V_INS );
  DCSetDyn( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, VMN1LV*0.65, -10.0uA, 
		10.0uA, OSC1V_OUTS );
  DCSetDyn( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, VMN1LV*0.65, -10.0uA, 
		10.0uA, OSC1V_IOS );
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( 2.50V, 0.0V,CP, 1.875V, 0.625V, 1.625V, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( SLOW_NOM_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, CMOSa18V_INS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, VNM3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, VNM3V*0.65, 
	      -2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, VNM3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.75, VNM3V*0.25, VNM3V*0.65,
	      -2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VNM1V, 0V,CP, VNM1V*0.75, VNM1V*0.25, OSC1V_INS );
  DCSetDyn( VNM1V, 0V,CP, VNM1V*0.75, VNM1V*0.25, VNM1V*0.65, -10.0uA, 
  		10.0uA, OSC1V_OUTS );
  DCSetDyn( VNM1V, 0V,CP, VNM1V*0.75, VNM1V*0.25, VNM1V*0.65, -10.0uA, 
		10.0uA, OSC1V_IOS );
  DCSetDyn( 2.75V, 0.0V,CP, 2.063V, 0.688V, 1.788V, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( 2.75V, 0.0V,CP, 2.063V, 0.688V, 1.788V, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( SLOW_MAX_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.65,
	      -2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.65,
	      -2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.65,
	      -2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, OSC1V_INS );
  DCSetDyn( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, VMX1V*0.65, -10.0uA, 
		10.0uA, OSC1V_OUTS );
  DCSetDyn( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, VMX1V*0.65, -10.0uA, 
		10.0uA, OSC1V_IOS );
  DCSetDyn( 3.00V, 0.0V,CP, 2.250V, 0.750V, 1.950V, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( 3.00V, 0.0V,CP, 2.250V, 0.750V, 1.950V, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( SLOW_MAX_DC_VIHL_MAX, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa3V_INS )
;
  DCSetLDOFF( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa18V_INS 
);
  DCSetDyn( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65
,
  -2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65
,
  -2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65
,
  -2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMX3V_VIHL, 0V,CP, VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65
,
  -2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMX1V_VIHL, 0V,CP, VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, OSC1V_INS );
  DCSetDyn( VMX1V_VIHL, 0V,CP, VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, VMX1V_VIHL*0.65
,
   -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( VMX1V_VIHL, 0V,CP, VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, VMX1V_VIHL*0.65
,
   -10.0uA, 10.0uA, OSC1V_IOS );
  DCSetDyn( 3.00V, 0.0V,CP, 2.250V, 0.750V, 1.950V, -10.0uA, 10.0uA,USB3V_IOSY )
;
  DCSetDyn( 3.00V, 0.0V,CP, 2.250V, 0.750V, 1.950V, -10.0uA, 10.0uA,USB3V_IOSYZ 
);
DCSetupClose;

DCSetupOpen( SLOW_HIMAX_DC, DEFAULT_DC_TABLE );
DCSetupClose;

DCSetupOpen( FAST_NOM_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, CMOSa3V_INS );
  DCSetLDOFF( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, CMOSa18V_INS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, VNM3V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, VNM3V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, VNM3V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( VNM3V, 0V,CP, VNM3V*0.5, VNM3V*0.5, VNM3V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_IOS );
  DCSetLDOFF( VNM1V, 0V,CP, VNM1V*0.5, VNM1V*0.5, OSC1V_INS );
  DCSetDyn( VNM1V, 0V,CP, VNM1V*0.5, VNM1V*0.5, VNM1V*0.8, -10.0uA, 10.0uA,
              OSC1V_OUTS );
  DCSetDyn( VNM1V, 0V,CP, VNM1V*0.5, VNM1V*0.5, VNM1V*0.8, -10.0uA, 10.0uA,
              OSC1V_IOS );
  DCSetDyn( 2.75V, 0.0V,CP, 1.375V, 1.375V, 2.200V, -10uA, 10uA,
              USB3V_IOSY );
  DCSetDyn( 2.75V, 0.0V,CP, 1.375V, 1.375V, 2.200V, -10uA, 10uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( FAST_MIN_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa18V_IOS );
  DCSetLDOFF( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, OSC1V_INS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.5, -10.0uA, 10.0uA,
              OSC1V_OUTS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.5, -10.0uA, 10.0uA,
              OSC1V_IOS );
  DCSetDyn( VMN3V, 0.0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( VMN3V, 0.0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( FAST_LOMIN_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, 
	     -2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( VMN3V, 0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, 
	      -2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, OSC1V_INS );
  DCSetDyn( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, VMN1LV*0.5, -10.0uA,
 10.0uA, OSC1V_OUTS );
  DCSetDyn( VMN1LV, 0V,CP, VMN1LV*0.75, VMN1LV*0.25, VMN1LV*0.5, -10.0uA, 
 10.0uA, OSC1V_IOS );
  DCSetDyn( VMN3V, 0.0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -10.0uA,
 10.0uA, USB3V_IOSY );
  DCSetDyn( VMN3V, 0.0V,CP, VMN3V*0.75, VMN3V*0.25, VMN3V*0.5, -10.0uA,
 10.0uA, USB3V_IOSYZ );
DCSetupClose;

{(rev02x) ...}

DCSetupOpen( FAST_MAX_DC, DEFAULT_DC_TABLE );
  DCSetLDOFF( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, CMOSa18V_INS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, 
		-2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( VMX3V, 0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, 
		-2.0mA, 2.0mA, CMOSa18V_IOS );  
  DCSetLDOFF( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, OSC1V_INS );
  DCSetDyn( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, VMX1V*0.5, -10.0uA, 10.0uA,
              OSC1V_OUTS );
  DCSetDyn( VMX1V, 0V,CP, VMX1V*0.75, VMX1V*0.25, VMX1V*0.5, -10.0uA, 10.0uA,
              OSC1V_IOS );
  DCSetDyn( VMX3V, 0.0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, -10.0uA, 10.0uA,
              USB3V_IOSY );
  DCSetDyn( VMX3V, 0.0V,CP, VMX3V*0.75, VMX3V*0.25, VMX3V*0.5, -10.0uA, 10.0uA,
              USB3V_IOSYZ );
DCSetupClose;

DCSetupOpen( FAST_HIMAX_DC, DEFAULT_DC_TABLE );
DCSetupClose;


(*
*******************************************************************
****            FORMAT 1                                     ****
*
*    hel_atpg_sc hel_icc_sc arm925_atpg_1 arm925_atpg_2 arm925_atpg_3  *
*    hel_atpg_0 hel_atpg_1 hel_atpg_2 hel_atpg_3 hel_atpg_4       *
*    hel_atpg_sim hel_icc_10 omap31_p_atpg_0 omap31_p_atpg_1 omap31_p_atpg_2  *
*    omap31_p_atpg_3 omap31_p_atpg_4 omap31_p_atpg_sim omap31_s_atpg_0 omap31_s_
atpg_1  *
*    omap31_s_atpg_2 omap31_s_atpg_sim                            *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_1, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_NR, s_off, OSC1_OUT );
  FormatSetInOut( s_OFF, s_NR, s_off, USB_DM );
  FormatSetInOut( s_OFF, s_NR, s_off, USB_DP );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 2                                     ****
*
*    omap31_p_atpg_sc omap31_s_atpg_sc mgs3_atpg_20               *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_2, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 3                                     ****
*
*    dcp_voh_vol dcp_vih_vil dcp_iih_iil_nopull dcp_leak          *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_3, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 4                                     ****
*
*    dcp_voh_vol_sdata_dual                                       *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_4, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 5                                     ****
*
*    E_FUSE                                                       *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_5, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CAM_D_6 );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 6                                     ****
*
*    arm925_atpg_reset                                            *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_6, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 7                                     ****
*
*    hel_icc_bsr                                                  *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_7, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 8                                     ****
*
*    mgs3_atpg_0 mgs3_atpg_1 mgs3_atpg_2 mgs3_atpg_3 mgs3_atpg_4  *
*    mgs3_atpg_5 mgs3_atpg_6 mgs3_atpg_7 mgs3_atpg_8 mgs3_atpg_sc *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_8, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 9                                     ****
*
*    hel_tdl_sleep_sync Ls12_writeseq_14_1 Ls12_writeseq_28_2 Ls14_writeseq_28_2
 Ls22_writeseq_28_2  *
*    Ls24_writeseq_28_2 Ls2_32_16_ic_28_2 Ls2_cp15test31_28_2 Ls2_dc_cl_ful_28_2
 Ls2_dc_cln_idx_28_2  *
*    Ls2_dc_rd_wr_28_2 Ls2_dche_hs1X_28_2 Ls2_dchitmiss_28_2 Ls2_hel_diag_28_2 L
s2_led_diag_2_28_2  *
*    Ls2_ichitmiss_28_2 Ls2_mmu_w_dtlb_28_2 Ls2_mrc_usr_md_28_2 Ls2_o_dma_imif_2
8_2 Ls2_ostimer1_28_2  *
*    Ls2_ostimer3_28_2 Ls2_prefetch_28_2 Ls2_raw_1010_28_2 Ls2_raw_110x_28_2 Ls2
_raw_1110_28_2  *
*    Ls2_raw_1111_28_2 Ls2_raw_111Xcoh_28_2 Ls2_raw_111x_28_2 Ls2_swap_hzd_28_2 
Ls2_swp_str_l1_28_2  *
*    Ls2_tdl_api_access_28_2 Ls2_tdl_led_ostimer2_28_2 Ls2_tiny_icw_28_2 Ls2_tlb
_bistp2_28_2 Ls2_tlb_bistp3_28_2  *
*    Ls2_tlb_bistp_28_2 Ls2_tlbfill_28_2 hel_tdl_diag1_sync hel_tdl_diag2_sync h
el_tdl_diag3_sync  *
*    hel_tdl_diag4_sync hel_tdl_diag5_sync                        *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_9, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;

FormatSetupOpen( FORMAT_9z, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;


(*
*******************************************************************
****            FORMAT 10                                     ****
*
*    Die_ID                                                       *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_10, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 11                                     ****
*
*    ETLM S_apirdwrapicntlstatu S_apirdwrrheareghom S_apirdwrrhearegsam S_apisim
rdwrDARAM01sa  *
*    S_apisimrdwrDARAM27sa S_apisimrdwrSARAMsam S_apisimrdwrrheahom S_apisimrdwr
rheasam S_apisimtestforhabort  *
*    S_apiwrapiintrreg S_apiwrpostmemsam S_apiwrpostrheasam S_benchmark_agc_dein
t S_bmrkagcdeintbyte  *
*    S_benchmark_agc_frame S_bmrkagcslotbyte S_benchmark_arith_enc S_benchmark_c
onv2d S_benchmark_convdec  *
*    S_benchmark_convenc S_benchmark_corr2d S_benchmark_dagc_exp S_benchmark_dag
c_slot S_bmrkdagcslotbyte  *
*    S_benchmark_deint1 S_bmrkdigsmooth S_benchmark_fir1 S_benchmark_fir2 S_bmrk
framedeint3G  *
*    S_bmrkframedeint3Gbyt S_benchmark_fsdeint S_benchmark_iir1 S_benchmark_itg9
6 S_bmrkmotsearch  *
*    S_bmrkmrccombine S_benchmark_mrc_exp S_bmrkmrcmultiple S_bmrkmrcsingle S_bm
rkmrcsmooth  *
*    S_benchmark_puncture S_benchmark_qrle S_bmrkratematch S_benchmark_reorder S
_benchmark_sad_block  *
*    S_bmrksadmblock S_bmrkslotdeint S_bmrksttdcombinepilo S_benchmark_sttd_mult
 S_benchmark_vlc  *
*    S_benchmark_vld S_checkerboard S_checkerboard_d0 S_cpu_access_rhea_reg S_cp
u_blockrepeat  *
*    S_cpu_cf_brc_r20 S_cpucfdurptxparar21 S_cpucfretcparar20 S_cpu_cf_rptx_r20 
S_cpu_cf_xcn_swap_r20  *
*    S_cpucircularlineart1 S_cpucircularlineart2 S_cpucircularlineart3 S_cpu_idl
e_wakeup S_cpu_ipsa_chk  *
*    S_cpuleadbitdagenr21 S_cpuleadbitnestloopr S_cpu_localrepeat S_cpu_mmr_rw_m
in S_cpu_paral_au_au  *
*    S_cpu_paral_au_du S_cpuplaudubugfixr20 S_cpu_paral_au_du_t1 S_cpu_paral_au_
du_t2 S_cpu_paral_au_du_t3  *
*    S_cpu_paral_cf_au S_cpu_paral_cf_au_t1 S_cpu_paral_cf_cf S_cpu_paral_cf_du 
S_cpu_paral_cf_du_t1  *
*    S_cpu_paral_cf_du_t2 S_cpu_paral_du_du S_cpupldudubtsr20 S_cpu_paral_du_du_
t1 S_cpu_repeat  *
*    S_cpu_speedpath_alu16 S_cpu_speedpath_alu40 S_cpuspdptalu40r20 S_cpu_speedp
ath_bit S_cpuspdptbitr20  *
*    S_cpuspdptblockrpt S_cpuspdptcmprbrc S_cpu_speedpath_dagen S_cpuspdptkillad
 S_cpuspdptkillex  *
*    S_cpuspdptkillexr20 S_cpuspdptkillrd S_cpu_speedpath_mac1 S_cpuspdptmac1r20
 S_cpu_speedpath_mac2  *
*    S_cpuspdptmac2r20 S_cpu_speedpath_rf S_cpuspdptrfr20 S_cpu_speedpath_shift 
S_cpuspdptshiftr20  *
*    S_cpuspdptstallac1 S_cpuspdptstallad S_cpuspdptstalladr20 S_cpuspdptstallde
c S_cpu_xar_mdp_r20  *
*    S_dieid_led S_dma_daram_daram S_dma_daram_emif S_dma_daram_saram S_dma_emif
_daram  *
*    S_dma_idle S_dma_rhea_emif S_dma_rhea_rhea S_dma_saram_saram S_fdbk_boot  *
*    S_fdbk_boot1 S_fdbk_boot2 S_fdbkdmadefaultvalue S_fdbk_dma_registers S_fdbk
_intr1  *
*    S_fdbk_intr2 S_fdbk_pedbus S_fdbk_stio_dual_read S_fdbkstiolockaccess S_fdb
k_stio_rd_wr  *
*    S_fdbk_stio_read S_fdbk_stio_ready S_fdbk_stio_wpe S_fdbk_stio_wr_e_f S_fil
l_0  *
*    S_fill_0_d0 S_fill_1 S_fill_1_d0 S_fullrate_vocoder S_fullratevocoderintr  
*
*    S_icache_data_chkbd S_icache_data_fill_1 S_icachedatainvchkbd S_icache_fill
_0 S_icache_lvb_rs  *
*    S_icache_regs S_icache_tag_chkbd S_icache_tag_fill_1 S_icache_tag_invchkbd 
S_inv_checkerboard  *
*    S_inv_checkerboard_d0 S_march13n_d0 S_march13n_pd S_rheaaccessallperiph S_r
hea_int1_pr1  *
*    S_rhea_int1_pr10 S_rhea_int1_pr11 S_rhea_int1_pr12 S_rhea_int1_pr13 S_rhea_
int1_pr14  *
*    S_rhea_int1_pr15 S_rhea_int1_pr16 S_rhea_int1_pr17 S_rhea_int1_pr18 S_rhea_
int1_pr19  *
*    S_rhea_int1_pr2 S_rhea_int1_pr20 S_rhea_int1_pr21 S_rhea_int1_pr22 S_rhea_i
nt1_pr3  *
*    S_rhea_int1_pr4 S_rhea_int1_pr5 S_rhea_int1_pr6 S_rhea_int1_pr7 S_rhea_int1
_pr8  *
*    S_rhea_int1_pr9 S_rhea_timeout_error1 S_rom_test S_rom_test_reg S_testmmap 
 *
*    S_wrapcombo1daram0x00 S_wrapcombo1daram0x01 S_wrapcombo1daram0x02 S_wrapcom
bo1daram0x03 S_wrapcombo1daram0x04  *
*    S_wrapcombo1daram0x05 S_wrapcombo1daram0x06 S_wrapcombo1daram0x07 S_wrapcom
bo1saram0x08 S_wrapcombo1saram0x09  *
*    S_wrapcombo1saram0x0a S_wrapcombo1saram0x0b S_wrapcombo1saram0x0c S_wrapcom
bo1saram0x0d S_wrapcombo1saram0x0e  *
*    S_wrapcombo1saram0x0f S_wrapcombo1saram0x10 S_wrapcombo1saram0x11 S_wrapcom
bo1saram0x12 S_wrapcombo1saram0x13  *
*    S_wrapcombo2daram0x00 S_wrapcombo2daram0x01 S_wrapcombo2daram0x02 S_wrapcom
bo2daram0x03 S_wrapcombo2daram0x04  *
*    S_wrapcombo2daram0x05 S_wrapcombo2daram0x06 S_wrapcombo2daram0x07 S_wrapcom
bo2saram0x08 S_wrapcombo2saram0x09  *
*    S_wrapcombo2saram0x0a S_wrapcombo2saram0x0b S_wrapcombo2saram0x0c S_wrapcom
bo2saram0x0d S_wrapcombo2saram0x0e  *
*    S_wrapcombo2saram0x0f S_wrapcombo2saram0x10 S_wrapcombo2saram0x11 S_wrapcom
bo2saram0x12 S_wrapcombo2saram0x13  *
*    S_wrapcombo3daram0x00 S_wrapcombo3daram0x01 S_wrapcombo3daram0x02 S_wrapcom
bo3daram0x03 S_wrapcombo3daram0x04  *
*    S_wrapcombo3daram0x05 S_wrapcombo3daram0x06 S_wrapcombo3daram0x07 S_wrapcom
bo3saram0x08 S_wrapcombo3saram0x09  *
*    S_wrapcombo3saram0x0a S_wrapcombo3saram0x0b S_wrapcombo3saram0x0c S_wrapcom
bo3saram0x0d S_wrapcombo3saram0x0e  *
*    S_wrapcombo3saram0x0f S_wrapcombo3saram0x10 S_wrapcombo3saram0x11 S_wrapcom
bo3saram0x12 S_wrapcombo3saram0x13  *
*    S_xpsa_api S_xpsa_cpu S_xpsa_emif S_xpsa_rhea TLM_arm9_r3_alu_extra  *
*    TLM_arm9_r3_ctl TLM_arm9_r3_dp TLM_arm9_r3_ice TLM_arm9_r3_ice_extra TLM_ar
m9_r3_mul  *
*    TLM_arm9_r3_rev1 TLM_arm9_r3_rev2 TLM_arm9_r3_rev3 TLM_arm9_r3_scan_extra T
LM_arm9_r3_tapid  *
*    TLM_arm9_r3_thumb TLM_arm9_r3_uni TLM_arm9_r3_wpt USB_HELEN1 apirdwrapicntl
statu  *
*    apirdwrrheareghom apirdwrrhearegsam apisimrdwrDARAM01sa apisimrdwrDARAM27sa
 apisimrdwrSARAMsam  *
*    apisimrdwrrheahom apisimrdwrrheasam apisimtestforhabort apiwrapiintrreg api
wrpostmemsam  *
*    apiwrpostrheasam benchmark_agc_deint bmrkagcdeintbyte benchmark_agc_frame b
mrkagcslotbyte  *
*    benchmark_arith_enc benchmark_conv2d benchmark_convdec benchmark_convenc be
nchmark_corr2d  *
*    benchmark_dagc_exp benchmark_dagc_slot bmrkdagcslotbyte benchmark_deint1 bm
rkdigsmooth  *
*    benchmark_fir1 benchmark_fir2 bmrkframedeint3G bmrkframedeint3Gbyt benchmar
k_fsdeint  *
*    benchmark_iir1 benchmark_itg96 bmrkmotsearch bmrkmrccombine benchmark_mrc_e
xp  *
*    bmrkmrcmultiple bmrkmrcsingle bmrkmrcsmooth benchmark_puncture benchmark_qr
le  *
*    bmrkratematch benchmark_reorder benchmark_sad_block bmrksadmblock bmrkslotd
eint  *
*    bmrksttdcombinepilo benchmark_sttd_mult benchmark_vlc benchmark_vld checker
board  *
*    checkerboard_d0 cpu_access_rhea_reg cpu_blockrepeat cpu_cf_brc_r20 cpucfdur
ptxparar21  *
*    cpucfretcparar20 cpu_cf_rptx_r20 cpu_cf_xcn_swap_r20 cpucircularlineart1 cp
ucircularlineart2  *
*    cpucircularlineart3 cpu_idle_wakeup cpu_ipsa_chk cpuleadbitdagenr21 cpulead
bitnestloopr  *
*    cpu_localrepeat cpu_mmr_rw_min cpu_paral_au_au cpu_paral_au_du cpuplaudubug
fixr20  *
*    cpu_paral_au_du_t1 cpu_paral_au_du_t2 cpu_paral_au_du_t3 cpu_paral_cf_au cp
u_paral_cf_au_t1  *
*    cpu_paral_cf_cf cpu_paral_cf_du cpu_paral_cf_du_t1 cpu_paral_cf_du_t2 cpu_p
aral_du_du  *
*    cpupldudubtsr20 cpu_paral_du_du_t1 cpu_repeat cpu_speedpath_alu16 cpu_speed
path_alu40  *
*    cpuspdptalu40r20 cpu_speedpath_bit cpuspdptbitr20 cpuspdptblockrpt cpuspdpt
cmprbrc  *
*    cpu_speedpath_dagen cpuspdptkillad cpuspdptkillex cpuspdptkillexr20 cpuspdp
tkillrd  *
*    cpu_speedpath_mac1 cpuspdptmac1r20 cpu_speedpath_mac2 cpuspdptmac2r20 cpu_s
peedpath_rf  *
*    cpuspdptrfr20 cpu_speedpath_shift cpuspdptshiftr20 cpuspdptstallac1 cpuspdp
tstallad  *
*    cpuspdptstalladr20 cpuspdptstalldec cpu_xar_mdp_r20 dieid_led dma_daram_dar
am  *
*    dma_daram_emif dma_daram_saram dma_emif_daram dma_idle dma_rhea_emif  *
*    dma_rhea_rhea dma_saram_saram fdbk_boot fdbk_boot1 fdbk_boot2  *
*    fdbkdmadefaultvalue fdbk_dma_registers fdbk_intr1 fdbk_intr2 fdbk_pedbus  *
*    fdbk_stio_dual_read fdbkstiolockaccess fdbk_stio_rd_wr fdbk_stio_read fdbk_
stio_ready  *
*    fdbk_stio_wpe fdbk_stio_wr_e_f fill_0 fill_0_d0 fill_1       *
*    fill_1_d0 fullrate_vocoder fullratevocoderintr hel_include_file icache_data
_chkbd  *
*    icache_data_fill_1 icachedatainvchkbd icache_fill_0 icache_lvb_rs icache_re
gs  *
*    icache_tag_chkbd icache_tag_fill_1 icache_tag_invchkbd inv_checkerboard inv
_checkerboard_d0  *
*    march13n_d0 march13n_pd rheaaccessallperiph rhea_int1_pr1 rhea_int1_pr10  *
*    rhea_int1_pr11 rhea_int1_pr12 rhea_int1_pr13 rhea_int1_pr14 rhea_int1_pr15 
 *
*    rhea_int1_pr16 rhea_int1_pr17 rhea_int1_pr18 rhea_int1_pr19 rhea_int1_pr2  
*
*    rhea_int1_pr20 rhea_int1_pr21 rhea_int1_pr22 rhea_int1_pr3 rhea_int1_pr4  *
*    rhea_int1_pr5 rhea_int1_pr6 rhea_int1_pr7 rhea_int1_pr8 rhea_int1_pr9  *
*    rhea_timeout_error1 rom_test rom_test_reg testmmap wrapcombo1daram0x00  *
*    wrapcombo1daram0x01 wrapcombo1daram0x02 wrapcombo1daram0x03 wrapcombo1daram
0x04 wrapcombo1daram0x05  *
*    wrapcombo1daram0x06 wrapcombo1daram0x07 wrapcombo1saram0x08 wrapcombo1saram
0x09 wrapcombo1saram0x0a  *
*    wrapcombo1saram0x0b wrapcombo1saram0x0c wrapcombo1saram0x0d wrapcombo1saram
0x0e wrapcombo1saram0x0f  *
*    wrapcombo1saram0x10 wrapcombo1saram0x11 wrapcombo1saram0x12 wrapcombo1saram
0x13 wrapcombo2daram0x00  *
*    wrapcombo2daram0x01 wrapcombo2daram0x02 wrapcombo2daram0x03 wrapcombo2daram
0x04 wrapcombo2daram0x05  *
*    wrapcombo2daram0x06 wrapcombo2daram0x07 wrapcombo2saram0x08 wrapcombo2saram
0x09 wrapcombo2saram0x0a  *
*    wrapcombo2saram0x0b wrapcombo2saram0x0c wrapcombo2saram0x0d wrapcombo2saram
0x0e wrapcombo2saram0x0f  *
*    wrapcombo2saram0x10 wrapcombo2saram0x11 wrapcombo2saram0x12 wrapcombo2saram
0x13 wrapcombo3daram0x00  *
*    wrapcombo3daram0x01 wrapcombo3daram0x02 wrapcombo3daram0x03 wrapcombo3daram
0x04 wrapcombo3daram0x05  *
*    wrapcombo3daram0x06 wrapcombo3daram0x07 wrapcombo3saram0x08 wrapcombo3saram
0x09 wrapcombo3saram0x0a  *
*    wrapcombo3saram0x0b wrapcombo3saram0x0c wrapcombo3saram0x0d wrapcombo3saram
0x0e wrapcombo3saram0x0f  *
*    wrapcombo3saram0x10 wrapcombo3saram0x11 wrapcombo3saram0x12 wrapcombo3saram
0x13 xpsa_api  *
*    xpsa_cpu xpsa_emif xpsa_rhea                                 *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_11, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 12                                     ****
*
*    Ls2_timer32_28_2                                             *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_12, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 13                                     ****
*
*    dcp_vih_vil_sdata                                            *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_13, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 14                                     ****
*
*    dcp_voh_vol_dual_com                                         *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_14, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 15                                     ****
*
*    dcp_voh_vol_dual_flash                                       *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_15, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 16                                     ****
*
*    hel_critical_tc1a                                            *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_16, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 17                                     ****
*
*    hel_mem_init_0000 hel_mem_init_5555 hel_mem_init_AAAA hel_mem_init_FFFF  *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_17, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 18                                     ****
*
*    hel_mpu_diagnostic                                           *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_18, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 19                                     ****
*
*    hel_tdl_apll                                                 *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_19, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, KBR_4 );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 20                                     ****
*
*    hel_bist                                                     *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_20, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 21                                     ****
*
*    hel_tdl_omap_arm0_T1 hel_tdl_omap_arm1_T1 hel_tdl_omap_arm10_T1 hel_tdl_oma
p_arm11_T1 hel_tdl_omap_arm12_T1  *
*    hel_tdl_omap_arm2_T1 hel_tdl_omap_arm3_T1 hel_tdl_omap_arm4_T1 hel_tdl_omap
_arm5_T1 hel_tdl_omap_arm6_T1  *
*    hel_tdl_omap_arm7_T1 hel_tdl_omap_arm8_T1 hel_tdl_omap_arm9_T1 hel_tdl_omap
_brte0_T1 hel_tdl_omap_brte1_T1  *
*    hel_tdl_omap_brte2_T1                                        *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_21, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 22                                     ****
*
*    hel_tdl_arm0_w0r0 hel_tdl_arm0_w0r1 hel_tdl_arm0_w1r0 hel_tdl_arm1_w0r0 hel
_tdl_arm1_w0r1  *
*    hel_tdl_arm1_w1r0                                            *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_22, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 23                                     ****
*
*    hel_tdl_arm4_w0r0 hel_tdl_arm4_w0r1 hel_tdl_arm4_w1r0 hel_tdl_arm5_w0r0 hel
_tdl_arm5_w0r1  *
*    hel_tdl_arm5_w1r0 hel_tdl_arm6_w0r0 hel_tdl_arm6_w0r1 hel_tdl_arm6_w1r0  *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_23, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 24                                     ****
*
*    hel_tdl_brte0_w0r0 hel_tdl_brte0_w0r1 hel_tdl_brte0_w1r0 hel_tdl_brte1_w0r0
 hel_tdl_brte1_w0r1  *
*    hel_tdl_brte1_w1r0 hel_tdl_brte2_w0r0 hel_tdl_brte2_w0r1 hel_tdl_brte2_w1r0
  *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_24, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 25                                     ****
*
*    hel_tdl_vbus_detect                                          *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_25, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 26                                     ****
*
*    hel_tdl_vbusdetect2                                          *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_26, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 27                                     ****
*
*    omap_DPLL1 omap_DPLL1_div1 omap_DPLL2 omap_DPLL3             *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_27, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, KBR_4 );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 28                                     ****
*
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_28, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;

{revqb01 ...}
(*
*******************************************************************
****            FORMAT 29                                     ****
*
*    hel_tc1a_m6 hel_tc1c_m6 hel_tc2_m6                           *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_29, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
{... revqb01}

(*
*******************************************************************
****            FORMAT 30                                     ****
*
*    Oscillators                                                  *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_30, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
FormatSetupClose;
(*
*******************************************************************
****            FORMAT 31                                     ****
*
*    hel_burning_test                                             *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_31, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;

(*
*******************************************************************
****            FORMAT 32                                     ****
*
*    hel_arm_gpio hel_arm_mem_burst hel_arm_uart_loopbk hel_concurrent_imif hel_
concurrent_rhea  *
*    hel_dsp_gpio hel_dsp_intc hel_dsp_timer1 hel_dsp_timer2 hel_dsp_timer3  *
*    hel_dsp_uart_loopbk hel_dsp_wdtimer hel_led_clkm1 hel_led_idle13 hel_led_in
th  *
*    hel_led_lcd_2frames hel_led_ostimer1 hel_led_ostimer2 hel_led_ostimer3 hel_
led_psa  *
*    hel_led_rheabridge hel_led_wdtimer hel_mb hel_mmu_arm_comp hel_mmu_cam_ram 
 *
*    hel_mpu_diagnostic hel_mpu_diagnostic2 hel_syncstio2emif hel_tc1a hel_tc1c 
 *
*    hel_tc2 imif_march13_1 imif_march13_10 imif_march13_11 imif_march13_12  *
*    imif_march13_13 imif_march13_14 imif_march13_32 imif_march13_16 imif_march1
3_2  *
*    imif_march13_3 imif_march13_4 imif_march13_5 imif_march13_6 imif_march13_7 
 *
*    imif_march13_8 imif_march13_9                                *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_32, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, OSC32K_OUT );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC32K_IN );
  FormatSetInOut( s_OFF, s_RTO, s_EDGE, CLK32K_IN );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;

{es26v01f...}
(*
*******************************************************************
****            FORMAT 33                                     ****
*
*    hel_ulpd_dpll                                                *
*
*******************************************************************
*)
{...es26v01f}

{rev20a...}
(*
*******************************************************************
****            FORMAT 34                                     ****
*
*    27x_rmr_emiffdspmmu                                          *
*
*******************************************************************
*)

FormatSetupOpen( FORMAT_34, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;
{...rev20a}

FormatSetupOpen( FORMAT_33, DEFAULT_FORMAT_TABLE );
  FormatSetInOut( s_OFF, s_NR, s_EDGE, ALL_PINS );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, KBR_4 );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, TCK );
  FormatSetInOut( s_OFF, s_RTZ, s_EDGE, OSC1_IN );
FormatSetupClose;


ACSetupOpen( GOI_AC, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 3.856US,
             GOI_DC, FORMAT_1 );
  ACSetInOut( IN0_TS1_ACG, 0NS, 0NS, 3.851US, 0NS, 5NS );
  ACSetInOut( IN1_TS1_ACG, 10.00NS, 10.00NS, 3.851US, 0NS, 5NS );
  ACSetInOut( IO1_TS1_ACG, 0NS, 0NS, 3.851US, 5.00NS-TGB, 10.000NS+TGB );
  ACSetInOut( OUT1_TS1_ACG, 0NS, 0NS, 3.851US, 5.00NS-TGB, 10.000NS+TGB );

  CycleSet( NORMAL, IN0_TS1_ACG, IN0_TS1);
  CycleSet( NORMAL, IN1_TS1_ACG, IN1_TS1);
  CycleSet( NORMAL, IO1_TS1_ACG, IO1_TS1);
  CycleSet( NORMAL, OUT1_TS1_ACG, OUT1_TS1);
ACSetupClose;



(*
*******************************************************************
****            TIMING SET 1                                 ****
*
*    hel_atpg_sc hel_icc_sc arm925_atpg_1 arm925_atpg_2 arm925_atpg_3  *
*    hel_atpg_0 hel_atpg_1 hel_atpg_2 hel_atpg_3 hel_atpg_4       *
*    hel_atpg_sim omap31_p_atpg_0 omap31_p_atpg_1 omap31_p_atpg_2  *
*    omap31_p_atpg_3 omap31_p_atpg_4 omap31_p_atpg_sim omap31_s_atpg_0 omap31_s_
atpg_1  *
*    omap31_s_atpg_2 omap31_s_atpg_sim arm925_atpg_reset          *
*    all-mgs3-atpg
*******************************************************************
*)

ACSetupOpen( TIMING_1, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 100.00NS, SLOW_MAX_DC, FORMAT_1 );
  ACSetInOut( IN0_TS1_ACG, 0NS, 0NS, 95.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS1_ACG, 12.00NS, 12.00NS, 22.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS1_ACG, 12.00NS, 12.00NS, 22.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS1_ACG, 0NS, 0NS, 95.000NS, 7.00NS-TGB, 12.000NS+TGB);
  ACSetInOut( OUT1_TS1_ACG, 0NS, 0NS, 95.000NS, 7.00NS-TGB, 12.000NS+TGB);

  CycleSet( NORMAL, IN0_TS1_ACG, IN0_TS1);
  CycleSet( NORMAL, IN1_TS1_ACG, IN1_TS1);
  CycleSet( NORMAL, IN2_TS1_ACG, IN2_TS1);
  CycleSet( NORMAL, IO1_TS1_ACG, IO1_TS1);
  CycleSet( NORMAL, OUT1_TS1_ACG, OUT1_TS1);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 1b                                  ****
*		hel_icc_10					  *
*******************************************************************
*)

ACSetupOpen( TIMING_1b, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 200.00NS, SLOW_MAX_DC, FORMAT_1 );
  ACSetInOut( IN0_TS1_ACG, 0NS, 0NS, 195.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS1_ACG,  20.00NS, 20.00NS, 120.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS1_ACG,  20.00NS, 20.00NS, 120.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS1_ACG, 0NS, 0NS, 195.000NS, 15.00NS-TGB, 20.000NS+TGB);
  ACSetInOut( OUT1_TS1_ACG, 0NS, 0NS, 195.000NS, 15.00NS-TGB, 20.000NS+TGB);

  CycleSet( NORMAL, IN0_TS1_ACG, IN0_TS1);
  CycleSet( NORMAL, IN1_TS1_ACG, IN1_TS1);
  CycleSet( NORMAL, IN2_TS1_ACG, IN2_TS1);
  CycleSet( NORMAL, IO1_TS1_ACG, IO1_TS1);
  CycleSet( NORMAL, OUT1_TS1_ACG, OUT1_TS1);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 3                                 ****
*
*    dcp_voh_vol dcp_vih_vil dcp_iih_iil_nopull dcp_leak          *
*
*******************************************************************
*)
ACSetupOpen( TIMING_3, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 300.00NS, SLOW_MAX_DC, FORMAT_3 );
  ACSetInOut( IN1_TS3_ACG, 75.00NS, 75.00NS, 175.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS3_ACG, 75.00NS, 75.00NS, 175.000NS, 0NS, 5NS);
  ACSetInOut( IN3_TS3_ACG, 10.00NS, 10.00NS, 295.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS3_ACG, 75.00NS, 75.00NS, 175.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO2_TS3_ACG, 10.00NS, 10.00NS, 295.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( OUT1_TS3_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);

  CycleSet( NORMAL, IN1_TS3_ACG, IN1_TS3);
  CycleSet( NORMAL, IN2_TS3_ACG, IN2_TS3);
  CycleSet( NORMAL, IN3_TS3_ACG, IN3_TS3);
  CycleSet( NORMAL, IO1_TS3_ACG, IO1_TS3);
  CycleSet( NORMAL, IO2_TS3_ACG, IO2_TS3);
  CycleSet( NORMAL, OUT1_TS3_ACG, OUT1_TS3);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 4                                 ****
*
*    dcp_voh_vol_sdata_dual                                       *
*
*******************************************************************
*)
ACSetupOpen( TIMING_4, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, SLOW_MAX_DC, FORMAT_4 );
  ACSetInOut( IN1_TS4_ACG, 21.00NS, 21.00NS, 63.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS4_ACG, 100.00PS, 100.00PS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS4_ACG, 21.00NS, 21.00NS, 63.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO2_TS4_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO3_TS4_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO4_TS4_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( OUT1_TS4_ACG, 0NS, 0NS, 79.000NS, 75.00NS-TGB, 80.000NS+TGB);
  ACSetInOut( OUT2_TS4_ACG, 0NS, 0NS, 79.000NS, 75.00NS-TGB, 80.000NS+TGB);

  CycleSet( NORMAL, IN1_TS4_ACG, IN1_TS4);
  CycleSet( NORMAL, IN2_TS4_ACG, IN2_TS4);
  CycleSet( NORMAL, IO1_TS4_ACG, IO1_TS4);
  CycleSet( NORMAL, IO2_TS4_ACG, IO2_TS4);
  CycleSet( NORMAL, IO3_TS4_ACG, IO3_TS4);
  CycleSet( NORMAL, IO4_TS4_ACG, IO4_TS4);
  CycleSet( NORMAL, OUT1_TS4_ACG, OUT1_TS4);
  CycleSet( NORMAL, OUT2_TS4_ACG, OUT2_TS4);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 5                                 ****
*
*    E_FUSE                                                       *
*
*******************************************************************
*)

ACSetupOpen( TIMING_5, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 100.00NS, SLOW_MAX_DC, FORMAT_5 );
  ACSetInOut( IN0_TS5_ACG, 0NS, 0NS, 95.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS5_ACG, 10.00NS, 10.00NS, 60.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS5_ACG, 10.00NS, 10.00NS, 60.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS5_ACG, 10.00NS, 10.00NS, 60.000NS, 80.00NS-TGB,
              85.000NS+TGB);
  ACSetInOut( IO2_TS5_ACG, 0NS, 0NS, 95.000NS, 80.00NS-TGB, 85.000NS+TGB);
  ACSetInOut( OUT1_TS5_ACG, 0NS, 0NS, 95.000NS, 80.00NS-TGB, 85.000NS+TGB);

  CycleSet( NORMAL, IN0_TS5_ACG, IN0_TS5);
  CycleSet( NORMAL, IN1_TS5_ACG, IN1_TS5);
  CycleSet( NORMAL, IN2_TS5_ACG, IN2_TS5);
  CycleSet( NORMAL, IO1_TS5_ACG, IO1_TS5);
  CycleSet( NORMAL, IO2_TS5_ACG, IO2_TS5);
  CycleSet( NORMAL, OUT1_TS5_ACG, OUT1_TS5);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 9                                 ****
*
*    hel_tdl_sleep_sync Ls12_writeseq_14_1 Ls12_writeseq_28_2 Ls14_writeseq_28_2
 Ls22_writeseq_28_2  *
*    Ls24_writeseq_28_2 Ls2_32_16_ic_28_2 Ls2_cp15test31_28_2 Ls2_dc_cl_ful_28_2
 Ls2_dc_cln_idx_28_2  *
*    Ls2_dc_rd_wr_28_2 Ls2_dche_hs1X_28_2 Ls2_dchitmiss_28_2 Ls2_hel_diag_28_2 L
s2_led_diag_2_28_2  *
*    Ls2_ichitmiss_28_2 Ls2_mmu_w_dtlb_28_2 Ls2_mrc_usr_md_28_2 Ls2_o_dma_imif_2
8_2 Ls2_ostimer1_28_2  *
*    Ls2_ostimer3_28_2 Ls2_prefetch_28_2 Ls2_raw_1010_28_2 Ls2_raw_110x_28_2 Ls2
_raw_1110_28_2  *
*    Ls2_raw_1111_28_2 Ls2_raw_111Xcoh_28_2 Ls2_raw_111x_28_2 Ls2_swap_hzd_28_2 
Ls2_swp_str_l1_28_2  *
*    Ls2_tdl_api_access_28_2 Ls2_tdl_led_ostimer2_28_2 Ls2_tiny_icw_28_2 Ls2_tlb
_bistp2_28_2 Ls2_tlb_bistp3_28_2  *
*    Ls2_tlb_bistp_28_2 Ls2_tlbfill_28_2 hel_tdl_diag1_sync hel_tdl_diag2_sync h
el_tdl_diag3_sync  *
*    hel_tdl_diag4_sync hel_tdl_diag5_sync hel_tdl_vbus_detect    *
*
*******************************************************************
*)

ACSetupOpen( TIMING_9, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, SLOW_MAX_DC, FORMAT_9 );
  ACSetInOut( IN1_TS9_ACG, 21.00NS, 21.00NS, 63.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS9_ACG, 100.00PS, 100.00PS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS9_ACG, 21.00NS, 21.00NS, 63.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( IO2_TS9_ACG, 100.00PS, 100.00PS, 79.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( OUT1_TS9_ACG, 0NS, 0NS, 79.000NS, 75.60NS-TGB, 80.600NS+TGB);

  CycleSet( NORMAL, IN1_TS9_ACG, IN1_TS9);
  CycleSet( NORMAL, IN2_TS9_ACG, IN2_TS9);
  CycleSet( NORMAL, IO1_TS9_ACG, IO1_TS9);
  CycleSet( NORMAL, IO2_TS9_ACG, IO2_TS9);
  CycleSet( NORMAL, OUT1_TS9_ACG, OUT1_TS9);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 10                                 ****
*
*    Die_ID                                                       *
*
*******************************************************************
*)

ACSetupOpen( TIMING_10, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_10 );
  ACSetInOut( IN0_TS10_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS10_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS10_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS10_ACG, 10.00NS, 10.00NS, 30.000NS, 30.00NS-TGB,
              35.000NS+TGB);
  ACSetInOut( IO2_TS10_ACG, 0NS, 0NS, 35.000NS, 30.00NS-TGB, 35.000NS+TGB);
  ACSetInOut( OUT1_TS10_ACG, 0NS, 0NS, 35.000NS, 30.00NS-TGB, 35.000NS+TGB);

  CycleSet( NORMAL, IN0_TS10_ACG, IN0_TS10);
  CycleSet( NORMAL, IN1_TS10_ACG, IN1_TS10);
  CycleSet( NORMAL, IN2_TS10_ACG, IN2_TS10);
  CycleSet( NORMAL, IO1_TS10_ACG, IO1_TS10);
  CycleSet( NORMAL, IO2_TS10_ACG, IO2_TS10);
  CycleSet( NORMAL, OUT1_TS10_ACG, OUT1_TS10);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 11                                 ****
*
*    ETLM S_apirdwrapicntlstatu S_apirdwrrheareghom S_apirdwrrhearegsam S_apisim
rdwrDARAM01sa  *
*    S_apisimrdwrDARAM27sa S_apisimrdwrSARAMsam S_apisimrdwrrheahom S_apisimrdwr
rheasam S_apisimtestforhabort  *
*    S_apiwrapiintrreg S_apiwrpostmemsam S_apiwrpostrheasam S_benchmark_agc_dein
t S_bmrkagcdeintbyte  *
*    S_benchmark_agc_frame S_bmrkagcslotbyte S_benchmark_arith_enc S_benchmark_c
onv2d S_benchmark_convdec  *
*    S_benchmark_convenc S_benchmark_corr2d S_benchmark_dagc_exp S_benchmark_dag
c_slot S_bmrkdagcslotbyte  *
*    S_benchmark_deint1 S_bmrkdigsmooth S_benchmark_fir1 S_benchmark_fir2 S_bmrk
framedeint3G  *
*    S_bmrkframedeint3Gbyt S_benchmark_fsdeint S_benchmark_iir1 S_benchmark_itg9
6 S_bmrkmotsearch  *
*    S_bmrkmrccombine S_benchmark_mrc_exp S_bmrkmrcmultiple S_bmrkmrcsingle S_bm
rkmrcsmooth  *
*    S_benchmark_puncture S_benchmark_qrle S_bmrkratematch S_benchmark_reorder S
_benchmark_sad_block  *
*    S_bmrksadmblock S_bmrkslotdeint S_bmrksttdcombinepilo S_benchmark_sttd_mult
 S_benchmark_vlc  *
*    S_benchmark_vld S_checkerboard S_checkerboard_d0 S_cpu_access_rhea_reg S_cp
u_blockrepeat  *
*    S_cpu_cf_brc_r20 S_cpucfdurptxparar21 S_cpucfretcparar20 S_cpu_cf_rptx_r20 
S_cpu_cf_xcn_swap_r20  *
*    S_cpucircularlineart1 S_cpucircularlineart2 S_cpucircularlineart3 S_cpu_idl
e_wakeup S_cpu_ipsa_chk  *
*    S_cpuleadbitdagenr21 S_cpuleadbitnestloopr S_cpu_localrepeat S_cpu_mmr_rw_m
in S_cpu_paral_au_au  *
*    S_cpu_paral_au_du S_cpuplaudubugfixr20 S_cpu_paral_au_du_t1 S_cpu_paral_au_
du_t2 S_cpu_paral_au_du_t3  *
*    S_cpu_paral_cf_au S_cpu_paral_cf_au_t1 S_cpu_paral_cf_cf S_cpu_paral_cf_du 
S_cpu_paral_cf_du_t1  *
*    S_cpu_paral_cf_du_t2 S_cpu_paral_du_du S_cpupldudubtsr20 S_cpu_paral_du_du_
t1 S_cpu_repeat  *
*    S_cpu_speedpath_alu16 S_cpu_speedpath_alu40 S_cpuspdptalu40r20 S_cpu_speedp
ath_bit S_cpuspdptbitr20  *
*    S_cpuspdptblockrpt S_cpuspdptcmprbrc S_cpu_speedpath_dagen S_cpuspdptkillad
 S_cpuspdptkillex  *
*    S_cpuspdptkillexr20 S_cpuspdptkillrd S_cpu_speedpath_mac1 S_cpuspdptmac1r20
 S_cpu_speedpath_mac2  *
*    S_cpuspdptmac2r20 S_cpu_speedpath_rf S_cpuspdptrfr20 S_cpu_speedpath_shift 
S_cpuspdptshiftr20  *
*    S_cpuspdptstallac1 S_cpuspdptstallad S_cpuspdptstalladr20 S_cpuspdptstallde
c S_cpu_xar_mdp_r20  *
*    S_dieid_led S_dma_daram_daram S_dma_daram_emif S_dma_daram_saram S_dma_emif
_daram  *
*    S_dma_idle S_dma_rhea_emif S_dma_rhea_rhea S_dma_saram_saram S_fdbk_boot  *
*    S_fdbk_boot1 S_fdbk_boot2 S_fdbkdmadefaultvalue S_fdbk_dma_registers S_fdbk
_intr1  *
*    S_fdbk_intr2 S_fdbk_pedbus S_fdbk_stio_dual_read S_fdbkstiolockaccess S_fdb
k_stio_rd_wr  *
*    S_fdbk_stio_read S_fdbk_stio_ready S_fdbk_stio_wpe S_fdbk_stio_wr_e_f S_fil
l_0  *
*    S_fill_0_d0 S_fill_1 S_fill_1_d0 S_fullrate_vocoder S_fullratevocoderintr  
*
*    S_icache_data_chkbd S_icache_data_fill_1 S_icachedatainvchkbd S_icache_fill
_0 S_icache_lvb_rs  *
*    S_icache_regs S_icache_tag_chkbd S_icache_tag_fill_1 S_icache_tag_invchkbd 
S_inv_checkerboard  *
*    S_inv_checkerboard_d0 S_march13n_d0 S_march13n_pd S_rheaaccessallperiph S_r
hea_int1_pr1  *
*    S_rhea_int1_pr10 S_rhea_int1_pr11 S_rhea_int1_pr12 S_rhea_int1_pr13 S_rhea_
int1_pr14  *
*    S_rhea_int1_pr15 S_rhea_int1_pr16 S_rhea_int1_pr17 S_rhea_int1_pr18 S_rhea_
int1_pr19  *
*    S_rhea_int1_pr2 S_rhea_int1_pr20 S_rhea_int1_pr21 S_rhea_int1_pr22 S_rhea_i
nt1_pr3  *
*    S_rhea_int1_pr4 S_rhea_int1_pr5 S_rhea_int1_pr6 S_rhea_int1_pr7 S_rhea_int1
_pr8  *
*    S_rhea_int1_pr9 S_rhea_timeout_error1 S_rom_test S_rom_test_reg S_testmmap 
 *
*    S_wrapcombo1daram0x00 S_wrapcombo1daram0x01 S_wrapcombo1daram0x02 S_wrapcom
bo1daram0x03 S_wrapcombo1daram0x04  *
*    S_wrapcombo1daram0x05 S_wrapcombo1daram0x06 S_wrapcombo1daram0x07 S_wrapcom
bo1saram0x08 S_wrapcombo1saram0x09  *
*    S_wrapcombo1saram0x0a S_wrapcombo1saram0x0b S_wrapcombo1saram0x0c S_wrapcom
bo1saram0x0d S_wrapcombo1saram0x0e  *
*    S_wrapcombo1saram0x0f S_wrapcombo1saram0x10 S_wrapcombo1saram0x11 S_wrapcom
bo1saram0x12 S_wrapcombo1saram0x13  *
*    S_wrapcombo2daram0x00 S_wrapcombo2daram0x01 S_wrapcombo2daram0x02 S_wrapcom
bo2daram0x03 S_wrapcombo2daram0x04  *
*    S_wrapcombo2daram0x05 S_wrapcombo2daram0x06 S_wrapcombo2daram0x07 S_wrapcom
bo2saram0x08 S_wrapcombo2saram0x09  *
*    S_wrapcombo2saram0x0a S_wrapcombo2saram0x0b S_wrapcombo2saram0x0c S_wrapcom
bo2saram0x0d S_wrapcombo2saram0x0e  *
*    S_wrapcombo2saram0x0f S_wrapcombo2saram0x10 S_wrapcombo2saram0x11 S_wrapcom
bo2saram0x12 S_wrapcombo2saram0x13  *
*    S_wrapcombo3daram0x00 S_wrapcombo3daram0x01 S_wrapcombo3daram0x02 S_wrapcom
bo3daram0x03 S_wrapcombo3daram0x04  *
*    S_wrapcombo3daram0x05 S_wrapcombo3daram0x06 S_wrapcombo3daram0x07 S_wrapcom
bo3saram0x08 S_wrapcombo3saram0x09  *
*    S_wrapcombo3saram0x0a S_wrapcombo3saram0x0b S_wrapcombo3saram0x0c S_wrapcom
bo3saram0x0d S_wrapcombo3saram0x0e  *
*    S_wrapcombo3saram0x0f S_wrapcombo3saram0x10 S_wrapcombo3saram0x11 S_wrapcom
bo3saram0x12 S_wrapcombo3saram0x13  *
*    S_xpsa_api S_xpsa_cpu S_xpsa_emif S_xpsa_rhea TLM_arm9_r3_alu_extra  *
*    TLM_arm9_r3_ctl TLM_arm9_r3_dp TLM_arm9_r3_ice TLM_arm9_r3_ice_extra TLM_ar
m9_r3_mul  *
*    TLM_arm9_r3_rev1 TLM_arm9_r3_rev2 TLM_arm9_r3_rev3 TLM_arm9_r3_scan_extra T
LM_arm9_r3_tapid  *
*    TLM_arm9_r3_thumb TLM_arm9_r3_uni TLM_arm9_r3_wpt USB_HELEN1 apirdwrapicntl
statu  *
*    apirdwrrheareghom apirdwrrhearegsam apisimrdwrDARAM01sa apisimrdwrDARAM27sa
 apisimrdwrSARAMsam  *
*    apisimrdwrrheahom apisimrdwrrheasam apisimtestforhabort apiwrapiintrreg api
wrpostmemsam  *
*    apiwrpostrheasam benchmark_agc_deint bmrkagcdeintbyte benchmark_agc_frame b
mrkagcslotbyte  *
*    benchmark_arith_enc benchmark_conv2d benchmark_convdec benchmark_convenc be
nchmark_corr2d  *
*    benchmark_dagc_exp benchmark_dagc_slot bmrkdagcslotbyte benchmark_deint1 bm
rkdigsmooth  *
*    benchmark_fir1 benchmark_fir2 bmrkframedeint3G bmrkframedeint3Gbyt benchmar
k_fsdeint  *
*    benchmark_iir1 benchmark_itg96 bmrkmotsearch bmrkmrccombine benchmark_mrc_e
xp  *
*    bmrkmrcmultiple bmrkmrcsingle bmrkmrcsmooth benchmark_puncture benchmark_qr
le  *
*    bmrkratematch benchmark_reorder benchmark_sad_block bmrksadmblock bmrkslotd
eint  *
*    bmrksttdcombinepilo benchmark_sttd_mult benchmark_vlc benchmark_vld checker
board  *
*    checkerboard_d0 cpu_access_rhea_reg cpu_blockrepeat cpu_cf_brc_r20 cpucfdur
ptxparar21  *
*    cpucfretcparar20 cpu_cf_rptx_r20 cpu_cf_xcn_swap_r20 cpucircularlineart1 cp
ucircularlineart2  *
*    cpucircularlineart3 cpu_idle_wakeup cpu_ipsa_chk cpuleadbitdagenr21 cpulead
bitnestloopr  *
*    cpu_localrepeat cpu_mmr_rw_min cpu_paral_au_au cpu_paral_au_du cpuplaudubug
fixr20  *
*    cpu_paral_au_du_t1 cpu_paral_au_du_t2 cpu_paral_au_du_t3 cpu_paral_cf_au cp
u_paral_cf_au_t1  *
*    cpu_paral_cf_cf cpu_paral_cf_du cpu_paral_cf_du_t1 cpu_paral_cf_du_t2 cpu_p
aral_du_du  *
*    cpupldudubtsr20 cpu_paral_du_du_t1 cpu_repeat cpu_speedpath_alu16 cpu_speed
path_alu40  *
*    cpuspdptalu40r20 cpu_speedpath_bit cpuspdptbitr20 cpuspdptblockrpt cpuspdpt
cmprbrc  *
*    cpu_speedpath_dagen cpuspdptkillad cpuspdptkillex cpuspdptkillexr20 cpuspdp
tkillrd  *
*    cpu_speedpath_mac1 cpuspdptmac1r20 cpu_speedpath_mac2 cpuspdptmac2r20 cpu_s
peedpath_rf  *
*    cpuspdptrfr20 cpu_speedpath_shift cpuspdptshiftr20 cpuspdptstallac1 cpuspdp
tstallad  *
*    cpuspdptstalladr20 cpuspdptstalldec cpu_xar_mdp_r20 dieid_led dma_daram_dar
am  *
*    dma_daram_emif dma_daram_saram dma_emif_daram dma_idle dma_rhea_emif  *
*    dma_rhea_rhea dma_saram_saram fdbk_boot fdbk_boot1 fdbk_boot2  *
*    fdbkdmadefaultvalue fdbk_dma_registers fdbk_intr1 fdbk_intr2 fdbk_pedbus  *
*    fdbk_stio_dual_read fdbkstiolockaccess fdbk_stio_rd_wr fdbk_stio_read fdbk_
stio_ready  *
*    fdbk_stio_wpe fdbk_stio_wr_e_f fill_0 fill_0_d0 fill_1       *
*    fill_1_d0 fullrate_vocoder fullratevocoderintr hel_include_file icache_data
_chkbd  *
*    icache_data_fill_1 icachedatainvchkbd icache_fill_0 icache_lvb_rs icache_re
gs  *
*    icache_tag_chkbd icache_tag_fill_1 icache_tag_invchkbd inv_checkerboard inv
_checkerboard_d0  *
*    march13n_d0 march13n_pd rheaaccessallperiph rhea_int1_pr1 rhea_int1_pr10  *
*    rhea_int1_pr11 rhea_int1_pr12 rhea_int1_pr13 rhea_int1_pr14 rhea_int1_pr15 
 *
*    rhea_int1_pr16 rhea_int1_pr17 rhea_int1_pr18 rhea_int1_pr19 rhea_int1_pr2  
*
*    rhea_int1_pr20 rhea_int1_pr21 rhea_int1_pr22 rhea_int1_pr3 rhea_int1_pr4  *
*    rhea_int1_pr5 rhea_int1_pr6 rhea_int1_pr7 rhea_int1_pr8 rhea_int1_pr9  *
*    rhea_timeout_error1 rom_test rom_test_reg testmmap wrapcombo1daram0x00  *
*    wrapcombo1daram0x01 wrapcombo1daram0x02 wrapcombo1daram0x03 wrapcombo1daram
0x04 wrapcombo1daram0x05  *
*    wrapcombo1daram0x06 wrapcombo1daram0x07 wrapcombo1saram0x08 wrapcombo1saram
0x09 wrapcombo1saram0x0a  *
*    wrapcombo1saram0x0b wrapcombo1saram0x0c wrapcombo1saram0x0d wrapcombo1saram
0x0e wrapcombo1saram0x0f  *
*    wrapcombo1saram0x10 wrapcombo1saram0x11 wrapcombo1saram0x12 wrapcombo1saram
0x13 wrapcombo2daram0x00  *
*    wrapcombo2daram0x01 wrapcombo2daram0x02 wrapcombo2daram0x03 wrapcombo2daram
0x04 wrapcombo2daram0x05  *
*    wrapcombo2daram0x06 wrapcombo2daram0x07 wrapcombo2saram0x08 wrapcombo2saram
0x09 wrapcombo2saram0x0a  *
*    wrapcombo2saram0x0b wrapcombo2saram0x0c wrapcombo2saram0x0d wrapcombo2saram
0x0e wrapcombo2saram0x0f  *
*    wrapcombo2saram0x10 wrapcombo2saram0x11 wrapcombo2saram0x12 wrapcombo2saram
0x13 wrapcombo3daram0x00  *
*    wrapcombo3daram0x01 wrapcombo3daram0x02 wrapcombo3daram0x03 wrapcombo3daram
0x04 wrapcombo3daram0x05  *
*    wrapcombo3daram0x06 wrapcombo3daram0x07 wrapcombo3saram0x08 wrapcombo3saram
0x09 wrapcombo3saram0x0a  *
*    wrapcombo3saram0x0b wrapcombo3saram0x0c wrapcombo3saram0x0d wrapcombo3saram
0x0e wrapcombo3saram0x0f  *
*    wrapcombo3saram0x10 wrapcombo3saram0x11 wrapcombo3saram0x12 wrapcombo3saram
0x13 xpsa_api  *
*    xpsa_cpu xpsa_emif xpsa_rhea                                 *
*
*******************************************************************
*)

ACSetupOpen( TIMING_11, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 50.00NS, FAST_MAX_DC, FORMAT_22 );
  ACSetInOut( IN1_TS11_ACG, 20.00NS, 20.00NS, 45.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS11_ACG, 20.00NS, 20.00NS, 45.000NS, 0NS, 5NS);
  ACSetInOut( IN3_TS11_ACG, 5.10NS, 5.10NS, 45.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS11_ACG, 20.00NS, 20.00NS, 45.000NS, 40.00NS-TGB,
              45.000NS+TGB);
  ACSetInOut( IO2_TS11_ACG, 5.10NS, 5.10NS, 45.000NS, 40.00NS-TGB,
              45.000NS+TGB);
  ACSetInOut( OUT1_TS11_ACG, 0NS, 0NS, 45.000NS, 40.00NS-TGB, 45.000NS+TGB);
  CycleSet( NORMAL, IN1_TS11_ACG, IN1_TS11);
  CycleSet( NORMAL, IN2_TS11_ACG, IN2_TS11);
  CycleSet( NORMAL, IN3_TS11_ACG, IN3_TS11);
  CycleSet( NORMAL, IO1_TS11_ACG, IO1_TS11);
  CycleSet( NORMAL, IO2_TS11_ACG, IO2_TS11);
  CycleSet( NORMAL, OUT1_TS11_ACG, OUT1_TS11);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 13                                 ****
*
*    dcp_vih_vil_sdata                                            *
*
*******************************************************************
*)

ACSetupOpen( TIMING_13, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, FAST_MAX_DC, FORMAT_13 );
  ACSetInOut( IN1_TS13_ACG, 100.00PS, 100.00PS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS13_ACG, 21.00NS, 21.00NS, 63.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO2_TS13_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO3_TS13_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO4_TS13_ACG, 100.00PS, 100.00PS, 79.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( OUT1_TS13_ACG, 0NS, 0NS, 79.000NS, 75.00NS-TGB, 80.000NS+TGB);
  ACSetInOut( OUT2_TS13_ACG, 0NS, 0NS, 79.000NS, 75.00NS-TGB, 80.000NS+TGB);

  CycleSet( NORMAL, IN1_TS13_ACG, IN1_TS13);
  CycleSet( NORMAL, IO1_TS13_ACG, IO1_TS13);
  CycleSet( NORMAL, IO2_TS13_ACG, IO2_TS13);
  CycleSet( NORMAL, IO3_TS13_ACG, IO3_TS13);
  CycleSet( NORMAL, IO4_TS13_ACG, IO4_TS13);
  CycleSet( NORMAL, OUT1_TS13_ACG, OUT1_TS13);
  CycleSet( NORMAL, OUT2_TS13_ACG, OUT2_TS13);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 14                                 ****
*
*    dcp_voh_vol_dual_com                                         *
*
*******************************************************************
*)

ACSetupOpen( TIMING_14, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 300.00NS, FAST_MAX_DC, FORMAT_14 );
  ACSetInOut( IN0_TS14_ACG, 0NS, 0NS, 295.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS14_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS14_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS14_ACG, 75.00NS, 75.00NS, 225.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO2_TS14_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);
  ACSetInOut( OUT1_TS14_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);

  CycleSet( NORMAL, IN0_TS14_ACG, IN0_TS14);
  CycleSet( NORMAL, IN1_TS14_ACG, IN1_TS14);
  CycleSet( NORMAL, IN2_TS14_ACG, IN2_TS14);
  CycleSet( NORMAL, IO1_TS14_ACG, IO1_TS14);
  CycleSet( NORMAL, IO2_TS14_ACG, IO2_TS14);
  CycleSet( NORMAL, OUT1_TS14_ACG, OUT1_TS14);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 15                                 ****
*
*    dcp_voh_vol_dual_flash                                       *
*
*******************************************************************
*)

ACSetupOpen( TIMING_15, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 300.00NS, FAST_MAX_DC, FORMAT_15 );
  ACSetInOut( IN0_TS15_ACG, 0NS, 0NS, 295.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS15_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS15_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS15_ACG, 75.00NS, 75.00NS, 225.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO2_TS15_ACG, 28.00NS, 28.00NS, 295.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO3_TS15_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);
  ACSetInOut( IO4_TS15_ACG, 0NS, 0NS, 295.000NS, 159.00NS-TGB, 164.000NS+TGB);
  ACSetInOut( IO5_TS15_ACG, 0NS, 0NS, 295.000NS, 268.00NS-TGB, 273.000NS+TGB);
  ACSetInOut( OUT1_TS15_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);
  ACSetInOut( OUT2_TS15_ACG, 0NS, 0NS, 295.000NS, 164.00NS-TGB, 169.000NS+TGB);
  ACSetInOut( OUT3_TS15_ACG, 0NS, 0NS, 295.000NS, 268.00NS-TGB, 273.000NS+TGB);

  CycleSet( NORMAL, IN0_TS15_ACG, IN0_TS15);
  CycleSet( NORMAL, IN1_TS15_ACG, IN1_TS15);
  CycleSet( NORMAL, IN2_TS15_ACG, IN2_TS15);
  CycleSet( NORMAL, IO1_TS15_ACG, IO1_TS15);
  CycleSet( NORMAL, IO2_TS15_ACG, IO2_TS15);
  CycleSet( NORMAL, IO3_TS15_ACG, IO3_TS15);
  CycleSet( NORMAL, IO4_TS15_ACG, IO4_TS15);
  CycleSet( NORMAL, IO5_TS15_ACG, IO5_TS15);
  CycleSet( NORMAL, OUT1_TS15_ACG, OUT1_TS15);
  CycleSet( NORMAL, OUT2_TS15_ACG, OUT2_TS15);
  CycleSet( NORMAL, OUT3_TS15_ACG, OUT3_TS15);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 19                                 ****
*
*    hel_tdl_apll                                                 *
*
*******************************************************************
*)

ACSetupOpen( TIMING_19, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 77.00NS, FAST_MAX_DC, FORMAT_19 );
  ACSetInOut( IN0_TS19_ACG, 100PS, 100PS, 72.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS19_ACG, 18.00NS, 18.00NS, 55.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS19_ACG, 18.00NS, 18.00NS, 55.000NS, 68.60NS-TGB,
              73.600NS+TGB);
  ACSetInOut( IO2_TS19_ACG, 100.00PS, 100.00PS, 72.000NS, 68.60NS-TGB,
              73.600NS+TGB);
  ACSetInOut( IO3_TS19_ACG, 100.00PS, 100.00PS, 72.000NS, 68.60NS-TGB,
              73.600NS+TGB);
  ACSetInOut( OUT1_TS19_ACG, 0NS, 0NS, 72.000NS, 68.60NS-TGB, 73.600NS+TGB);

  CycleSet( NORMAL, IN0_TS19_ACG, IN0_TS19);
  CycleSet( NORMAL, IN1_TS19_ACG, IN1_TS19);
  CycleSet( NORMAL, IO1_TS19_ACG, IO1_TS19);
  CycleSet( NORMAL, IO2_TS19_ACG, IO2_TS19);
  CycleSet( NORMAL, IO3_TS19_ACG, IO3_TS19);
  CycleSet( NORMAL, OUT1_TS19_ACG, OUT1_TS19);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 20                                 ****
*
*    hel_bist                                                     *
*
*******************************************************************
*)

ACSetupOpen( TIMING_20, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_20 );
  ACSetInOut( IN0_TS20_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS20_ACG, 5.00NS, 5.00NS, 25.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS20_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS20_ACG, 5.00NS, 5.00NS, 25.000NS, 31.00NS-TGB,
              36.000NS+TGB);
  ACSetInOut( IO2_TS20_ACG, 0NS, 0NS, 35.000NS, 31.00NS-TGB, 36.000NS+TGB);
  ACSetInOut( OUT1_TS20_ACG, 0NS, 0NS, 35.000NS, 31.00NS-TGB, 36.000NS+TGB);

  CycleSet( NORMAL, IN0_TS20_ACG, IN0_TS20);
  CycleSet( NORMAL, IN1_TS20_ACG, IN1_TS20);
  CycleSet( NORMAL, IN2_TS20_ACG, IN2_TS20);
  CycleSet( NORMAL, IO1_TS20_ACG, IO1_TS20);
  CycleSet( NORMAL, IO2_TS20_ACG, IO2_TS20);
  CycleSet( NORMAL, OUT1_TS20_ACG, OUT1_TS20);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 21                                 ****
*
*    hel_tdl_omap_arm0_T1 hel_tdl_omap_arm1_T1 hel_tdl_omap_arm10_T1 hel_tdl_oma
p_arm11_T1 hel_tdl_omap_arm12_T1  *
*    hel_tdl_omap_arm2_T1 hel_tdl_omap_arm3_T1 hel_tdl_omap_arm4_T1 hel_tdl_omap
_arm5_T1 hel_tdl_omap_arm6_T1  *
*    hel_tdl_omap_arm7_T1 hel_tdl_omap_arm8_T1 hel_tdl_omap_arm9_T1 hel_tdl_omap
_brte0_T1 hel_tdl_omap_brte1_T1  *
*    hel_tdl_omap_brte2_T1                                        *
*
*******************************************************************
*)

ACSetupOpen( TIMING_21, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_21 );
  ACSetInOut( IN0_TS21_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS21_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS21_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS21_ACG, 10.00NS, 10.00NS, 30.000NS, 35.00NS-TGB,
              40.000NS+TGB);
  ACSetInOut( IO2_TS21_ACG, 0NS, 0NS, 35.000NS, 35.00NS-TGB, 40.000NS+TGB);
  ACSetInOut( OUT1_TS21_ACG, 0NS, 0NS, 35.000NS, 35.00NS-TGB, 40.000NS+TGB);

  CycleSet( NORMAL, IN0_TS21_ACG, IN0_TS21);
  CycleSet( NORMAL, IN1_TS21_ACG, IN1_TS21);
  CycleSet( NORMAL, IN2_TS21_ACG, IN2_TS21);
  CycleSet( NORMAL, IO1_TS21_ACG, IO1_TS21);
  CycleSet( NORMAL, IO2_TS21_ACG, IO2_TS21);
  CycleSet( NORMAL, OUT1_TS21_ACG, OUT1_TS21);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 22                                 ****
*
*    hel_tdl_arm0_w0r0 hel_tdl_arm0_w0r1 hel_tdl_arm0_w1r0 hel_tdl_arm1_w0r0 hel
_tdl_arm1_w0r1  *
*    hel_tdl_arm1_w1r0                                            *
*
*******************************************************************
*)

ACSetupOpen( TIMING_22, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_22 );
  ACSetInOut( IN0_TS22_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS22_ACG, 4.00NS, 4.00NS, 24.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS22_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS22_ACG, 4.00NS, 4.00NS, 24.000NS, 38.00NS-TGB,
              43.000NS+TGB);
  ACSetInOut( IO2_TS22_ACG, 0NS, 0NS, 35.000NS, 38.00NS-TGB, 43.000NS+TGB);
  ACSetInOut( OUT1_TS22_ACG, 0NS, 0NS, 35.000NS, 38.00NS-TGB, 43.000NS+TGB);

  CycleSet( NORMAL, IN0_TS22_ACG, IN0_TS22);
  CycleSet( NORMAL, IN1_TS22_ACG, IN1_TS22);
  CycleSet( NORMAL, IN2_TS22_ACG, IN2_TS22);
  CycleSet( NORMAL, IO1_TS22_ACG, IO1_TS22);
  CycleSet( NORMAL, IO2_TS22_ACG, IO2_TS22);
  CycleSet( NORMAL, OUT1_TS22_ACG, OUT1_TS22);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 23                                 ****
*
*    hel_tdl_arm4_w0r0 hel_tdl_arm4_w0r1 hel_tdl_arm4_w1r0 hel_tdl_arm5_w0r0 hel
_tdl_arm5_w0r1  *
*    hel_tdl_arm5_w1r0 hel_tdl_arm6_w0r0 hel_tdl_arm6_w0r1 hel_tdl_arm6_w1r0  *
*
*******************************************************************
*)

ACSetupOpen( TIMING_23, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_23 );
  ACSetInOut( IN0_TS23_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS23_ACG, 3.00NS, 3.00NS, 23.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS23_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS23_ACG, 3.00NS, 3.00NS, 23.000NS, 39.00NS-TGB,
              44.000NS+TGB);
  ACSetInOut( IO2_TS23_ACG, 0NS, 0NS, 35.000NS, 39.00NS-TGB, 44.000NS+TGB);
  ACSetInOut( OUT1_TS23_ACG, 0NS, 0NS, 35.000NS, 39.00NS-TGB, 44.000NS+TGB);

  CycleSet( NORMAL, IN0_TS23_ACG, IN0_TS23);
  CycleSet( NORMAL, IN1_TS23_ACG, IN1_TS23);
  CycleSet( NORMAL, IN2_TS23_ACG, IN2_TS23);
  CycleSet( NORMAL, IO1_TS23_ACG, IO1_TS23);
  CycleSet( NORMAL, IO2_TS23_ACG, IO2_TS23);
  CycleSet( NORMAL, OUT1_TS23_ACG, OUT1_TS23);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 24                                 ****
*
*    hel_tdl_brte0_w0r0 hel_tdl_brte0_w0r1 hel_tdl_brte0_w1r0 hel_tdl_brte1_w0r0
 hel_tdl_brte1_w0r1  *
*    hel_tdl_brte1_w1r0 hel_tdl_brte2_w0r0 hel_tdl_brte2_w0r1 hel_tdl_brte2_w1r0
  *
*
*******************************************************************
*)

ACSetupOpen( TIMING_24, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 40.00NS, FAST_MAX_DC, FORMAT_24 );
  ACSetInOut( IN0_TS24_ACG, 0NS, 0NS, 35.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS24_ACG, 5.00NS, 5.00NS, 38.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS24_ACG, 10.00NS, 10.00NS, 30.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS24_ACG, 5.00NS, 5.00NS, 38.000NS, 38.00NS-TGB,
              43.000NS+TGB);
  ACSetInOut( IO2_TS24_ACG, 0NS, 0NS, 35.000NS, 38.00NS-TGB, 43.000NS+TGB);
  ACSetInOut( OUT1_TS24_ACG, 0NS, 0NS, 35.000NS, 38.00NS-TGB, 43.000NS+TGB);

  CycleSet( NORMAL, IN0_TS24_ACG, IN0_TS24);
  CycleSet( NORMAL, IN1_TS24_ACG, IN1_TS24);
  CycleSet( NORMAL, IN2_TS24_ACG, IN2_TS24);
  CycleSet( NORMAL, IO1_TS24_ACG, IO1_TS24);
  CycleSet( NORMAL, IO2_TS24_ACG, IO2_TS24);
  CycleSet( NORMAL, OUT1_TS24_ACG, OUT1_TS24);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 27                                 ****
*
*    omap_DPLL1 omap_DPLL1_div1 omap_DPLL2 omap_DPLL3             *
*
*******************************************************************
*)

ACSetupOpen( TIMING_27, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, FAST_MAX_DC, FORMAT_27 );
  ACSetInOut( IN1_TS27_ACG, 30.00NS, 30.00NS, 72.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS27_ACG, 30.00NS, 30.00NS, 72.000NS, 0NS, 5NS);
  ACSetInOut( IN3_TS27_ACG, 5.72NS, 5.72NS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS27_ACG, 30.00NS, 30.00NS, 72.000NS, 70.00NS-TGB,
              75.000NS+TGB);
  ACSetInOut( IO2_TS27_ACG, 5.72NS, 5.72NS, 79.000NS, 70.00NS-TGB,
              75.000NS+TGB);
  ACSetInOut( OUT1_TS27_ACG, 0NS, 0NS, 79.000NS, 70.00NS-TGB, 75.000NS+TGB);

  CycleSet( NORMAL, IN1_TS27_ACG, IN1_TS27);
  CycleSet( NORMAL, IN2_TS27_ACG, IN2_TS27);
  CycleSet( NORMAL, IN3_TS27_ACG, IN3_TS27);
  CycleSet( NORMAL, IO1_TS27_ACG, IO1_TS27);
  CycleSet( NORMAL, IO2_TS27_ACG, IO2_TS27);
  CycleSet( NORMAL, OUT1_TS27_ACG, OUT1_TS27);
ACSetupClose;
(*
*******************************************************************
****            TIMING SET 28                                 ****
*
*
*******************************************************************
*)

ACSetupOpen( TIMING_28, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 300.00NS, SLOW_MAX_DC, FORMAT_28 );
  ACSetInOut( IN1_TS28_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS28_ACG, 75.00NS, 75.00NS, 225.000NS, 0NS, 5NS);
  ACSetInOut( IN3_TS28_ACG, 10.00NS, 10.00NS, 295.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS28_ACG, 75.00NS, 75.00NS, 225.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO2_TS28_ACG, 10.00NS, 10.00NS, 295.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( IO3_TS28_ACG, 10.00NS+0.5NS, 10.00NS+0.5NS, 295.000NS,
              290.00NS-TGB, 295.000NS+TGB);
  ACSetInOut( IO4_TS28_ACG, 10.00NS, 10.00NS, 295.000NS, 290.00NS-TGB,
              295.000NS+TGB);
  ACSetInOut( OUT1_TS28_ACG, 0NS, 0NS, 295.000NS, 290.00NS-TGB, 295.000NS+TGB);

  CycleSet( NORMAL, IN1_TS28_ACG, IN1_TS28);
  CycleSet( NORMAL, IN2_TS28_ACG, IN2_TS28);
  CycleSet( NORMAL, IN3_TS28_ACG, IN3_TS28);
  CycleSet( NORMAL, IO1_TS28_ACG, IO1_TS28);
  CycleSet( NORMAL, IO2_TS28_ACG, IO2_TS28);
  CycleSet( NORMAL, IO3_TS28_ACG, IO3_TS28);
  CycleSet( NORMAL, IO4_TS28_ACG, IO4_TS28);
  CycleSet( NORMAL, OUT1_TS28_ACG, OUT1_TS28);
ACSetupClose;

{revqb01 ...}
(*
*******************************************************************
****            TIMING SET 29                                 ****
*
*    hel_tc1a_m6 hel_tc1c_m6 hel_tc2_m6                           *
*
*******************************************************************
*)

ACSetupOpen( TIMING_29, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 72.00NS, FAST_MAX_DC, FORMAT_29 );
  ACSetInOut( IN0_TS29_ACG, 0NS, 0NS, 67.300NS, 0NS, 5NS);
  ACSetInOut( IN1_TS29_ACG, 39.30NS, 39.30NS, 86.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS29_ACG, 0.0NS, 0.0NS, 35.500NS, 0NS, 5NS);
  ACSetInOut( IN3_TS29_ACG, 37.400NS, 37.400NS, 84.000NS, 0NS, 5NS);
  ACSetInOut( IN4_TS29_ACG, 9.3NS, 9.300NS, 67.300NS, 0NS, 5NS);
  ACSetInOut( IO1_TS29_ACG, 39.30NS, 39.30NS, 86.000NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO2_TS29_ACG, 9.30NS, 9.30NS, 67.300NS, 75.00NS-TGB,
              80.000NS+TGB);
  ACSetInOut( IO3_TS29_ACG, 9.300NS, 9.300NS, 67.300NS, 53.30NS-TGB,
              58.300NS+TGB);
  ACSetInOut( IO4_TS29_ACG, 64.50NS, 64.500NS, 69.000NS, 71.000NS-TGB,
              76.000NS+TGB);
  ACSetInOut( IO5_TS29_ACG, 0NS, 0NS, 67.300NS, 75.00NS-TGB, 80.000NS+TGB);
  ACSetInOut( OUT1_TS29_ACG, 0NS, 0NS, 67.300NS, 53.30NS-TGB, 58.300NS+TGB);
  ACSetInOut( OUT2_TS29_ACG, 0NS, 0NS, 67.300NS, 75.00NS-TGB, 80.000NS+TGB);

  CycleSet( NORMAL, IN0_TS29_ACG, IN0_TS29);
  CycleSet( NORMAL, IN1_TS29_ACG, IN1_TS29);
  CycleSet( NORMAL, IN2_TS29_ACG, IN2_TS29);
  CycleSet( NORMAL, IN3_TS29_ACG, IN3_TS29);
  CycleSet( NORMAL, IN4_TS29_ACG, IN4_TS29);
  CycleSet( NORMAL, IO1_TS29_ACG, IO1_TS29);
  CycleSet( NORMAL, IO2_TS29_ACG, IO2_TS29);
  CycleSet( NORMAL, IO3_TS29_ACG, IO3_TS29);
  CycleSet( NORMAL, IO4_TS29_ACG, IO4_TS29);
  CycleSet( NORMAL, IO5_TS29_ACG, IO5_TS29);
  CycleSet( NORMAL, OUT1_TS29_ACG, OUT1_TS29);
  CycleSet( NORMAL, OUT2_TS29_ACG, OUT2_TS29);
ACSetupClose;

(*
*******************************************************************
****            TIMING SET 30                                 ****
*
*    Oscillators                                                  *
*
*******************************************************************
*)

ACSetupOpen( TIMING_30, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 1.00US, FAST_MAX_DC, FORMAT_30 );
  ACSetInOut( IN1_TS30_ACG, 250.00NS, 250.00NS, 500.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS30_ACG, 100.00NS, 100.00NS, 995.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS30_ACG, 100.00NS, 100.00NS, 995.000NS, 990.00NS-TGB,
              995.000NS+TGB);
  ACSetInOut( OUT1_TS30_ACG, 0NS, 0NS, 995.000NS, 990.00NS-TGB, 995.000NS+TGB);

  CycleSet( NORMAL, IN1_TS30_ACG, IN1_TS30);
  CycleSet( NORMAL, IN2_TS30_ACG, IN2_TS30);
  CycleSet( NORMAL, IO1_TS30_ACG, IO1_TS30);
  CycleSet( NORMAL, OUT1_TS30_ACG, OUT1_TS30);
ACSetupClose;
(*
*******************************************************************
****            TIMING SET 31                                 ****
*
*    hel_burning_test                                             *
*
*******************************************************************
*)

ACSetupOpen( TIMING_31, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 200.00NS, FAST_MAX_DC, FORMAT_31 );
  ACSetInOut( IN1_TS31_ACG, 50.00NS, 50.00NS, 150.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS31_ACG, 1.00NS, 1.00NS, 195.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS31_ACG, 50.00NS, 50.00NS, 150.000NS, 180.00NS-TGB,
              185.000NS+TGB);
  ACSetInOut( IO2_TS31_ACG, 1.00NS, 1.00NS, 195.000NS, 180.00NS-TGB,
              185.000NS+TGB);
  ACSetInOut( OUT1_TS31_ACG, 0NS, 0NS, 195.000NS, 180.00NS-TGB, 185.000NS+TGB);

  CycleSet( NORMAL, IN1_TS31_ACG, IN1_TS31);
  CycleSet( NORMAL, IN2_TS31_ACG, IN2_TS31);
  CycleSet( NORMAL, IO1_TS31_ACG, IO1_TS31);
  CycleSet( NORMAL, IO2_TS31_ACG, IO2_TS31);
  CycleSet( NORMAL, OUT1_TS31_ACG, OUT1_TS31);
ACSetupClose;


(*
*******************************************************************
****            TIMING SET 32                                 ****
*
*    hel_arm_gpio hel_arm_mem_burst hel_arm_uart_loopbk hel_concurrent_imif hel_
concurrent_rhea  *
*    hel_dsp_gpio hel_dsp_intc hel_dsp_timer1 hel_dsp_timer2 hel_dsp_timer3  *
*    hel_dsp_uart_loopbk hel_dsp_wdtimer hel_led_clkm1 hel_led_idle13 hel_led_in
th  *
*    hel_led_lcd_2frames hel_led_ostimer1 hel_led_ostimer2 hel_led_ostimer3 hel_
led_psa  *
*    hel_led_rheabridge hel_led_wdtimer hel_mb hel_mmu_arm_comp hel_mmu_cam_ram 
 *
*    hel_mpu_diagnostic hel_mpu_diagnostic2 hel_syncstio2emif hel_tc1a hel_tc1c 
 *
*    hel_tc2 imif_march13_1 imif_march13_10 imif_march13_11 imif_march13_12  *
*    imif_march13_13 imif_march13_14 imif_march13_32 imif_march13_16 imif_march1
3_2  *
*    imif_march13_3 imif_march13_4 imif_march13_5 imif_march13_6 imif_march13_7 
 *
*    imif_march13_8 imif_march13_9                                *
*
*******************************************************************
*)
ACSetupOpen( TIMING_32, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 77.00NS, FAST_MAX_DC, FORMAT_32 );
  ACSetInOut( IN0_TS32_ACG, 0NS, 0NS, 72.000NS, 0NS, 5NS);
  ACSetInOut( IN1_TS32_ACG, 42.00NS, 42.00NS, 92.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS32_ACG, 0.0NS, 0.0NS, 38.000NS, 0NS, 5NS);
  ACSetInOut( IN3_TS32_ACG, 40.00NS, 40.00NS, 90.000NS, 0NS, 5NS);
  ACSetInOut( IN4_TS32_ACG, 10.00NS, 10.00NS, 72.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS32_ACG, 42.00NS, 42.00NS, 92.000NS, 80.00NS-TGB,
              85.000NS+TGB);
  ACSetInOut( IO2_TS32_ACG, 10.00NS, 10.00NS, 72.000NS, 80.00NS-TGB,
              85.000NS+TGB);
  ACSetInOut( IO3_TS32_ACG, 10.00NS, 10.00NS, 72.000NS, 57.00NS-TGB,
              62.000NS+TGB);
  ACSetInOut( IO4_TS32_ACG, 69.00NS, 69.00NS, 74.000NS, 76.00NS-TGB,
              81.000NS+TGB);
  ACSetInOut( IO5_TS32_ACG, 0NS, 0NS, 72.000NS, 80.00NS-TGB, 85.000NS+TGB);
  ACSetInOut( OUT1_TS32_ACG, 0NS, 0NS, 72.000NS, 57.00NS-TGB, 62.000NS+TGB);
  ACSetInOut( OUT2_TS32_ACG, 0NS, 0NS, 72.000NS, 80.00NS-TGB, 85.000NS+TGB);

  CycleSet( NORMAL, IN0_TS32_ACG, IN0_TS32);
  CycleSet( NORMAL, IN1_TS32_ACG, IN1_TS32);
  CycleSet( NORMAL, IN2_TS32_ACG, IN2_TS32);
  CycleSet( NORMAL, IN3_TS32_ACG, IN3_TS32);
  CycleSet( NORMAL, IN4_TS32_ACG, IN4_TS32);
  CycleSet( NORMAL, IO1_TS32_ACG, IO1_TS32);
  CycleSet( NORMAL, IO2_TS32_ACG, IO2_TS32);
  CycleSet( NORMAL, IO3_TS32_ACG, IO3_TS32);
  CycleSet( NORMAL, IO4_TS32_ACG, IO4_TS32);
  CycleSet( NORMAL, IO5_TS32_ACG, IO5_TS32);
  CycleSet( NORMAL, OUT1_TS32_ACG, OUT1_TS32);
  CycleSet( NORMAL, OUT2_TS32_ACG, OUT2_TS32);
ACSetupClose;

{es26v01f...}
(*
*******************************************************************
****            TIMING SET 33                                 ****
*
*    hel_ulpd_dpll                                                *
*
*******************************************************************
*)

ACSetupOpen( TIMING_33, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, FAST_MAX_DC, FORMAT_33 );
  ACSetInOut( IN1_TS33_ACG, 21.00NS, 21.00NS, 63.000NS, 0NS, 5NS);
  ACSetInOut( IN2_TS33_ACG, 100.00PS, 100.00PS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS33_ACG, 21.00NS, 21.00NS, 63.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( IO2_TS33_ACG, 100.00PS, 100.00PS, 79.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( OUT1_TS33_ACG, 0NS, 0NS, 79.000NS, 75.60NS-TGB, 80.600NS+TGB);

  CycleSet( NORMAL, IN1_TS33_ACG, IN1_TS33);
  CycleSet( NORMAL, IN2_TS33_ACG, IN2_TS33);
  CycleSet( NORMAL, IO1_TS33_ACG, IO1_TS33);
  CycleSet( NORMAL, IO2_TS33_ACG, IO2_TS33);
  CycleSet( NORMAL, OUT1_TS33_ACG, OUT1_TS33);
ACSetupClose;
{...es26v01f}

{rev20a...}
(*
*******************************************************************
****            TIMING SET 34                                 ****
*
*    27x_rmr_emiffdspmmu                                          *
*
*******************************************************************
*)

ACSetupOpen( TIMING_34, DEFAULT_AC_TABLE, DEFAULT_CYCLE_TABLE,
             DEFAULT_PERIOD_TABLE, 84.00NS, FAST_MAX_DC, FORMAT_34 );
  ACSetInOut( IN1_TS34_ACG, 100.00PS, 100.00PS, 79.000NS, 0NS, 5NS);
  ACSetInOut( IO1_TS34_ACG, 21.00NS, 21.00NS, 63.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( IO2_TS34_ACG, 100.00PS, 100.00PS, 79.000NS, 65.60NS-TGB,
              70.600NS+TGB);
  ACSetInOut( IO3_TS34_ACG, 100.00PS, 100.00PS, 79.000NS, 75.60NS-TGB,
              80.600NS+TGB);
  ACSetInOut( OUT1_TS34_ACG, 0NS, 0NS, 79.000NS, 75.60NS-TGB, 80.600NS+TGB);
  ACSetInOut( OUT2_TS34_ACG, 0NS, 0NS, 79.000NS, 60.00NS-TGB, 65.000NS+TGB);

  CycleSet( NORMAL, IN1_TS34_ACG, IN1_TS34);
  CycleSet( NORMAL, IO1_TS34_ACG, IO1_TS34);
  CycleSet( NORMAL, IO2_TS34_ACG, IO2_TS34);
  CycleSet( NORMAL, IO3_TS34_ACG, IO3_TS34);
  CycleSet( NORMAL, OUT1_TS34_ACG, OUT1_TS34);
  CycleSet( NORMAL, OUT2_TS34_ACG, OUT2_TS34);
ACSetupClose;
{...rev20a}

(*  LEAKAGE SETUP  *)

DCSetupOpen( LC_ODD_EVEN, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHCMOSa3V_MAX, IIHCMOSa3V_MIN, IIHCMOSa3V_FORCEV,
                    -1mA, 1mA, CMOSa3V_IN_ODD );
          DCSetPMU( IILCMOSa3V_MAX, IILCMOSa3V_MIN, IILCMOSa3V_FORCEV,
                    -1mA, 1mA, CMOSa3V_IN_EVEN );
          DCSetPMU( IILOSC1V_MAX, IILOSC1V_MIN, IILOSC1V_FORCEV,
                    -1mA, 1mA, OSC1V_IN_EVEN );
DCSetupClose;

DCSetupOpen( LC_EVEN_ODD, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHCMOSa3V_MAX, IIHCMOSa3V_MIN, IIHCMOSa3V_FORCEV,
                    -1mA, 1mA, CMOSa3V_IN_EVEN );
          DCSetPMU( IILCMOSa3V_MAX, IILCMOSa3V_MIN, IILCMOSa3V_FORCEV,
                    -1mA, 1mA, CMOSa3V_IN_ODD );
          DCSetPMU( IIHOSC1V_MAX, IIHOSC1V_MIN, IIHOSC1V_FORCEV,
                    -1mA, 1mA, OSC1V_IN_EVEN );
DCSetupClose;


DCSetupOpen( II_ODD_EVEN, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHCMOSa3V_MAX, IIHCMOSa3V_MIN, IIHCMOSa3V_FORCEV,
                    IIHCMOSa3V_SINK, IIHCMOSa3V_SOURCE, CMOSa3V_IN_ODD );
          DCSetPMU( IILCMOSa3V_MAX, IILCMOSa3V_MIN, IILCMOSa3V_FORCEV,
                    IILCMOSa3V_SINK, IILCMOSa3V_SOURCE, CMOSa3V_IN_EVEN );
{
          DCSetPMU( IILOSC1V_MAX, IILOSC1V_MIN, IILOSC1V_FORCEV,
                    IILOSC1V_SINK, IILOSC1V_SOURCE, OSC1V_IN_EVEN );
}
          DCSetPMU( IIHD1_MAX, IIHD1_MIN, 1.95V,
                    IIHD1_SINK, IIHD1_SOURCE, ODD_IN_PD1 );
DCSetupClose;

DCSetupOpen( II_EVEN_ODD, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHCMOSa3V_MAX, IIHCMOSa3V_MIN, IIHCMOSa3V_FORCEV,
                    IIHCMOSa3V_SINK, IIHCMOSa3V_SOURCE, CMOSa3V_IN_EVEN );
          DCSetPMU( IILCMOSa3V_MAX, IILCMOSa3V_MIN, IILCMOSa3V_FORCEV,
                    IILCMOSa3V_SINK, IILCMOSa3V_SOURCE, CMOSa3V_IN_ODD );
{
          DCSetPMU( IIHOSC1V_MAX, IIHOSC1V_MIN, IIHOSC1V_FORCEV,
                    IIHOSC1V_SINK, IIHOSC1V_SOURCE, OSC1V_IN_EVEN );
}
          DCSetPMU( IIHD1_MAX, IIHD1_MIN, 1.95V,
                    IIHD1_SINK, IIHD1_SOURCE, EVN_IN_PD1 );
          DCSetPMU( IIHD2_MAX, IIHD2_MIN, 1.95V,
                    IIHD2_SINK, IIHD2_SOURCE, EVN_IN_PD2 );
DCSetupClose;

(*  VOUT SETUP  *)

DCSetupOpen( VOUT_FUNC_DC, VOUT_DC_TABLE );
  DCSetDyn( 2.500V,0V,CP,
            VOHL3V_MIN, VOLL3V_MAX, 1.625V,
            -I2MA, I2MA, CMOS3V2MA );
  DCSetDyn( 2.500V,0V,CP,
            VOHL3V_MIN, VOLL3V_MAX, 1.625V,
            -I4MA, I4MA, CMOS3V4MA );
  DCSetDyn( 1.8V,0V,CP,
            VOHL18V_MIN, VOLL18V_MAX, 1.17V,
            -I4MA, I4MA, CMOS18V4MA );
  DCSetDyn( 2.500V,0V,CP,
            VOHL3V_MIN, VOLL3V_MAX, 1.625V,
            -I8MA, I8MA, CMOS3V8MA );
DCSetupClose;

DCSetupOpen( VOUT_PIN_DC, VOUT_DC_TABLE );
DCSetupClose;

{xyz...}

{new VOUT DC tables...}
DCSetupOpen( VOUTCMOSa_PM1_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM1 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V2_PM1 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V2_PM1 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOHCMOSa3V3_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOLCMOSa3V1_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2MA, I2MA, VOLCMOSa3V2_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V3_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOLCMOSa3V4_PM1 );
DCSetupClose;

{rev08a...}
DCSetupOpen( VOUTCMOSa_PM1_ST_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa18V_MAX, VOHCMOSa18V_MIN, VOHCMOSa18V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM1 );  {...rev08a}
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V2_PM1 );
          DCSetPMU( VOHCMOSa18V_MAX, VOHCMOSa18V_MIN, VOHCMOSa18V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V2_PM1 );   {...rev08a}
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOHCMOSa3V3_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOLCMOSa3V1_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2MA, I2MA, VOLCMOSa3V2_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V3_PM1 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOLCMOSa3V4_PM1 );
DCSetupClose;

{...rev08a}

DCSetupOpen( VOUTCMOSa_PM3_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM3 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOLCMOSa3V2_PM3 );
DCSetupClose;


DCSetupOpen( VOUTCMOSa_PM5_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM5 );
DCSetupClose;


DCSetupOpen( VOUTCMOSa_PM6_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM6 );
DCSetupClose;


DCSetupOpen( VOUTCMOSa_PM12_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM12 );
DCSetupClose;

{rev08a...}
DCSetupOpen( VOUTCMOSa_PM12_ST_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa18V_MAX, VOHCMOSa18V_MIN, VOHCMOSa18V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM12 );
DCSetupClose;
{...rev08a}

DCSetupOpen( VOUTCMOSa_PM13_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM13 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM14_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM14 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM15_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM15 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM16_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM16 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V1_PM16 );
DCSetupClose;


{rev08a...}
DCSetupOpen( VOUTCMOSa_PM16_ST_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM16 );
          DCSetPMU( VOHCMOSa18V_MAX, VOHCMOSa18V_MIN, VOHCMOSa18V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V1_PM16 ); {...rev08a}
DCSetupClose;
{...rev08a}

DCSetupOpen( VOUTCMOSa_PM18_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOLCMOSa3V1_PM18 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V2_PM18 );
DCSetupClose;


DCSetupOpen( VOUTCMOSa_PM20_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM20 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V1_PM20 );
DCSetupClose;

{rev08a...}
DCSetupOpen( VOUTCMOSa_PM20_ST_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM20 );
          DCSetPMU( VOHCMOSa18V_MAX, VOHCMOSa18V_MIN, VOHCMOSa18V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa18V1_PM20 );
DCSetupClose;
{...rev08a}

DCSetupOpen( VOUTCMOSa_PM21_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM21 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM22_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOLCMOSa3V1_PM22 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V2_PM22 );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOLCMOSa3V3_PM22 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM23_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM23 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM24_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM24 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V2_PM24 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM25_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM25 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM26_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM26 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2MA, I2MA, VOHCMOSa3V2_PM26 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V3_PM26 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM27_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM27 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM28_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM28 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V2_PM28 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOHCMOSa3V3_PM28 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM29_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM29 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOHCMOSa3V2_PM29 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM30_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I2mA, I2mA, VOHCMOSa3V1_PM30 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V2_PM30 );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I8MA, I8MA, VOHCMOSa3V3_PM30 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM31_DC, VOUT_DC_TABLE );
          DCSetPMU( VOHCMOSa3V_MAX, VOHCMOSa3V_MIN, VOHCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOHCMOSa3V1_PM31 );
DCSetupClose;

DCSetupOpen( VOUTCMOSa_PM32_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I4MA, I4MA, VOLCMOSa3V1_PM32 );
DCSetupClose;

DCSetupOpen( VOUTOSC_PM5_DC, VOUT_DC_TABLE );
          DCSetPMU( VOLOSC1V_MAX, VOLOSC1V_MIN, VOLOSC1V_FORCEV,
                    -I2MA, I2MA, VOLOSC1V1_PM5 );
DCSetupClose;

{...xyz}


{(rev02c)...}
DCSetupOpen( VOUT_DIEID, VOUT_DC_TABLE );
          DCSetPMU( VOLCMOSa3V_MAX, VOLCMOSa3V_MIN, VOLCMOSa3V_FORCEV,
                    -I2MA, I2MA, TDO );
DCSetupClose;
{...(rev02c)}

DCSetupOpen( LEAKAGE_PIN_DC, LEAKAGE_DC_TABLE );
DCSetupClose;

{xyz...}
{new LEAKAGE DC tables}

DCSetupOpen( LKGLO_PM2_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM2 );
{rev08xxx...}
          DCSetPMU( IILIOOSC1V_MAX, IILIOOSC1V_MIN, IILIOOSC1V_FORCEV,
                    IILIOOSC1V_SINK, IILIOOSC1V_SOURCE, IILIOOSC1V_PM2 );

          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IOP1_PM2 );
{
          DCSetPMU( IOLP1_MAX, IOLP1_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IOP1_PM2 );
          DCSetPMU( IOLP2_MAX, IOLP2_MIN, 0V,
                    IOLP2_SINK, IOLP2_SOURCE, IOP2_PM2 );
}
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, 0V,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IOP2_PM2 );
{...rev08xxx}
DCSetupClose;


DCSetupOpen( LKGHI_PM3_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM3 );

{rev08xxx...}
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IOD1_PM3 );

          DCSetPMU( IOHD1_MAX, IOHD1_MIN, VTMX3V,
                    IOHD1_SINK, IOHD1_SOURCE, TI_RESERVE );
{...rev08xxx}
DCSetupClose;


DCSetupOpen( LKGHI_PM4_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM4 );
{rev08xxx...}
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IOD1_PM4 );
{
          DCSetPMU( IOHD1_MAX, IOHD1_MIN, 1.5V,
                    IOHD1_SINK, IOHD1_SOURCE, IOD1_PM4 );}
{...rev08xxx}
DCSetupClose;


DCSetupOpen( LKGLO_PM7_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM7 );
DCSetupClose;


DCSetupOpen( LKGLO_PM8_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM8 );
DCSetupClose;

{rev08a...}
DCSetupOpen( LKGHI_PM9_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM9 );
DCSetupClose;

DCSetupOpen( LKGHI_PM9_ST_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa18V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM9 );
DCSetupClose;
{...rev08a}


{rev08a...}
DCSetupOpen( LKGHI_PM10_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM10 );
DCSetupClose;

DCSetupOpen( LKGHI_PM10_ST_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa18V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM10 );
DCSetupClose;
{...rev08a}


DCSetupOpen( LKGLO_PM11_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM11 );
DCSetupClose;


DCSetupOpen( LKGHI_PM17_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM17 );
DCSetupClose;


DCSetupOpen( LKGLO_PM19_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM19 );
DCSetupClose;

{}
{...xyz}

DCSetupOpen( LKGHI_PM16_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IIHIOCMOSa3V_MAX, IIHIOCMOSa3V_MIN, IIHIOCMOSa3V_FORCEV,
                    IIHIOCMOSa3V_SINK, IIHIOCMOSa3V_SOURCE, IIHIOCMOSa3V_PM16 );
          DCSetPMU( IOHD1_MAX, IOHD1_MIN, 1.95V,
                    IOHD1_SINK, IOHD1_SOURCE, IOD1_PM16 );
DCSetupClose;

DCSetupOpen( LKGLO_PM1_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM1 );
{ftrev02a...rev08xxx}
          DCSetPMU( IILIOOSC1V_MAX, IILIOOSC1V_MIN, IILIOOSC1V_FORCEV,
                    IILIOOSC1V_SINK, IILIOOSC1V_SOURCE, IILIOOSC1V_PM1 );
{rev08xxx...ftrev02a}
          DCSetPMU( IOLP1_MAX, IOLP1_MIN, 0V,
                    IOLP1_SINK, IOLP1_SOURCE, IOP1_PM1 );
{ftrev02a...rev08xxx}
          DCSetPMU( IOLP2_MAX, IOLP2_MIN, 0V,
                    IOLP2_SINK, IOLP2_SOURCE, IOP2_PM1 );
{rev08xxx...ftrev02a}
DCSetupClose;

DCSetupOpen( LKGLO_PM14_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM14 );
DCSetupClose;

DCSetupOpen( LKGLO_PM15_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM15 );
DCSetupClose;

DCSetupOpen( LKGLO_PM24_DC, LEAKAGE_DC_TABLE );
          DCSetPMU( IILIOCMOSa3V_MAX, IILIOCMOSa3V_MIN, IILIOCMOSa3V_FORCEV,
                    IILIOCMOSa3V_SINK, IILIOCMOSa3V_SOURCE, IILIOCMOSa3V_PM24 );
DCSetupClose;

end;  (* LOAD_FAST_SETS *)


procedure SELECT_FAST_SETS; Export;
(*
***********************************************************************
****            SELECT FAST SETS                                   ****
****                                                               ****
****            TEMP TYPES ARE:                                    ****
****                                                               ****
****              HOT                                              ****
****              ROOM                                             ****
****              QC                                               ****
****              COLD                                             ****
****                                                               ****
***********************************************************************
*)

  begin

    if Reload_the_Setups then
      SetupReload( LOAD_FAST_SETS, OPEN_ODD_DC, CONTY_FORMAT, CONTY_AC )
    else
      begin
        LOAD_FAST_SETS;
        Reload_the_Setups := TRUE
      end

  end;  (* SELECT_FAST_SETS *)


procedure INITIALIZE_LOT_INFORMATION;
(*
************************************************************************
****            INITIALIZE LOT INFORMATION                          ****
************************************************************************
*)
  begin

    ClassDefine( Good_class,          s_GOOD_CLASS );
    ClassDefine( Continuity_class,    s_FAILED_CLASS );
    ClassDefine( Pin2Pin_class,       s_FAILED_CLASS );
    ClassDefine( ICCQ_class,          s_FAILED_CLASS );
    ClassDefine( Functional_class,    s_FAILED_CLASS );
    ClassDefine( DC_Parametric_class, s_FAILED_CLASS );
    ClassDefine( AC_Parametric_class, s_FAILED_CLASS );
    ClassDefine( Latch_Up_class,      s_FAILED_CLASS );
    ClassDefine( Athena_class,        s_FAILED_CLASS );
    ClassDefine( TC5TEST_class,       s_FAILED_CLASS );

    BinDefine( Good,                1, Good_class ); 
{    BinDefine( Good_145v156,        2, Good_class ); {ftrevg09c}
}    BinDefine( Athena_1,            4, Athena_class ); {ftrevg09b}
    BinDefine( TC5BIN,              3, TC5TEST_class ); {ftrevg09b}


    BinDefine( Open,               11, Continuity_class ); {rev03l}
    BinDefine( Short,              12, Continuity_class ); {rev03l}
    BinDefine( ICCQ_bin,            8, ICCQ_class ); {rev03l}
    BinDefine( Slow_Functional,     6, Functional_class );
    BinDefine( Fast_Functional,     7, Functional_class );
    BinDefine( Speed_Below_Bin1,    9, Functional_class );
    BinDefine( DC_Leakage,         10, DC_Parametric_class ); 
    BinDefine( SPEED_BELOW_ATHENA, 13, Functional_class );
    BinDefine( HWA_FAIL,           15, Functional_class );
    BinDefine( UnDefined,          14, Functional_class );

    SortRuleOpen( s_NORMAL );

 
      CategoryDefine(  Good_cat, Good, s_ALL,
            +OPENS..FAST_MAX_55922px0_1, +HELEN, 
            +TC5MINTEST, +TC5MAXTEST);
            
     CategoryDefine( Fail_Speed_cat, Speed_Below_Bin1, s_ALL,
             +OPENS..FAST_MIN_55922px0, +HELEN, 
             +TC5MINTEST, +TC5MAXTEST);
 
     CategoryDefine(  Athena_1_cat, Athena_1, s_ALL,
             +OPENS..FAST_MIN_55922520_8, 
             +TC5MINTEST, +TC5MAXTEST); 
   
     CategoryDefine( TC5TMIN_cat, TC5BIN, s_ANY,
                      -TC5MINTEST);
     
     CategoryDefine( TC5TMAX_cat, TC5BIN, s_ANY,
                      -TC5MAXTEST);

             
      CategoryDefine( Open_cat, Open, s_ANY,
                      -OPENS );
      CategoryDefine( Short_cat, Short, s_ANY,
                      -SHORTS );
      CategoryDefine( Supply_Shorts_cat, Short, s_ANY,
                      -SUPPLY_SHORTS, -JUNCTION_LEAKAGE );
      CategoryDefine( ICCQ_cat, ICCQ_bin, s_ANY,
                      -ICCQ, -DEEP_SLEEP, -ICCQ_FJ_1 ); {ftvsrev12c} {rev14d}
      CategoryDefine( DIEID_cat, Slow_Functional, s_ANY,
                      -DIEID );
      CategoryDefine( SLOW_NOM_55922010_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922010 );
      CategoryDefine( SLOW_MIN_55922010_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922010 );
      CategoryDefine( SLOW_MAX_55922010_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922010 );
      CategoryDefine( SLOW_NOM_55922080_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922080 );
      CategoryDefine( SLOW_MIN_55922080_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922080 );
      CategoryDefine( SLOW_MAX_55922080_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922080 );
      CategoryDefine( SLOW_NOM_55922090_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922090 );
      CategoryDefine( SLOW_MIN_55922090_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922090 );
      CategoryDefine( SLOW_MAX_55922090_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922090 );
      CategoryDefine( SLOW_NOM_55922100_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922100 );
      CategoryDefine( SLOW_MIN_55922100_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922100 );
      CategoryDefine( SLOW_MAX_55922100_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922100 );
      CategoryDefine( SLOW_NOM_55922110_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922110 );
      CategoryDefine( SLOW_MIN_55922110_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922110 );
      CategoryDefine( SLOW_MAX_55922110_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922110 );
      CategoryDefine( SLOW_NOM_55922120_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922120 );
      CategoryDefine( SLOW_MIN_55922120_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922120 );
      CategoryDefine( SLOW_MAX_55922120_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922120 );
      CategoryDefine( SLOW_NOM_55922130_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922130 );
      CategoryDefine( SLOW_MIN_55922130_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922130 );
      CategoryDefine( SLOW_MAX_55922130_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922130 );
      CategoryDefine( SLOW_NOM_55922140_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922140 );
      CategoryDefine( SLOW_MIN_55922140_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922140 );
      CategoryDefine( SLOW_MAX_55922140_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922140 );
      CategoryDefine( SLOW_NOM_55922150_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922150 );
      CategoryDefine( SLOW_MIN_55922150_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922150 );
      CategoryDefine( SLOW_MAX_55922150_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922150 );
      CategoryDefine( SLOW_NOM_55922160_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922160 );
      CategoryDefine( SLOW_MIN_55922160_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922160 );
      CategoryDefine( SLOW_MAX_55922160_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922160 );
      CategoryDefine( SLOW_NOM_55922310_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922310 );
      CategoryDefine( SLOW_MIN_55922310_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922310 );
      CategoryDefine( SLOW_MAX_55922310_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922310 );
      CategoryDefine( SLOW_NOM_55922320_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922320 );
      CategoryDefine( SLOW_MIN_55922320_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922320 );
      CategoryDefine( SLOW_MAX_55922320_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922320 );
      CategoryDefine( SLOW_NOM_55922330_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922330 );
      CategoryDefine( SLOW_MIN_55922330_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922330 );
      CategoryDefine( SLOW_MAX_55922330_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922330 );
      CategoryDefine( SLOW_NOM_55922340_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922340 );
      CategoryDefine( SLOW_MIN_55922340_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922340 );
      CategoryDefine( SLOW_MAX_55922340_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922340 );
      CategoryDefine( SLOW_NOM_55922350_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922350 );
      CategoryDefine( SLOW_MIN_55922350_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922350 );
      CategoryDefine( SLOW_MAX_55922350_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922350 );
      CategoryDefine( SLOW_NOM_55922030_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922030 );
      CategoryDefine( SLOW_MIN_55922030_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922030 );
      CategoryDefine( SLOW_MAX_55922030_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922030 );
      CategoryDefine( SLOW_NOM_55922040_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922040 );
      CategoryDefine( SLOW_MIN_55922040_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922040 );
      CategoryDefine( SLOW_MAX_55922040_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922040 );
      CategoryDefine( SLOW_NOM_55922370_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922370 );
      CategoryDefine( SLOW_MIN_55922370_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922370 );
      CategoryDefine( SLOW_MAX_55922370_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922370 );
      CategoryDefine( SLOW_NOM_55922380_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922380 );
      CategoryDefine( SLOW_MIN_55922380_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922380 );
      CategoryDefine( SLOW_MAX_55922380_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922380 );
      CategoryDefine( SLOW_NOM_55922390_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922390 );
      CategoryDefine( SLOW_MIN_55922390_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922390 );
      CategoryDefine( SLOW_MAX_55922390_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922390 );
      CategoryDefine( SLOW_NOM_55922200_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922200 );
      CategoryDefine( SLOW_MIN_55922200_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922200 );
      CategoryDefine( SLOW_MAX_55922200_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922200 );
      CategoryDefine( SLOW_NOM_55922210_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922210 );
      CategoryDefine( SLOW_MIN_55922210_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922210 );
      CategoryDefine( SLOW_MAX_55922210_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922210 );
      CategoryDefine( SLOW_NOM_55922220_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922220 );
      CategoryDefine( SLOW_MIN_55922220_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922220 );
      CategoryDefine( SLOW_MAX_55922220_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922220 );
      CategoryDefine( SLOW_NOM_55922240_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922240 );
      CategoryDefine( SLOW_MIN_55922240_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922240 );
      CategoryDefine( SLOW_MAX_55922240_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922240 );
      CategoryDefine( SLOW_NOM_55922250_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922250 );
      CategoryDefine( SLOW_MIN_55922250_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922250 );
      CategoryDefine( SLOW_MAX_55922250_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922250 );
      CategoryDefine( SLOW_NOM_55922260_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922260 );
      CategoryDefine( SLOW_MIN_55922260_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922260 );
      CategoryDefine( SLOW_MAX_55922260_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922260 );
      CategoryDefine( SLOW_NOM_55922270_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922270 );
      CategoryDefine( SLOW_MIN_55922270_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922270 );
      CategoryDefine( SLOW_MAX_55922270_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922270 );
      CategoryDefine( SLOW_NOM_55922280_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922280 );
      CategoryDefine( SLOW_MIN_55922280_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922280 );
      CategoryDefine( SLOW_MAX_55922280_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922280 );
      CategoryDefine( SLOW_NOM_55922290_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922290 );
      CategoryDefine( SLOW_MIN_55922290_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922290 );
      CategoryDefine( SLOW_MAX_55922290_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922290 );
      CategoryDefine( SLOW_NOM_55922rk0_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922rk0 );
      CategoryDefine( SLOW_MIN_55922rk0_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922rk0 );
      CategoryDefine( SLOW_MAX_55922rk0_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922rk0 );
      CategoryDefine( SLOW_NOM_55922300_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922300 );
      CategoryDefine( SLOW_MIN_55922300_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922300 );
      CategoryDefine( SLOW_MAX_55922300_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922300 );
      CategoryDefine( FAST_NOM_55922kz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kz0 );
      CategoryDefine( FAST_MIN_55922kz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kz0 );
      CategoryDefine( FAST_MAX_55922kz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kz0 );
      CategoryDefine( FAST_NOM_55922l50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l50 );
      CategoryDefine( FAST_MIN_55922l50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l50 );
      CategoryDefine( FAST_MAX_55922l50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l50 );
      CategoryDefine( SLOW_NOM_55922020_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922020 );
      CategoryDefine( SLOW_MIN_55922020_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922020 );
      CategoryDefine( SLOW_MAX_55922020_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922020 );
      CategoryDefine( SLOW_NOM_55922050_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922050 );
      CategoryDefine( SLOW_MIN_55922050_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922050 );
      CategoryDefine( SLOW_MAX_55922050_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922050 );
      CategoryDefine( SLOW_NOM_55922060_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922060 );
      CategoryDefine( SLOW_MIN_55922060_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922060 );
      CategoryDefine( SLOW_MAX_55922060_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922060 );
      CategoryDefine( SLOW_NOM_55922070_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922070 );
      CategoryDefine( SLOW_MIN_55922070_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922070 );
      CategoryDefine( SLOW_MAX_55922070_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922070 );
      CategoryDefine( SLOW_NOM_55922170_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922170 );
      CategoryDefine( SLOW_MIN_55922170_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922170 );
      CategoryDefine( SLOW_MAX_55922170_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922170 );
      CategoryDefine( SLOW_NOM_55922180_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922180 );
      CategoryDefine( SLOW_MIN_55922180_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922180 );
      CategoryDefine( SLOW_MAX_55922180_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922180 );
      CategoryDefine( SLOW_NOM_55922190_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922190 );
      CategoryDefine( SLOW_MIN_55922190_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922190 );
      CategoryDefine( SLOW_MAX_55922190_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922190 );
      CategoryDefine( SLOW_NOM_55922230_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922230 );
      CategoryDefine( SLOW_MIN_55922230_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922230 );
      CategoryDefine( SLOW_MAX_55922230_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922230 );
      CategoryDefine( SLOW_NOM_55922360_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922360 );
      CategoryDefine( SLOW_MIN_55922360_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922360 );
      CategoryDefine( SLOW_MAX_55922360_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922360 );
      CategoryDefine( SLOW_NOM_55922400_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922400 );
      CategoryDefine( SLOW_MIN_55922400_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922400 );
      CategoryDefine( SLOW_MAX_55922400_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922400 );
      CategoryDefine( SLOW_NOM_55922410_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922410 );
      CategoryDefine( SLOW_MIN_55922410_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922410 );
      CategoryDefine( SLOW_MAX_55922410_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922410 );
      CategoryDefine( SLOW_NOM_55922430_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922430 );
      CategoryDefine( SLOW_MIN_55922430_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922430 );
      CategoryDefine( SLOW_MAX_55922430_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922430 );
      CategoryDefine( SLOW_NOM_55922440_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922440 );
      CategoryDefine( SLOW_MIN_55922440_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922440 );
      CategoryDefine( SLOW_MAX_55922440_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922440 );
      CategoryDefine( SLOW_NOM_55922450_cat, Slow_Functional, s_ANY,
                      -SLOW_NOM_55922450 );
      CategoryDefine( SLOW_MIN_55922450_cat, Slow_Functional, s_ANY,
                      -SLOW_MIN_55922450 );
      CategoryDefine( SLOW_MAX_55922450_cat, Slow_Functional, s_ANY,
                      -SLOW_MAX_55922450 );
      CategoryDefine( VIH_VIL_MIN_55922410_cat, DC_Leakage, s_ANY,
                      -VIHL_MIN_55922410 );
      CategoryDefine( VIH_VIL_MAX_55922410_cat, DC_Leakage, s_ANY,
                      -VIHL_MAX_55922410 );
      CategoryDefine( VIH_VIL_MIN_55922420_cat, DC_Leakage, s_ANY,
                      -VIHL_MIN_55922420 );
      CategoryDefine( VIH_VIL_MAX_55922420_cat, DC_Leakage, s_ANY,
                      -VIHL_MAX_55922420 );
      CategoryDefine( FAST_NOM_55922460_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922460 );
      CategoryDefine( FAST_MIN_55922460_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922460 );
      CategoryDefine( FAST_MAX_55922460_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922460 );
      CategoryDefine( FAST_NOM_55922470_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922470 );
      CategoryDefine( FAST_MIN_55922470_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922470 );
      CategoryDefine( FAST_MAX_55922470_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922470 );
      CategoryDefine( FAST_NOM_55922480_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922480 );
      CategoryDefine( FAST_NOM_55922490_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922490 );
      CategoryDefine( FAST_NOM_55922500_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922500 );
      CategoryDefine( FAST_NOM_55922510_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922510 );
      CategoryDefine( FAST_NOM_55922520_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922520 );
      CategoryDefine( FAST_NOM_55922530_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922530 );
      CategoryDefine( FAST_NOM_55922540_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922540 );
      CategoryDefine( FAST_NOM_55922550_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922550 );
      CategoryDefine( FAST_NOM_55922560_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922560 );
      CategoryDefine( FAST_NOM_55922570_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922570 );
      CategoryDefine( FAST_NOM_55922580_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922580 );
      CategoryDefine( FAST_NOM_55922590_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922590 );
      CategoryDefine( FAST_NOM_55922600_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922600 );
      CategoryDefine( FAST_NOM_55922610_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922610 );
      CategoryDefine( FAST_NOM_55922620_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922620 );
      CategoryDefine( FAST_NOM_55922630_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922630 );
      CategoryDefine( FAST_NOM_55922640_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922640 );
      CategoryDefine( FAST_NOM_55922650_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922650 );
      CategoryDefine( FAST_NOM_55922660_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922660 );
      CategoryDefine( FAST_NOM_55922670_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922670 );
      CategoryDefine( FAST_NOM_55922680_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922680 );
      CategoryDefine( FAST_NOM_55922690_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922690 );
      CategoryDefine( FAST_NOM_55922700_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922700 );
      CategoryDefine( FAST_NOM_55922710_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922710 );
      CategoryDefine( FAST_NOM_55922720_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922720 );
      CategoryDefine( FAST_NOM_55922730_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922730 );
      CategoryDefine( FAST_NOM_55922740_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922740 );
      CategoryDefine( FAST_NOM_55922750_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922750 );
      CategoryDefine( FAST_NOM_55922760_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922760 );
      CategoryDefine( FAST_NOM_55922770_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922770 );
      CategoryDefine( FAST_NOM_55922780_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922780 );
      CategoryDefine( FAST_NOM_55922790_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922790 );
      CategoryDefine( FAST_NOM_55922800_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922800 );
      CategoryDefine( FAST_NOM_55922810_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922810 );
      CategoryDefine( FAST_NOM_55922820_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922820 );
      CategoryDefine( FAST_NOM_55922830_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922830 );
      CategoryDefine( FAST_NOM_55922840_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922840 );
      CategoryDefine( FAST_MAX_55922480_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922480 );
      CategoryDefine( FAST_MAX_55922r90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922r90 );
      CategoryDefine( FAST_MAX_55922490_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922490 );
      CategoryDefine( FAST_MAX_55922500_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922500 );
      CategoryDefine( FAST_MAX_55922510_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922510 );
      CategoryDefine( FAST_MAX_55922520_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922520 );
      CategoryDefine( FAST_MAX_55922530_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922530 );
      CategoryDefine( FAST_MAX_55922540_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922540 );
      CategoryDefine( FAST_MAX_55922550_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922550 );
      CategoryDefine( FAST_MAX_55922560_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922560 );
      CategoryDefine( FAST_MAX_55922570_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922570 );
      CategoryDefine( FAST_MAX_55922580_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922580 );
      CategoryDefine( FAST_MAX_55922590_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922590 );
      CategoryDefine( FAST_MAX_55922600_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922600 );
      CategoryDefine( FAST_MAX_55922610_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922610 );
      CategoryDefine( FAST_MAX_55922620_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922620 );
      CategoryDefine( FAST_MAX_55922630_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922630 );
      CategoryDefine( FAST_MAX_55922640_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922640 );
      CategoryDefine( FAST_MAX_55922650_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922650 );
      CategoryDefine( FAST_MAX_55922660_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922660 );
      CategoryDefine( FAST_MAX_55922670_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922670 );
      CategoryDefine( FAST_MAX_55922680_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922680 );
      CategoryDefine( FAST_MAX_55922690_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922690 );
      CategoryDefine( FAST_MAX_55922700_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922700 );
      CategoryDefine( FAST_MAX_55922710_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922710 );
      CategoryDefine( FAST_MAX_55922720_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922720 );
      CategoryDefine( FAST_MAX_55922730_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922730 );
      CategoryDefine( FAST_MAX_55922740_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922740 );
      CategoryDefine( FAST_MAX_55922750_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922750 );
      CategoryDefine( FAST_MAX_55922760_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922760 );
      CategoryDefine( FAST_MAX_55922770_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922770 );
      CategoryDefine( FAST_MAX_55922780_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922780 );
      CategoryDefine( FAST_MAX_55922790_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922790 );
      CategoryDefine( FAST_MAX_55922800_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922800 );
      CategoryDefine( FAST_MAX_55922810_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922810 );
      CategoryDefine( FAST_MAX_55922820_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922820 );
      CategoryDefine( FAST_MAX_55922830_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922830 );
      CategoryDefine( FAST_MAX_55922840_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922840 );
      CategoryDefine( FAST_MAX_MGS3LONG_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_MGS3LONG ); 
      CategoryDefine( FAST_MAX_55922va0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922va0 ); {rev18a}
      CategoryDefine( FAST_MAX_55922vb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922vb0 ); {rev18a}

      CategoryDefine( FAST_MAX_55922vc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922vc0 ); {rev19a}

      CategoryDefine( FAST_MAX_55922ve0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ve0 ); {rev21b}

{ftrev23a...}
      CategoryDefine( FAST_MAX_55922wi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wi0 );
      CategoryDefine( FAST_MAX_55922wj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wj0 );
      CategoryDefine( FAST_MAX_55922wk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wk0 );
      CategoryDefine( FAST_MAX_55922wl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wl0 );
{...ftrev23a}

{ftrevg09e...}
      CategoryDefine( FAST_MAX_55922wm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wm0 );
      CategoryDefine( FAST_MAX_55922wn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922wn0 );
{...ftrevg09e}

      CategoryDefine( FAST_NOM_55922850_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922850 );
      CategoryDefine( FAST_MAX_55922850_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922850 );
      CategoryDefine( FAST_NOM_55922860_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922860 );
      CategoryDefine( FAST_MAX_55922860_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922860 );
      CategoryDefine( FAST_NOM_55922870_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922870 );
      CategoryDefine( FAST_MAX_55922870_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922870 );
      CategoryDefine( FAST_NOM_55922880_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922880 );
      CategoryDefine( FAST_MAX_55922880_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922880 );
      CategoryDefine( FAST_NOM_55922890_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922890 );
      CategoryDefine( FAST_MAX_55922890_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922890 );
      CategoryDefine( FAST_NOM_55922900_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922900 );
      CategoryDefine( FAST_MAX_55922900_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922900 );
      CategoryDefine( FAST_NOM_55922910_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922910 );
      CategoryDefine( FAST_MAX_55922910_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922910 );
      CategoryDefine( FAST_NOM_55922920_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922920 );
      CategoryDefine( FAST_MAX_55922920_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922920 );
      CategoryDefine( FAST_NOM_55922930_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922930 );
      CategoryDefine( FAST_MAX_55922930_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922930 );
      CategoryDefine( FAST_NOM_55922940_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922940 );
      CategoryDefine( FAST_MAX_55922940_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922940 );
      CategoryDefine( FAST_NOM_55922950_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922950 );
      CategoryDefine( FAST_MAX_55922950_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922950 );
      CategoryDefine( FAST_NOM_55922960_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922960 );
      CategoryDefine( FAST_MAX_55922960_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922960 );
      CategoryDefine( FAST_NOM_55922970_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922970 );
      CategoryDefine( FAST_MAX_55922970_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922970 );
      CategoryDefine( FAST_NOM_55922980_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922980 );
      CategoryDefine( FAST_MAX_55922980_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922980 );
      CategoryDefine( FAST_NOM_55922990_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922990 );
      CategoryDefine( FAST_MAX_55922990_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922990 );
      CategoryDefine( FAST_NOM_55922a00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a00 );
      CategoryDefine( FAST_MAX_55922a00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a00 );
      CategoryDefine( FAST_NOM_55922a10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a10 );
      CategoryDefine( FAST_MAX_55922a10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a10 );
      CategoryDefine( FAST_NOM_55922a20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a20 );
      CategoryDefine( FAST_MAX_55922a20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a20 );
      CategoryDefine( FAST_NOM_55922a30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a30 );
      CategoryDefine( FAST_MAX_55922a30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a30 );
      CategoryDefine( FAST_NOM_55922a40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a40 );
      CategoryDefine( FAST_MAX_55922a40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a40 );
      CategoryDefine( FAST_NOM_55922a50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a50 );
      CategoryDefine( FAST_MAX_55922a50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a50 );
      CategoryDefine( FAST_NOM_55922a60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a60 );
      CategoryDefine( FAST_MAX_55922a60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a60 );
      CategoryDefine( FAST_NOM_55922a70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a70 );
      CategoryDefine( FAST_MAX_55922a70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a70 );
      CategoryDefine( FAST_NOM_55922a80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a80 );
      CategoryDefine( FAST_MAX_55922a80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a80 );
      CategoryDefine( FAST_NOM_55922a90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922a90 );
      CategoryDefine( FAST_MAX_55922a90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922a90 );
      CategoryDefine( FAST_NOM_55922aa0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922aa0 );
      CategoryDefine( FAST_MAX_55922aa0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922aa0 );
      CategoryDefine( FAST_NOM_55922ab0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ab0 );
      CategoryDefine( FAST_MAX_55922ab0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ab0 );
      CategoryDefine( FAST_NOM_55922ac0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ac0 );
      CategoryDefine( FAST_MAX_55922ac0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ac0 );
      CategoryDefine( FAST_NOM_55922ad0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ad0 );
      CategoryDefine( FAST_MAX_55922ad0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ad0 );
      CategoryDefine( FAST_NOM_55922ae0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ae0 );
      CategoryDefine( FAST_MAX_55922ae0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ae0 );
      CategoryDefine( FAST_NOM_55922af0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922af0 );
      CategoryDefine( FAST_MAX_55922af0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922af0 );
      CategoryDefine( FAST_NOM_55922ag0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ag0 );
      CategoryDefine( FAST_MAX_55922ag0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ag0 );
      CategoryDefine( FAST_NOM_55922ah0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ah0 );
      CategoryDefine( FAST_MAX_55922ah0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ah0 );
      CategoryDefine( FAST_NOM_55922ai0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ai0 );
      CategoryDefine( FAST_MAX_55922ai0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ai0 );
      CategoryDefine( FAST_NOM_55922aj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922aj0 );
      CategoryDefine( FAST_MAX_55922aj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922aj0 );
      CategoryDefine( FAST_NOM_55922ak0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ak0 );
      CategoryDefine( FAST_MAX_55922ak0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ak0 );
      CategoryDefine( FAST_NOM_55922al0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922al0 );
      CategoryDefine( FAST_MAX_55922al0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922al0 );
      CategoryDefine( FAST_NOM_55922am0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922am0 );
      CategoryDefine( FAST_MAX_55922am0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922am0 );
      CategoryDefine( FAST_NOM_55922an0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922an0 );
      CategoryDefine( FAST_MAX_55922an0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922an0 );
      CategoryDefine( FAST_NOM_55922ao0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ao0 );
      CategoryDefine( FAST_MAX_55922ao0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ao0 );
      CategoryDefine( FAST_NOM_55922ap0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ap0 );
      CategoryDefine( FAST_MAX_55922ap0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ap0 );
      CategoryDefine( FAST_NOM_55922aq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922aq0 );
      CategoryDefine( FAST_MAX_55922aq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922aq0 );
      CategoryDefine( FAST_NOM_55922ar0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ar0 );
      CategoryDefine( FAST_MAX_55922ar0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ar0 );
      CategoryDefine( FAST_NOM_55922as0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922as0 );
      CategoryDefine( FAST_MAX_55922as0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922as0 );
      CategoryDefine( FAST_NOM_55922at0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922at0 );
      CategoryDefine( FAST_MAX_55922at0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922at0 );
      CategoryDefine( FAST_NOM_55922au0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922au0 );
      CategoryDefine( FAST_MAX_55922au0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922au0 );
      CategoryDefine( FAST_NOM_55922av0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922av0 );
      CategoryDefine( FAST_MAX_55922av0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922av0 );
      CategoryDefine( FAST_NOM_55922aw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922aw0 );
      CategoryDefine( FAST_MAX_55922aw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922aw0 );
      CategoryDefine( FAST_NOM_55922ax0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ax0 );
      CategoryDefine( FAST_MAX_55922ax0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ax0 );
      CategoryDefine( FAST_NOM_55922ay0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ay0 );
      CategoryDefine( FAST_MAX_55922ay0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ay0 );
      CategoryDefine( FAST_NOM_55922az0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922az0 );
      CategoryDefine( FAST_MAX_55922az0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922az0 );
      CategoryDefine( FAST_NOM_55922b00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b00 );
      CategoryDefine( FAST_MAX_55922b00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b00 );
      CategoryDefine( FAST_NOM_55922b10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b10 );
      CategoryDefine( FAST_MAX_55922b10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b10 );
      CategoryDefine( FAST_NOM_55922b20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b20 );
      CategoryDefine( FAST_MAX_55922b20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b20 );
      CategoryDefine( FAST_NOM_55922b30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b30 );
      CategoryDefine( FAST_MAX_55922b30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b30 );
      CategoryDefine( FAST_NOM_55922b40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b40 );
      CategoryDefine( FAST_MAX_55922b40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b40 );
      CategoryDefine( FAST_NOM_55922b50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b50 );
      CategoryDefine( FAST_MAX_55922b50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b50 );
      CategoryDefine( FAST_NOM_55922b60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b60 );
      CategoryDefine( FAST_MAX_55922b60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b60 );
      CategoryDefine( FAST_NOM_55922b70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b70 );
      CategoryDefine( FAST_MAX_55922b70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b70 );
      CategoryDefine( FAST_NOM_55922b80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b80 );
      CategoryDefine( FAST_MAX_55922b80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b80 );
      CategoryDefine( FAST_NOM_55922b90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922b90 );
      CategoryDefine( FAST_MAX_55922b90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922b90 );
      CategoryDefine( FAST_NOM_55922ba0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ba0 );
      CategoryDefine( FAST_MAX_55922ba0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ba0 );
      CategoryDefine( FAST_NOM_55922bb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bb0 );
      CategoryDefine( FAST_MAX_55922bb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bb0 );
      CategoryDefine( FAST_NOM_55922bc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bc0 );
      CategoryDefine( FAST_MAX_55922bc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bc0 );
      CategoryDefine( FAST_NOM_55922bd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bd0 );
      CategoryDefine( FAST_MAX_55922bd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bd0 );
      CategoryDefine( FAST_NOM_55922be0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922be0 );
      CategoryDefine( FAST_MAX_55922be0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922be0 );
      CategoryDefine( FAST_NOM_55922bf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bf0 );
      CategoryDefine( FAST_MAX_55922bf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bf0 );
      CategoryDefine( FAST_NOM_55922bg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bg0 );
      CategoryDefine( FAST_MAX_55922bg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bg0 );
      CategoryDefine( FAST_NOM_55922bh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bh0 );
      CategoryDefine( FAST_MAX_55922bh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bh0 );
      CategoryDefine( FAST_NOM_55922bi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bi0 );
      CategoryDefine( FAST_MAX_55922bi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bi0 );
      CategoryDefine( FAST_NOM_55922bj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bj0 );
      CategoryDefine( FAST_MAX_55922bj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bj0 );
      CategoryDefine( FAST_NOM_55922bk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bk0 );
      CategoryDefine( FAST_MAX_55922bk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bk0 );
      CategoryDefine( FAST_NOM_55922bl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bl0 );
      CategoryDefine( FAST_MAX_55922bl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bl0 );
      CategoryDefine( FAST_NOM_55922bm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bm0 );
      CategoryDefine( FAST_MAX_55922bm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bm0 );
      CategoryDefine( FAST_NOM_55922bn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bn0 );
      CategoryDefine( FAST_MAX_55922bn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bn0 );
      CategoryDefine( FAST_NOM_55922bo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bo0 );
      CategoryDefine( FAST_MAX_55922bo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bo0 );
      CategoryDefine( FAST_NOM_55922bp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bp0 );
      CategoryDefine( FAST_MAX_55922bp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bp0 );
      CategoryDefine( FAST_NOM_55922bq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bq0 );
      CategoryDefine( FAST_MAX_55922bq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bq0 );
      CategoryDefine( FAST_NOM_55922br0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922br0 );
      CategoryDefine( FAST_MAX_55922br0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922br0 );
      CategoryDefine( FAST_NOM_55922bs0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bs0 );
      CategoryDefine( FAST_MAX_55922bs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bs0 );
      CategoryDefine( FAST_NOM_55922bt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bt0 );
      CategoryDefine( FAST_MAX_55922bt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bt0 );
      CategoryDefine( FAST_NOM_55922bu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bu0 );
      CategoryDefine( FAST_MAX_55922bu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bu0 );
      CategoryDefine( FAST_NOM_55922bv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bv0 );
      CategoryDefine( FAST_MAX_55922bv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bv0 );
      CategoryDefine( FAST_NOM_55922bw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bw0 );
      CategoryDefine( FAST_MAX_55922bw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bw0 );
      CategoryDefine( FAST_NOM_55922bx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bx0 );
      CategoryDefine( FAST_MAX_55922bx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bx0 );
      CategoryDefine( FAST_NOM_55922by0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922by0 );
      CategoryDefine( FAST_MAX_55922by0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922by0 );
      CategoryDefine( FAST_NOM_55922bz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922bz0 );
      CategoryDefine( FAST_MAX_55922bz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922bz0 );
      CategoryDefine( FAST_NOM_55922c00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c00 );
      CategoryDefine( FAST_MAX_55922c00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c00 );
      CategoryDefine( FAST_NOM_55922c10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c10 );
      CategoryDefine( FAST_MAX_55922c10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c10 );
      CategoryDefine( FAST_NOM_55922c20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c20 );
      CategoryDefine( FAST_MAX_55922c20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c20 );
      CategoryDefine( FAST_NOM_55922c30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c30 );
      CategoryDefine( FAST_MAX_55922c30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c30 );
      CategoryDefine( FAST_NOM_55922c40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c40 );
      CategoryDefine( FAST_MAX_55922c40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c40 );
      CategoryDefine( FAST_NOM_55922c50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c50 );
      CategoryDefine( FAST_MAX_55922c50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c50 );
      CategoryDefine( FAST_NOM_55922c60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c60 );
      CategoryDefine( FAST_MAX_55922c60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c60 );
      CategoryDefine( FAST_NOM_55922c70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c70 );
      CategoryDefine( FAST_MAX_55922c70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c70 );
      CategoryDefine( FAST_NOM_55922c80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c80 );
      CategoryDefine( FAST_MAX_55922c80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c80 );
      CategoryDefine( FAST_NOM_55922c90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922c90 );
      CategoryDefine( FAST_MAX_55922c90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922c90 );
      CategoryDefine( FAST_NOM_55922ca0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ca0 );
      CategoryDefine( FAST_MAX_55922ca0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ca0 );
      CategoryDefine( FAST_NOM_55922cb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cb0 );
      CategoryDefine( FAST_MAX_55922cb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cb0 );
      CategoryDefine( FAST_NOM_55922cc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cc0 );
      CategoryDefine( FAST_MAX_55922cc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cc0 );
      CategoryDefine( FAST_NOM_55922cd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cd0 );
      CategoryDefine( FAST_MAX_55922cd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cd0 );
      CategoryDefine( FAST_NOM_55922ce0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ce0 );
      CategoryDefine( FAST_MAX_55922ce0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ce0 );
      CategoryDefine( FAST_NOM_55922cf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cf0 );
      CategoryDefine( FAST_MAX_55922cf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cf0 );
      CategoryDefine( FAST_NOM_55922cg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cg0 );
      CategoryDefine( FAST_MAX_55922cg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cg0 );
      CategoryDefine( FAST_NOM_55922ch0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ch0 );
      CategoryDefine( FAST_MAX_55922ch0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ch0 );
      CategoryDefine( FAST_NOM_55922ci0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ci0 );
      CategoryDefine( FAST_MAX_55922ci0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ci0 );
      CategoryDefine( FAST_NOM_55922cj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cj0 );
      CategoryDefine( FAST_MAX_55922cj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cj0 );
      CategoryDefine( FAST_NOM_55922ck0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ck0 );
      CategoryDefine( FAST_MAX_55922ck0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ck0 );
      CategoryDefine( FAST_NOM_55922cl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cl0 );
      CategoryDefine( FAST_MAX_55922cl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cl0 );
      CategoryDefine( FAST_NOM_55922cm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cm0 );
      CategoryDefine( FAST_MAX_55922cm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cm0 );
      CategoryDefine( FAST_NOM_55922cn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cn0 );
      CategoryDefine( FAST_MAX_55922cn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cn0 );
      CategoryDefine( FAST_NOM_55922co0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922co0 );
      CategoryDefine( FAST_MAX_55922co0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922co0 );
      CategoryDefine( FAST_NOM_55922cp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cp0 );
      CategoryDefine( FAST_MAX_55922cp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cp0 );
      CategoryDefine( FAST_NOM_55922cq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cq0 );
      CategoryDefine( FAST_MAX_55922cq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cq0 );
      CategoryDefine( FAST_NOM_55922cr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cr0 );
      CategoryDefine( FAST_MAX_55922cr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cr0 );
      CategoryDefine( FAST_NOM_55922cs0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cs0 );
      CategoryDefine( FAST_MAX_55922cs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cs0 );
      CategoryDefine( FAST_NOM_55922ct0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ct0 );
      CategoryDefine( FAST_MAX_55922ct0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ct0 );
      CategoryDefine( FAST_NOM_55922cu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cu0 );
      CategoryDefine( FAST_MAX_55922cu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cu0 );
      CategoryDefine( FAST_NOM_55922cv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cv0 );
      CategoryDefine( FAST_MAX_55922cv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cv0 );
      CategoryDefine( FAST_NOM_55922cw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cw0 );
      CategoryDefine( FAST_MAX_55922cw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cw0 );
      CategoryDefine( FAST_NOM_55922cx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cx0 );
      CategoryDefine( FAST_MAX_55922cx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cx0 );
      CategoryDefine( FAST_NOM_55922cy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cy0 );
      CategoryDefine( FAST_MAX_55922cy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cy0 );
      CategoryDefine( FAST_NOM_55922cz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922cz0 );
      CategoryDefine( FAST_MAX_55922cz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922cz0 );
      CategoryDefine( FAST_NOM_55922d00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d00 );
      CategoryDefine( FAST_MAX_55922d00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d00 );
      CategoryDefine( FAST_NOM_55922d10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d10 );
      CategoryDefine( FAST_MAX_55922d10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d10 );
      CategoryDefine( FAST_NOM_55922d20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d20 );
      CategoryDefine( FAST_MAX_55922d20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d20 );
      CategoryDefine( FAST_NOM_55922d30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d30 );
      CategoryDefine( FAST_MAX_55922d30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d30 );
      CategoryDefine( FAST_NOM_55922d40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d40 );
      CategoryDefine( FAST_MAX_55922d40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d40 );
      CategoryDefine( FAST_NOM_55922d50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d50 );
      CategoryDefine( FAST_MAX_55922d50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d50 );
      CategoryDefine( FAST_NOM_55922d60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d60 );
      CategoryDefine( FAST_MAX_55922d60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d60 );
      CategoryDefine( FAST_NOM_55922d70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d70 );
      CategoryDefine( FAST_MAX_55922d70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d70 );
      CategoryDefine( FAST_NOM_55922d80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d80 );
      CategoryDefine( FAST_MAX_55922d80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d80 );
      CategoryDefine( FAST_NOM_55922d90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922d90 );
      CategoryDefine( FAST_MAX_55922d90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922d90 );
      CategoryDefine( FAST_NOM_55922da0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922da0 );
      CategoryDefine( FAST_MAX_55922da0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922da0 );
      CategoryDefine( FAST_NOM_55922db0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922db0 );
      CategoryDefine( FAST_MAX_55922db0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922db0 );
      CategoryDefine( FAST_NOM_55922dc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dc0 );
      CategoryDefine( FAST_MAX_55922dc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dc0 );
      CategoryDefine( FAST_NOM_55922dd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dd0 );
      CategoryDefine( FAST_MAX_55922dd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dd0 );
      CategoryDefine( FAST_NOM_55922de0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922de0 );
      CategoryDefine( FAST_MAX_55922de0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922de0 );
      CategoryDefine( FAST_NOM_55922df0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922df0 );
      CategoryDefine( FAST_MAX_55922df0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922df0 );
      CategoryDefine( FAST_NOM_55922dg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dg0 );
      CategoryDefine( FAST_MAX_55922dg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dg0 );
      CategoryDefine( FAST_NOM_55922dh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dh0 );
      CategoryDefine( FAST_MAX_55922dh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dh0 );
      CategoryDefine( FAST_NOM_55922di0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922di0 );
      CategoryDefine( FAST_MAX_55922di0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922di0 );
      CategoryDefine( FAST_NOM_55922dj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dj0 );
      CategoryDefine( FAST_MAX_55922dj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dj0 );
      CategoryDefine( FAST_NOM_55922dk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dk0 );
      CategoryDefine( FAST_MAX_55922dk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dk0 );
      CategoryDefine( FAST_NOM_55922dl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dl0 );
      CategoryDefine( FAST_MAX_55922dl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dl0 );
      CategoryDefine( FAST_NOM_55922dm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dm0 );
      CategoryDefine( FAST_MAX_55922dm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dm0 );
      CategoryDefine( FAST_NOM_55922dn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dn0 );
      CategoryDefine( FAST_MAX_55922dn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dn0 );
      CategoryDefine( FAST_NOM_55922do0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922do0 );
      CategoryDefine( FAST_MAX_55922do0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922do0 );
      CategoryDefine( FAST_NOM_55922dp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dp0 );
      CategoryDefine( FAST_MAX_55922dp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dp0 );
      CategoryDefine( FAST_NOM_55922dq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dq0 );
      CategoryDefine( FAST_MAX_55922dq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dq0 );
      CategoryDefine( FAST_NOM_55922dr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dr0 );
      CategoryDefine( FAST_MAX_55922dr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dr0 );
      CategoryDefine( FAST_NOM_55922ds0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ds0 );
      CategoryDefine( FAST_MAX_55922ds0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ds0 );
      CategoryDefine( FAST_NOM_55922dt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dt0 );
      CategoryDefine( FAST_MAX_55922dt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dt0 );
      CategoryDefine( FAST_NOM_55922du0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922du0 );
      CategoryDefine( FAST_MAX_55922du0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922du0 );
      CategoryDefine( FAST_NOM_55922dv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dv0 );
      CategoryDefine( FAST_MAX_55922dv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dv0 );
      CategoryDefine( FAST_NOM_55922dw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dw0 );
      CategoryDefine( FAST_MAX_55922dw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dw0 );
      CategoryDefine( FAST_NOM_55922dx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dx0 );
      CategoryDefine( FAST_MAX_55922dx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dx0 );
      CategoryDefine( FAST_NOM_55922dy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dy0 );
      CategoryDefine( FAST_MAX_55922dy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dy0 );
      CategoryDefine( FAST_NOM_55922dz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922dz0 );
      CategoryDefine( FAST_MAX_55922dz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922dz0 );
      CategoryDefine( FAST_NOM_55922e00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e00 );
      CategoryDefine( FAST_MAX_55922e00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e00 );
      CategoryDefine( FAST_NOM_55922e10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e10 );
      CategoryDefine( FAST_MAX_55922e10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e10 );
      CategoryDefine( FAST_NOM_55922e20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e20 );
      CategoryDefine( FAST_MAX_55922e20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e20 );
      CategoryDefine( FAST_NOM_55922e30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e30 );
      CategoryDefine( FAST_MAX_55922e30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e30 );
      CategoryDefine( FAST_NOM_55922e40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e40 );
      CategoryDefine( FAST_MAX_55922e40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e40 );
      CategoryDefine( FAST_NOM_55922e50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e50 );
      CategoryDefine( FAST_MAX_55922e50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e50 );
      CategoryDefine( FAST_NOM_55922e60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e60 );
      CategoryDefine( FAST_MAX_55922e60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e60 );
      CategoryDefine( FAST_NOM_55922e70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e70 );
      CategoryDefine( FAST_MAX_55922e70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e70 );
      CategoryDefine( FAST_NOM_55922e80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e80 );
      CategoryDefine( FAST_MAX_55922e80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e80 );
      CategoryDefine( FAST_NOM_55922e90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922e90 );
      CategoryDefine( FAST_MAX_55922e90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922e90 );
      CategoryDefine( FAST_NOM_55922ea0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ea0 );
      CategoryDefine( FAST_MAX_55922ea0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ea0 );
      CategoryDefine( FAST_NOM_55922eb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eb0 );
      CategoryDefine( FAST_MAX_55922eb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eb0 );
      CategoryDefine( FAST_NOM_55922ec0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ec0 );
      CategoryDefine( FAST_MAX_55922ec0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ec0 );
      CategoryDefine( FAST_NOM_55922ed0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ed0 );
      CategoryDefine( FAST_MAX_55922ed0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ed0 );
      CategoryDefine( FAST_NOM_55922ee0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ee0 );
      CategoryDefine( FAST_MAX_55922ee0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ee0 );
      CategoryDefine( FAST_NOM_55922ef0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ef0 );
      CategoryDefine( FAST_MAX_55922ef0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ef0 );
      CategoryDefine( FAST_NOM_55922eg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eg0 );
      CategoryDefine( FAST_MAX_55922eg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eg0 );
      CategoryDefine( FAST_NOM_55922eh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eh0 );
      CategoryDefine( FAST_MAX_55922eh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eh0 );
      CategoryDefine( FAST_NOM_55922ei0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ei0 );
      CategoryDefine( FAST_MAX_55922ei0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ei0 );
      CategoryDefine( FAST_NOM_55922ej0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ej0 );
      CategoryDefine( FAST_MAX_55922ej0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ej0 );
      CategoryDefine( FAST_NOM_55922ek0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ek0 );
      CategoryDefine( FAST_MAX_55922ek0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ek0 );
      CategoryDefine( FAST_NOM_55922el0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922el0 );
      CategoryDefine( FAST_MAX_55922el0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922el0 );
      CategoryDefine( FAST_NOM_55922em0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922em0 );
      CategoryDefine( FAST_MAX_55922em0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922em0 );
      CategoryDefine( FAST_NOM_55922en0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922en0 );
      CategoryDefine( FAST_MAX_55922en0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922en0 );
      CategoryDefine( FAST_NOM_55922eo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eo0 );
      CategoryDefine( FAST_MAX_55922eo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eo0 );
      CategoryDefine( FAST_NOM_55922ep0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ep0 );
      CategoryDefine( FAST_MAX_55922ep0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ep0 );
      CategoryDefine( FAST_NOM_55922eq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eq0 );
      CategoryDefine( FAST_MAX_55922eq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eq0 );
      CategoryDefine( FAST_NOM_55922er0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922er0 );
      CategoryDefine( FAST_MAX_55922er0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922er0 );
      CategoryDefine( FAST_NOM_55922es0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922es0 );
      CategoryDefine( FAST_MAX_55922es0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922es0 );
      CategoryDefine( FAST_NOM_55922et0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922et0 );
      CategoryDefine( FAST_MAX_55922et0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922et0 );
      CategoryDefine( FAST_NOM_55922eu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922eu0 );
      CategoryDefine( FAST_MAX_55922eu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922eu0 );
      CategoryDefine( FAST_NOM_55922ev0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ev0 );
      CategoryDefine( FAST_MAX_55922ev0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ev0 );
      CategoryDefine( FAST_NOM_55922ew0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ew0 );
      CategoryDefine( FAST_MAX_55922ew0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ew0 );
      CategoryDefine( FAST_NOM_55922ex0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ex0 );
      CategoryDefine( FAST_MAX_55922ex0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ex0 );
      CategoryDefine( FAST_NOM_55922ey0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ey0 );
      CategoryDefine( FAST_MAX_55922ey0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ey0 );
      CategoryDefine( FAST_NOM_55922ez0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ez0 );
      CategoryDefine( FAST_MAX_55922ez0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ez0 );
      CategoryDefine( FAST_NOM_55922f00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f00 );
      CategoryDefine( FAST_MAX_55922f00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f00 );
      CategoryDefine( FAST_NOM_55922f10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f10 );
      CategoryDefine( FAST_MAX_55922f10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f10 );
      CategoryDefine( FAST_NOM_55922f20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f20 );
      CategoryDefine( FAST_MAX_55922f20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f20 );
      CategoryDefine( FAST_NOM_55922f30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f30 );
      CategoryDefine( FAST_MAX_55922f30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f30 );
      CategoryDefine( FAST_NOM_55922f40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f40 );
      CategoryDefine( FAST_MAX_55922f40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f40 );
      CategoryDefine( FAST_NOM_55922f50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f50 );
      CategoryDefine( FAST_MAX_55922f50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f50 );
      CategoryDefine( FAST_NOM_55922f60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f60 );
      CategoryDefine( FAST_MAX_55922f60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f60 );
      CategoryDefine( FAST_NOM_55922f70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f70 );
      CategoryDefine( FAST_MAX_55922f70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f70 );
      CategoryDefine( FAST_NOM_55922f80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f80 );
      CategoryDefine( FAST_MAX_55922f80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f80 );
      CategoryDefine( FAST_NOM_55922f90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922f90 );
      CategoryDefine( FAST_MAX_55922f90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922f90 );
      CategoryDefine( FAST_NOM_55922fa0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fa0 );
      CategoryDefine( FAST_MAX_55922fa0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fa0 );
      CategoryDefine( FAST_NOM_55922fb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fb0 );
      CategoryDefine( FAST_MAX_55922fb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fb0 );
      CategoryDefine( FAST_NOM_55922fc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fc0 );
      CategoryDefine( FAST_MAX_55922fc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fc0 );
      CategoryDefine( FAST_NOM_55922fd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fd0 );
      CategoryDefine( FAST_MAX_55922fd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fd0 );
      CategoryDefine( FAST_NOM_55922fe0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fe0 );
      CategoryDefine( FAST_MAX_55922fe0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fe0 );
      CategoryDefine( FAST_NOM_55922ff0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ff0 );
      CategoryDefine( FAST_MAX_55922ff0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ff0 );
      CategoryDefine( FAST_NOM_55922fg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fg0 );
      CategoryDefine( FAST_MAX_55922fg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fg0 );
      CategoryDefine( FAST_NOM_55922fh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fh0 );
      CategoryDefine( FAST_MAX_55922fh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fh0 );
      CategoryDefine( FAST_NOM_55922fi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fi0 );
      CategoryDefine( FAST_MAX_55922fi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fi0 );
      CategoryDefine( FAST_NOM_55922fj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fj0 );
      CategoryDefine( FAST_MAX_55922fj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fj0 );
      CategoryDefine( FAST_NOM_55922fk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fk0 );
      CategoryDefine( FAST_MAX_55922fk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fk0 );
      CategoryDefine( FAST_NOM_55922fl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fl0 );
      CategoryDefine( FAST_MAX_55922fl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fl0 );
      CategoryDefine( FAST_NOM_55922fm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fm0 );
      CategoryDefine( FAST_MAX_55922fm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fm0 );
      CategoryDefine( FAST_NOM_55922fn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fn0 );
      CategoryDefine( FAST_MAX_55922fn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fn0 );
      CategoryDefine( FAST_NOM_55922fo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fo0 );
      CategoryDefine( FAST_MAX_55922fo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fo0 );
      CategoryDefine( FAST_NOM_55922fp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fp0 );
      CategoryDefine( FAST_MAX_55922fp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fp0 );
      CategoryDefine( FAST_NOM_55922fq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fq0 );
      CategoryDefine( FAST_MAX_55922fq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fq0 );
      CategoryDefine( FAST_NOM_55922fr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fr0 );
      CategoryDefine( FAST_MAX_55922fr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fr0 );
      CategoryDefine( FAST_NOM_55922fs0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fs0 );
      CategoryDefine( FAST_MAX_55922fs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fs0 );
      CategoryDefine( FAST_NOM_55922ft0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ft0 );
      CategoryDefine( FAST_MAX_55922ft0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ft0 );
      CategoryDefine( FAST_NOM_55922fu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fu0 );
      CategoryDefine( FAST_MAX_55922fu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fu0 );
      CategoryDefine( FAST_NOM_55922fv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fv0 );
      CategoryDefine( FAST_MAX_55922fv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fv0 );
      CategoryDefine( FAST_NOM_55922fw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fw0 );
      CategoryDefine( FAST_MAX_55922fw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fw0 );
      CategoryDefine( FAST_NOM_55922fx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fx0 );
      CategoryDefine( FAST_MAX_55922fx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fx0 );
      CategoryDefine( FAST_NOM_55922fy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fy0 );
      CategoryDefine( FAST_MAX_55922fy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fy0 );
      CategoryDefine( FAST_NOM_55922fz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922fz0 );
      CategoryDefine( FAST_MAX_55922fz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922fz0 );
      CategoryDefine( FAST_NOM_55922g00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g00 );
      CategoryDefine( FAST_MAX_55922g00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g00 );
      CategoryDefine( FAST_NOM_55922g10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g10 );
      CategoryDefine( FAST_MAX_55922g10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g10 );
      CategoryDefine( FAST_NOM_55922g20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g20 );
      CategoryDefine( FAST_MAX_55922g20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g20 );
      CategoryDefine( FAST_NOM_55922g30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g30 );
      CategoryDefine( FAST_MAX_55922g30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g30 );
      CategoryDefine( FAST_NOM_55922g40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g40 );
      CategoryDefine( FAST_MAX_55922g40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g40 );
      CategoryDefine( FAST_NOM_55922g50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g50 );
      CategoryDefine( FAST_MAX_55922g50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g50 );
      CategoryDefine( FAST_NOM_55922g60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g60 );
      CategoryDefine( FAST_MAX_55922g60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g60 );
      CategoryDefine( FAST_NOM_55922g70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g70 );
      CategoryDefine( FAST_MAX_55922g70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g70 );
      CategoryDefine( FAST_NOM_55922g80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g80 );
      CategoryDefine( FAST_MAX_55922g80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g80 );
      CategoryDefine( FAST_NOM_55922g90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922g90 );
      CategoryDefine( FAST_MAX_55922g90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922g90 );
      CategoryDefine( FAST_NOM_55922ga0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ga0 );
      CategoryDefine( FAST_MAX_55922ga0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ga0 );
      CategoryDefine( FAST_NOM_55922gb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gb0 );
      CategoryDefine( FAST_MAX_55922gb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gb0 );
      CategoryDefine( FAST_NOM_55922gc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gc0 );
      CategoryDefine( FAST_MIN_55922gc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gc0 );
      CategoryDefine( FAST_MAX_55922gc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gc0 );
      CategoryDefine( FAST_NOM_55922gd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gd0 );
      CategoryDefine( FAST_MIN_55922gd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gd0 );
      CategoryDefine( FAST_MAX_55922gd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gd0 );
      CategoryDefine( FAST_NOM_55922ge0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ge0 );
      CategoryDefine( FAST_MIN_55922ge0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ge0 );
      CategoryDefine( FAST_MAX_55922ge0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ge0 );
      CategoryDefine( FAST_NOM_55922gf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gf0 );
      CategoryDefine( FAST_MIN_55922gf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gf0 );
      CategoryDefine( FAST_MAX_55922gf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gf0 );
      CategoryDefine( FAST_NOM_55922gg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gg0 );
      CategoryDefine( FAST_MIN_55922gg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gg0 );
      CategoryDefine( FAST_MAX_55922gg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gg0 );
      CategoryDefine( FAST_NOM_55922gh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gh0 );
      CategoryDefine( FAST_MIN_55922gh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gh0 );
      CategoryDefine( FAST_MAX_55922gh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gh0 );
      CategoryDefine( FAST_NOM_55922gi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gi0 );
      CategoryDefine( FAST_MIN_55922gi0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gi0 );
      CategoryDefine( FAST_MAX_55922gi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gi0 );
      CategoryDefine( FAST_NOM_55922gj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gj0 );
      CategoryDefine( FAST_MIN_55922gj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gj0 );
      CategoryDefine( FAST_MAX_55922gj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gj0 );
      CategoryDefine( FAST_NOM_55922gk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gk0 );
      CategoryDefine( FAST_MIN_55922gk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gk0 );
      CategoryDefine( FAST_MAX_55922gk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gk0 );
      CategoryDefine( FAST_NOM_55922gl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gl0 );
      CategoryDefine( FAST_MIN_55922gl0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gl0 );
      CategoryDefine( FAST_MAX_55922gl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gl0 );
      CategoryDefine( FAST_NOM_55922gm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gm0 );
      CategoryDefine( FAST_MIN_55922gm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gm0 );
      CategoryDefine( FAST_MAX_55922gm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gm0 );
      CategoryDefine( FAST_NOM_55922gn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gn0 );
      CategoryDefine( FAST_MIN_55922gn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gn0 );
      CategoryDefine( FAST_MAX_55922gn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gn0 );
      CategoryDefine( FAST_NOM_55922go0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922go0 );
      CategoryDefine( FAST_MIN_55922go0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922go0 );
      CategoryDefine( FAST_MAX_55922go0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922go0 );
      CategoryDefine( FAST_NOM_55922gp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gp0 );
      CategoryDefine( FAST_MIN_55922gp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gp0 );
      CategoryDefine( FAST_MAX_55922gp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gp0 );
      CategoryDefine( FAST_NOM_55922gq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gq0 );
      CategoryDefine( FAST_MIN_55922gq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gq0 );
      CategoryDefine( FAST_MAX_55922gq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gq0 );
      CategoryDefine( FAST_NOM_55922gr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gr0 );
      CategoryDefine( FAST_MIN_55922gr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gr0 );
      CategoryDefine( FAST_MAX_55922gr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gr0 );
      CategoryDefine( FAST_NOM_55922gs0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gs0 );
      CategoryDefine( FAST_MIN_55922gs0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gs0 );
      CategoryDefine( FAST_MAX_55922gs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gs0 );
      CategoryDefine( FAST_NOM_55922gt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gt0 );
      CategoryDefine( FAST_MIN_55922gt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gt0 );
      CategoryDefine( FAST_MAX_55922gt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gt0 );
      CategoryDefine( FAST_NOM_55922gu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gu0 );
      CategoryDefine( FAST_MIN_55922gu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gu0 );
      CategoryDefine( FAST_MAX_55922gu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gu0 );
      CategoryDefine( FAST_NOM_55922gv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gv0 );
      CategoryDefine( FAST_MIN_55922gv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gv0 );
      CategoryDefine( FAST_MAX_55922gv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gv0 );
      CategoryDefine( FAST_NOM_55922gw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gw0 );
      CategoryDefine( FAST_MIN_55922gw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gw0 );
      CategoryDefine( FAST_MAX_55922gw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gw0 );
      CategoryDefine( FAST_NOM_55922gx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gx0 );
      CategoryDefine( FAST_MIN_55922gx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gx0 );
      CategoryDefine( FAST_MAX_55922gx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gx0 );
      CategoryDefine( FAST_NOM_55922gy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gy0 );
      CategoryDefine( FAST_MIN_55922gy0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gy0 );
      CategoryDefine( FAST_MAX_55922gy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gy0 );
      CategoryDefine( FAST_NOM_55922gz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922gz0 );
      CategoryDefine( FAST_MIN_55922gz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922gz0 );
      CategoryDefine( FAST_MAX_55922gz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922gz0 );
      CategoryDefine( FAST_NOM_55922h00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h00 );
      CategoryDefine( FAST_MIN_55922h00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h00 );
      CategoryDefine( FAST_MAX_55922h00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h00 );
      CategoryDefine( FAST_NOM_55922h10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h10 );
      CategoryDefine( FAST_MIN_55922h10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h10 );
      CategoryDefine( FAST_MAX_55922h10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h10 );
      CategoryDefine( FAST_NOM_55922h20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h20 );
      CategoryDefine( FAST_MIN_55922h20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h20 );
      CategoryDefine( FAST_MAX_55922h20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h20 );
      CategoryDefine( FAST_NOM_55922h30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h30 );
      CategoryDefine( FAST_MIN_55922h30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h30 );
      CategoryDefine( FAST_MAX_55922h30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h30 );
      CategoryDefine( FAST_NOM_55922h40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h40 );
      CategoryDefine( FAST_MIN_55922h40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h40 );
      CategoryDefine( FAST_MAX_55922h40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h40 );
      CategoryDefine( FAST_NOM_55922h50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h50 );
      CategoryDefine( FAST_MIN_55922h50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h50 );
      CategoryDefine( FAST_MAX_55922h50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h50 );
      CategoryDefine( FAST_NOM_55922h60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h60 );
      CategoryDefine( FAST_MIN_55922h60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h60 );
      CategoryDefine( FAST_MAX_55922h60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h60 );
      CategoryDefine( FAST_NOM_55922h70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h70 );
      CategoryDefine( FAST_MIN_55922h70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h70 );
      CategoryDefine( FAST_MAX_55922h70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h70 );
      CategoryDefine( FAST_NOM_55922h80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h80 );
      CategoryDefine( FAST_MIN_55922h80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h80 );
      CategoryDefine( FAST_MAX_55922h80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h80 );
      CategoryDefine( FAST_NOM_55922h90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922h90 );
      CategoryDefine( FAST_MIN_55922h90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922h90 );
      CategoryDefine( FAST_MAX_55922h90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922h90 );
      CategoryDefine( FAST_NOM_55922ha0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ha0 );
      CategoryDefine( FAST_MIN_55922ha0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ha0 );
      CategoryDefine( FAST_MAX_55922ha0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ha0 );
      CategoryDefine( FAST_NOM_55922hb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hb0 );
      CategoryDefine( FAST_MIN_55922hb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hb0 );
      CategoryDefine( FAST_MAX_55922hb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hb0 );
      CategoryDefine( FAST_NOM_55922hc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hc0 );
      CategoryDefine( FAST_MIN_55922hc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hc0 );
      CategoryDefine( FAST_MAX_55922hc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hc0 );
      CategoryDefine( FAST_NOM_55922hd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hd0 );
      CategoryDefine( FAST_MIN_55922hd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hd0 );
      CategoryDefine( FAST_MAX_55922hd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hd0 );
      CategoryDefine( FAST_NOM_55922he0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922he0 );
      CategoryDefine( FAST_MIN_55922he0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922he0 );
      CategoryDefine( FAST_MAX_55922he0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922he0 );
      CategoryDefine( FAST_NOM_55922hf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hf0 );
      CategoryDefine( FAST_MIN_55922hf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hf0 );
      CategoryDefine( FAST_MAX_55922hf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hf0 );
      CategoryDefine( FAST_NOM_55922hg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hg0 );
      CategoryDefine( FAST_MIN_55922hg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hg0 );
      CategoryDefine( FAST_MAX_55922hg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hg0 );
      CategoryDefine( FAST_NOM_55922hh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hh0 );
      CategoryDefine( FAST_MIN_55922hh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hh0 );
      CategoryDefine( FAST_MAX_55922hh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hh0 );
      CategoryDefine( FAST_NOM_55922hi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hi0 );
      CategoryDefine( FAST_MIN_55922hi0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hi0 );
      CategoryDefine( FAST_MAX_55922hi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hi0 );
      CategoryDefine( FAST_NOM_55922hj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hj0 );
      CategoryDefine( FAST_MIN_55922hj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hj0 );
      CategoryDefine( FAST_MAX_55922hj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hj0 );
      CategoryDefine( FAST_NOM_55922hk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hk0 );
      CategoryDefine( FAST_MIN_55922hk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hk0 );
      CategoryDefine( FAST_MAX_55922hk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hk0 );
      CategoryDefine( FAST_NOM_55922hl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hl0 );
      CategoryDefine( FAST_MIN_55922hl0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hl0 );
      CategoryDefine( FAST_MAX_55922hl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hl0 );
      CategoryDefine( FAST_NOM_55922hm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hm0 );
      CategoryDefine( FAST_MIN_55922hm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hm0 );
      CategoryDefine( FAST_MAX_55922hm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hm0 );
      CategoryDefine( FAST_NOM_55922hn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hn0 );
      CategoryDefine( FAST_MIN_55922hn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hn0 );
      CategoryDefine( FAST_MAX_55922hn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hn0 );
      CategoryDefine( FAST_NOM_55922ho0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ho0 );
      CategoryDefine( FAST_MIN_55922ho0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ho0 );
      CategoryDefine( FAST_MAX_55922ho0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ho0 );
      CategoryDefine( FAST_NOM_55922hp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hp0 );
      CategoryDefine( FAST_MIN_55922hp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hp0 );
      CategoryDefine( FAST_MAX_55922hp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hp0 );
      CategoryDefine( FAST_NOM_55922hq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hq0 );
      CategoryDefine( FAST_MIN_55922hq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hq0 );
      CategoryDefine( FAST_MAX_55922hq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hq0 );
      CategoryDefine( FAST_NOM_55922hr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hr0 );
      CategoryDefine( FAST_MIN_55922hr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hr0 );
      CategoryDefine( FAST_MAX_55922hr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hr0 );
      CategoryDefine( FAST_NOM_55922hs0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hs0 );
      CategoryDefine( FAST_MIN_55922hs0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hs0 );
      CategoryDefine( FAST_MAX_55922hs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hs0 );
      CategoryDefine( FAST_NOM_55922ht0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ht0 );
      CategoryDefine( FAST_MIN_55922ht0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ht0 );
      CategoryDefine( FAST_MAX_55922ht0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ht0 );
      CategoryDefine( FAST_NOM_55922hu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hu0 );
      CategoryDefine( FAST_MIN_55922hu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hu0 );
      CategoryDefine( FAST_MAX_55922hu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hu0 );
      CategoryDefine( FAST_NOM_55922hv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hv0 );
      CategoryDefine( FAST_MIN_55922hv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hv0 );
      CategoryDefine( FAST_MAX_55922hv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hv0 );
      CategoryDefine( FAST_NOM_55922hw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hw0 );
      CategoryDefine( FAST_MIN_55922hw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hw0 );
      CategoryDefine( FAST_MAX_55922hw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hw0 );
      CategoryDefine( FAST_NOM_55922hx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hx0 );
      CategoryDefine( FAST_MIN_55922hx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hx0 );
      CategoryDefine( FAST_MAX_55922hx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hx0 );
      CategoryDefine( FAST_NOM_55922hy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hy0 );
      CategoryDefine( FAST_MIN_55922hy0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hy0 );
      CategoryDefine( FAST_MAX_55922hy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hy0 );
      CategoryDefine( FAST_NOM_55922hz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922hz0 );
      CategoryDefine( FAST_MIN_55922hz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922hz0 );
      CategoryDefine( FAST_MAX_55922hz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922hz0 );
      CategoryDefine( FAST_NOM_55922i00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i00 );
      CategoryDefine( FAST_MIN_55922i00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i00 );
      CategoryDefine( FAST_MAX_55922i00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i00 );
      CategoryDefine( FAST_NOM_55922i10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i10 );
      CategoryDefine( FAST_MIN_55922i10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i10 );
      CategoryDefine( FAST_MAX_55922i10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i10 );
      CategoryDefine( FAST_NOM_55922i20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i20 );
      CategoryDefine( FAST_MIN_55922i20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i20 );
      CategoryDefine( FAST_MAX_55922i20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i20 );
      CategoryDefine( FAST_NOM_55922i30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i30 );
      CategoryDefine( FAST_MIN_55922i30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i30 );
      CategoryDefine( FAST_MAX_55922i30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i30 );
      CategoryDefine( FAST_NOM_55922i40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i40 );
      CategoryDefine( FAST_MIN_55922i40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i40 );
      CategoryDefine( FAST_MAX_55922i40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i40 );
      CategoryDefine( FAST_NOM_55922i50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i50 );
      CategoryDefine( FAST_MIN_55922i50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i50 );
      CategoryDefine( FAST_MAX_55922i50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i50 );
      CategoryDefine( FAST_NOM_55922i60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i60 );
      CategoryDefine( FAST_MIN_55922i60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i60 );
      CategoryDefine( FAST_MAX_55922i60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i60 );
      CategoryDefine( FAST_NOM_55922i70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i70 );
      CategoryDefine( FAST_MIN_55922i70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i70 );
      CategoryDefine( FAST_MAX_55922i70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i70 );
      CategoryDefine( FAST_NOM_55922i80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i80 );
      CategoryDefine( FAST_MIN_55922i80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i80 );
      CategoryDefine( FAST_MAX_55922i80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i80 );
      CategoryDefine( FAST_NOM_55922i90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922i90 );
      CategoryDefine( FAST_MIN_55922i90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922i90 );
      CategoryDefine( FAST_MAX_55922i90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922i90 );
      CategoryDefine( FAST_NOM_55922ia0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ia0 );
      CategoryDefine( FAST_MIN_55922ia0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ia0 );
      CategoryDefine( FAST_MAX_55922ia0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ia0 );
      CategoryDefine( FAST_NOM_55922ib0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ib0 );
      CategoryDefine( FAST_MIN_55922ib0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ib0 );
      CategoryDefine( FAST_MAX_55922ib0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ib0 );
      CategoryDefine( FAST_NOM_55922ic0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ic0 );
      CategoryDefine( FAST_MIN_55922ic0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ic0 );
      CategoryDefine( FAST_MAX_55922ic0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ic0 );
      CategoryDefine( FAST_NOM_55922id0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922id0 );
      CategoryDefine( FAST_MIN_55922id0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922id0 );
      CategoryDefine( FAST_MAX_55922id0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922id0 );
      CategoryDefine( FAST_NOM_55922ie0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ie0 );
      CategoryDefine( FAST_MIN_55922ie0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ie0 );
      CategoryDefine( FAST_MAX_55922ie0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ie0 );
      CategoryDefine( FAST_NOM_55922if0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922if0 );
      CategoryDefine( FAST_MIN_55922if0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922if0 );
      CategoryDefine( FAST_MAX_55922if0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922if0 );
      CategoryDefine( FAST_NOM_55922ig0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ig0 );
      CategoryDefine( FAST_MIN_55922ig0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ig0 );
      CategoryDefine( FAST_MAX_55922ig0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ig0 );
      CategoryDefine( FAST_NOM_55922ih0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ih0 );
      CategoryDefine( FAST_MIN_55922ih0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ih0 );
      CategoryDefine( FAST_MAX_55922ih0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ih0 );
      CategoryDefine( FAST_NOM_55922ii0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ii0 );
      CategoryDefine( FAST_MIN_55922ii0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ii0 );
      CategoryDefine( FAST_MAX_55922ii0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ii0 );
      CategoryDefine( FAST_NOM_55922ij0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ij0 );
      CategoryDefine( FAST_MIN_55922ij0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ij0 );
      CategoryDefine( FAST_MAX_55922ij0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ij0 );
      CategoryDefine( FAST_NOM_55922ik0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ik0 );
      CategoryDefine( FAST_MIN_55922ik0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ik0 );
      CategoryDefine( FAST_MAX_55922ik0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ik0 );
      CategoryDefine( FAST_NOM_55922il0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922il0 );
      CategoryDefine( FAST_MIN_55922il0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922il0 );
      CategoryDefine( FAST_MAX_55922il0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922il0 );
      CategoryDefine( FAST_NOM_55922im0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922im0 );
      CategoryDefine( FAST_MIN_55922im0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922im0 );
      CategoryDefine( FAST_MAX_55922im0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922im0 );
      CategoryDefine( FAST_NOM_55922in0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922in0 );
      CategoryDefine( FAST_MIN_55922in0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922in0 );
      CategoryDefine( FAST_MAX_55922in0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922in0 );
      CategoryDefine( FAST_NOM_55922io0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922io0 );
      CategoryDefine( FAST_MIN_55922io0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922io0 );
      CategoryDefine( FAST_MAX_55922io0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922io0 );
      CategoryDefine( FAST_NOM_55922ip0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ip0 );
      CategoryDefine( FAST_MIN_55922ip0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ip0 );
      CategoryDefine( FAST_MAX_55922ip0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ip0 );
      CategoryDefine( FAST_NOM_55922iq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iq0 );
      CategoryDefine( FAST_MIN_55922iq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iq0 );
      CategoryDefine( FAST_MAX_55922iq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iq0 );
      CategoryDefine( FAST_NOM_55922ir0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ir0 );
      CategoryDefine( FAST_MIN_55922ir0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ir0 );
      CategoryDefine( FAST_MAX_55922ir0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ir0 );
      CategoryDefine( FAST_NOM_55922is0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922is0 );
      CategoryDefine( FAST_MIN_55922is0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922is0 );
      CategoryDefine( FAST_MAX_55922is0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922is0 );
      CategoryDefine( FAST_NOM_55922it0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922it0 );
      CategoryDefine( FAST_MIN_55922it0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922it0 );
      CategoryDefine( FAST_MAX_55922it0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922it0 );
      CategoryDefine( FAST_NOM_55922iu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iu0 );
      CategoryDefine( FAST_MIN_55922iu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iu0 );
      CategoryDefine( FAST_MAX_55922iu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iu0 );
      CategoryDefine( FAST_NOM_55922iv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iv0 );
      CategoryDefine( FAST_MIN_55922iv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iv0 );
      CategoryDefine( FAST_MAX_55922iv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iv0 );
      CategoryDefine( FAST_NOM_55922iw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iw0 );
      CategoryDefine( FAST_MIN_55922iw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iw0 );
      CategoryDefine( FAST_MAX_55922iw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iw0 );
      CategoryDefine( FAST_NOM_55922ix0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ix0 );
      CategoryDefine( FAST_MIN_55922ix0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ix0 );
      CategoryDefine( FAST_MAX_55922ix0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ix0 );
      CategoryDefine( FAST_NOM_55922iy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iy0 );
      CategoryDefine( FAST_MIN_55922iy0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iy0 );
      CategoryDefine( FAST_MAX_55922iy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iy0 );
      CategoryDefine( FAST_NOM_55922iz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922iz0 );
      CategoryDefine( FAST_MIN_55922iz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922iz0 );
      CategoryDefine( FAST_MAX_55922iz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922iz0 );
      CategoryDefine( FAST_NOM_55922j00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j00 );
      CategoryDefine( FAST_MIN_55922j00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j00 );
      CategoryDefine( FAST_MAX_55922j00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j00 );
      CategoryDefine( FAST_NOM_55922j10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j10 );
      CategoryDefine( FAST_MIN_55922j10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j10 );
      CategoryDefine( FAST_MAX_55922j10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j10 );
      CategoryDefine( FAST_NOM_55922j20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j20 );
      CategoryDefine( FAST_MIN_55922j20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j20 );
      CategoryDefine( FAST_MAX_55922j20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j20 );
      CategoryDefine( FAST_NOM_55922j30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j30 );
      CategoryDefine( FAST_MIN_55922j30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j30 );
      CategoryDefine( FAST_MAX_55922j30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j30 );
      CategoryDefine( FAST_NOM_55922j40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j40 );
      CategoryDefine( FAST_MIN_55922j40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j40 );
      CategoryDefine( FAST_MAX_55922j40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j40 );
      CategoryDefine( FAST_NOM_55922j50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j50 );
      CategoryDefine( FAST_MIN_55922j50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j50 );
      CategoryDefine( FAST_MAX_55922j50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j50 );
      CategoryDefine( FAST_NOM_55922j60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j60 );
      CategoryDefine( FAST_MIN_55922j60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j60 );
      CategoryDefine( FAST_MAX_55922j60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j60 );
      CategoryDefine( FAST_NOM_55922j70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j70 );
      CategoryDefine( FAST_MIN_55922j70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j70 );
      CategoryDefine( FAST_MAX_55922j70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j70 );
      CategoryDefine( FAST_NOM_55922j80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j80 );
      CategoryDefine( FAST_MIN_55922j80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j80 );
      CategoryDefine( FAST_MAX_55922j80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j80 );
      CategoryDefine( FAST_NOM_55922j90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922j90 );
      CategoryDefine( FAST_MIN_55922j90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922j90 );
      CategoryDefine( FAST_MAX_55922j90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922j90 );
      CategoryDefine( FAST_NOM_55922ja0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ja0 );
      CategoryDefine( FAST_MIN_55922ja0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ja0 );
      CategoryDefine( FAST_MAX_55922ja0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ja0 );
      CategoryDefine( FAST_NOM_55922jb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jb0 );
      CategoryDefine( FAST_MIN_55922jb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jb0 );
      CategoryDefine( FAST_MAX_55922jb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jb0 );
      CategoryDefine( FAST_NOM_55922jc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jc0 );
      CategoryDefine( FAST_MIN_55922jc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jc0 );
      CategoryDefine( FAST_MAX_55922jc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jc0 );
      CategoryDefine( FAST_NOM_55922jd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jd0 );
      CategoryDefine( FAST_MIN_55922jd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jd0 );
      CategoryDefine( FAST_MAX_55922jd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jd0 );
      CategoryDefine( FAST_NOM_55922je0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922je0 );
      CategoryDefine( FAST_MIN_55922je0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922je0 );
      CategoryDefine( FAST_MAX_55922je0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922je0 );
      CategoryDefine( FAST_NOM_55922jf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jf0 );
      CategoryDefine( FAST_MIN_55922jf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jf0 );
      CategoryDefine( FAST_MAX_55922jf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jf0 );
      CategoryDefine( FAST_NOM_55922jg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jg0 );
      CategoryDefine( FAST_MIN_55922jg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jg0 );
      CategoryDefine( FAST_MAX_55922jg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jg0 );
      CategoryDefine( FAST_NOM_55922jh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jh0 );
      CategoryDefine( FAST_MIN_55922jh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jh0 );
      CategoryDefine( FAST_MAX_55922jh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jh0 );
      CategoryDefine( FAST_NOM_55922ji0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ji0 );
      CategoryDefine( FAST_MIN_55922ji0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ji0 );
      CategoryDefine( FAST_MAX_55922ji0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ji0 );
      CategoryDefine( FAST_NOM_55922jj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jj0 );
      CategoryDefine( FAST_MIN_55922jj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jj0 );
      CategoryDefine( FAST_MAX_55922jj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jj0 );
      CategoryDefine( FAST_NOM_55922jk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jk0 );
      CategoryDefine( FAST_MIN_55922jk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jk0 );
      CategoryDefine( FAST_MAX_55922jk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jk0 );
      CategoryDefine( FAST_NOM_55922jl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jl0 );
      CategoryDefine( FAST_MIN_55922jl0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jl0 );
      CategoryDefine( FAST_MAX_55922jl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jl0 );
      CategoryDefine( FAST_NOM_55922jm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jm0 );
      CategoryDefine( FAST_MIN_55922jm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jm0 );
      CategoryDefine( FAST_MAX_55922jm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jm0 );
      CategoryDefine( FAST_NOM_55922jn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jn0 );
      CategoryDefine( FAST_MIN_55922jn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jn0 );
      CategoryDefine( FAST_MAX_55922jn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jn0 );
      CategoryDefine( FAST_NOM_55922jo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jo0 );
      CategoryDefine( FAST_MIN_55922jo0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jo0 );
      CategoryDefine( FAST_MAX_55922jo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jo0 );
      CategoryDefine( FAST_NOM_55922jp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jp0 );
      CategoryDefine( FAST_MIN_55922jp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jp0 );
      CategoryDefine( FAST_MAX_55922jp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jp0 );
      CategoryDefine( FAST_NOM_55922jq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jq0 );
      CategoryDefine( FAST_MIN_55922jq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jq0 );
      CategoryDefine( FAST_MAX_55922jq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jq0 );
      CategoryDefine( FAST_NOM_55922jr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jr0 );
      CategoryDefine( FAST_MIN_55922jr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jr0 );
      CategoryDefine( FAST_MAX_55922jr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jr0 );
      CategoryDefine( FAST_NOM_55922js0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922js0 );
      CategoryDefine( FAST_MIN_55922js0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922js0 );
      CategoryDefine( FAST_MAX_55922js0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922js0 );
      CategoryDefine( FAST_NOM_55922jt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jt0 );
      CategoryDefine( FAST_MIN_55922jt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jt0 );
      CategoryDefine( FAST_MAX_55922jt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jt0 );
      CategoryDefine( FAST_NOM_55922ju0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ju0 );
      CategoryDefine( FAST_MIN_55922ju0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ju0 );
      CategoryDefine( FAST_MAX_55922ju0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ju0 );
      CategoryDefine( FAST_NOM_55922jv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jv0 );
      CategoryDefine( FAST_MIN_55922pp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922pp0 );
      CategoryDefine( FAST_MAX_55922pp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pp0 );
      CategoryDefine( FAST_NOM_55922jw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jw0 );
      CategoryDefine( FAST_MIN_55922pq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922pq0 );
      CategoryDefine( FAST_MAX_55922pq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pq0 );
      CategoryDefine( FAST_MIN_55922rm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922rm0 );
      CategoryDefine( FAST_MAX_55922rm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922rm0 );
      CategoryDefine( FAST_NOM_55922jx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jx0 );
      CategoryDefine( FAST_MIN_55922jx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jx0 );
      CategoryDefine( FAST_MAX_55922jx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jx0 );
      CategoryDefine( FAST_NOM_55922jy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jy0 );
      CategoryDefine( FAST_MIN_55922jy0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jy0 );
      CategoryDefine( FAST_MAX_55922jy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jy0 );
      CategoryDefine( FAST_NOM_55922jz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922jz0 );
      CategoryDefine( FAST_MIN_55922jz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922jz0 );
      CategoryDefine( FAST_MAX_55922jz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922jz0 );
      CategoryDefine( FAST_NOM_55922k00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k00 );
      CategoryDefine( FAST_MIN_55922k00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k00 );
      CategoryDefine( FAST_MAX_55922k00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k00 );
      CategoryDefine( FAST_NOM_55922k10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k10 );
      CategoryDefine( FAST_MIN_55922k10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k10 );
      CategoryDefine( FAST_MAX_55922k10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k10 );
      CategoryDefine( FAST_NOM_55922k20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k20 );
      CategoryDefine( FAST_MIN_55922k20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k20 );
      CategoryDefine( FAST_MAX_55922k20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k20 );
      CategoryDefine( FAST_NOM_55922k30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k30 );
      CategoryDefine( FAST_MIN_55922k30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k30 );
      CategoryDefine( FAST_MAX_55922k30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k30 );
      CategoryDefine( FAST_NOM_55922k40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k40 );
      CategoryDefine( FAST_MIN_55922k40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k40 );
      CategoryDefine( FAST_MAX_55922k40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k40 );
      CategoryDefine( FAST_NOM_55922k50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k50 );
      CategoryDefine( FAST_MIN_55922k50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k50 );
      CategoryDefine( FAST_MAX_55922k50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k50 );
      CategoryDefine( FAST_NOM_55922k60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k60 );
      CategoryDefine( FAST_MIN_55922k60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k60 );
      CategoryDefine( FAST_MAX_55922k60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k60 );
      CategoryDefine( FAST_NOM_55922k70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k70 );
      CategoryDefine( FAST_MIN_55922k70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k70 );
      CategoryDefine( FAST_MAX_55922k70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k70 );
      CategoryDefine( FAST_NOM_55922k80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k80 );
      CategoryDefine( FAST_MIN_55922k80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k80 );
      CategoryDefine( FAST_MAX_55922k80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k80 );
      CategoryDefine( FAST_NOM_55922k90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922k90 );
      CategoryDefine( FAST_MIN_55922k90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922k90 );
      CategoryDefine( FAST_MAX_55922k90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922k90 );
      CategoryDefine( FAST_NOM_55922ka0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ka0 );
      CategoryDefine( FAST_MIN_55922ka0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ka0 );
      CategoryDefine( FAST_MAX_55922ka0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ka0 );
      CategoryDefine( FAST_NOM_55922kb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kb0 );
      CategoryDefine( FAST_MIN_55922kb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kb0 );
      CategoryDefine( FAST_MAX_55922kb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kb0 );
      CategoryDefine( FAST_NOM_55922kc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kc0 );
      CategoryDefine( FAST_MIN_55922kc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kc0 );
      CategoryDefine( FAST_MAX_55922kc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kc0 );
      CategoryDefine( FAST_NOM_55922kd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kd0 );
      CategoryDefine( FAST_MIN_55922kd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kd0 );
      CategoryDefine( FAST_MAX_55922kd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kd0 );
      CategoryDefine( FAST_NOM_55922ke0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ke0 );
      CategoryDefine( FAST_MIN_55922ke0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ke0 );
      CategoryDefine( FAST_MAX_55922ke0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ke0 );
      CategoryDefine( FAST_NOM_55922kf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kf0 );
      CategoryDefine( FAST_MIN_55922kf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kf0 );
      CategoryDefine( FAST_MAX_55922kf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kf0 );
      CategoryDefine( FAST_NOM_55922kg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kg0 );
      CategoryDefine( FAST_MIN_55922kg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kg0 );
      CategoryDefine( FAST_MAX_55922kg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kg0 );
      CategoryDefine( FAST_NOM_55922kh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kh0 );
      CategoryDefine( FAST_MIN_55922kh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kh0 );
      CategoryDefine( FAST_MAX_55922kh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kh0 );
      CategoryDefine( FAST_NOM_55922ki0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ki0 );
      CategoryDefine( FAST_MIN_55922ki0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ki0 );
      CategoryDefine( FAST_MAX_55922ki0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ki0 );
      CategoryDefine( FAST_NOM_55922kj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kj0 );
      CategoryDefine( FAST_MIN_55922kj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kj0 );
      CategoryDefine( FAST_MAX_55922kj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kj0 );
      CategoryDefine( FAST_NOM_55922kk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kk0 );
      CategoryDefine( FAST_MIN_55922kk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kk0 );
      CategoryDefine( FAST_MAX_55922kk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kk0 );
      CategoryDefine( FAST_NOM_55922kl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kl0 );
      CategoryDefine( FAST_MIN_55922kl0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kl0 );
      CategoryDefine( FAST_MAX_55922kl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kl0 );
      CategoryDefine( FAST_NOM_55922km0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922km0 );
      CategoryDefine( FAST_MIN_55922km0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922km0 );
      CategoryDefine( FAST_MAX_55922km0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922km0 );
      CategoryDefine( FAST_NOM_55922kn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kn0 );
      CategoryDefine( FAST_MIN_55922kn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kn0 );
      CategoryDefine( FAST_MAX_55922kn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kn0 );
      CategoryDefine( FAST_NOM_55922ko0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ko0 );
      CategoryDefine( FAST_MIN_55922ko0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ko0 );
      CategoryDefine( FAST_MAX_55922ko0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ko0 );
      CategoryDefine( FAST_NOM_55922kp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kp0 );
      CategoryDefine( FAST_MIN_55922kp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kp0 );
      CategoryDefine( FAST_MAX_55922kp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kp0 );
      CategoryDefine( FAST_NOM_55922kq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kq0 );
      CategoryDefine( FAST_MIN_55922kq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kq0 );
      CategoryDefine( FAST_MAX_55922kq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kq0 );
      CategoryDefine( FAST_NOM_55922kr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kr0 );
      CategoryDefine( FAST_MIN_55922kr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kr0 );
      CategoryDefine( FAST_MAX_55922kr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kr0 );
      CategoryDefine( FAST_NOM_55922ks0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ks0 );
      CategoryDefine( FAST_MIN_55922ks0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ks0 );
      CategoryDefine( FAST_MAX_55922ks0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ks0 );
      CategoryDefine( FAST_NOM_55922kt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kt0 );
      CategoryDefine( FAST_MIN_55922kt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kt0 );
      CategoryDefine( FAST_MAX_55922kt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kt0 );
      CategoryDefine( FAST_NOM_55922ku0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ku0 );
      CategoryDefine( FAST_MIN_55922ku0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ku0 );
      CategoryDefine( FAST_MAX_55922ku0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ku0 );
      CategoryDefine( FAST_NOM_55922kv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kv0 );
      CategoryDefine( FAST_MIN_55922kv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kv0 );
      CategoryDefine( FAST_MAX_55922kv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kv0 );
      CategoryDefine( FAST_NOM_55922kw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kw0 );
      CategoryDefine( FAST_MIN_55922kw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kw0 );
      CategoryDefine( FAST_MAX_55922kw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kw0 );
      CategoryDefine( FAST_NOM_55922kx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922kx0 );
      CategoryDefine( FAST_MIN_55922kx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922kx0 );
      CategoryDefine( FAST_MAX_55922kx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922kx0 );
      CategoryDefine( FAST_NOM_55922ky0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ky0 );
      CategoryDefine( FAST_MIN_55922ky0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ky0 );
      CategoryDefine( FAST_MAX_55922ky0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ky0 );
      CategoryDefine( FAST_NOM_55922l00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l00 );
      CategoryDefine( FAST_MIN_55922l00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l00 );
      CategoryDefine( FAST_MAX_55922l00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l00 );
      CategoryDefine( FAST_NOM_55922l10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l10 );
      CategoryDefine( FAST_MIN_55922l10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l10 );
      CategoryDefine( FAST_MAX_55922l10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l10 );
      CategoryDefine( FAST_NOM_55922l20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l20 );
      CategoryDefine( FAST_MIN_55922l20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l20 );
      CategoryDefine( FAST_MAX_55922l20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l20 );
      CategoryDefine( FAST_NOM_55922l30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l30 );
      CategoryDefine( FAST_MIN_55922l30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l30 );
      CategoryDefine( FAST_MAX_55922l30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l30 );
      CategoryDefine( FAST_NOM_55922l40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l40 );
      CategoryDefine( FAST_MIN_55922l40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l40 );
      CategoryDefine( FAST_MAX_55922l40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l40 );
{es26v01a...}
      CategoryDefine( FAST_MIN_55922ql0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ql0 );
      CategoryDefine( FAST_MAX_55922ql0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ql0 );
      CategoryDefine( FAST_MIN_55922qm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qm0 );
      CategoryDefine( FAST_MAX_55922qm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qm0 );
      CategoryDefine( FAST_MIN_55922qn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qn0 );
      CategoryDefine( FAST_MAX_55922qn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qn0 );
      CategoryDefine( FAST_MIN_55922qo0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qo0 );
      CategoryDefine( FAST_MIN_55922r90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922r90 );
      CategoryDefine( FAST_MAX_55922qo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qo0 );
      CategoryDefine( FAST_MIN_55922qp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qp0 );
      CategoryDefine( FAST_MAX_55922qp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qp0 );
      CategoryDefine( FAST_MIN_55922qq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qq0 );
      CategoryDefine( FAST_MAX_55922qq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qq0 );
      CategoryDefine( FAST_MIN_55922re0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922re0 );
      CategoryDefine( FAST_MAX_55922re0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922re0 );
      CategoryDefine( FAST_MIN_55922ra0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ra0 );
      CategoryDefine( FAST_MAX_55922ra0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ra0 );
      CategoryDefine( FAST_MIN_55922rb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922rb0 );
      CategoryDefine( FAST_MAX_55922rb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922rb0 );
      CategoryDefine( FAST_MIN_55922rc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922rc0 );
      CategoryDefine( FAST_MAX_55922rc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922rc0 );
      CategoryDefine( FAST_MIN_55922rd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922rd0 );
      CategoryDefine( FAST_MAX_55922rd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922rd0 );
      CategoryDefine( FAST_MIN_55922rh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922rh0 );
      CategoryDefine( FAST_MAX_55922rh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922rh0 );
      CategoryDefine( FAST_NOM_55922l60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l60 );
      CategoryDefine( FAST_MIN_55922l60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l60 );
      CategoryDefine( FAST_MAX_55922l60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l60 );
      CategoryDefine( FAST_NOM_55922l70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l70 );
      CategoryDefine( FAST_MIN_55922l70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l70 );
      CategoryDefine( FAST_MAX_55922l70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l70 );
      CategoryDefine( FAST_NOM_55922l80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l80 );
      CategoryDefine( FAST_MIN_55922l80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l80 );
      CategoryDefine( FAST_MAX_55922l80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l80 );
      CategoryDefine( FAST_NOM_55922l90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922l90 );
      CategoryDefine( FAST_MIN_55922l90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922l90 );
      CategoryDefine( FAST_MAX_55922l90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922l90 );
      CategoryDefine( FAST_NOM_55922la0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922la0 );
      CategoryDefine( FAST_MIN_55922la0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922la0 );
      CategoryDefine( FAST_MAX_55922la0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922la0 );
      CategoryDefine( FAST_NOM_55922lb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lb0 );
      CategoryDefine( FAST_MIN_55922lb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lb0 );
      CategoryDefine( FAST_MAX_55922lb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lb0 );
      CategoryDefine( FAST_NOM_55922lc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lc0 );
      CategoryDefine( FAST_MIN_55922lc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lc0 );
      CategoryDefine( FAST_MAX_55922lc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lc0 );
      CategoryDefine( FAST_NOM_55922ld0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ld0 );
      CategoryDefine( FAST_MIN_55922ld0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ld0 );
      CategoryDefine( FAST_MAX_55922ld0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ld0 );
      CategoryDefine( FAST_NOM_55922le0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922le0 );
      CategoryDefine( FAST_MIN_55922le0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922le0 );
      CategoryDefine( FAST_MAX_55922le0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922le0 );
      CategoryDefine( FAST_NOM_55922lf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lf0 );
      CategoryDefine( FAST_MIN_55922lf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lf0 );
      CategoryDefine( FAST_MAX_55922lf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lf0 );
      CategoryDefine( FAST_NOM_55922lg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lg0 );
      CategoryDefine( FAST_MIN_55922lg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lg0 );
      CategoryDefine( FAST_MAX_55922lg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lg0 );
      CategoryDefine( FAST_NOM_55922lh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lh0 );
      CategoryDefine( FAST_MIN_55922lh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lh0 );
      CategoryDefine( FAST_MAX_55922lh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lh0 );
      CategoryDefine( FAST_NOM_55922li0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922li0 );
      CategoryDefine( FAST_MIN_55922li0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922li0 );
      CategoryDefine( FAST_MAX_55922li0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922li0 );
      CategoryDefine( FAST_NOM_55922lj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lj0 );
      CategoryDefine( FAST_MIN_55922lj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lj0 );
      CategoryDefine( FAST_MAX_55922lj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lj0 );
      CategoryDefine( FAST_NOM_55922lk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lk0 );
      CategoryDefine( FAST_MIN_55922lk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lk0 );
      CategoryDefine( FAST_MAX_55922lk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lk0 );
      CategoryDefine( FAST_NOM_55922ll0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ll0 );
      CategoryDefine( FAST_MIN_55922ll0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ll0 );
      CategoryDefine( FAST_MAX_55922ll0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ll0 );
      CategoryDefine( FAST_NOM_55922lm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lm0 );
      CategoryDefine( FAST_MIN_55922lm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lm0 );
      CategoryDefine( FAST_MAX_55922lm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lm0 );
      CategoryDefine( FAST_NOM_55922ln0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ln0 );
      CategoryDefine( FAST_MIN_55922ln0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ln0 );
      CategoryDefine( FAST_MAX_55922ln0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ln0 );
      CategoryDefine( FAST_NOM_55922lo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lo0 );
      CategoryDefine( FAST_MIN_55922lo0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lo0 );
      CategoryDefine( FAST_MAX_55922lo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lo0 );
      CategoryDefine( FAST_NOM_55922lp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lp0 );
      CategoryDefine( FAST_MIN_55922lp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lp0 );
      CategoryDefine( FAST_MAX_55922lp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lp0 );
      CategoryDefine( FAST_NOM_55922lq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lq0 );
      CategoryDefine( FAST_MIN_55922lq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lq0 );
      CategoryDefine( FAST_MAX_55922lq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lq0 );
      CategoryDefine( FAST_NOM_55922lr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lr0 );
      CategoryDefine( FAST_MIN_55922lr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lr0 );
      CategoryDefine( FAST_MAX_55922lr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lr0 );
      CategoryDefine( FAST_NOM_55922ls0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ls0 );
      CategoryDefine( FAST_MIN_55922ls0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ls0 );
      CategoryDefine( FAST_MAX_55922ls0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ls0 );
      CategoryDefine( FAST_NOM_55922lt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lt0 );
      CategoryDefine( FAST_MIN_55922lt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lt0 );
      CategoryDefine( FAST_MAX_55922lt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lt0 );
      CategoryDefine( FAST_NOM_55922lu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lu0 );
      CategoryDefine( FAST_MIN_55922lu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lu0 );
      CategoryDefine( FAST_MAX_55922lu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lu0 );
      CategoryDefine( FAST_NOM_55922lv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lv0 );
      CategoryDefine( FAST_MIN_55922lv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lv0 );
      CategoryDefine( FAST_MAX_55922lv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lv0 );
      CategoryDefine( FAST_NOM_55922lw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lw0 );
      CategoryDefine( FAST_MIN_55922lw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lw0 );
      CategoryDefine( FAST_MAX_55922lw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lw0 );
      CategoryDefine( FAST_NOM_55922lx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lx0 );
      CategoryDefine( FAST_MIN_55922lx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lx0 );
      CategoryDefine( FAST_MAX_55922lx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lx0 );
      CategoryDefine( FAST_NOM_55922ly0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ly0 );
      CategoryDefine( FAST_MIN_55922ly0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ly0 );
      CategoryDefine( FAST_MAX_55922ly0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ly0 );
      CategoryDefine( FAST_NOM_55922lz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922lz0 );
      CategoryDefine( FAST_MIN_55922lz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922lz0 );
      CategoryDefine( FAST_MAX_55922lz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922lz0 );
      CategoryDefine( FAST_NOM_55922m00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m00 );
      CategoryDefine( FAST_MIN_55922m00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m00 );
      CategoryDefine( FAST_MAX_55922m00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m00 );
      CategoryDefine( FAST_NOM_55922m10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m10 );
      CategoryDefine( FAST_MIN_55922m10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m10 );
      CategoryDefine( FAST_MAX_55922m10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m10 );
      CategoryDefine( FAST_NOM_55922m20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m20 );
      CategoryDefine( FAST_MIN_55922m20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m20 );
      CategoryDefine( FAST_MAX_55922m20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m20 );
      CategoryDefine( FAST_NOM_55922m30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m30 );
      CategoryDefine( FAST_MIN_55922m30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m30 );
      CategoryDefine( FAST_MAX_55922m30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m30 );
      CategoryDefine( FAST_NOM_55922m40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m40 );
      CategoryDefine( FAST_MIN_55922m40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m40 );
      CategoryDefine( FAST_MAX_55922m40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m40 );
      CategoryDefine( FAST_NOM_55922m50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m50 );
      CategoryDefine( FAST_MIN_55922m50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m50 );
      CategoryDefine( FAST_MAX_55922m50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m50 );
      CategoryDefine( FAST_NOM_55922m60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m60 );
      CategoryDefine( FAST_MIN_55922m60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m60 );
      CategoryDefine( FAST_MAX_55922m60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m60 );
      CategoryDefine( FAST_NOM_55922m70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m70 );
      CategoryDefine( FAST_MIN_55922m70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m70 );
      CategoryDefine( FAST_MAX_55922m70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m70 );
      CategoryDefine( FAST_NOM_55922m80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m80 );
      CategoryDefine( FAST_MIN_55922m80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m80 );
      CategoryDefine( FAST_MAX_55922m80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m80 );
      CategoryDefine( FAST_NOM_55922m90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922m90 );
      CategoryDefine( FAST_MIN_55922m90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922m90 );
      CategoryDefine( FAST_MAX_55922m90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922m90 );
      CategoryDefine( FAST_MIN_55922qs0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922qs0 );
      CategoryDefine( FAST_MAX_55922qs0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922qs0 );
      CategoryDefine( FAST_NOM_55922ma0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ma0 );
      CategoryDefine( FAST_MIN_55922ma0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ma0 );
      CategoryDefine( FAST_MAX_55922ma0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ma0 );
      CategoryDefine( FAST_NOM_55922mb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mb0 );
      CategoryDefine( FAST_MIN_55922mb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mb0 );
      CategoryDefine( FAST_MAX_55922mb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mb0 );
      CategoryDefine( FAST_NOM_55922mc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mc0 );
      CategoryDefine( FAST_MIN_55922mc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mc0 );
      CategoryDefine( FAST_MAX_55922mc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mc0 );
      CategoryDefine( FAST_NOM_55922md0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922md0 );
      CategoryDefine( FAST_MIN_55922md0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922md0 );
      CategoryDefine( FAST_MAX_55922md0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922md0 );
      CategoryDefine( FAST_NOM_55922me0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922me0 );
      CategoryDefine( FAST_MIN_55922me0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922me0 );
      CategoryDefine( FAST_MAX_55922me0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922me0 );
      CategoryDefine( FAST_NOM_55922mf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mf0 );
      CategoryDefine( FAST_MIN_55922mf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mf0 );
      CategoryDefine( FAST_MAX_55922mf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mf0 );
      CategoryDefine( FAST_NOM_55922mg0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mg0 );
      CategoryDefine( FAST_MIN_55922mg0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mg0 );
      CategoryDefine( FAST_MAX_55922mg0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mg0 );
      CategoryDefine( FAST_NOM_55922mh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mh0 );
      CategoryDefine( FAST_MIN_55922mh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mh0 );
      CategoryDefine( FAST_MAX_55922mh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mh0 );
      CategoryDefine( FAST_NOM_55922mi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mi0 );
      CategoryDefine( FAST_MIN_55922mi0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mi0 );
      CategoryDefine( FAST_MAX_55922mi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mi0 );
      CategoryDefine( FAST_NOM_55922mj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mj0 );
      CategoryDefine( FAST_MIN_55922mj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mj0 );
      CategoryDefine( FAST_MAX_55922mj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mj0 );
      CategoryDefine( FAST_NOM_55922mk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mk0 );
      CategoryDefine( FAST_MIN_55922mk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mk0 );
      CategoryDefine( FAST_MAX_55922mk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mk0 );
      CategoryDefine( FAST_NOM_55922ml0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ml0 );
      CategoryDefine( FAST_MIN_55922ml0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ml0 );
      CategoryDefine( FAST_MAX_55922ml0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ml0 );
      CategoryDefine( FAST_NOM_55922mm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mm0 );
      CategoryDefine( FAST_MIN_55922mm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mm0 );
      CategoryDefine( FAST_MAX_55922mm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mm0 );
      CategoryDefine( FAST_NOM_55922mn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mn0 );
      CategoryDefine( FAST_MIN_55922mn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mn0 );
      CategoryDefine( FAST_MAX_55922mn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mn0 );

{hijirev15a...}
      CategoryDefine( FAST_MIN_55922s10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922s10 );
      CategoryDefine( FAST_MAX_55922s10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922s10 );
      CategoryDefine( FAST_MIN_55922s20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922s20 );
      CategoryDefine( FAST_MAX_55922s20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922s20 );
{...hijirev15a}

      CategoryDefine( FAST_NOM_55922mo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mo0 );
      CategoryDefine( FAST_MIN_55922mo0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mo0 );
      CategoryDefine( FAST_MAX_55922mo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mo0 );
      CategoryDefine( FAST_NOM_55922mp0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mp0 );
      CategoryDefine( FAST_MIN_55922mp0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mp0 );
      CategoryDefine( FAST_MAX_55922mp0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mp0 );
      CategoryDefine( FAST_NOM_55922mq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mq0 );
      CategoryDefine( FAST_MIN_55922mq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mq0 );
      CategoryDefine( FAST_MAX_55922mq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mq0 );
      CategoryDefine( FAST_NOM_55922mr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mr0 );
      CategoryDefine( FAST_MIN_55922mr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mr0 );
      CategoryDefine( FAST_MAX_55922mr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mr0 );
      CategoryDefine( FAST_NOM_55922ms0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ms0 );
      CategoryDefine( FAST_MIN_55922ms0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ms0 );
      CategoryDefine( FAST_MAX_55922ms0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ms0 );
      CategoryDefine( FAST_NOM_55922mt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mt0 );
      CategoryDefine( FAST_MIN_55922mt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mt0 );
      CategoryDefine( FAST_MAX_55922mt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mt0 );
      CategoryDefine( FAST_NOM_55922mu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mu0 );
      CategoryDefine( FAST_MIN_55922mu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mu0 );
      CategoryDefine( FAST_MAX_55922mu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mu0 );
      CategoryDefine( FAST_NOM_55922mv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mv0 );
      CategoryDefine( FAST_MIN_55922mv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mv0 );
      CategoryDefine( FAST_MAX_55922mv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mv0 );
      CategoryDefine( FAST_NOM_55922mw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mw0 );
      CategoryDefine( FAST_MIN_55922mw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mw0 );
      CategoryDefine( FAST_MAX_55922mw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mw0 );
      CategoryDefine( FAST_NOM_55922mx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mx0 );
      CategoryDefine( FAST_MIN_55922mx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mx0 );
      CategoryDefine( FAST_MAX_55922mx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mx0 );
      CategoryDefine( FAST_NOM_55922my0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922my0 );
      CategoryDefine( FAST_MIN_55922my0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922my0 );
      CategoryDefine( FAST_MAX_55922my0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922my0 );
      CategoryDefine( FAST_NOM_55922mz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922mz0 );
      CategoryDefine( FAST_MIN_55922mz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922mz0 );
      CategoryDefine( FAST_MAX_55922mz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922mz0 );
      CategoryDefine( FAST_NOM_55922n00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n00 );
      CategoryDefine( FAST_MIN_55922n00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n00 );
      CategoryDefine( FAST_MAX_55922n00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n00 );
      CategoryDefine( FAST_NOM_55922n10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n10 );
      CategoryDefine( FAST_MIN_55922n10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n10 );
      CategoryDefine( FAST_MAX_55922n10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n10 );
      CategoryDefine( FAST_NOM_55922n20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n20 );
      CategoryDefine( FAST_MIN_55922n20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n20 );
      CategoryDefine( FAST_MAX_55922n20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n20 );
      CategoryDefine( FAST_NOM_55922n30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n30 );
      CategoryDefine( FAST_MIN_55922n30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n30 );
      CategoryDefine( FAST_MAX_55922n30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n30 );
      CategoryDefine( FAST_NOM_55922n40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n40 );
      CategoryDefine( FAST_MIN_55922n40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n40 );
      CategoryDefine( FAST_MAX_55922n40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n40 );
      CategoryDefine( FAST_NOM_55922n50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n50 );
      CategoryDefine( FAST_MIN_55922n50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n50 );
      CategoryDefine( FAST_MAX_55922n50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n50 );
      CategoryDefine( FAST_NOM_55922n60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n60 );
      CategoryDefine( FAST_MIN_55922n60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n60 );
      CategoryDefine( FAST_MAX_55922n60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n60 );
      CategoryDefine( FAST_NOM_55922n70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n70 );
      CategoryDefine( FAST_MIN_55922n70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n70 );
      CategoryDefine( FAST_MAX_55922n70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n70 );
      CategoryDefine( FAST_NOM_55922n80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n80 );
      CategoryDefine( FAST_MIN_55922n80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n80 );
      CategoryDefine( FAST_MAX_55922n80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n80 );
      CategoryDefine( FAST_NOM_55922n90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922n90 );
      CategoryDefine( FAST_MIN_55922n90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922n90 );
      CategoryDefine( FAST_MAX_55922n90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922n90 );
      CategoryDefine( FAST_NOM_55922na0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922na0 );
      CategoryDefine( FAST_MIN_55922na0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922na0 );
      CategoryDefine( FAST_MAX_55922na0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922na0 );
      CategoryDefine( FAST_NOM_55922nb0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nb0 );
      CategoryDefine( FAST_MIN_55922nb0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nb0 );
      CategoryDefine( FAST_MAX_55922nb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nb0 );
      CategoryDefine( FAST_NOM_55922nc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nc0 );
      CategoryDefine( FAST_MIN_55922nc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nc0 );
      CategoryDefine( FAST_MAX_55922nc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nc0 );
      CategoryDefine( FAST_NOM_55922nd0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nd0 );
      CategoryDefine( FAST_MIN_55922nd0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nd0 );
      CategoryDefine( FAST_MAX_55922nd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nd0 );
      CategoryDefine( FAST_NOM_55922ne0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ne0 );
      CategoryDefine( FAST_MIN_55922ne0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ne0 );
      CategoryDefine( FAST_MAX_55922ne0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ne0 );
      CategoryDefine( FAST_NOM_55922nf0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nf0 );
      CategoryDefine( FAST_MIN_55922nf0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nf0 );
      CategoryDefine( FAST_MAX_55922nf0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nf0 );
      CategoryDefine( FAST_NOM_55922ng0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ng0 );
      CategoryDefine( FAST_MIN_55922ng0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ng0 );
      CategoryDefine( FAST_MAX_55922ng0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ng0 );
      CategoryDefine( FAST_NOM_55922nh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nh0 );
      CategoryDefine( FAST_MIN_55922nh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nh0 );
      CategoryDefine( FAST_MAX_55922nh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nh0 );
      CategoryDefine( FAST_NOM_55922ni0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ni0 );
      CategoryDefine( FAST_MIN_55922ni0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ni0 );
      CategoryDefine( FAST_MAX_55922ni0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ni0 );
      CategoryDefine( FAST_NOM_55922nj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nj0 );
      CategoryDefine( FAST_MIN_55922nj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nj0 );
      CategoryDefine( FAST_MAX_55922nj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nj0 );
      CategoryDefine( FAST_NOM_55922nk0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nk0 );
      CategoryDefine( FAST_MIN_55922nk0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nk0 );
      CategoryDefine( FAST_MAX_55922nk0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nk0 );
      CategoryDefine( FAST_NOM_55922nl0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nl0 );
      CategoryDefine( FAST_MIN_55922nl0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nl0 );
      CategoryDefine( FAST_MAX_55922nl0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nl0 );
      CategoryDefine( FAST_NOM_55922nm0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nm0 );
      CategoryDefine( FAST_MIN_55922nm0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nm0 );
      CategoryDefine( FAST_MAX_55922nm0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nm0 );
      CategoryDefine( FAST_NOM_55922nn0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nn0 );
      CategoryDefine( FAST_MIN_55922nn0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nn0 );
      CategoryDefine( FAST_MAX_55922nn0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nn0 );
      CategoryDefine( FAST_NOM_55922no0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922no0 );
      CategoryDefine( FAST_MIN_55922no0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922no0 );
      CategoryDefine( FAST_MAX_55922no0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922no0 );
      CategoryDefine( FAST_NOM_55922np0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922np0 );
      CategoryDefine( FAST_MIN_55922np0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922np0 );
      CategoryDefine( FAST_MAX_55922np0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922np0 );
      CategoryDefine( FAST_NOM_55922nq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nq0 );
      CategoryDefine( FAST_MIN_55922nq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nq0 );
      CategoryDefine( FAST_MAX_55922nq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nq0 );
      CategoryDefine( FAST_NOM_55922nr0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nr0 );
      CategoryDefine( FAST_MIN_55922nr0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nr0 );
      CategoryDefine( FAST_MAX_55922nr0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nr0 );
      CategoryDefine( FAST_NOM_55922ns0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ns0 );
      CategoryDefine( FAST_MIN_55922ns0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ns0 );
      CategoryDefine( FAST_MAX_55922ns0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ns0 );
      CategoryDefine( FAST_NOM_55922nt0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nt0 );
      CategoryDefine( FAST_MIN_55922nt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nt0 );
      CategoryDefine( FAST_MAX_55922nt0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nt0 );
      CategoryDefine( FAST_NOM_55922nu0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nu0 );
      CategoryDefine( FAST_MIN_55922nu0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nu0 );
      CategoryDefine( FAST_MAX_55922nu0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nu0 );
      CategoryDefine( FAST_NOM_55922nv0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nv0 );
      CategoryDefine( FAST_MIN_55922nv0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nv0 );
      CategoryDefine( FAST_MAX_55922nv0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nv0 );
      CategoryDefine( FAST_NOM_55922nw0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nw0 );
      CategoryDefine( FAST_MIN_55922nw0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nw0 );
      CategoryDefine( FAST_MAX_55922nw0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nw0 );
      CategoryDefine( FAST_NOM_55922nx0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nx0 );
      CategoryDefine( FAST_MIN_55922nx0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nx0 );
      CategoryDefine( FAST_MAX_55922nx0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nx0 );
      CategoryDefine( FAST_NOM_55922ny0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ny0 );
      CategoryDefine( FAST_MIN_55922ny0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ny0 );
      CategoryDefine( FAST_MAX_55922ny0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ny0 );
      CategoryDefine( FAST_NOM_55922nz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922nz0 );
      CategoryDefine( FAST_MIN_55922nz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922nz0 );
      CategoryDefine( FAST_MAX_55922nz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922nz0 );
      CategoryDefine( FAST_NOM_55922o00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o00 );
      CategoryDefine( FAST_MIN_55922o00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o00 );
      CategoryDefine( FAST_MAX_55922o00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o00 );
      CategoryDefine( FAST_NOM_55922o10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o10 );
      CategoryDefine( FAST_MIN_55922o10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o10 );
      CategoryDefine( FAST_MAX_55922o10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o10 );
      CategoryDefine( FAST_NOM_55922o20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o20 );
      CategoryDefine( FAST_MIN_55922o20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o20 );
      CategoryDefine( FAST_MAX_55922o20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o20 );
      CategoryDefine( FAST_NOM_55922o30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o30 );
      CategoryDefine( FAST_MIN_55922o30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o30 );
      CategoryDefine( FAST_MAX_55922o30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o30 );
      CategoryDefine( FAST_NOM_55922o40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o40 );
      CategoryDefine( FAST_MIN_55922o40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o40 );
      CategoryDefine( FAST_MAX_55922o40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o40 );
      CategoryDefine( FAST_NOM_55922o50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o50 );
      CategoryDefine( FAST_MIN_55922o50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o50 );
      CategoryDefine( FAST_MAX_55922o50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o50 );
      CategoryDefine( FAST_NOM_55922o60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o60 );
      CategoryDefine( FAST_MIN_55922o60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o60 );
      CategoryDefine( FAST_MAX_55922o60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o60 );
      CategoryDefine( FAST_NOM_55922o70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o70 );
      CategoryDefine( FAST_MIN_55922o70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o70 );
      CategoryDefine( FAST_MAX_55922o70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o70 );
      CategoryDefine( FAST_NOM_55922o80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o80 );
      CategoryDefine( FAST_MIN_55922o80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o80 );
      CategoryDefine( FAST_MAX_55922o80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o80 );
      CategoryDefine( FAST_NOM_55922o90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922o90 );
      CategoryDefine( FAST_MIN_55922o90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922o90 );
      CategoryDefine( FAST_MAX_55922o90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922o90 );
      CategoryDefine( FAST_NOM_55922oa0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oa0 );
      CategoryDefine( FAST_MIN_55922oa0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oa0 );
      CategoryDefine( FAST_MAX_55922oa0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oa0 );
      CategoryDefine( FAST_NOM_55922ob0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ob0 );
      CategoryDefine( FAST_MIN_55922ob0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ob0 );
      CategoryDefine( FAST_MAX_55922ob0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ob0 );
      CategoryDefine( FAST_NOM_55922oc0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oc0 );
      CategoryDefine( FAST_MIN_55922oc0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oc0 );
      CategoryDefine( FAST_MAX_55922oc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oc0 );
      CategoryDefine( FAST_NOM_55922od0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922od0 );
      CategoryDefine( FAST_MIN_55922od0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922od0 );
      CategoryDefine( FAST_MAX_55922od0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922od0 );
      CategoryDefine( FAST_NOM_55922oe0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oe0 );
      CategoryDefine( FAST_MIN_55922oe0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oe0 );
      CategoryDefine( FAST_MAX_55922oe0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oe0 );
      CategoryDefine( FAST_NOM_55922of0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922of0 );
      CategoryDefine( FAST_MIN_55922of0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922of0 );
      CategoryDefine( FAST_MAX_55922of0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922of0 );
      CategoryDefine( FAST_NOM_55922og0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922og0 );
      CategoryDefine( FAST_MIN_55922og0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922og0 );
      CategoryDefine( FAST_MAX_55922og0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922og0 );
      CategoryDefine( FAST_NOM_55922oh0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oh0 );
      CategoryDefine( FAST_MIN_55922oh0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oh0 );
      CategoryDefine( FAST_MAX_55922oh0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oh0 );
      CategoryDefine( FAST_NOM_55922oi0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oi0 );
      CategoryDefine( FAST_MIN_55922oi0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oi0 );
      CategoryDefine( FAST_MAX_55922oi0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oi0 );
      CategoryDefine( FAST_NOM_55922oj0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oj0 );
      CategoryDefine( FAST_MIN_55922oj0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oj0 );
      CategoryDefine( FAST_MAX_55922oj0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oj0 );
      CategoryDefine( FAST_NOM_55922ok0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ok0 );
      CategoryDefine( FAST_MIN_55922ok0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ok0 );
      CategoryDefine( FAST_MAX_55922ok0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ok0 );
      CategoryDefine( FAST_NOM_55922ol0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ol0 );
      CategoryDefine( FAST_MIN_55922ol0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ol0 );
      CategoryDefine( FAST_MAX_55922ol0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ol0 );
      CategoryDefine( FAST_NOM_55922om0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922om0 );
      CategoryDefine( FAST_MIN_55922om0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922om0 );
      CategoryDefine( FAST_MAX_55922om0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922om0 );
      CategoryDefine( FAST_NOM_55922on0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922on0 );
      CategoryDefine( FAST_MIN_55922on0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922on0 );
      CategoryDefine( FAST_MAX_55922on0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922on0 );
      CategoryDefine( FAST_NOM_55922oo0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oo0 );
      CategoryDefine( FAST_MIN_55922oo0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oo0 );
      CategoryDefine( FAST_MAX_55922oo0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oo0 );
      CategoryDefine( FAST_NOM_55922op0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922op0 );
      CategoryDefine( FAST_MIN_55922op0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922op0 );
      CategoryDefine( FAST_MAX_55922op0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922op0 );
      CategoryDefine( FAST_NOM_55922oq0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oq0 );
      CategoryDefine( FAST_MIN_55922oq0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oq0 );
      CategoryDefine( FAST_MAX_55922oq0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oq0 );
      CategoryDefine( FAST_NOM_55922or0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922or0 );
      CategoryDefine( FAST_MIN_55922or0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922or0 );
      CategoryDefine( FAST_MAX_55922or0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922or0 );
      CategoryDefine( FAST_NOM_55922os0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922os0 );
      CategoryDefine( FAST_MIN_55922os0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922os0 );
      CategoryDefine( FAST_MAX_55922os0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922os0 );
      CategoryDefine( FAST_NOM_55922ot0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ot0 );
      CategoryDefine( FAST_MIN_55922ot0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ot0 );
      CategoryDefine( FAST_MAX_55922ot0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ot0 );
      CategoryDefine( FAST_NOM_55922ou0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ou0 );
      CategoryDefine( FAST_MIN_55922ou0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ou0 );
      CategoryDefine( FAST_MAX_55922ou0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ou0 );
      CategoryDefine( FAST_NOM_55922ov0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ov0 );
      CategoryDefine( FAST_MIN_55922ov0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ov0 );
      CategoryDefine( FAST_MAX_55922ov0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ov0 );
      CategoryDefine( FAST_NOM_55922ow0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ow0 );
      CategoryDefine( FAST_MIN_55922ow0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ow0 );
      CategoryDefine( FAST_MAX_55922ow0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ow0 );
      CategoryDefine( FAST_NOM_55922ox0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922ox0 );
      CategoryDefine( FAST_MIN_55922ox0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922ox0 );
      CategoryDefine( FAST_MAX_55922ox0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922ox0 );
      CategoryDefine( FAST_NOM_55922oy0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oy0 );
      CategoryDefine( FAST_MIN_55922oy0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oy0 );
      CategoryDefine( FAST_MAX_55922oy0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oy0 );
      CategoryDefine( FAST_NOM_55922oz0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922oz0 );
      CategoryDefine( FAST_MIN_55922oz0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922oz0 );
      CategoryDefine( FAST_MAX_55922oz0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922oz0 );
      CategoryDefine( FAST_NOM_55922p00_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p00 );
      CategoryDefine( FAST_MIN_55922p00_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p00 );
      CategoryDefine( FAST_MAX_55922p00_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p00 );
      CategoryDefine( FAST_NOM_55922p10_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p10 );
      CategoryDefine( FAST_MIN_55922p10_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p10 );
      CategoryDefine( FAST_MAX_55922p10_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p10 );
      CategoryDefine( FAST_NOM_55922p20_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p20 );
      CategoryDefine( FAST_MIN_55922p20_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p20 );
      CategoryDefine( FAST_MAX_55922p20_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p20 );
      CategoryDefine( FAST_NOM_55922p30_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p30 );
      CategoryDefine( FAST_MIN_55922p30_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p30 );
      CategoryDefine( FAST_MAX_55922p30_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p30 );
      CategoryDefine( FAST_NOM_55922p40_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p40 );
      CategoryDefine( FAST_MIN_55922p40_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p40 );
      CategoryDefine( FAST_MAX_55922p40_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p40 );
      CategoryDefine( FAST_NOM_55922p50_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p50 );
      CategoryDefine( FAST_MIN_55922p50_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p50 );
      CategoryDefine( FAST_MAX_55922p50_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p50 );
      CategoryDefine( FAST_NOM_55922p60_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p60 );
      CategoryDefine( FAST_MIN_55922p60_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p60 );
      CategoryDefine( FAST_MAX_55922p60_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p60 );
      CategoryDefine( FAST_NOM_55922p70_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p70 );
      CategoryDefine( FAST_MIN_55922p70_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p70 );
      CategoryDefine( FAST_MAX_55922p70_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p70 );
      CategoryDefine( FAST_NOM_55922p80_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p80 );
      CategoryDefine( FAST_MIN_55922p80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p80 );
      CategoryDefine( FAST_MAX_55922p80_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p80 );
      CategoryDefine( FAST_NOM_55922p90_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922p90 );
      CategoryDefine( FAST_MIN_55922p90_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922p90 );
      CategoryDefine( FAST_MAX_55922p90_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922p90 );
      CategoryDefine( FAST_NOM_55922pa0_cat, Fast_Functional, s_ANY,
                      -FAST_NOM_55922pa0 );
      CategoryDefine( FAST_MIN_55922pa0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922pa0 );
      CategoryDefine( FAST_MAX_55922pa0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pa0 );
      CategoryDefine ( FAST_MIN_55922ps0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922ps0 );
      CategoryDefine ( FAST_MIN_55922pu0_cat, Fast_Functional, S_ANY,
		     -FAST_MIN_55922pu0 );
      CategoryDefine ( FAST_MIN_55922py0_cat, Fast_Functional, S_ANY,
		     -FAST_MIN_55922py0 );
      CategoryDefine ( FAST_MIN_55922pz0_cat, Fast_Functional, S_ANY,
		     -FAST_MIN_55922pz0 );
      CategoryDefine ( FAST_MIN_55922q10_cat, Fast_Functional, S_ANY,
	 	     -FAST_MIN_55922q10 );
      CategoryDefine ( FAST_MIN_55922q20_cat, Fast_Functional, S_ANY,
	  	     -FAST_MIN_55922q20 );
      CategoryDefine ( FAST_MIN_55922q30_cat, Fast_Functional, S_ANY,
	   	     -FAST_MIN_55922q30 );
      CategoryDefine ( FAST_MIN_55922q40_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922q40 );
      CategoryDefine ( FAST_MIN_55922q70_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922q70 );
      CategoryDefine ( FAST_MIN_55922qa0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qa0 );
      CategoryDefine ( FAST_MIN_55922qb0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qb0 );
      CategoryDefine ( FAST_MIN_55922qc0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qc0 );
      CategoryDefine ( FAST_MIN_55922qe0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qe0 );
      CategoryDefine ( FAST_MIN_55922qf0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qf0 );
      CategoryDefine ( FAST_MIN_55922qk0_cat, Fast_Functional, S_ANY,
            	     -FAST_MIN_55922qk0 );
      CategoryDefine( FAST_MIN_55922q50_cat, Fast_Functional, s_ANY,
		     -FAST_MIN_55922q50 );
      CategoryDefine( FAST_MIN_55922q60_cat, Fast_Functional, s_ANY,
                                  -FAST_MIN_55922q60 );
      CategoryDefine( FAST_MIN_55922qi0_cat, Fast_Functional, s_ANY,
                                  -FAST_MIN_55922qi0 );
      CategoryDefine( FAST_MIN_55922qd0_cat, Fast_Functional, s_ANY,
                                  -FAST_MIN_55922qd0 );
      CategoryDefine( FAST_MIN_55922q80_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922q80 );
      CategoryDefine( FAST_MIN_55922pt0_cat, Fast_Functional, s_ANY,
                      -FAST_MIN_55922pt0 );
CategoryDefine ( FAST_MIN_55922qt0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qt0 );
CategoryDefine ( FAST_MIN_55922qu0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qu0 );
CategoryDefine ( FAST_MIN_55922qv0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qv0 );
CategoryDefine ( FAST_MIN_55922qw0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qw0 );
CategoryDefine ( FAST_MIN_55922qx0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qx0 );
CategoryDefine ( FAST_MIN_55922qy0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qy0 );
CategoryDefine ( FAST_MIN_55922qz0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922qz0 );
CategoryDefine ( FAST_MIN_55922r00_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r00 );
CategoryDefine ( FAST_MIN_55922r10_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r10 );
CategoryDefine ( FAST_MIN_55922r20_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r20 );
CategoryDefine ( FAST_MIN_55922r30_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r30 );
CategoryDefine ( FAST_MIN_55922r40_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r40 );
CategoryDefine ( FAST_MIN_55922r50_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r50 );
CategoryDefine ( FAST_MIN_55922r60_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r60 );
CategoryDefine ( FAST_MIN_55922r70_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r70 );
CategoryDefine ( FAST_MIN_55922r80_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922r80 );
CategoryDefine ( FAST_MAX_55922ps0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ps0 );
CategoryDefine ( FAST_MAX_55922pt0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922pt0 );
CategoryDefine ( FAST_MAX_55922pu0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922pu0 );
CategoryDefine ( FAST_MAX_55922pv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922pv0 );
CategoryDefine ( FAST_MAX_55922px0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922px0 );
CategoryDefine ( FAST_MAX_55922py0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922py0 );
CategoryDefine ( FAST_MAX_55922pz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922pz0 );
CategoryDefine ( FAST_MAX_55922q00_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q00 );
CategoryDefine ( FAST_MAX_55922q10_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q10 );
CategoryDefine ( FAST_MAX_55922q20_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q20 );
CategoryDefine ( FAST_MAX_55922q30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q30 );
CategoryDefine ( FAST_MAX_55922q40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q40 );
CategoryDefine ( FAST_MAX_55922q50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q50 );
CategoryDefine ( FAST_MAX_55922q60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q60 );
CategoryDefine ( FAST_MAX_55922q70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q70 );
CategoryDefine ( FAST_MAX_55922q80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q80 );
CategoryDefine ( FAST_MAX_55922q90_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922q90 );
CategoryDefine ( FAST_MAX_55922qa0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qa0 );
CategoryDefine ( FAST_MAX_55922qb0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qb0 );
CategoryDefine ( FAST_MAX_55922qc0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qc0 );
CategoryDefine ( FAST_MAX_55922qd0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qd0 );
CategoryDefine ( FAST_MAX_55922qe0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qe0 );
CategoryDefine ( FAST_MAX_55922qf0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qf0 );
CategoryDefine ( FAST_MAX_55922qg0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qg0 );
CategoryDefine ( FAST_MAX_55922qh0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qh0 );
CategoryDefine ( FAST_MAX_55922qi0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qi0 );
CategoryDefine ( FAST_MAX_55922qj0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qj0 );
CategoryDefine ( FAST_MAX_55922qk0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qk0 );
CategoryDefine ( FAST_MAX_55922qt0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qt0 );
CategoryDefine ( FAST_MAX_55922qu0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qu0 );
CategoryDefine ( FAST_MAX_55922qv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qv0 );
CategoryDefine ( FAST_MAX_55922qw0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qw0 );
CategoryDefine ( FAST_MAX_55922qx0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qx0 );
CategoryDefine ( FAST_MAX_55922qy0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qy0 );
CategoryDefine ( FAST_MAX_55922qz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922qz0 );
CategoryDefine ( FAST_MAX_55922r00_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r00 );
CategoryDefine ( FAST_MAX_55922r10_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r10 );
CategoryDefine ( FAST_MAX_55922r20_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r20 );
CategoryDefine ( FAST_MAX_55922r30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r30 );
CategoryDefine ( FAST_MAX_55922r40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r40 );
CategoryDefine ( FAST_MAX_55922r50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r50 );
CategoryDefine ( FAST_MAX_55922r60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r60 );
CategoryDefine ( FAST_MAX_55922r70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r70 );
CategoryDefine ( FAST_MAX_55922r80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922r80 );
      CategoryDefine( FAST_MAX_55922pb0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pb0 );
      CategoryDefine( FAST_MAX_55922pc0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pc0 );
      CategoryDefine( FAST_MAX_55922pd0_cat, Fast_Functional, s_ANY,
                      -FAST_MAX_55922pd0 );
      CategoryDefine( SLOW_LOMIN_55922010_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922010 );  
      CategoryDefine( SLOW_LOMIN_55922120_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922120 );  
      CategoryDefine( SLOW_LOMIN_55922130_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922130 );  
      CategoryDefine( SLOW_LOMIN_55922140_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922140 );  
      CategoryDefine( SLOW_LOMIN_55922150_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922150 );  
      CategoryDefine( SLOW_LOMIN_55922160_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922160 );  
      CategoryDefine( SLOW_LOMIN_55922110_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922110 );  
      CategoryDefine( SLOW_LOMIN_55922080_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922080 );  
      CategoryDefine( SLOW_LOMIN_55922090_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922090 );  
      CategoryDefine( SLOW_LOMIN_55922100_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922100 );  
      CategoryDefine( SLOW_LOMIN_55922310_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922310 );  
      CategoryDefine( SLOW_LOMIN_55922320_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922320 );  
      CategoryDefine( SLOW_LOMIN_55922330_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922330 );  
      CategoryDefine( SLOW_LOMIN_55922340_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922340 );  
      CategoryDefine( SLOW_LOMIN_55922350_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922350 );  
      CategoryDefine( SLOW_LOMIN_55922030_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922030 );  
      CategoryDefine( SLOW_LOMIN_55922370_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922370 );  
      CategoryDefine( SLOW_LOMIN_55922380_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922380 );  
      CategoryDefine( SLOW_LOMIN_55922390_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922390 );  
      CategoryDefine( SLOW_LOMIN_55922040_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922040 );  
      CategoryDefine( SLOW_LOMIN_55922200_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922200 );  
      CategoryDefine( SLOW_LOMIN_55922210_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922210 );  
      CategoryDefine( SLOW_LOMIN_55922220_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922220 );  
      CategoryDefine( SLOW_LOMIN_55922240_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922240 );  
      CategoryDefine( SLOW_LOMIN_55922250_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922250 );  
      CategoryDefine( SLOW_LOMIN_55922260_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922260 );  
      CategoryDefine( SLOW_LOMIN_55922270_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922270 );  
      CategoryDefine( SLOW_LOMIN_55922280_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922280 );  
      CategoryDefine( SLOW_LOMIN_55922290_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922290 );  
      CategoryDefine( SLOW_LOMIN_55922rk0_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922rk0 );  
      CategoryDefine( SLOW_LOMIN_55922300_cat, Slow_Functional , s_ANY, 
                                     -SLOW_LOMIN_55922300 );  
      CategoryDefine( FAST_LOMIN_55922kz0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922kz0 );  
      CategoryDefine( FAST_LOMIN_55922l50_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922l50 );  
      CategoryDefine( FAST_LOMIN_55922l90_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922l90 );  
      CategoryDefine( FAST_LOMIN_55922lg0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lg0 );  
      CategoryDefine( FAST_LOMIN_55922lh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lh0 );  
      CategoryDefine( FAST_LOMIN_55922li0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922li0 );  
      CategoryDefine( FAST_LOMIN_55922lm0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lm0 );  
      CategoryDefine( FAST_LOMIN_55922lq0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lq0 );  
      CategoryDefine( FAST_LOMIN_55922lu0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lu0 );  
      CategoryDefine( FAST_LOMIN_55922lv0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lv0 );  
      CategoryDefine( FAST_LOMIN_55922lw0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lw0 );  
      CategoryDefine( FAST_LOMIN_55922lx0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lx0 );  
      CategoryDefine( FAST_LOMIN_55922m10_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922m10 );  
      CategoryDefine( FAST_LOMIN_55922m50_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922m50 );  
      CategoryDefine( FAST_LOMIN_55922la0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922la0 );  
      CategoryDefine( FAST_LOMIN_55922lb0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lb0 );  
      CategoryDefine( FAST_LOMIN_55922lc0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922lc0 );  
      CategoryDefine( FAST_LOMIN_55922mm0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922mm0 );  
      CategoryDefine( FAST_LOMIN_55922mn0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922mn0 );

{hijirev15a...}
      CategoryDefine( FAST_LOMIN_55922s10_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922s10 );  
      CategoryDefine( FAST_LOMIN_55922s20_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922s20 );  
{...hijirev15a}

      CategoryDefine( FAST_LOMIN_55922mb0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922mb0 );
      CategoryDefine( FAST_LOMIN_55922md0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922md0 );
      CategoryDefine( FAST_LOMIN_55922mh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922mh0 );
      CategoryDefine( FAST_LOMIN_55922mj0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922mj0 );
      CategoryDefine( FAST_LOMIN_55922gh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922gh0 );
      CategoryDefine( FAST_LOMIN_55922gi0_cat, Fast_Functional , s_ANY, 
                                     -FAST_LOMIN_55922gi0 );
      CategoryDefine( SLOW_HIMAX_55922010_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922010 );  
      CategoryDefine( SLOW_HIMAX_55922120_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922120 );  
      CategoryDefine( SLOW_HIMAX_55922130_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922130 );  
      CategoryDefine( SLOW_HIMAX_55922140_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922140 );  
      CategoryDefine( SLOW_HIMAX_55922150_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922150 );  
      CategoryDefine( SLOW_HIMAX_55922160_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922160 );  
      CategoryDefine( SLOW_HIMAX_55922110_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922110 );  
      CategoryDefine( SLOW_HIMAX_55922080_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922080 );  
      CategoryDefine( SLOW_HIMAX_55922090_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922090 );  
      CategoryDefine( SLOW_HIMAX_55922100_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922100 );  
      CategoryDefine( SLOW_HIMAX_55922310_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922310 );  
      CategoryDefine( SLOW_HIMAX_55922320_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922320 );  
      CategoryDefine( SLOW_HIMAX_55922330_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922330 );  
      CategoryDefine( SLOW_HIMAX_55922340_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922340 );  
      CategoryDefine( SLOW_HIMAX_55922350_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922350 );  
      CategoryDefine( SLOW_HIMAX_55922030_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922030 );  
      CategoryDefine( SLOW_HIMAX_55922370_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922370 );  
      CategoryDefine( SLOW_HIMAX_55922380_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922380 );  
      CategoryDefine( SLOW_HIMAX_55922390_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922390 );  
      CategoryDefine( SLOW_HIMAX_55922040_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922040 );  
      CategoryDefine( SLOW_HIMAX_55922200_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922200 );  
      CategoryDefine( SLOW_HIMAX_55922210_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922210 );  
      CategoryDefine( SLOW_HIMAX_55922220_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922220 );  
      CategoryDefine( SLOW_HIMAX_55922240_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922240 );  
      CategoryDefine( SLOW_HIMAX_55922250_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922250 );  
      CategoryDefine( SLOW_HIMAX_55922260_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922260 );  
      CategoryDefine( SLOW_HIMAX_55922270_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922270 );  
      CategoryDefine( SLOW_HIMAX_55922280_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922280 );  
      CategoryDefine( SLOW_HIMAX_55922290_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922290 );  
      CategoryDefine( SLOW_HIMAX_55922rk0_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922rk0 );  
      CategoryDefine( SLOW_HIMAX_55922300_cat, Slow_Functional , s_ANY, 
                                     -SLOW_HIMAX_55922300 );  
      CategoryDefine( FAST_HIMAX_55922kz0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922kz0 );  
      CategoryDefine( FAST_HIMAX_55922l50_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922l50 );  
      CategoryDefine( FAST_HIMAX_55922l90_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922l90 );  
      CategoryDefine( FAST_HIMAX_55922lg0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lg0 );  
      CategoryDefine( FAST_HIMAX_55922lh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lh0 );  
      CategoryDefine( FAST_HIMAX_55922li0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922li0 );  
      CategoryDefine( FAST_HIMAX_55922lm0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lm0 );  
      CategoryDefine( FAST_HIMAX_55922lq0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lq0 );  
      CategoryDefine( FAST_HIMAX_55922lu0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lu0 );  
      CategoryDefine( FAST_HIMAX_55922lv0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lv0 );  
      CategoryDefine( FAST_HIMAX_55922lw0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lw0 );  
      CategoryDefine( FAST_HIMAX_55922lx0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lx0 );  
      CategoryDefine( FAST_HIMAX_55922m10_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922m10 );  
      CategoryDefine( FAST_HIMAX_55922m50_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922m50 );  
      CategoryDefine( FAST_HIMAX_55922la0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922la0 );  
      CategoryDefine( FAST_HIMAX_55922lb0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lb0 );  
      CategoryDefine( FAST_HIMAX_55922lc0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922lc0 );  
      CategoryDefine( FAST_HIMAX_55922mm0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922mm0 );  
      CategoryDefine( FAST_HIMAX_55922mn0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922mn0 );

{hijirev15a...}
      CategoryDefine( FAST_HIMAX_55922s10_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922s10 );  
      CategoryDefine( FAST_HIMAX_55922s20_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922s20 );  
{...hijirev15a}

      CategoryDefine( FAST_HIMAX_55922mb0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922mb0 );  
      CategoryDefine( FAST_HIMAX_55922md0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922md0 );  
      CategoryDefine( FAST_HIMAX_55922mh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922mh0 );  
      CategoryDefine( FAST_HIMAX_55922mj0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922mj0 );  
      CategoryDefine( FAST_HIMAX_55922gh0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922gh0 );  
      CategoryDefine( FAST_HIMAX_55922gi0_cat, Fast_Functional , s_ANY, 
                                     -FAST_HIMAX_55922gi0 );  
      CategoryDefine( In_leakage_cat, DC_Leakage, s_ANY,
                      -IIH_IIL );
      CategoryDefine( Vout_cat, DC_Leakage, s_ANY,
                      -VOUT );
      CategoryDefine( IO_Leakage_cat, DC_Leakage, s_ANY,
                      -LEAKAGE, -OSC_TEST );


{...rescrn09}

{...ftstack01a}

CategoryDefine ( MEM_RET_cat, Fast_Functional, S_ANY,
	     -MEM_RET_ICCQ );  {ftvsrev12c}

CategoryDefine ( FAST_MAX_55922ro0_cat, HWA_FAIL, S_ANY,
	     -FAST_MAX_55922ro0 );
CategoryDefine ( FAST_MIN_55922ro0_cat, HWA_FAIL, S_ANY,
	     -FAST_MIN_55922ro0 );
CategoryDefine ( FAST_MAX_55922rn0_cat, HWA_FAIL, S_ANY,
	     -FAST_MAX_55922rn0 );
CategoryDefine( FAST_MIN_55922rn0_2_cat, HWA_FAIL, s_ANY,
             -FAST_MIN_55922rn0_2 );

{hijirev15a...}
CategoryDefine ( FAST_MAX_55922rz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rz0 );
CategoryDefine ( FAST_MAX_55922ry0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ry0 );
CategoryDefine ( FAST_MAX_55922rw0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rw0 );
CategoryDefine ( FAST_MAX_55922rv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rv0 );
CategoryDefine ( FAST_MIN_55922rz0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922rz0 );
CategoryDefine ( FAST_MIN_55922ry0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ry0 );
CategoryDefine ( FAST_MIN_55922rw0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922rw0 );
CategoryDefine ( FAST_MIN_55922rv0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922rv0 );
CategoryDefine ( FAST_MAX_55922rt0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rt0 );
CategoryDefine ( FAST_MAX_55922ru0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ru0 );
CategoryDefine ( FAST_MAX_55922rs0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rs0 );
CategoryDefine ( FAST_MAX_55922rr0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rr0 );
CategoryDefine ( FAST_MAX_55922rq0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rq0 );
CategoryDefine ( FAST_MAX_55922rp0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rp0 );
CategoryDefine ( FAST_MAX_55922rx0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922rx0 );

CategoryDefine( FAST_MIN_55922rt0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922rt0_2 );
CategoryDefine( FAST_MIN_55922ru0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922ru0_2 );
{ftrev23a...}
CategoryDefine( FAST_MIN_55922ut0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922ut0_2 );
CategoryDefine( FAST_MIN_55922uu0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922uu0_2 );
{...ftrev23a}
CategoryDefine( FAST_MIN_55922rs0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922rs0_2 );
CategoryDefine( FAST_MIN_55922rr0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922rr0_2 );
CategoryDefine( FAST_MIN_55922rq0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922rq0_2 );
CategoryDefine( FAST_MIN_55922rp0_2_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922rp0_2 );
{...hijirev15a}



{ftrev18b...}
CategoryDefine ( FAST_MAX_55922s30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s30 );
CategoryDefine ( FAST_MAX_55922s40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s40 );
CategoryDefine ( FAST_MAX_55922s50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s50 );
CategoryDefine ( FAST_MAX_55922tu0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tu0 );{rescreen08}
CategoryDefine ( FAST_MAX_55922s60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s60 );
CategoryDefine ( FAST_MAX_55922s70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s70 );
CategoryDefine ( FAST_MAX_55922s80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s80 );
CategoryDefine ( FAST_MAX_55922s90_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922s90 );
CategoryDefine ( FAST_MAX_55922sa0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sa0 );
CategoryDefine ( FAST_MAX_55922sb0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sb0 );
CategoryDefine ( FAST_MAX_55922sc0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sc0 );
CategoryDefine ( FAST_MAX_55922sd0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sd0 );
CategoryDefine ( FAST_MAX_55922se0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922se0 );
CategoryDefine ( FAST_MAX_55922sf0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sf0 );
CategoryDefine ( FAST_MAX_55922sg0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sg0 );
CategoryDefine ( FAST_MAX_55922sh0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sh0 );
CategoryDefine ( FAST_MAX_55922si0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922si0 );
CategoryDefine ( FAST_MAX_55922sj0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sj0 );
CategoryDefine ( FAST_MAX_55922sk0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sk0 );
CategoryDefine ( FAST_MAX_55922sl0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sl0 );
CategoryDefine ( FAST_MAX_55922sm0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sm0 );
CategoryDefine ( FAST_MAX_55922sn0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sn0 );
CategoryDefine ( FAST_MAX_55922so0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922so0 );
CategoryDefine ( FAST_MAX_55922sp0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sp0 );{rescreen08}
CategoryDefine ( FAST_MAX_55922sq0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sq0 );{rescreen08}
CategoryDefine ( FAST_MAX_55922tc0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tc0 );{rescrn09}
CategoryDefine ( FAST_MAX_55922ss0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ss0 );
CategoryDefine ( FAST_MAX_55922st0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922st0 );
CategoryDefine ( FAST_MAX_55922su0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922su0 );
CategoryDefine ( FAST_MAX_55922sv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sv0 );
CategoryDefine ( FAST_MAX_55922sw0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sw0 );
CategoryDefine ( FAST_MAX_55922sx0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sx0 );
CategoryDefine ( FAST_MAX_55922sy0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sy0 );
CategoryDefine ( FAST_MAX_55922sz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922sz0 );
CategoryDefine ( FAST_MAX_55922t00_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t00 );
CategoryDefine ( FAST_MAX_55922t10_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t10 );
CategoryDefine ( FAST_MAX_55922t20_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t20 );
CategoryDefine ( FAST_MAX_55922t30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t30 );
CategoryDefine ( FAST_MAX_55922t40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t40 );
CategoryDefine ( FAST_MAX_55922t50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t50 );
CategoryDefine ( FAST_MAX_55922t60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t60 );
CategoryDefine ( FAST_MAX_55922t70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t70 );
CategoryDefine ( FAST_MAX_55922t80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t80 );
CategoryDefine ( FAST_MAX_55922t90_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922t90 );{protorev05}
CategoryDefine ( FAST_MAX_55922ta0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ta0 );
CategoryDefine ( FAST_MAX_55922tb0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tb0 );
CategoryDefine ( FAST_MAX_55922tt0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tt0 );{rescreen08}

{rescrn09...}
CategoryDefine ( FAST_MAX_55922tv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tv0 );
CategoryDefine ( FAST_MAX_55922tw0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tw0 );
CategoryDefine ( FAST_MAX_55922tx0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tx0 );
CategoryDefine ( FAST_MAX_55922ty0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ty0 );
CategoryDefine ( FAST_MAX_55922tz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tz0 );
CategoryDefine ( FAST_MAX_55922u00_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u00 );
CategoryDefine ( FAST_MAX_55922u10_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u10 );
CategoryDefine ( FAST_MAX_55922u20_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u20 );
CategoryDefine ( FAST_MAX_55922u30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u30 );
CategoryDefine ( FAST_MAX_55922u40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u40 );
CategoryDefine ( FAST_MAX_55922u50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u50 );
CategoryDefine ( FAST_MAX_55922u60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u60 );
CategoryDefine ( FAST_MAX_55922u70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u70 );
CategoryDefine ( FAST_MAX_55922u80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u80 );
CategoryDefine ( FAST_MAX_55922u90_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922u90 );
CategoryDefine ( FAST_MAX_55922ua0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ua0 );
CategoryDefine ( FAST_MAX_55922ub0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ub0 );
CategoryDefine ( FAST_MAX_55922uc0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uc0 );
CategoryDefine ( FAST_MAX_55922ud0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ud0 );
CategoryDefine ( FAST_MAX_55922ue0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ue0 );
CategoryDefine ( FAST_MAX_55922uf0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uf0 );
CategoryDefine ( FAST_MAX_55922ug0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ug0 );
{...rescrn09}




{rescrn05...}
CategoryDefine ( FAST_MAX_55922td0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922td0 );
CategoryDefine ( FAST_MAX_55922te0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922te0 );
CategoryDefine ( FAST_MAX_55922tf0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tf0 );
CategoryDefine ( FAST_MAX_55922tk0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tk0 );
CategoryDefine ( FAST_MAX_55922tg0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tg0 );
CategoryDefine ( FAST_MAX_55922ti0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ti0 );
CategoryDefine ( FAST_MAX_55922tj0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tj0 );
CategoryDefine ( FAST_MAX_55922th0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922th0 );
CategoryDefine ( FAST_MAX_55922tl0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tl0 );
CategoryDefine ( FAST_MAX_55922tn0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922tn0 );
CategoryDefine ( FAST_MAX_55922ts0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ts0 );{rescreen08}
{ftrev23a...}
CategoryDefine ( FAST_MAX_55922uy0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uy0 );
CategoryDefine ( FAST_MAX_55922uz0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uz0 );
{...ftrev23a}
CategoryDefine ( FAST_MAX_55922uh0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uh0 );{rescrn09}
CategoryDefine ( FAST_MAX_55922ui0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ui0 );{rescrn09}
{ftrev23a...}
CategoryDefine ( FAST_MAX_55922uj0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uj0 );
CategoryDefine ( FAST_MAX_55922uk0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uk0 );
CategoryDefine ( FAST_MAX_55922ul0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ul0 );
CategoryDefine ( FAST_MAX_55922um0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922um0 );
CategoryDefine ( FAST_MAX_55922un0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922un0 );
CategoryDefine ( FAST_MAX_55922uo0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uo0 );
CategoryDefine ( FAST_MAX_55922up0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922up0 );
CategoryDefine ( FAST_MAX_55922uq0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uq0 );
CategoryDefine ( FAST_MAX_55922ur0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ur0 );
CategoryDefine ( FAST_MAX_55922us0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922us0 );
CategoryDefine ( FAST_MAX_55922ut0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922ut0 );
CategoryDefine ( FAST_MAX_55922uu0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uu0 );
CategoryDefine ( FAST_MAX_55922uv0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uv0 );
CategoryDefine ( FAST_MAX_55922uw0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922uw0 );
{...ftrev23a}

CategoryDefine ( FAST_MAX_55922to0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922to0 );
CategoryDefine ( FAST_NOM_55922td0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922td0 );
CategoryDefine ( FAST_NOM_55922te0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922te0 );
CategoryDefine ( FAST_NOM_55922tf0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tf0 );
CategoryDefine ( FAST_NOM_55922tk0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tk0 );
CategoryDefine ( FAST_NOM_55922tg0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tg0 );
CategoryDefine ( FAST_NOM_55922ti0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922ti0 );
CategoryDefine ( FAST_NOM_55922tj0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tj0 );
CategoryDefine ( FAST_NOM_55922th0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922th0 );
CategoryDefine ( FAST_NOM_55922tl0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tl0 );
CategoryDefine ( FAST_NOM_55922to0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922to0 );
CategoryDefine ( FAST_NOM_55922tn0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922tn0 );
CategoryDefine ( FAST_NOM_55922ts0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922ts0 );{rescreen08}
{ftrev23a...}
CategoryDefine ( FAST_NOM_55922uy0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922uy0 );
CategoryDefine ( FAST_NOM_55922uz0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922uz0 );
{...ftrev23a}
CategoryDefine ( FAST_NOM_55922uh0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922uh0 );{rescrn09}
CategoryDefine ( FAST_NOM_55922ui0_cat, Fast_Functional, S_ANY,
	     -FAST_NOM_55922ui0 );{rescrn09}
CategoryDefine( FAST_MIN_55922td0_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922td0 );
CategoryDefine( FAST_MIN_55922te0_cat, Fast_Functional, s_ANY,
             -FAST_MIN_55922te0 );
CategoryDefine ( FAST_MIN_55922tf0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tf0 );
CategoryDefine ( FAST_MIN_55922tk0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tk0 );
CategoryDefine ( FAST_MIN_55922tg0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tg0 );
CategoryDefine ( FAST_MIN_55922ti0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ti0 );
CategoryDefine ( FAST_MIN_55922tj0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tj0 );
CategoryDefine ( FAST_MIN_55922th0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922th0 );
CategoryDefine ( FAST_MIN_55922tl0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tl0 );
CategoryDefine ( FAST_MIN_55922to0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922to0 );
CategoryDefine ( FAST_MIN_55922tn0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922tn0 );
CategoryDefine ( FAST_MIN_55922ts0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ts0 );{rescreen08}
{ftrev23a...}
CategoryDefine ( FAST_MIN_55922uy0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uy0 );
CategoryDefine ( FAST_MIN_55922uz0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uz0 );
{...ftrev23a}
CategoryDefine ( FAST_MIN_55922uh0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uh0 );{rescrn09}
CategoryDefine ( FAST_MIN_55922ui0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ui0 );{rescrn09}
{...rescrn05}
{ftrev23a...}
CategoryDefine ( FAST_MIN_55922uj0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uj0 );
CategoryDefine ( FAST_MIN_55922uk0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uk0 );
CategoryDefine ( FAST_MIN_55922ul0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ul0 );
CategoryDefine ( FAST_MIN_55922um0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922um0 );
CategoryDefine ( FAST_MIN_55922un0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922un0 );
CategoryDefine ( FAST_MIN_55922uo0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uo0 );
CategoryDefine ( FAST_MIN_55922up0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922up0 );
CategoryDefine ( FAST_MIN_55922uq0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uq0 );
CategoryDefine ( FAST_MIN_55922ur0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ur0 );
CategoryDefine ( FAST_MIN_55922us0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922us0 );
CategoryDefine ( FAST_MIN_55922ut0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922ut0 );
CategoryDefine ( FAST_MIN_55922uu0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uu0 );
CategoryDefine ( FAST_MIN_55922uv0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uv0 );
CategoryDefine ( FAST_MIN_55922uw0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922uw0 );
{...ftrev23a}

{ftvsrev11e...}
CategoryDefine ( FAST_MAX_55922v00_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v00 );
CategoryDefine ( FAST_MAX_55922v10_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v10 );
CategoryDefine ( FAST_MAX_55922v20_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v20 );
CategoryDefine ( FAST_MAX_55922v30_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v30 );
CategoryDefine ( FAST_MAX_55922v40_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v40 );
CategoryDefine ( FAST_MAX_55922v50_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v50 );
CategoryDefine ( FAST_MAX_55922v60_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v60 );
CategoryDefine ( FAST_MAX_55922v70_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v70 );{rev17a}
CategoryDefine ( FAST_MAX_55922v80_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v80 );{rev17a}
CategoryDefine ( FAST_MAX_55922v90_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922v90 );{rev17a}

CategoryDefine ( FAST_MAX_55922vd0_cat, Fast_Functional, S_ANY,
	     -FAST_MAX_55922vd0 );{rev20a}

CategoryDefine ( FAST_MIN_55922v00_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v00 );
CategoryDefine ( FAST_MIN_55922v10_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v10 );
CategoryDefine ( FAST_MIN_55922v20_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v20 );
CategoryDefine ( FAST_MIN_55922v30_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v30 );
CategoryDefine ( FAST_MIN_55922v40_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v40 );
CategoryDefine ( FAST_MIN_55922v50_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v50 );
CategoryDefine ( FAST_MIN_55922v60_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v60 );
CategoryDefine ( FAST_MIN_55922v70_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v70 );{rev17a}
CategoryDefine ( FAST_MIN_55922v80_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v80 );{rev17a}
CategoryDefine ( FAST_MIN_55922v90_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922v90 );{rev17a}

CategoryDefine ( FAST_MIN_55922vd0_cat, Fast_Functional, S_ANY,
	     -FAST_MIN_55922vd0 );{rev20a}

{...ftvsrev11e}



{DSPX}

CategoryDefine( FAST_MIN_55922pb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922pb0  );
CategoryDefine( FAST_MIN_55922pc0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922pc0  );
CategoryDefine( FAST_MIN_55922pd0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922pd0  );
CategoryDefine( FAST_MIN_tc5_1k_1_cat,   Speed_below_bin1, s_ANY,
 -FAST_MIN_tc5_1k  );
CategoryDefine( FAST_MIN_55922480_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922480  );
CategoryDefine( FAST_MIN_55922490_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922490  );
CategoryDefine( FAST_MIN_55922500_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922500  );
CategoryDefine( FAST_MIN_55922510_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922510  );
CategoryDefine( FAST_MIN_55922520_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922520  );
CategoryDefine( FAST_MIN_55922530_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922530  );
CategoryDefine( FAST_MIN_55922540_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922540  );
CategoryDefine( FAST_MIN_55922550_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922550  );
CategoryDefine( FAST_MIN_55922560_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922560  );
CategoryDefine( FAST_MIN_55922570_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922570  );
CategoryDefine( FAST_MIN_55922580_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922580  );
CategoryDefine( FAST_MIN_55922590_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922590  );
CategoryDefine( FAST_MIN_55922620_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922620  );
CategoryDefine( FAST_MIN_55922630_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922630  );
CategoryDefine( FAST_MIN_55922640_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922640  );
CategoryDefine( FAST_MIN_55922650_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922650  );
CategoryDefine( FAST_MIN_55922670_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922670  );
CategoryDefine( FAST_MIN_55922680_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922680  );
CategoryDefine( FAST_MIN_55922690_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922690  );
CategoryDefine( FAST_MIN_55922700_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922700  );
CategoryDefine( FAST_MIN_55922710_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922710  );
CategoryDefine( FAST_MIN_55922720_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922720  );
CategoryDefine( FAST_MIN_55922730_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922730  );
CategoryDefine( FAST_MIN_55922740_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922740  );
CategoryDefine( FAST_MIN_55922750_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922750  );
CategoryDefine( FAST_MIN_55922760_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922760  );
CategoryDefine( FAST_MIN_55922800_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922800  );
CategoryDefine( FAST_MIN_55922810_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922810  );
CategoryDefine( FAST_MIN_55922820_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922820  );
CategoryDefine( FAST_MIN_55922830_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922830  );
CategoryDefine( FAST_MIN_55922840_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922840  );
CategoryDefine( FAST_MIN_55922wi0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922wi0  );
CategoryDefine( FAST_MIN_55922wl0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922wl0  );
CategoryDefine( FAST_MIN_MGS3LONG_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_MGS3LONG  );
CategoryDefine( FAST_MIN_55922va0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922va0  );
CategoryDefine( FAST_MIN_55922vb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922vb0  );
CategoryDefine( FAST_MIN_55922vc0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922vc0  );
CategoryDefine( FAST_MIN_55922ve0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922ve0  );
CategoryDefine( FAST_MIN_55922rn0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922rn0  );
CategoryDefine( FAST_MIN_55922s30_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922s30  );
CategoryDefine( FAST_MIN_55922s40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922s40  );
CategoryDefine( FAST_MIN_55922s50_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922s50  );
CategoryDefine( FAST_MIN_55922tu0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922tu0  );
CategoryDefine( FAST_MIN_55922s60_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922s60  );
CategoryDefine( FAST_MIN_55922s70_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922s70  );
CategoryDefine( FAST_MIN_55922s80_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922s80  );
CategoryDefine( FAST_MIN_55922s90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922s90  );
CategoryDefine( FAST_MIN_55922sa0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sa0  );
CategoryDefine( FAST_MIN_55922sb0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sb0  );
CategoryDefine( FAST_MIN_55922sc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sc0  );
CategoryDefine( FAST_MIN_55922sd0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sd0  );
CategoryDefine( FAST_MIN_55922se0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922se0  );
CategoryDefine( FAST_MIN_55922sf0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sf0  );
CategoryDefine( FAST_MIN_55922sg0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sg0  );
CategoryDefine( FAST_MIN_55922sh0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sh0  );
CategoryDefine( FAST_MIN_55922si0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922si0  );
CategoryDefine( FAST_MIN_55922sj0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sj0  );
CategoryDefine( FAST_MIN_55922sk0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sk0  );
CategoryDefine( FAST_MIN_55922sl0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sl0  );
CategoryDefine( FAST_MIN_55922sm0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sm0  );
CategoryDefine( FAST_MIN_55922sn0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sn0  );
CategoryDefine( FAST_MIN_55922so0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922so0  );
CategoryDefine( FAST_MIN_55922sp0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sp0  );
CategoryDefine( FAST_MIN_55922sq0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sq0  );
CategoryDefine( FAST_MIN_55922tc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tc0  );
CategoryDefine( FAST_MIN_55922ss0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922ss0  );
CategoryDefine( FAST_MIN_55922st0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922st0  );
CategoryDefine( FAST_MIN_55922su0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922su0  );
CategoryDefine( FAST_MIN_55922sv0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sv0  );
CategoryDefine( FAST_MIN_55922sw0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sw0  );
CategoryDefine( FAST_MIN_55922sx0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sx0  );
CategoryDefine( FAST_MIN_55922sy0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922sy0  );
CategoryDefine( FAST_MIN_55922sz0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922sz0  );
CategoryDefine( FAST_MIN_55922t00_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t00  );
CategoryDefine( FAST_MIN_55922t10_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t10  );
CategoryDefine( FAST_MIN_55922t20_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t20  );
CategoryDefine( FAST_MIN_55922t30_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t30  );
CategoryDefine( FAST_MIN_55922t40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922t40  );
CategoryDefine( FAST_MIN_55922t50_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t50  );
CategoryDefine( FAST_MIN_55922t60_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922t60  );
CategoryDefine( FAST_MIN_55922t70_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t70  );
CategoryDefine( FAST_MIN_55922t80_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922t80  );
CategoryDefine( FAST_MIN_55922t90_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922t90  );
CategoryDefine( FAST_MIN_55922ta0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922ta0  );
CategoryDefine( FAST_MIN_55922tb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922tb0  );
CategoryDefine( FAST_MIN_55922tt0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tt0  );
CategoryDefine( FAST_MIN_55922tv0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tv0  );
CategoryDefine( FAST_MIN_55922tw0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tw0  );
CategoryDefine( FAST_MIN_55922tx0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tx0  );
CategoryDefine( FAST_MIN_55922ty0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ty0  );
CategoryDefine( FAST_MIN_55922tz0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922tz0  );
CategoryDefine( FAST_MIN_55922u00_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922u00  );
CategoryDefine( FAST_MIN_55922u10_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922u10  );
CategoryDefine( FAST_MIN_55922u20_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922u20  );
CategoryDefine( FAST_MIN_55922u30_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922u30  );
CategoryDefine( FAST_MIN_55922u40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922u40  );
CategoryDefine( FAST_MIN_55922u50_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922u50  );
CategoryDefine( FAST_MIN_55922u60_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922u60  );
CategoryDefine( FAST_MIN_55922u70_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922u70  );
CategoryDefine( FAST_MIN_55922u80_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922u80  );
CategoryDefine( FAST_MIN_55922u90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922u90  );
CategoryDefine( FAST_MIN_55922ua0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ua0  );
CategoryDefine( FAST_MIN_55922ub0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ub0  );
CategoryDefine( FAST_MIN_55922uc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922uc0  );
CategoryDefine( FAST_MIN_55922ud0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ud0  );
CategoryDefine( FAST_MIN_55922ue0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ue0  );
CategoryDefine( FAST_MIN_55922uf0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922uf0  );
CategoryDefine( FAST_MIN_55922ug0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ug0  );
CategoryDefine( FAST_MIN_55922rt0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922rt0  );
CategoryDefine( FAST_MIN_55922ru0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922ru0  );

CategoryDefine( FAST_MIN_55922rs0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922rs0  );
CategoryDefine( FAST_MIN_55922rr0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922rr0  );
CategoryDefine( FAST_MIN_55922rq0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922rq0  );
CategoryDefine( FAST_MIN_55922rp0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922rp0  );
CategoryDefine( FAST_MIN_55922qh0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922qh0  );
CategoryDefine( FAST_MIN_55922qj0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922qj0  );
CategoryDefine( FAST_MIN_55922pv0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922pv0  );
CategoryDefine( FAST_MIN_55922q00_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922q00  );
CategoryDefine( FAST_MIN_55922q90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922q90  );
CategoryDefine( FAST_MIN_55922qg0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MIN_55922qg0  );
CategoryDefine( FAST_MIN_55922px0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MIN_55922px0  );


CategoryDefine( FAST_MAX_55922pb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922pb0  );
CategoryDefine( FAST_MAX_55922pc0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922pc0  );
CategoryDefine( FAST_MAX_55922pd0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922pd0  );
CategoryDefine( FAST_MAX_tc5_1k_1_cat,   Speed_below_bin1, s_ANY,
 -FAST_MAX_tc5_1k  );
CategoryDefine( FAST_MAX_55922480_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922480  );
CategoryDefine( FAST_MAX_55922490_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922490  );
CategoryDefine( FAST_MAX_55922500_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922500  );
CategoryDefine( FAST_MAX_55922510_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922510  );
CategoryDefine( FAST_MAX_55922520_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922520  );
CategoryDefine( FAST_MAX_55922530_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922530  );
CategoryDefine( FAST_MAX_55922540_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922540  );
CategoryDefine( FAST_MAX_55922550_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922550  );
CategoryDefine( FAST_MAX_55922560_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922560  );
CategoryDefine( FAST_MAX_55922570_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922570  );
CategoryDefine( FAST_MAX_55922580_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922580  );
CategoryDefine( FAST_MAX_55922590_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922590  );
CategoryDefine( FAST_MAX_55922620_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922620  );
CategoryDefine( FAST_MAX_55922630_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922630  );
CategoryDefine( FAST_MAX_55922640_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922640  );
CategoryDefine( FAST_MAX_55922650_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922650  );
CategoryDefine( FAST_MAX_55922670_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922670  );
CategoryDefine( FAST_MAX_55922680_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922680  );
CategoryDefine( FAST_MAX_55922690_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922690  );
CategoryDefine( FAST_MAX_55922700_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922700  );
CategoryDefine( FAST_MAX_55922710_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922710  );
CategoryDefine( FAST_MAX_55922720_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922720  );
CategoryDefine( FAST_MAX_55922730_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922730  );
CategoryDefine( FAST_MAX_55922740_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922740  );
CategoryDefine( FAST_MAX_55922750_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922750  );
CategoryDefine( FAST_MAX_55922760_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922760  );
CategoryDefine( FAST_MAX_55922800_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922800  );
CategoryDefine( FAST_MAX_55922810_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922810  );
CategoryDefine( FAST_MAX_55922820_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922820  );
CategoryDefine( FAST_MAX_55922830_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922830  );
CategoryDefine( FAST_MAX_55922840_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922840  );
CategoryDefine( FAST_MAX_55922wi0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922wi0  );
CategoryDefine( FAST_MAX_55922wl0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922wl0  );
CategoryDefine( FAST_MAX_MGS3LONG_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_MGS3LONG  );
CategoryDefine( FAST_MAX_55922va0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922va0  );
CategoryDefine( FAST_MAX_55922vb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922vb0  );
CategoryDefine( FAST_MAX_55922vc0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922vc0  );
CategoryDefine( FAST_MAX_55922ve0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922ve0  );
CategoryDefine( FAST_MAX_55922rn0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922rn0  );
CategoryDefine( FAST_MAX_55922s30_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922s30  );
CategoryDefine( FAST_MAX_55922s40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922s40  );
CategoryDefine( FAST_MAX_55922s50_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922s50  );
CategoryDefine( FAST_MAX_55922tu0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922tu0  );
CategoryDefine( FAST_MAX_55922s60_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922s60  );
CategoryDefine( FAST_MAX_55922s70_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922s70  );
CategoryDefine( FAST_MAX_55922s80_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922s80  );
CategoryDefine( FAST_MAX_55922s90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922s90  );
CategoryDefine( FAST_MAX_55922sa0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sa0  );
CategoryDefine( FAST_MAX_55922sb0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sb0  );
CategoryDefine( FAST_MAX_55922sc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sc0  );
CategoryDefine( FAST_MAX_55922sd0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sd0  );
CategoryDefine( FAST_MAX_55922se0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922se0  );
CategoryDefine( FAST_MAX_55922sf0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sf0  );
CategoryDefine( FAST_MAX_55922sg0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sg0  );
CategoryDefine( FAST_MAX_55922sh0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sh0  );
CategoryDefine( FAST_MAX_55922si0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922si0  );
CategoryDefine( FAST_MAX_55922sj0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sj0  );
CategoryDefine( FAST_MAX_55922sk0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sk0  );
CategoryDefine( FAST_MAX_55922sl0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sl0  );
CategoryDefine( FAST_MAX_55922sm0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sm0  );
CategoryDefine( FAST_MAX_55922sn0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sn0  );
CategoryDefine( FAST_MAX_55922so0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922so0  );
CategoryDefine( FAST_MAX_55922sp0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sp0  );
CategoryDefine( FAST_MAX_55922sq0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sq0  );
CategoryDefine( FAST_MAX_55922tc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tc0  );
CategoryDefine( FAST_MAX_55922ss0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922ss0  );
CategoryDefine( FAST_MAX_55922st0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922st0  );
CategoryDefine( FAST_MAX_55922su0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922su0  );
CategoryDefine( FAST_MAX_55922sv0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sv0  );
CategoryDefine( FAST_MAX_55922sw0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sw0  );
CategoryDefine( FAST_MAX_55922sx0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sx0  );
CategoryDefine( FAST_MAX_55922sy0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922sy0  );
CategoryDefine( FAST_MAX_55922sz0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922sz0  );
CategoryDefine( FAST_MAX_55922t00_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t00  );
CategoryDefine( FAST_MAX_55922t10_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t10  );
CategoryDefine( FAST_MAX_55922t20_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t20  );
CategoryDefine( FAST_MAX_55922t30_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t30  );
CategoryDefine( FAST_MAX_55922t40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922t40  );
CategoryDefine( FAST_MAX_55922t50_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t50  );
CategoryDefine( FAST_MAX_55922t60_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922t60  );
CategoryDefine( FAST_MAX_55922t70_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t70  );
CategoryDefine( FAST_MAX_55922t80_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922t80  );
CategoryDefine( FAST_MAX_55922t90_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922t90  );
CategoryDefine( FAST_MAX_55922ta0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922ta0  );
CategoryDefine( FAST_MAX_55922tb0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922tb0  );
CategoryDefine( FAST_MAX_55922tt0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tt0  );
CategoryDefine( FAST_MAX_55922tv0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tv0  );
CategoryDefine( FAST_MAX_55922tw0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tw0  );
CategoryDefine( FAST_MAX_55922tx0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tx0  );
CategoryDefine( FAST_MAX_55922ty0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ty0  );
CategoryDefine( FAST_MAX_55922tz0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922tz0  );
CategoryDefine( FAST_MAX_55922u00_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922u00  );
CategoryDefine( FAST_MAX_55922u10_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922u10  );
CategoryDefine( FAST_MAX_55922u20_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922u20  );
CategoryDefine( FAST_MAX_55922u30_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922u30  );
CategoryDefine( FAST_MAX_55922u40_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922u40  );
CategoryDefine( FAST_MAX_55922u50_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922u50  );
CategoryDefine( FAST_MAX_55922u60_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922u60  );
CategoryDefine( FAST_MAX_55922u70_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922u70  );
CategoryDefine( FAST_MAX_55922u80_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922u80  );
CategoryDefine( FAST_MAX_55922u90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922u90  );
CategoryDefine( FAST_MAX_55922ua0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ua0  );
CategoryDefine( FAST_MAX_55922ub0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ub0  );
CategoryDefine( FAST_MAX_55922uc0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922uc0  );
CategoryDefine( FAST_MAX_55922ud0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ud0  );
CategoryDefine( FAST_MAX_55922ue0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ue0  );
CategoryDefine( FAST_MAX_55922uf0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922uf0  );
CategoryDefine( FAST_MAX_55922ug0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ug0  );
CategoryDefine( FAST_MAX_55922rt0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922rt0  );
CategoryDefine( FAST_MAX_55922ru0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922ru0  );

CategoryDefine( FAST_MAX_55922rs0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922rs0  );
CategoryDefine( FAST_MAX_55922rr0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922rr0  );
CategoryDefine( FAST_MAX_55922rq0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922rq0  );
CategoryDefine( FAST_MAX_55922rp0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922rp0  );
CategoryDefine( FAST_MAX_55922qh0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922qh0  );
CategoryDefine( FAST_MAX_55922qj0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922qj0  );
CategoryDefine( FAST_MAX_55922pv0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922pv0  );
CategoryDefine( FAST_MAX_55922q00_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922q00  );
CategoryDefine( FAST_MAX_55922q90_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922q90  );
CategoryDefine( FAST_MAX_55922qg0_1_cat, Speed_below_bin1, s_ANY, 
-FAST_MAX_55922qg0  );
CategoryDefine( FAST_MAX_55922px0_1_cat, Speed_below_bin1, s_ANY,
 -FAST_MAX_55922px0  );


{DSPX}



       CategoryDefine( UnDefined_cat, UnDefined, s_ANY,
                      -OPENS..HELEN ); {rev07b}
     SortRuleClose;


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
     SummaryBinSet(ContinuitySummaryBin, Open);
     SummaryBinSet(ContinuitySummaryBin, Short);
     SummaryBinSet(ParametricFailureSummaryBin, ICCQ_bin);
     SummaryBinSet(ParametricFailureSummaryBin, DC_Leakage);
     SummaryBinSet(FunctionalFailureSummaryBin, Slow_Functional);
     SummaryBinSet(FunctionalFailureSummaryBin, Fast_Functional);
     SummaryBinSet(FunctionalFailureSummaryBin, Speed_Below_Bin1);
     SummaryBinSet(GoodSummaryBin, Good);

#endif
#endif

  end;  (* INITIALIZE_LOT_INFORMATION *)


procedure SET_POWER( V_1V : treal; I_1V : treal;
                     V_3V : treal; I_3V : treal;
                     WAIT_TIME : treal ); {rev01b}
(*
**********************************************************************
****            POWER SUPPLY SETUP                                ****
**********************************************************************
*)
  begin

  CASE TIDeviceType OF
    FT_1_HV  ,
    FT_1_LV  :
      BEGIN
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDDSHV1, V_3V, I_3V, 8V, 0V ); 

        Enable( PS_VDD1 );
        Enable( PS_VDD2 );
        Enable( PS_VDD4 );
        Enable( PS_VDDSHV1 );
      END;

{ftstack01a...}
    FT_STACK_HV :
      BEGIN
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, 1.8V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDDSHV, V_3V, I_3V, 8V, 0V ); 
        SupplySetLimit( PS_VDDSHV1, V_3V, I_3V, 8V, 0V );  
        SupplySet( s_UPMU2B, 1.8V, 50mA ); {upmu}

        Enable( PS_VDD1 );
        Enable( PS_VDD2 );
        Enable( PS_VDD4 );
        Enable( PS_VDDSHV );
        Enable( PS_VDDSHV1 );
	Enable( s_UPMU2B ); {upmu}
      END;
    FT_STACK_LV :
      BEGIN
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, 1.8V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDDSHV, V_3V, I_3V, 8V, 0V ); 
        SupplySetLimit( PS_VDDSHV1, V_3V, I_3V, 8V, 0V );  
        SupplySet( s_UPMU2B, 1.8V, 50mA ); {upmu}

        Enable( PS_VDD1 );
        Enable( PS_VDD2 );
        Enable( PS_VDD4 );
        Enable( PS_VDDSHV );
        Enable( PS_VDDSHV1 );
	Enable( s_UPMU2B ); {upmu}
      END;

{...ftstack01a}
  END; {case of TIDeviceType}

        wait( WAIT_TIME );

  end;  (* SET_POWER *)


procedure Power_down;
(*
**********************************************************************
****            POWER DOWN ALL HARDWARE                           ****
**********************************************************************
*)
  begin

  CASE TIDeviceType OF
    FT_1_HV  ,
    FT_1_LV  :
      BEGIN
        SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );
        Disable( PS_VDDSHV1 );
        Disable( PS_VDD4 );
        Disable( PS_VDD2 );
        Disable( PS_VDD1 );
        Disable( s_ALL );
      END;

{ftstack01a...}
    FT_STACK_HV :
      BEGIN
        SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );
	Disable( s_UPMU2B ); {upmu}
        Disable( PS_VDDSHV1 );
        Disable( PS_VDDSHV );
        Disable( PS_VDD4 );
        Disable( PS_VDD2 );
        Disable( PS_VDD1 );
        Disable( s_ALL );
      END;
    FT_STACK_LV :
      BEGIN
        SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );
	Disable( s_UPMU2B ); {upmu}
        Disable( PS_VDDSHV1 );
        Disable( PS_VDDSHV );
        Disable( PS_VDD4 );
        Disable( PS_VDD2 );
        Disable( PS_VDD1 );
        Disable( s_ALL );
      END;

{...ftstack01a}
  END; {case of TIDeviceType}

  end;  (* Power_down *)


procedure Sequence_down( V_1V : treal; I_1V : treal;
                         V_3V : treal; I_3V : treal;
                         WAIT_TIME : treal ); {rev01b}
(*
**********************************************************************
**** SEQUENCE SUPPLIES DOWN IN REVERSE ORDER FROM SET_POWER.      ****
**** DOES NOT DISABLE SUPPLIES. (CONT,SHORTS TESTS)               ****
**********************************************************************
*)
  begin

  CASE TIDeviceType OF
    FT_1_HV  ,
    FT_1_LV  :
      BEGIN
        SupplySetLimit( PS_VDDSHV1, V_3V, I_3V, 8V, 0V );
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
        Enable( PS_VDDSHV1 );
        Enable( PS_VDD4 );
        Enable( PS_VDD2 );
        Enable( PS_VDD1 );
      END;

{ftstack01a...}
    FT_STACK_HV :
      BEGIN
        SupplySetLimit( PS_VDDSHV1, 0V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDDSHV, V_3V, I_3V, 8V, 0V ); 
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, 0V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
	SupplySetLimit( s_UPMU2B, 0V, 100UA, 4V, 0V ); {upmu}
        Enable( PS_VDDSHV1 );
        Enable( PS_VDDSHV );
        Enable( PS_VDD4 );
        Enable( PS_VDD2 );
        Enable( PS_VDD1 );
      END;    
    FT_STACK_LV :
      BEGIN
        SupplySetLimit( PS_VDDSHV1, 0V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDDSHV, V_3V, I_3V, 8V, 0V ); 
        SupplySetLimit( PS_VDD4, V_1V, I_1V, 8V, 0V );
        SupplySetLimit( PS_VDD2, 0V, 750mA, 8V, 0V );
        SupplySetLimit( PS_VDD1, V_1V, I_1V, 8V, 0V );
	SupplySetLimit( s_UPMU2B, 0V, 100UA, 4V, 0V ); {upmu}
        Enable( PS_VDDSHV1 );
        Enable( PS_VDDSHV );
        Enable( PS_VDD4 );
        Enable( PS_VDD2 );
        Enable( PS_VDD1 );
      END;

{...ftstack01a}
  END; {case of TIDeviceType}

        wait( WAIT_TIME );

  end;  (* Sequence_down *)


{***********************************************************************}

{DSPSHMOO}

function sx                ( spattern   : Pattern; 
			     minmax     : integer;
			     tmgandtbl  : integer;
			     sfmin   : treal;		
                    	     sfmax   : treal;
                    	     sfstep  : treal;
                    	     svmin   : treal;		
                    	     svmax   : treal;
                    	     svstep  : treal;
                    	     winxrep  : integer) : treal;
  var
    RESULT,TEST_RESULT, flag1    : boolean;
    Int1, Int2, Int3, STATUS     : integer;
    tempvolt			 : treal;
    Int4, Int5                   : integer;
    svmin1,svmin2,svmin3,svmin4  : treal;
    sdctbl,sformattbl,stimingtbl : String20;
			    
    
begin
  flag1:=true;
  tempvolt:=svmin; 
  svmin1:=svmin;
    
  reWriteAppend(file001, 'dsp_shmoo_result.txt');
  writeln(file001);
  writeln;
  write(file001, '============================================');
  writeln(file001, '============================================');

  writeln(file001, 'PATTERN ', spattern);
  writeln('PATTERN ', spattern);   
  writeln(file001,'SETUP ',minmax);
  writeln('SETUP ',minmax);
  writeln(file001);
  write(file001,   'VDDMIN  ', svmin:5:1);
  writeln(file001, '   FRQMIN  ', sfmin:5:1);
  write(file001,   'VDDMAX  ', svmax:5:1);
  writeln(file001, '   FRQMAX  ', sfmax:5:1);
  write(file001,   'VDDSTP  ', svstep:5:1);
  writeln(file001, '   FRQSTEP ', sfstep:5:1);
  writeln(file001);
  writeln;
            
  Repeat
    write(file001,'   ',sfmax:8,'   >');
    write('   ',sfmax:8,'   >');  
    Int1:=0;
	Repeat
	
if minmax=1 then
begin
  SET_POWER( svmin, 2A,VMX3V, 2A, 2mS );
  if  tmgandtbl=3 then  SetupSelect(SLOW_MIN_DC, FORMAT_3, TIMING_3);
  if  tmgandtbl=5 then  SetupSelect(SLOW_MIN_DC, FORMAT_5, TIMING_5);
  if  tmgandtbl=9 then  SetupSelect(FAST_MIN_DC, FORMAT_9, TIMING_9);
  if  tmgandtbl=11 then SetupSelect(FAST_MIN_DC, FORMAT_11, TIMING_11);
  if  tmgandtbl=19 then SetupSelect(FAST_MIN_DC, FORMAT_19, TIMING_19);
  if  tmgandtbl=27 then SetupSelect(FAST_MIN_DC, FORMAT_27, TIMING_27);
  if  tmgandtbl=29 then SetupSelect(FAST_MIN_DC, FORMAT_29, TIMING_29);  
  if  tmgandtbl=32 then SetupSelect(FAST_MIN_DC, FORMAT_32, TIMING_32);
  if  tmgandtbl=33 then SetupSelect(FAST_MIN_DC, FORMAT_33, TIMING_33);
  if  tmgandtbl=34 then SetupSelect(FAST_MIN_DC, FORMAT_34, TIMING_34);
end;
      
if minmax=2 then
begin
  SET_POWER( svmin, 2A,VMN3V, 2A, 2mS );
  if  tmgandtbl=3 then  SetupSelect(SLOW_MAX_DC, FORMAT_3, TIMING_3);
  if  tmgandtbl=5 then  SetupSelect(SLOW_MAX_DC, FORMAT_5, TIMING_5);
  if  tmgandtbl=9 then  SetupSelect(FAST_MAX_DC, FORMAT_9, TIMING_9);
  if  tmgandtbl=11 then SetupSelect(FAST_MAX_DC, FORMAT_11, TIMING_11);
  if  tmgandtbl=19 then SetupSelect(FAST_MAX_DC, FORMAT_19, TIMING_19);
  if  tmgandtbl=27 then SetupSelect(FAST_MAX_DC, FORMAT_27, TIMING_27);   
  if  tmgandtbl=29 then SetupSelect(FAST_MAX_DC, FORMAT_29, TIMING_29);  
  if  tmgandtbl=32 then SetupSelect(FAST_MAX_DC, FORMAT_32, TIMING_32);
  if  tmgandtbl=33 then SetupSelect(FAST_MAX_DC, FORMAT_33, TIMING_33);
  if  tmgandtbl=34 then SetupSelect(FAST_MAX_DC, FORMAT_34, TIMING_34);
end;
 
DCSetLDOFF(svmin,0V,CP,svmin*0.75,svmin*0.25,OSC1V_INS );
DCSetDyn(svmin,0V,CP,svmin*0.75,svmin*0.25,svmin*0.5,-10.0uA,10.0uA,OSC1V_OUTS);
DCSetDyn(svmin,0V,CP,svmin*0.75,svmin*0.25,svmin*0.5,-10.0uA,10.0uA,OSC1V_IOS);
        PeriodSetBase(sfmax);

if (tmgandtbl=3)  then stimingtbl:='TIMING_3';
if (tmgandtbl=5)  then stimingtbl:='TIMING_5';
if (tmgandtbl=9)  then stimingtbl:='TIMING_9';
if (tmgandtbl=11) then stimingtbl:='TIMING_11';
if (tmgandtbl=19) then stimingtbl:='TIMING_19';
if (tmgandtbl=27) then stimingtbl:='TIMING_27';
if (tmgandtbl=29) then stimingtbl:='TIMING_29';
if (tmgandtbl=32) then stimingtbl:='TIMING_32';
if (tmgandtbl=33) then stimingtbl:='TIMING_33';
if (tmgandtbl=34) then stimingtbl:='TIMING_34';

ACTableSet(sfmax, stimingtbl);
        wait( 2mS );
        TEST_RESULT := PatternExecute( STATUS, spattern);
        Int2:=0;
        Int3:=0;
        if (TEST_RESULT = PASS) then 
        begin
           Int3:=1;
           Int1:=Int1+1;
  	   Repeat
  	       TEST_RESULT := PatternExecute( STATUS, spattern);
  	       Int2:= Int2+1;
  	   Until (TEST_RESULT = FAIL) or (Int2> winxrep); 
  	   If (TEST_RESULT = PASS) then write(file001,'.');
  	   If (TEST_RESULT = FAIL) then write(file001,'#');
  	   If (TEST_RESULT = PASS) then write('.');
  	   If (TEST_RESULT = FAIL) then write('#');
           If (TEST_RESULT = FAIL) then flag1:=false;      
	end;
  	if (TEST_RESULT = FAIL) and (flag1) then 
  	begin
  	   Repeat
  	       TEST_RESULT := PatternExecute( STATUS, spattern);
  	       Int2:= Int2+1;
  	   Until (TEST_RESULT = PASS) or (Int2> winxrep); 
  	   If (TEST_RESULT = PASS) then write(file001,'*');
  	   If (TEST_RESULT = FAIL) then write(file001,'X');
  	   If (TEST_RESULT = PASS) then write('*');
  	   If (TEST_RESULT = FAIL) then write('X');  	   
  	end;  
  	svmin:=svmin+svstep;
        flag1:=true;
    	until (svmin>svmax);
svmin:=svmin1;
sfmax:=sfmax-sfstep;
writeln(file001,'<   ');
writeln('<   ');
until sfmax<sfmin;

  if (svstep=10mV ) then Int5:=5;
  if (svstep=25mV ) then Int5:=4;
  if (svstep<>10mV) and (svstep<>25mV) then Int5:=5;
  
  Int4:=1;
    write(file001, '                 |');             
    write('                 |');             
    for svmin2:=svmin1+Int5*svstep to svmax+svstep by Int5*svstep do
    begin
      if Int5=5 then
      begin         
        write(file001,'++++|');
        write('++++|');
      end;
      if Int5=4 then
      begin         
        write(file001,'+++|');
        write('+++|');
      end;
    end;
  writeln(file001); 
  writeln;         

  Int4:=1;
    svmin4 := single(svmin1);
    write(file001, '                ',svmin4:3:2);             
    write('                ',svmin4:3:2);             
    for svmin3:=svmin1+2*Int5*svstep to svmax+svstep by 2*Int5*svstep do
    begin 
      svmin4 := single(svmin3);   
      if Int5=5 then
      begin       
        write(file001,'     ',svmin4:3:2);
        write('     ',svmin4:3:2);
      end;
      if Int5=4 then
      begin       
        write(file001,'     ',svmin4:3:2);
        write('     ',svmin4:3:2);
      end;
    end;
  writeln(file001); 
  write(file001, '============================================');
  writeln(file001, '============================================');  
  writeln(file001);             
  writeln;         
  writeln; 	

end;{shmoosingle}


{DSPSHMOO}


{******************************************************************}

function DSPV( Search_Pattern : Pattern;
                       	     SearchMin      : treal;
                    	     SearchMax      : treal;
			     Vstep	    : treal;
			     tables         : integer;
                             F1             : treal) : treal;
  var
    RESULT,TEST_RESULT  : boolean;
    VDD, BStep          : treal;
    cnt,STATUS          : integer;
    timingtbl		: String20;
    file001		: text;

  begin

    TEST_RESULT := pass;
    DSPV := 0V;

    (* LINEAR SEARCH *)
    for VDD := SearchMax downto (SearchMin-Vstep) by Vstep do
      begin
        SupplySet(PS_VDD1, VDD, 2A );
        SupplySet(PS_VDD2, VDD, 2A );
	SupplySet(PS_VDD4, VDD, 2A );

SET_POWER( VDD, 2A,VMN3V, 2A,2mS ); 

if (tables = 9) then
SetupSelect( FAST_MIN_DC, FORMAT_9,  TIMING_9 );
if (tables = 11) then
SetupSelect( FAST_MIN_DC, FORMAT_11, TIMING_11 );
if (tables = 32) then 
SetupSelect( FAST_MIN_DC, FORMAT_32, TIMING_32 );
  
if (tables = 9)  then timingtbl:='TIMING_9';
if (tables = 11) then timingtbl:='TIMING_11';
if (tables = 32) then timingtbl:='TIMING_32';

DCSetLDOFF( VDD, 0V,CP, VDD*0.75, VDD*0.25, OSC1V_INS );
DCSetDyn( VDD, 0V,CP, VDD*0.75, VDD*0.25, VDD*0.5,
-10.0uA, 10.0uA, OSC1V_OUTS );
DCSetDyn( VDD, 0V,CP, VDD*0.75, VDD*0.25, VDD*0.5,
-10.0uA, 10.0uA, OSC1V_IOS );

PeriodSetBase(F1);
ACTableSet(F1, timingtbl);
wait( 2mS );

        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
        if (not(RESULT)) then break;
      end;

        DSPV := VDD+Vstep;

  end; { DSPV }
  
 
 {******************************************************************} 
  
  function DSPF1( Search_Pattern : Pattern;
  	         tables	        : integer;
                 SearchMin      : treal;
                 SearchMax      : treal;
                 V1             : treal ) : treal;

  var
    RESULT,TEST_RESULT  : boolean;
    PeriodNow, BStep    : treal;
    cnt,STATUS          : integer;
    timingtbl		: String20;
    Fstep		: treal;
    
  begin

   TEST_RESULT := pass;
   DSPF1 := 0NS;
   Fstep:=0.250NS;

  SET_POWER( V1, 750mA, VMN3V, 750mA, 2mS );
   
  if (tables = 9) then
  SetupSelect( FAST_MIN_DC, FORMAT_9,  TIMING_9 );
  if (tables = 11) then
  SetupSelect( FAST_MIN_DC, FORMAT_11, TIMING_11 );
  if (tables = 32) then
  SetupSelect( FAST_MIN_DC, FORMAT_32, TIMING_32 );
  
  if (tables = 9)  then timingtbl:='TIMING_9';
  if (tables = 11) then timingtbl:='TIMING_11';
  if (tables = 32) then timingtbl:='TIMING_32';

  DCSetLDOFF( V1, 0V,CP, V1*0.75, V1*0.25, OSC1V_INS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_IOS );

    (* LINEAR SEARCH *)
    for PeriodNow := SearchMax downto (SearchMin-Fstep) by Fstep do
      begin
	PeriodSetBase(PeriodNow);      
	ACTableSet(PeriodNow, timingtbl);
        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
 
       if (not(RESULT)) then break;
      end;
  
  DSPF1 := PeriodNow+Fstep;

  end; { DSPF }

{******************************************************************} 
 

  function DSPF2( Search_Pattern : Pattern;
  	         tables	        : integer;
                 SearchMin      : treal;
                 SearchMax      : treal;
                 V1             : treal ) : treal;

  var
    RESULT,TEST_RESULT  : boolean;
    PeriodNow, BStep    : treal;
    cnt,STATUS          : integer;
    timingtbl		: String20;
    Fstep		: treal;

  begin

   TEST_RESULT := pass;
   DSPF2 := 0NS;
   Fstep:=0.250NS;

  SET_POWER( V1, 750mA, VMN3V, 750mA, 2mS );
   
  if (tables = 9) then
  SetupSelect( FAST_MIN_DC, FORMAT_9,  TIMING_9 );
  if (tables = 11) then
  SetupSelect( FAST_MIN_DC, FORMAT_11, TIMING_11 );
  if (tables = 32) then
  SetupSelect( FAST_MIN_DC, FORMAT_32, TIMING_32 );
  
  if (tables = 9)  then timingtbl:='TIMING_9';
  if (tables = 11) then timingtbl:='TIMING_11';
  if (tables = 32) then timingtbl:='TIMING_32';

  DCSetLDOFF( V1, 0V,CP, V1*0.75, V1*0.25, OSC1V_INS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_IOS );

    (* LINEAR SEARCH *)
    for PeriodNow := SearchMin to (SearchMax+Fstep) by Fstep do
      begin
	PeriodSetBase(PeriodNow);      
	ACTableSet(PeriodNow, timingtbl);
        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
 
       if (RESULT) then break;
      end;
  
  DSPF2 := PeriodNow;

  end; { DSPF2 }

{******************************************************************} 
 
 
  
function DSPFB( Search_Pattern : Pattern;
	        tables         : integer;
                Period3        : treal;
                Period1        : treal;
                V1             : treal ) : treal;

  var
    RESULT,TEST_RESULT  : boolean;
    PeriodNow 		: treal;
    cnt,STATUS          : integer;
    timingtbl		: String20;
    Period2             : treal;
    Result1, Result2, Result3 : boolean;
    
  begin

  TEST_RESULT := pass;
  Result1:=pass;
  Result2:=pass;
  Result3:=pass;
  
  DSPFB := 0NS;

  SET_POWER( V1, 750mA, VMN3V, 750mA, 2mS );
   
  if (tables = 9) then
  SetupSelect( FAST_MIN_DC, FORMAT_9,  TIMING_9 );
  if (tables = 11) then
  SetupSelect( FAST_MIN_DC, FORMAT_11, TIMING_11 );
  if (tables = 32) then
  SetupSelect( FAST_MIN_DC, FORMAT_32, TIMING_32 );
  
  if (tables = 9)  then timingtbl:='TIMING_9';
  if (tables = 11) then timingtbl:='TIMING_11';
  if (tables = 32) then timingtbl:='TIMING_32';

  DCSetLDOFF( V1, 0V,CP, V1*0.75, V1*0.25, OSC1V_INS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( V1, 0V,CP, V1*0.75, V1*0.25, V1*0.5, -10.0uA, 10.0uA, OSC1V_IOS );

  { BINARY SEARCH }

  PeriodSetBase(Period1);
  ACTableSet(Period1, timingtbl);
  wait(2ms);
  Result1:=PatternExecute(STATUS, Search_Pattern);

  if not(Result1) then Result1:=PatternExecute(STATUS, Search_Pattern);
  if not(Result1) then Result1:=PatternExecute(STATUS, Search_Pattern);
  
  if Result1 then
  begin  
    PeriodSetBase(Period3);
    ACTableSet(Period3, timingtbl);
    wait(2ms);
    Result3:=PatternExecute(STATUS, Search_Pattern);

    Period2:=(Period1+Period3)/2;  
 
    if not(Result3) then
    begin 
      Repeat
        PeriodSetBase(Period2);
        ACTableSet(Period2, timingtbl);
        wait(2ms);
        Result2:=PatternExecute(STATUS, Search_Pattern);    
        if Result2 then 
          begin
          Period1:=Period2;
          Period2:=(Period2+Period3)/2;
          end;
        if not(Result2) then 
          begin
          Period3:=Period2;
          Period2:=(Period1+Period2)/2;
          end;    
      Until (Period1-Period2 <= 0.250NS) or (Period2-Period3 <= 0.250NS);
    end;
  end;
  
  DSPFB := Period2;
  if (not(Result1) or Result3) then DSPFB:=0ns;

  end; { DSPFB }


{**************************************************************}
Procedure PX1   (  Pattern1   : Pattern;
                   Test1      : TestNames;
                   Datalog1   : String40;
                   Mn_Mx      : Integer;
                   ARMDSPTC   : Integer);
                  
var
TEST_RESULT                   : boolean;
STATUS, tmgtbl                : integer;
Failtest                      : string[30];
DummyStr                      : string[30];
Freqs, Freqmin, FTEST         : treal;
      
begin 

  if ARMDSPTC=1 then 
  begin
    tmgtbl:=9;
    Freqmin:=65ns;
    FTEST:=14000/FREQARM;
  end;
  if ARMDSPTC=2 then 
  begin
    tmgtbl:=11;
    Freqmin:=35ns;
    FTEST:=8000/FREQDSP;
  end;
  if ARMDSPTC=3 then 
  begin
    tmgtbl:=32;
    Freqmin:=55ns;
    FTEST:=6000/FREQTC;
  end;

  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
  begin
    TestOpen(Test1);
    Datalog('FREQ ',FTEST:5:2,' TDL NAME: ',Datalog1,chr(10));
    TEST_RESULT := PatternExecute( STATUS, Pattern1 );  
    if (not(TEST_RESULT)) and (Flagstop<2) then 
    begin
      DeviceStatus:=false;    
      if (Mn_Mx=1) then
      begin
        Freqs := DSPF2(Pattern1,tmgtbl,Freqmin,100ns,VMN1V);
        Failtest:='MIN'; 
      end;
      if (Mn_Mx=2) then
      begin
        Freqs := DSPF2(Pattern1,tmgtbl,Freqmin,100ns,VMX1V);
        Failtest:='MAX';  
      end;       
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
  TWPDLDatalogText('BIN1FAIL1',Failtest,TWMinimumData);
  TWPDLDatalogText('BIN1FAIL2',Datalog1,TWMinimumData);
  TWPDLDataLogRealVariable('BIN1FFQMX',SEC,single(Freqs),TWMinimumData);    	
#endif
#endif
Flagstop:=Flagstop+1;
    end;  
    ResultRecord( TEST_RESULT );
    TestClose;  
         
  end;
end; 


{**************************************************************}
Procedure PX2   (  Pattern1   : Pattern;
                   Test1      : TestNames;
                   Datalog1   : String40;
                   ARMDSPTC   : Integer);
                  
var
TEST_RESULT           : boolean;
STATUS                : integer;
FTEST                 : treal;
      
begin 

  if ARMDSPTC=1 then FTEST:= 14000/FREQARM;
  if ARMDSPTC=2 then FTEST:= 8000/FREQDSP;
  if ARMDSPTC=3 then FTEST:= 6000/FREQTC;

  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
  begin
    TestOpen(Test1);
    Datalog('FREQ ',FTEST:5:2,' TDL NAME: ',Datalog1,chr(10));
    TEST_RESULT := PatternExecute( STATUS, Pattern1 ); 
    if not(TEST_RESULT) then DeviceStatus:=false;    
    ResultRecord( TEST_RESULT );
    TestClose;  
         
  end;
end;                               

{**************************************************************}
Procedure PX3  (  Pattern1   : Pattern;
                   Test1      : TestNames;
                   Datalog1   : String40;
                   RPTX       : Integer);
                  
var
TEST_RESULT           : boolean;
STATUS                : integer;
FTEST                 : treal;      

begin 
  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
  begin
    TestOpen(Test1);
    Datalog('TDL NAME: ',Datalog1,chr(10));
    TEST_RESULT := PatternExecute( STATUS, Pattern1 );

    if ((TEST_RESULT = FAIL) and (RPTX=1)) then
    TEST_RESULT := PatternExecute( STATUS, Pattern1 );
    if ((TEST_RESULT = FAIL) and (RPTX=1)) then
    TEST_RESULT := PatternExecute( STATUS, Pattern1 ); 
  
    if not(TEST_RESULT) then DeviceStatus:=false;    
    ResultRecord( TEST_RESULT );
    TestClose;           
  end;
end;        


(*
**********************************************************************
****            POWER SUPPLY SHORTS                               ****
**********************************************************************
*)
 procedure SUPPLY_SHORTS_TEST ;
  var
    TEST_RESULT          : boolean;
    STATUS               : integer;
    ICCQ_value           : treal;
    SUPPLY_SHORT_RESULT  : boolean;
    JUNCTION_LEAK_RESULT : boolean;
    TEMP_VDD, Clamp      : treal;
    Junction_min         : treal;
    Junction_max         : treal;
    PINS_VDD, Done       : boolean;

  begin
    TEST_RESULT := PASS;
    SUPPLY_SHORT_RESULT := PASS;
    TEMP_VDD := 0.1V;

{kjog 8/16}
  {  Clamp := ICCQ_RANGE;
    Junction_min := ICCQ_MIN;
    Junction_max := ICCQ_MAX;   }

     Clamp := ICCQSUPSHRT_RANGE ;
    Junction_min := ICCQSUPSHRT_MIN;
    Junction_max := ICCQSUPSHRT_MAX;
{kjog 8/16}


    TestOpen( SUPPLY_SHORTS );


      SET_POWER( 0.0V, 50mA,
                 0.0V, 50mA,
                 2mS ); {rev01b}

      SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );


      if ( V_DatalogEnabled ) then
        begin
          DatalogResetPinList( ALL_PINS_PLUS );
          DatalogResetType(s_DPSI);
        end;

      Datalog('comment=''Supply Shorts Test''',chr(10));

  CASE TIDeviceType OF
    FT_1_HV ,
    FT_1_LV :
      BEGIN

(* TEST VDDSHV1 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDDSHV1, 1uF );
        SupplySetLimit( PS_VDDSHV1, TEMP_VDD,
                     50mA, 5mA, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDDSHV1, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDDSHV1, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDDSHV1, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;

(* TEST VDD1 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD1, 1uF );
        SupplySetLimit( PS_VDD1, TEMP_VDD,
                     50mA, 5ma, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD1, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD1, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD1, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;



(* TEST VDD2 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD2, 1uF );
        SupplySetLimit( PS_VDD2, TEMP_VDD,
                     50mA, 5ma, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD2, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD2, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD2, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD2',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD2',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;


(* TEST VDD4 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD4, 1uF );
        SupplySetLimit( PS_VDD4, TEMP_VDD,
                     50mA, 5mA, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD4, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD4, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD4, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD4',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD4',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;


      END;
{ftstack01a...}
    FT_STACK_HV, FT_STACK_LV :
      BEGIN

{does not work...
(* TEST VDDSHV1 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDDSHV1, 1uF );
Disable(PS_VDDSHV);
        SupplySet( s_UPMU2B, 0V, 10nA ); {upmu}

        SupplySetLimit( PS_VDDSHV1, TEMP_VDD,
                     50mA, 5mA, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDDSHV1, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
Enable(PS_VDDSHV);
        if SupplyReadLimit( PS_VDDSHV1, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDDSHV1, 0.0V, 50mA );
        SupplySet( s_UPMU2B, 1.8V, 50mA ); {upmu}

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;
...does not work}


(* TEST VDDSHV *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDDSHV, 1uF );
        SupplySetLimit( PS_VDDSHV, TEMP_VDD,
                     50mA, 5mA, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDDSHV, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);


        if SupplyReadLimit( PS_VDDSHV, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDDSHV, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDDSHV',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;

(* TEST VDD1 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD1, 1uF );
        SupplySetLimit( PS_VDD1, TEMP_VDD,
                     50mA, 5ma, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD1, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD1, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD1, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD1',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;



(* TEST VDD2 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD2, 1uF );
        SupplySetLimit( PS_VDD2, TEMP_VDD,
                     50mA, 5ma, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD2, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD2, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD2, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD2',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD2',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;


(* TEST VDD4 *)
        Datalog('VCC=0.1V',chr(10));
        SupplySetComp( PS_VDD4, 1uF );
        SupplySetLimit( PS_VDD4, TEMP_VDD,
                     50mA, 5mA, -2ma );
        wait(2ms);
        SupplySetLimit( PS_VDD4, TEMP_VDD,
                     Clamp, Clamp*0.95, -(Clamp*0.05));
        wait(2ms);
        if SupplyReadLimit( PS_VDD4, s_CURRENT,
                         ICCQ_value ) = FAIL then
          TEST_RESULT := FAIL;
        SupplySet( PS_VDD4, 0.0V, 50mA );

        if ((ICCQ_value > Junction_max) or (ICCQ_value < Junction_min)) then
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD4',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';**',chr(10));
            SUPPLY_SHORT_RESULT := FAIL;
          end
        else
          begin
            Datalog('name= SUPPLY_SHORT_PS_VDD4',
                    ';value=',ICCQ_value:4:2,';vcc=',TEMP_VDD:5:1,
                    ';min=',Junction_min:4:2,';max=',Junction_max,
                    ';range=',Clamp,';',chr(10));
          end;
      END;
{...ftstack01a}
  END; {case of TIDeviceType}

      ResultRecord( SUPPLY_SHORT_RESULT );
      if (SUPPLY_SHORT_RESULT = FAIL) then begin
	Pass_Shorts := false;
	DeviceSTatus := false;
      end;


      Disable( s_ALL );

      if ( V_DatalogEnabled ) then
        begin
          DatalogResetPinList( ALL_PINS_PLUS );
          DatalogSetPinList( ALL_PINS );
          DatalogSetType(s_DPSI);
        end;

    TestClose;

  end; (* SUPPLY_SHORTS_TEST *)


procedure LOG_PINS_AND_BINS;
(*
************************************************************************
****           DATALOG PIN AND BIN INFORMATION                      ****
************************************************************************
*)
  begin

    TestOpen( LOG_INFO );

      Datalog('comment=''TEST_LIMIT :',TEST_LIMIT,'''',chr(10));

      Datalog('comment=''PIN_MAP :',PIN_MAPS,'''',chr(10));

      If (NOT V_DatalogEnabled) then
          Have_not_datalogged := TRUE;
      If ((V_DatalogEnabled) and (Have_not_datalogged)) then
        Begin
          Have_not_datalogged := FALSE;

Datalog('+----+----------+-+------+--+------+--------+--+-+-+-',
        '+------+----+',chr(10));
Datalog('|    |          | |      |  |      |        |  |S| | ',
        '|      |    |',chr(10));
Datalog('|    |          | |      |AM|      |        |  |u|D| ',
        '|      |M   |',chr(10));
Datalog('|    |          | |      |sa|DP    |        |  |p|i|V',
        '|      |at  |',chr(10));
Datalog('|    |          |I|      |sc|ia    |        |  |p|o|r',
        '|      |cy  |',chr(10));
Datalog('|Pkg |          |O|Cell  |or|fi    |Ioh/Iol |OD|l|d|e',
        '|PU    |rp  |',chr(10));
Datalog('|Pin |Pin Name  |B|Name  |co|fr    |or Bias |3S|y|e|f',
        '|PD    |oe  |',chr(10));
Datalog('+====+==========+=+======+==+======+========+==+=+=+=',
        '+======+====+',chr(10));
Datalog('| AA9|COM_PCM_DI|I|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  R9|RX2       |I|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| R12|OSC32K_OUT|I|OS11V1|  |      |        |  | |B| ',
        '|      |OSC |',chr(10));
Datalog('| W12|OSC32K_IN |I|OS11D1|  |      |        |  | |B| ',
        '|      |OSC |',chr(10));
Datalog('| P13|CLK32K_IN |I|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| R13|BT_MCLK_RE|I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| G19|NRESPWRON |I|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| G20|PCM_CLKS  |I|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| H20|PCM_DATA_I|I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| W13|BT_PCM_DIN|I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| V14|RX1       |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| R14|CTS1      |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| U18|WIRE_SDI  |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| W19|EXT_FIQ   |I|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| E19|KBR_4     |I|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| E20|KBR_3     |I|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H14|KBR_2     |I|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| F19|KBR_1     |I|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G18|KBR_0     |I|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('|AA20|CLK32K_CTR|I|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| V18|CONF      |I|IDI041|  |      |        |  | |B| ',
        '|PE1001|CMOS|',chr(10));
Datalog('| Y19|TDI       |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| V17|TMS       |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| W18|TCK       |I|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| Y18|NTRST     |I|IDG091|  |      |        |  | |G| ',
        '|PE1001|CMOS|',chr(10));
Datalog('| Y17|NBSCAN    |I|IDI041|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V15|MPU_NRESET|I|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  H7|NFRDY     |I|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C9|SDCLK     |B|UIS481|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  C9|SDCLK     |B|UOS333|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  D5|SDATA_15  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D5|SDATA_15  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C4|SDATA_14  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C4|SDATA_14  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B4|SDATA_13  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B4|SDATA_13  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D6|SDATA_12  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D6|SDATA_12  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C5|SDATA_11  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C5|SDATA_11  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  H8|SDATA_10  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  H8|SDATA_10  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C6|SDATA_9   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C6|SDATA_9   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B6|SDATA_8   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B6|SDATA_8   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D7|SDATA_7   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D7|SDATA_7   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C7|SDATA_6   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C7|SDATA_6   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D8|SDATA_5   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  D8|SDATA_5   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B8|SDATA_4   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B8|SDATA_4   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  G8|SDATA_3   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  G8|SDATA_3   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C8|SDATA_2   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  C8|SDATA_2   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  G9|SDATA_1   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  G9|SDATA_1   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B9|SDATA_0   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  B9|SDATA_0   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P9|USB_DP    |B|UIS246|  |USB_DM|        |  | |G| ',
        '|      |USB |',chr(10));
Datalog('|  P9|USB_DP    |B|UOS181|  |      |        |3S| |G| ',
        '|      |USB |',chr(10));
Datalog('|  R8|USB_DM    |B|UIS246|  |USB_DP|        |  | |G| ',
        '|      |USB |',chr(10));
Datalog('|  R8|USB_DM    |B|UOS181|  |      |        |3S| |G| ',
        '|      |USB |',chr(10));
Datalog('| R10|COM_MCLK_R|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| R10|COM_MCLK_R|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| P10|COM_SPI_DI|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| P10|COM_SPI_DI|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| Y10|COM_PCM_CL|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| Y10|COM_PCM_CL|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  V9|COM_PCM_SY|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  V9|COM_PCM_SY|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y5|CTS2      |B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  Y5|CTS2      |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  W8|GPIO_9    |B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  W8|GPIO_9    |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y8|GPIO_8    |B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  Y8|GPIO_8    |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  V8|ARMIO_3   |B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  V8|ARMIO_3   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  W6|COM_SPI_RS|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  W6|COM_SPI_RS|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  W7|COM_SPI_XS|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  W7|COM_SPI_XS|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  V7|COM_SPI_kr|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  V7|COM_SPI_kr|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y6|COM_SPI_CL|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|  Y6|COM_SPI_CL|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| AA5|COM_SPI_DO|B|UIS482|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| AA5|COM_SPI_DO|B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  W5|RTS2      |B|UIS482|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  W5|RTS2      |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y2|OSC1_IN   |B|UIS488|  |      |        |  | |B| ',
        '|      |OSC |',chr(10));
Datalog('|  Y2|OSC1_IN   |B|UIS488|  |      |-2MA/2MA|  | |B| ',
        '|      |OSC |',chr(10));
Datalog('| P11|MEDIA_CS  |B|IDG091|  |      |        |  | |G| ',
        '|PS1001|CMOS|',chr(10));
Datalog('| P11|MEDIA_CS  |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| V10|MEDIA_CMD |B|IDG091|  |      |        |  | |G| ',
        '|PS0201|CMOS|',chr(10));
Datalog('| V10|MEDIA_CMD |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| R11|MEDIA_DO  |B|IDG091|  |      |        |  | |G| ',
        '|PS0201|CMOS|',chr(10));
Datalog('| R11|MEDIA_DO  |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| V11|MEDIA_CLK |B|IDG091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V11|MEDIA_CLK |B|OUO431|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W11|MEDIA_DI  |B|IDG091|  |      |        |  | |G| ',
        '|PS0201|CMOS|',chr(10));
Datalog('| W11|MEDIA_DI  |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| W10|MMC_DAT2  |B|IDG091|  |      |        |  | |G| ',
        '|PS0201|CMOS|',chr(10));
Datalog('| W10|MMC_DAT2  |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| G21|PCM_BIT_CL|B|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| G21|PCM_BIT_CL|B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| H15|PCM_SYNC  |B|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| H15|PCM_SYNC  |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| H18|PCM_DATA_O|B|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| H18|PCM_DATA_O|B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|AA13|BT_PCM_BCL|B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|AA13|BT_PCM_BCL|B|OUO231|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| V13|BT_PCM_SYN|B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| V13|BT_PCM_SYN|B|OUO231|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| L14|RX        |B|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| L14|RX        |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| M20|GPIO_15   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| M20|GPIO_15   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| N21|GPIO_14   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| N21|GPIO_14   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| N19|GPIO_13   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| N19|GPIO_13   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| N18|GPIO_12   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| N18|GPIO_12   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| N20|GPIO_11   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| N20|GPIO_11   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| M15|GPIO_7    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| M15|GPIO_7    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| P19|GPIO_6    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| P19|GPIO_6    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| P20|GPIO_4    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| P20|GPIO_4    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| P18|GPIO_3    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| P18|GPIO_3    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| M14|GPIO_2    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| M14|GPIO_2    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| R19|GPIO_1    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| R19|GPIO_1    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| R18|GPIO_0    |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| R18|GPIO_0    |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| T20|ARMIO_5   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| T20|ARMIO_5   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| T19|ARMIO_4   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| T19|ARMIO_4   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| N15|ARMIO_2   |B|IDG091|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| N15|ARMIO_2   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| U19|ARMIO_1   |B|IDG091|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| U19|ARMIO_1   |B|OUO431|  |      |        |3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| Y12|CLK32K_OUT|B|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| Y12|CLK32K_OUT|B|OUK831|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| T18|SCL       |B|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| T18|SCL       |B|UOS205|  |      |        |OD| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V20|SDA       |B|IDI091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V20|SDA       |B|UOS205|  |      |        |OD| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| N14|WIRE_NSCS0|B|IDI041|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| N14|WIRE_NSCS0|B|OUO431|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| P15|WIRE_NSCS3|B|IDI041|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| P15|WIRE_NSCS3|B|OUO431|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| J15|CAM_LCLK  |B|IDG091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| J15|CAM_LCLK  |B|OUK831|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| J18|CAM_D_7   |B|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| J18|CAM_D_7   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| J19|CAM_D_6   |B|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| J19|CAM_D_6   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| J14|CAM_D_5   |B|IDG041|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| J14|CAM_D_5   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K18|CAM_D_4   |B|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K18|CAM_D_4   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K19|CAM_D_3   |B|IDG041|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| K19|CAM_D_3   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K15|CAM_D_2   |B|IDG041|  |      |        |  | |G| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| K15|CAM_D_2   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K14|CAM_D_1   |B|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| K14|CAM_D_1   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| L19|CAM_D_0   |B|IDG041|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('| L19|CAM_D_0   |B|OUK831|  |      |-8MA/8MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('| L18|CAM_VS    |B|IDG091|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('| L18|CAM_VS    |B|OUK831|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| L15|CAM_HS    |B|IDG091|  |      |        |  | |B| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| L15|CAM_HS    |B|OUK831|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V16|NEMU0     |B|IDG091|  |      |        |  | |B| ',
        '|PS1001|CMOS|',chr(10));
Datalog('| V16|NEMU0     |B|OUO231|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W17|NEMU1     |B|IDG091|  |      |        |  | |B| ',
        '|PS1001|CMOS|',chr(10));
Datalog('| W17|NEMU1     |B|OUO231|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|AA17|ARM_BOOT  |B|IDG091|  |      |        |  | |B| ',
        '|PE0201|CMOS|',chr(10));
Datalog('|AA17|ARM_BOOT  |B|OUO431|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W16|TI_RESERd4|B|IDI041|  |      |        |  | |B| ',
        '|PE0201|CMOS|',chr(10));
Datalog('| W16|TI_RESERd4|B|OUO431|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  V3|FDATA_15  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  V3|FDATA_15  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T4|FDATA_14  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T4|FDATA_14  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  U3|FDATA_13  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  U3|FDATA_13  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  U1|FDATA_12  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  U1|FDATA_12  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P8|FDATA_11  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P8|FDATA_11  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T3|FDATA_10  |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T3|FDATA_10  |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T2|FDATA_9   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  T2|FDATA_9   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R4|FDATA_8   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R4|FDATA_8   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R3|FDATA_7   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R3|FDATA_7   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R2|FDATA_6   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  R2|FDATA_6   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P7|FDATA_5   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P7|FDATA_5   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P4|FDATA_4   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P4|FDATA_4   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P2|FDATA_3   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  P2|FDATA_3   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N7|FDATA_2   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N7|FDATA_2   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N2|FDATA_1   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N2|FDATA_1   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N4|FDATA_0   |B|UIS481|  |      |        |  | |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N4|FDATA_0   |B|UOS334|  |      |-4MA/4MA|3S| |G| ',
        '|      |CMOS|',chr(10));
Datalog('|  N3|FCLK      |B|UIS481|  |      |        |  | |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  N3|FCLK      |B|UOS333|  |      |        |3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D10|SBANK_1   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C10|SBANK_0   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G10|SADD_12   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H10|SADD_11   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C11|SADD_10   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D11|SADD_9    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G11|SADD_8    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C12|SADD_7    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D12|SADD_6    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H11|SADD_5    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C13|SADD_4    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D13|SADD_3    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G12|SADD_2    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C14|SADD_1    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| B14|SADD_0    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  A2|NSRAS     |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  H9|NSCAS     |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  C3|NSWE      |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  B3|NSDQML    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  D4|NSDQMU    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  D9|SDCLK_EN  |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  W4|USB_CLKO  |O|OUK831|  |      |-8MA/8MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y9|COM_MCLK_O|O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  W9|COM_PCM_DO|O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  V6|TX2       |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  Y4|TI_RESERVE|O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  W3|OSC1_OUT  |O|UOS357|  |      |-1MA/1MA|  | |B| ',
        '|      |OSC |',chr(10));
Datalog('| Y13|BT_MCLK_OU|O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H12|LCD_HSYNC |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D14|LCD_VSYNC |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| B15|LCD_AC    |O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C15|LCD_PCLK  |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D15|LCD_PIXE15|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C16|LCD_PIXE14|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| A17|LCD_PIXE13|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G13|LCD_PIXE12|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| B17|LCD_PIXE11|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C17|LCD_PIXE10|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D16|LCD_PIXEL9|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D17|LCD_PIXEL8|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C18|LCD_PIXEL7|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| B19|LCD_PIXEL6|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| A20|LCD_PIXEL5|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H13|LCD_PIXEL4|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| G14|LCD_PIXEL3|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C19|LCD_PIXEL2|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| B21|LCD_PIXEL1|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D18|LCD_PIXEL_|O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W14|BT_PCM_DOU|O|OUO231|  |      |-2MA/2MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| Y14|TX1       |O|OUO231|  |      |-2MA/2MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|AA15|RTS1      |O|OUO231|  |      |-2MA/2MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| M18|TX        |O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W21|WIRE_SDO  |O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| V19|WIRE_SCLK |O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| H19|CAM_EXCLK |O|OUK831|  |      |-8MA/8MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| M19|CAM_RSTZ  |O|OUK831|  |      |-8MA/8MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C20|KBC_5     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| C21|KBC_4     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| E18|KBC_3     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D19|KBC_2     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| D20|KBC_1     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| F18|KBC_0     |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|AA19|TDO       |O|OUK431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| P14|COM_SHUTDO|O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('| W15|NRESET_OUT|O|OUO431|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  N8|NFCS_3    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  M4|NFCS_2    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  M3|NFCS_1    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  M7|NFCS_0    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  L4|NFADV     |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  V4|NFWP      |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  W1|NFRP      |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  U4|NFOE      |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  W2|NFWE      |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  M8|NFBE_1    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  L3|NFBE_0    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  L7|FADD_24   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  K3|FADD_23   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  K4|FADD_22   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  L8|FADD_21   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J1|FADD_20   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J3|FADD_19   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J4|FADD_18   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J2|FADD_17   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  K7|FADD_16   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  H3|FADD_15   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  H4|FADD_14   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  K8|FADD_13   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  G2|FADD_12   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  G3|FADD_11   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  G4|FADD_10   |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  F3|FADD_9    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J7|FADD_8    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  E3|FADD_7    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  F4|FADD_6    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  D2|FADD_5    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  E4|FADD_4    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  C1|FADD_3    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  D3|FADD_2    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('|  J8|FADD_1    |O|UOS334|  |      |-4MA/4MA|3S| |B| ',
        '|      |CMOS|',chr(10));
Datalog('+----+----------+-+------+--+------+--------+--+-+-+-',
        '+------+----+',chr(10));
Datalog('bin_name=Good;soft_bin=1;',
'soft_bin_type=P;bin_enum=0',chr(10));
Datalog('bin_name=Open;soft_bin=2;',
'soft_bin_type=F;bin_enum=1',chr(10));
Datalog('bin_name=Short;soft_bin=3;',
'soft_bin_type=F;bin_enum=2',chr(10));
Datalog('bin_name=ICCQ_bin;soft_bin=4;',
'soft_bin_type=F;bin_enum=3',chr(10));
Datalog('bin_name=Slow_Functional;soft_bin=5;',
'soft_bin_type=F;bin_enum=4',chr(10));
Datalog('bin_name=Fast_Functional;soft_bin=6;',
'soft_bin_type=F;bin_enum=5',chr(10));
Datalog('bin_name=DC_Leakage;soft_bin=7;',
'soft_bin_type=F;bin_enum=6',chr(10));
Datalog('bin_name=AC_Prop;soft_bin=8;',
'soft_bin_type=F;bin_enum=7',chr(10));

        End;

      ResultRecord( PASS );

    TestClose;

  end; (* LOG_PINS_AND_BINS *)


procedure CONTINUITY_TEST;
(*
************************************************************************
****            CONTINUITY TEST  (OPENS)                            ****
************************************************************************
*)
  var
    TEST_RESULT    : boolean;

  begin

    TestOpen( OPENS );

      Datalog('VCC=0.0V',chr(10));

      SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );

      SET_POWER( 0V, 750mA,
                 0V, 750mA,
                 500uS ); {rev01b}

      SetupSelect( OPEN_ODD_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      TEST_RESULT := PMUConvertPF;

      SetupSelect( OPEN_EVEN_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      if (PMUConvertPF = FAIL) then
        TEST_RESULT := FAIL;
   
      if (TEST_RESULT = FAIL) then begin
	Pass_Opens := false;
	DeviceStatus := false;
      end;


      ResultRecord( TEST_RESULT );

    TestClose;

  end;  (* CONTINUITY_TEST *)


procedure SHORTS_TEST;
(*
************************************************************************
****            SHORTS TEST                                         ****
************************************************************************
*)
  var
    TEST_RESULT    : boolean;

  begin

    TestOpen( SHORTS );

    if ( V_DatalogEnabled ) then
      begin
        DatalogResetPinList( ALL_PINS_PLUS );
        DatalogSetPinList( ALL_PINS);  (* Start with all signal pins on. *)
      end;

      SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );

      SET_POWER( 0V, 750mA,
                 0V, 750mA,
                 500uS ); {rev01b}

      Datalog('VCC=0.0V',chr(10));

      SetupSelect( SHORT_ODD_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      TEST_RESULT := PMUConvertPF;

      SetupSelect( SHORT_EVEN_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      if (PMUConvertPF = FAIL) then
        TEST_RESULT := FAIL;

      if (TEST_RESULT = FAIL) then begin
	Pass_Shorts := false;
	Devicestatus := false;
       end;

      ResultRecord( TEST_RESULT );

    TestClose;

  end;  (* SHORTS_TEST *)


procedure DIODE_TEST;
(*
************************************************************************
****                        DIODE TEST                              ****
************************************************************************
*)
  var
    TEST_RESULT    : boolean;

  begin

    if Datalog_In_Production then
     begin
         CONTINUITY_TEST;

     end
    else
    begin

    TestOpen( DIODE );

(*
************************************************************************
**  Test Flow for Diode Procedure:                                    **
**                                                                    **
**  With Datalogger ON:                                               **
**                                                                    **
**      Call CONTINUITY & SHORTS procedures. When complete, exit DIODE**
**         procedure.                                                 **
**                                                                    **
**  With Datalogger OFF:                                              **
**                                                                    **
**      If DIODE procedure passes, then Bin 02 & Bin 03 are logged as **
**         passing.                                                   **
**                                                                    **
**      If DIODE procedure fails, then CONTINUITY is called and Bin 02**
**         is logged appropriately. If Bin 02 passes, then SHORTS is  **
**         called and Bin 03 is logged appropriately.  If Bin 03      **
**         passes, DIODE completes execution and continues on with the**
**         next procedure in the Test Sequence.                       **
**                                                                    **
************************************************************************
*)

      SetupSelect( OPEN_PINS_DC, FORMAT_1, TIMING_1 );

      SET_POWER( 0V, 750mA,
                 0V, 750mA,
                 500uS ); {rev01b}

      SetupSelect( DIODE_ODD_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      TEST_RESULT := PMUConvertPF;

      SetupSelect( DIODE_EVEN_DC, CONTY_FORMAT, CONTY_AC );
      wait( 10mS );

      if (PMUConvertPF = FAIL) or (TEST_RESULT = FAIL) then
        begin
          TestClose;  {Close DIODE_TEST}
          CONTINUITY_TEST;
        end
      else  {DIODE Procedure passes}
        begin
          TestClose;  {Close DIODE_TEST}
          {Bin02 (CONTINUITY) set to PASS}
          TestOpen( OPENS );
            ResultRecord( PASS );
          TestClose;

        end;

    end;
  end;  (* DIODE_TEST *)


{(rev03b)...}
procedure User_DeviceSort; export;	

(*
*******************************************************************************
* This procedure displays the results of the device just tested in terms of   * 
* usn, bin, cat, and class.  It references the window variable display_option * 
* to determine how much of this information to print out.                     *
*******************************************************************************
*)

(*
*******************************************************************************
* This procedure displays the results of the device just tested in terms of   * 
* usn, bin, cat, and class.  It references the window variable display_option * 
* to determine how much of this information to print out.                     *
*******************************************************************************
*)

var
	bin_value    : BinNames;
	cat_value    : CatNames;
	class_value  : ClassNames;
	usn_value    : integer;
	
begin  

 DeviceGetData(usn_value,class_value,bin_value,cat_value);
 bin_num := BinGetNumber(DeviceGetBin);     

ReWriteAppend(file003, 'all_test_data.txt');
      
Case Datalog_mode of
ENG:
begin
  Writeln(file003, ' Serial ', usn_value:2, ' Fab ', die_id_fab:2, 
  ' Lot# ', die_id_lot_nb:7, ' Wf# ', die_id_wafer_nb:2, 
  ' x ', die_id_x:2, ' y ', die_id_y:2, ' Rep ', die_id_ram_repair:2,
  ' Bin ', bin_value:20,' Bin ', bin_num:2,' Cat ', cat_value:20,
  ' TC005 ',Tc005:5:3,' TC480 ',Tc480:5:3,' TC490 ',Tc490:5:3,
  ' TCMGS ', Tcmgs:5:3,' TCTD0 ',Tctd0:5:3,
  ' VDD1 ',   PM291P5VDD1PRE:5:3, 
  ' VDD2 ',   PM291P5VDD2PRE:5:3,
  ' VDD4 ',   PM291P5VDD4PRE:5:3, 
  ' VDDSHV1 ',PM291P5VDDSHVPRE:5:3); 
end;
end;

end;  



procedure INIT_SEARCH_VAR;
(*
************************************************************************
****            INITIAL QUAL DATALOG VARIABLES                      ****
************************************************************************
*)
begin 
 	
Tc005	:=0ns;
Tc480	:=0ns;
Tc490	:=0ns;

Tcmgs	:=0ns;
Tcup0	:=0ns;
Tcut0	:=0ns;

Tcqh0	:=0ns;	
Tctd0	:=0ns;	
Tcv10	:=0ns;


die_id_x		:=0;
die_id_y		:=0;
die_id_wafer_nb		:=0;
die_id_lot_nb		:=0;
die_id_fab		:=0;
die_id_ram_repair	:=0;
 

end; { INIT_SEARCH_VAR }



procedure INIT_QUAL_VAR;
(*
************************************************************************
****            INITIAL QUAL DATALOG VARIABLES                      ****
************************************************************************
*)
begin 
 	
MVMINPRER901 := 0;
MVMINPRER902 := 0;
MVMINPRER903 := 0;
MVMINPREL60 :=0;
MVMINPRELY0 :=0;
MVMINPREM20 :=0;
MVMINPREM60 :=0;
MVMAXPRER90 := 0;
AVMINPRE080  := 0;
AVMINPRE010  := 0;
AVMINPRE120  := 0;
AVMINPRE310  := 0;
AVMINPRE370  := 0;
AVMINPRE030  := 0;
AVMINPRE040  := 0;
AVMINPRE200  := 0;
AVMINPRE300  := 0;
AVMINPOST080 := 0;
AVMINPOST010 := 0;
AVMINPOST120 := 0;
AVMINPOST310 := 0;
AVMINPOST370 := 0;
AVMINPOST030 := 0;
AVMINPOST040 := 0;
AVMINPOST200 := 0;
AVMINPOST300 := 0;
ADELTA080    := 0;
ADELTA010    := 0;
ADELTA120    := 0;
ADELTA310    := 0;
ADELTA370    := 0;
ADELTA030    := 0;
ADELTA040    := 0;
ADELTA200    := 0;
ADELTA300    := 0;
CVMINPREA20  := 0;
CVMINPREH80  := 0;
CVMINPREAF0  := 0;
CVMINPREHL0  := 0;
CVMINPREA10  := 0;
CVMINPREH70  := 0;
CVMINPREBY0  := 0;
CVMINPREJ40  := 0;
CVMINPREC40  := 0;
CVMINPREJA0  := 0;
CVMINPRE490  := 0;
CVMINPRE500  := 0;
CVMINPRE510  := 0;
CVMINPRE520  := 0;
CVMINPREPB0  := 0;
CVMINPREPC0  := 0;
CVMINPREPD0  := 0;
CVMINPOSTA20 := 0;
CVMINPOSTH80 := 0;
CVMINPOSTAF0 := 0;
CVMINPOSTHL0 := 0;
CVMINPOSTA10 := 0;
CVMINPOSTH70 := 0;
CVMINPOSTBY0 := 0;
CVMINPOSTJ40 := 0;
CVMINPOSTC40 := 0;
CVMINPOSTJA0 := 0;
CVMINPOST490 := 0;
CVMINPOST500 := 0;
CVMINPOST510 := 0;
CVMINPOST520 := 0;
CVMINPOSTPB0 := 0;
CVMINPOSTPC0 := 0;
CVMINPOSTPD0 := 0;
CDELTAA20    := 0;
CDELTAH80    := 0;
CDELTAAF0    := 0;
CDELTAHL0    := 0;
CDELTAA10    := 0;
CDELTAH70    := 0;
CDELTABY0    := 0;
CDELTAJ40    := 0;
CDELTAC40    := 0;
CDELTAJA0    := 0;
CDELTA490    := 0;
CDELTA500    := 0;
CDELTA510    := 0;
CDELTA520    := 0;
CDELTAPB0    := 0;
CDELTAPC0    := 0;
CDELTAPD0    := 0;
MVMINPREDS0  := 0;
MVMINPREMN0  := 0;
MVMINPREKZ0  := 0;
MVMINPREDP0  := 0;
MVMINPREDQ0  := 0;
MVMINPREML0  := 0;
MVMINPREMK0  := 0;
MVMINPOSTDS0 := 0;
MVMINPOSTMN0 := 0;
MVMINPOSTKZ0 := 0;
MVMINPOSTDP0 := 0;
MVMINPOStDQ0 := 0;
MVMINPOSTML0 := 0;
MVMINPOSTMK0 := 0;
MDELTADS0    := 0;
MDELTAMN0    := 0;
MDELTAKZ0    := 0;
MDELTADP0    := 0;
MDELTADQ0    := 0;
MDELTAML0    := 0;
MDELTAMK0    := 0;
CFREQPREA20  := 0;
CFREQPREH80  := 0;
CFREQPREAF0  := 0;
CFREQPREHL0  := 0;
CFREQPREA10  := 0;
CFREQPREH70  := 0;
CFREQPREBY0  := 0;
CFREQPREJ40  := 0;
CFREQPREC40  := 0;
CFREQPREJA0  := 0;
CFREQPRE490  := 0;
CFREQPRE500  := 0;
CFREQPRE510  := 0;
CFREQPRE520  := 0;
CFREQPREPB0  := 0;
CFREQPREPC0  := 0;
CFREQPREPD0  := 0;
CFREQPOSTA20 := 0;
CFREQPOSTH80 := 0;
CFREQPOSTAF0 := 0;
CFREQPOSTHL0 := 0;
CFREQPOSTA10 := 0;
CFREQPOSTH70 := 0;
CFREQPOSTBY0 := 0;
CFREQPOSTJ40 := 0;
CFREQPOSTC40 := 0;
CFREQPOSTJA0 := 0;
CFREQPOST490 := 0;
CFREQPOST500 := 0;
CFREQPOST510 := 0;
CFREQPOST520 := 0;
CFREQPOSTPB0 := 0;
CFREQPOSTPC0 := 0;
CFREQPOSTPD0 := 0;
PM291P5VDD2PRE := 0;  
PM291P5VDD4PRE := 0;  
PM291P5VDD1PRE := 0;  
PM291P5VDDSHVPRE := 0;
PM291P5VDDSHV1PRE := 0;  {...rev08c}
PM291P5VDDSHV2PRE := 0;  {...rev08c}
PM291P5VDD2POST := 0; 
PM291P5VDD4POST := 0; 
PM291P5VDD1POST := 0; 
PM291P5VDDSHVPOST := 0;
PM301P5VDD2PRE := 0;  
PM301P5VDD4PRE := 0;  
PM301P5VDD1PRE := 0;  
PM301P5VDDSHVPRE := 0;
PM301P5VDD2POST := 0; 
PM301P5VDD4POST := 0; 
PM301P5VDD1POST := 0; 
PM301P5VDDSHVPOST := 0;
PM311P5VDD2PRE := 0;  
PM311P5VDD4PRE := 0;  
PM311P5VDD1PRE := 0;  
PM311P5VDDSHVPRE := 0;
PM311P5VDD2POST := 0; 
PM311P5VDD4POST := 0; 
PM311P5VDD1POST := 0; 
PM311P5VDDSHVPOST := 0;
PM321P5VDD2PRE := 0;  
PM321P5VDD4PRE := 0;  
PM321P5VDD1PRE := 0;  
PM321P5VDDSHVPRE := 0;
PM321P5VDD2POST := 0; 
PM321P5VDD4POST := 0; 
PM321P5VDD1POST := 0; 
PM321P5VDDSHVPOST := 0;
PM331P5VDD2PRE := 0;  
PM331P5VDD4PRE := 0;  
PM331P5VDD1PRE := 0;  
PM331P5VDDSHVPRE := 0;
PM331P5VDD2POST := 0; 
PM331P5VDD4POST := 0; 
PM331P5VDD1POST := 0; 
PM331P5VDDSHVPOST := 0;
PM341P5VDD2PRE := 0;  
PM341P5VDD4PRE := 0;  
PM341P5VDD1PRE := 0;  
PM341P5VDDSHVPRE := 0;
PM341P5VDD2POST := 0; 
PM341P5VDD4POST := 0; 
PM341P5VDD1POST := 0; 
PM341P5VDDSHVPOST := 0;
PM351P5VDD2PRE := 0;  
PM351P5VDD4PRE := 0;  
PM351P5VDD1PRE := 0;  
PM351P5VDDSHVPRE := 0;
PM351P5VDD2POST := 0; 
PM351P5VDD4POST := 0; 
PM351P5VDD1POST := 0; 
PM351P5VDDSHVPOST := 0;
PM361P5VDD2PRE := 0;  
PM361P5VDD4PRE := 0;  
PM361P5VDD1PRE := 0;  
PM361P5VDDSHVPRE := 0;
PM361P5VDD2POST := 0; 
PM361P5VDD4POST := 0; 
PM361P5VDD1POST := 0; 
PM361P5VDDSHVPOST := 0;
PM371P5VDD2PRE := 0;  
PM371P5VDD4PRE := 0;  
PM371P5VDD1PRE := 0;  
PM371P5VDDSHVPRE := 0;
PM371P5VDD2POST := 0; 
PM371P5VDD4POST := 0; 
PM371P5VDD1POST := 0; 
PM371P5VDDSHVPOST := 0;
PM381P5VDD2PRE := 0;  
PM381P5VDD4PRE := 0;  
PM381P5VDD1PRE := 0;  
PM381P5VDDSHVPRE := 0;
PM381P5VDD2POST := 0; 
PM381P5VDD4POST := 0; 
PM381P5VDD1POST := 0; 
PM381P5VDDSHVPOST := 0;
PM391P5VDD2POST  := 0;
PM391P5VDD21POST := 0;
PM391P5VDD4POST  := 0;
PM391P5VDD1POST  := 0;
PM401P5VDD2POST  := 0;
PM401P5VDD21POST := 0;
PM401P5VDD4POST  := 0;
PM401P5VDD1POST  := 0;

OSC32KINPM1	:= 0;
OSC32KINPM3	:= 0;


FREQMGS3ALL  := 0;
FREQARMALL  := 0;
FREQTCALL  := 0;
FREQOMAPALL  := 0;

end; { INIT_QUAL_VAR }

function READ_ICCQ : treal;
(*
************************************************************************
****            MEASURE ICCQ AT ONE PM STOP                         ****
************************************************************************
*)

  begin  (* READ_ICCQ *)

    IccqPMResult := PASS;


  CASE TIDeviceType OF
    FT_1_HV ,
    FT_1_LV :
      BEGIN

(* PS_VDD2 *)
    SupplySetComp( PS_VDD2, 1uF );

    SupplySetLimit(PS_VDD2, VMX1V_I, ICCQ_ARANGE,
                    ICCQ_AMAX, ICCQ_AMIN ); 
    wait(30ms);


    if SupplyReadLimit( PS_VDD2, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;

    ICCQ_VDD2_PST := ICCQ_value; 
    if (ICCQ_LOG) then
         write(iccq_dlog, single(ICCQ_VDD2_PST):10, '|':2);


(* PS_VDD1 *)
    SupplySetComp( PS_VDD1, 1uF );

    SupplySetLimit(PS_VDD1, VMX1V_I, ICCQ_CRANGE,
                    ICCQ_CMAX, ICCQ_CMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD1, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDD1 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDD1):10, '|':2);

      END;

{ftstack01a...}
    FT_STACK_HV, FT_STACK_LV :

      BEGIN

{
(* PS_VDD2 *)
    SupplySetComp( PS_VDD2, 1uF );

    SupplySetLimit(PS_VDD2, VMX1V_I, ICCQ_ARANGE,
                    ICCQ_AMAX, ICCQ_AMIN ); 
    wait(30ms);


    if SupplyReadLimit( PS_VDD2, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;

    ICCQ_VDD2_PST := ICCQ_value; 
    if (ICCQ_LOG) then
         write(iccq_dlog, single(ICCQ_VDD2_PST):10, '|':2);
}

(* PS_VDD1 *)
    SupplySetComp( PS_VDD1, 1uF );

    SupplySetLimit(PS_VDD1, VMX1V_I, ICCQ_CRANGE,
                    ICCQ_CMAX, ICCQ_CMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD1, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDD1 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDD1):10, '|':2);

      END;
{...ftstack01a}
  END; {case of TIDeviceType}

      SET_POWER( VMX1V_I, 750mA,
                 VMX3V_I, 750mA,
                 2mS ); {rev01b}

    READ_ICCQ := ICCQ_READ;

  end;   (* READ_ICCQ *)

function READ_ICCQ_IO : treal;
(*
************************************************************************
****            MEASURE ICCQ AT ONE PM STOP                         ****
************************************************************************
*)

  begin  (* READ_ICCQ_IO *)

    IccqPMResult := PASS;


  CASE TIDeviceType OF
{(rev03c)...}
    FT_1_HV ,
    FT_1_LV :
      BEGIN

(* PS_VDDSHV1 *)
    SupplySetComp( PS_VDDSHV1, 1uF );

    SupplySetLimit( PS_VDDSHV1, VMX3V_I, ICCQ_IRANGE,
                    ICCQ_IMAX, ICCQ_IMIN); 

    wait(50ms);

    if SupplyReadLimit( PS_VDDSHV1, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDDSHV1 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDDSHV1):10, '|':2);

      END;

{ftstack01a...}
    FT_STACK_HV, FT_STACK_LV :

      BEGIN


(* Helen1 IO *)
    SupplySetComp( PS_VDDSHV, 1uF );

    SupplySetLimit( PS_VDDSHV, VMX3V_I, ICCQ_IRANGE,
                    ICCQ_IMAX, ICCQ_IMIN); 

    wait(50ms);

    if SupplyReadLimit( PS_VDDSHV, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDDSHV1 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDDSHV1):10, '|':2);

(* FLASH IO *)
    SupplySetComp( PS_VDD2, 1uF );

    SupplySetLimit( PS_VDD2, VMX3V_I, ICCQ_IRANGE,
                    ICCQ_IMAX, ICCQ_IMIN); 

    wait(50ms);

    if SupplyReadLimit( PS_VDD2, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDDSHV2 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDDSHV2):10, '|':2);

{rev08c...}
(* FLASH CORE *)
    SupplySetComp( PS_VDDSHV1, 1uF );

    SupplySetLimit( PS_VDDSHV1, VMX3V_I, ICCQ_CRANGE,
                    ICCQ_CMAX, ICCQ_CMIN); 

    wait(50ms);

    discard(SupplyReadLimit( PS_VDDSHV1, s_CURRENT, ICCQ_value ));
     ICCQ_VDDSHV := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDDSHV):10, '|':2);
{...rev08c}

      END;
{...ftstack01a}
  END; {case of TIDeviceType}

      SET_POWER( VMX1V_I, 750mA,
                 VMX3V_I, 750mA,
                 2mS ); {rev01b}

    READ_ICCQ_IO := ICCQ_READ;

  end;   (* READ_ICCQ_IO *)



function READ_ICCQ_DPLL : treal;
(*
************************************************************************
****            MEASURE ICCQ AT ONE PM STOP                         ****
************************************************************************
*)

  begin  (* READ_ICCQ_DPLL *)

    IccqPMResult := PASS;


  CASE TIDeviceType OF
{(rev03c)...}
    FT_1_HV ,
    FT_1_LV :
      BEGIN

(* PS_VDD4 *)
    SupplySetComp( PS_VDD4, 10uF ); {rev03d} 

    SupplySetLimit(PS_VDD4, VMX1V_I, ICCQ_DRANGE,
                    ICCQ_DMAX, ICCQ_DMIN ); 
    wait(100ms);

    if SupplyReadLimit( PS_VDD4, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;			
        IccqPMResult := FAIL;				
      end;
    ICCQ_VDD4 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDD4):10, '|':2);

     END;

{ftstack01a...}
    FT_STACK_HV, FT_STACK_LV :

      BEGIN


(* PS_VDD4 *)
    SupplySetComp( PS_VDD4, 10uF ); {rev03d} 

    SupplySetLimit(PS_VDD4, VMX1V_I, ICCQ_DRANGE,
                    ICCQ_DMAX, ICCQ_DMIN ); 
    wait(100ms);

    if SupplyReadLimit( PS_VDD4, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;			
        IccqPMResult := FAIL;				
      end;
    ICCQ_VDD4 := ICCQ_value; {rev03c}
    if (ICCQ_LOG) then
         write(iccq_dlog, '|', single(ICCQ_VDD4):10, '|':2);

      END;
{...ftstack01a}
  END; {case of TIDeviceType}

      SET_POWER( VMX1V_I, 750mA,
                 VMX3V_I, 750mA,
                 2mS ); {rev01b}

    READ_ICCQ_DPLL := ICCQ_READ;

  end;   (* READ_ICCQ_DPLL *)

function READ_ICCQ_LV : treal;
(*
************************************************************************
****            MEASURE ICCQ AT ONE PM STOP                         ****
************************************************************************
*)

  begin  (* READ_ICCQ_LV *)

    IccqPMResult := PASS;


  CASE TIDeviceType OF

    FT_1_HV ,
    FT_1_LV :
      BEGIN

(* PS_VDD2 *)
    SupplySetComp( PS_VDD2, 1uF );

    SupplySetLimit(PS_VDD2, VTMX1V_LV, ICCQ_ARANGE,
                    ICCQ_AMAX, ICCQ_AMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD2, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;

    ICCQ_VDD2_PST := ICCQ_value; {rev03c}

(* PS_VDD4 *)
    SupplySetComp( PS_VDD4, 10uF ); {rev03d} 

    SupplySetLimit(PS_VDD4, VTMX1V_LV, ICCQ_DRANGE,
                    ICCQ_DMAX, ICCQ_DMIN ); 
    wait(100ms); {hijirev08i}

    if SupplyReadLimit( PS_VDD4, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;			
        IccqPMResult := FAIL;				
      end;
    ICCQ_VDD4 := ICCQ_value; {rev03c}


(* PS_VDD1 *)
    SupplySetComp( PS_VDD1, 1uF );

    SupplySetLimit(PS_VDD1, VTMX1V_LV, ICCQ_CRANGE,
                    ICCQ_CMAX, ICCQ_CMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD1, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDD1 := ICCQ_value; 

      END;

{ftstack01a...}
    FT_STACK_HV, FT_STACK_LV :

      BEGIN

{
(* PS_VDD2 *)
    SupplySetComp( PS_VDD2, 1uF );

    SupplySetLimit(PS_VDD2, VTMX1V_LV, ICCQ_ARANGE,
                    ICCQ_AMAX, ICCQ_AMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD2, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;

    ICCQ_VDD2_PST := ICCQ_value; {rev03c}
}
(* PS_VDD4 *)
    SupplySetComp( PS_VDD4, 10uF ); {rev03d} 

    SupplySetLimit(PS_VDD4, VTMX1V_LV, ICCQ_DRANGE,
                    ICCQ_DMAX, ICCQ_DMIN ); 
    wait(100ms); {hijirev08i}

    if SupplyReadLimit( PS_VDD4, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;			
        IccqPMResult := FAIL;				
      end;
    ICCQ_VDD4 := ICCQ_value; {rev03c}


(* PS_VDD1 *)
    SupplySetComp( PS_VDD1, 1uF );

    SupplySetLimit(PS_VDD1, VTMX1V_LV, ICCQ_CRANGE,
                    ICCQ_CMAX, ICCQ_CMIN ); 
    wait(30ms);

    if SupplyReadLimit( PS_VDD1, s_CURRENT, ICCQ_value ) = FAIL then
      begin
        ICCQ_TEST_RESULT := FAIL;
        IccqPMResult := FAIL;
      end;
    ICCQ_VDD1 := ICCQ_value; 

      END;
{...ftstack01a}
  END; {case of TIDeviceType}

      SET_POWER( VMX1V_I, 750mA,
                 VMX3V_I, 750mA,
                 2mS ); {rev01b}

    READ_ICCQ_LV := ICCQ_READ;

  end;   (* READ_ICCQ_LV *)

procedure ICCQ_TEST;
(*
************************************************************************
****            ICCQ TEST                                           ****
****                                                                ****
**** For GS40 Autogen assumes all pull-up cells will be disabled ****
**** during ICCQ measurements. All inputs & I/O's in input state    ****
**** will be driven.                                                ****
****                                                                ****
************************************************************************
*)
  var
    RESULT         : boolean;
    STATUS         : integer;
    i1             : integer;
ICCQ_TOTAL	   : TReal; {hijirev11b}



  begin  (* ICCQ_TEST *)

  TestOpen( ICCQ );
  Datalog('VCC=',VMX1V_I,chr(10));
  SET_POWER( VMX1V_I, 750mA, VMX3V_I, 750mA, 2mS ); {rev01b}
  SetupSelect( ICCQ_DC, FORMAT_1, TIMING_1b );
  ACSetInOut( OUT1_TS1_ACG, 0NS, 0NS, 95.000NS, 15.00NS-TGB, 20.000NS+TGB);
  discard (PatternExecute( STATUS, F751686_55922180 )); {rev16b}
  Enable( s_IGNORE_FUNC_FAIL, s_PMExit );
  wait( 2mS );

  ICCQ_TEST_RESULT := PASS;
  ICCQ_TOTAL  :=0; {hijirev11b}

  SetupSelect( ICCQ_DC, FORMAT_1, TIMING_1b );
  ACSetInOut( OUT1_TS1_ACG, 0NS, 0NS, 95.000NS, 15.00NS-TGB, 20.000NS+TGB);

  PMExSetDelay( s_PFLAGS, 1 );  (* PM 29 *)

  (* hel_icc_10 *)
  Datalog('comment=''TDL NAME: hel_icc_10  PM: 29',
                  '  VECTOR: 96''',chr(10));
  RESULT := PatternExecute( STATUS, F751686_55922180 );

  SetupSelect( ICCQ_PM_BLEED, FORMAT_1, TIMING_1b );
  DCSetPMU( 6V, 0V, 0V,
                    -50uA, 50uA, ICCQ_OPEN_PM29 );
  DCSetOpen( ICCQ_OPEN_PM29 );
  DCSetForce( VMX1V_I, ICCQ_ZPINS_PM29 );

  discard( READ_ICCQ );
  discard( READ_ICCQ_DPLL );
  discard( READ_ICCQ_IO );

  ICCQ_TEST_RESULT := PASS ;
  PM291P5VDD2PRE := ICCQ_VDD2_PST;
  PM291P5VDD4PRE := ICCQ_VDD4;
  PM291P5VDD1PRE := ICCQ_VDD1;
  PM291P5VDDSHVPRE := ICCQ_VDDSHV1;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('PM291P5VDD2PRE', Amps, single(PM291P5VDD2PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD4PRE', Amps, single(PM291P5VDD4PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD1PRE', Amps, single(PM291P5VDD1PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDDSHVPRE', Amps, single(PM291P5VDDSHVPRE),
                                   TWMinimumData);
#endif
#endif

{hijirev11b...}
ICCQ_TEST_RESULT := PASS;
ICCQ_TOTAL := abs(PM291P5VDD2PRE) + abs(PM291P5VDD4PRE) + abs(PM291P5VDD1PRE) 
	      + abs(PM291P5VDDSHVPRE); {rev13c}


if (abs(PM291P5VDD2PRE)   > ICCQ_AMAX) or 
   (abs(PM291P5VDD4PRE)   > ICCQ_DMAX) or
   (abs(PM291P5VDD1PRE)   > ICCQ_CMAX) or 
   (abs(PM291P5VDDSHVPRE) > ICCQ_IMAX) then	
  begin
    ICCQ_TEST_RESULT := FAIL;
    DeviceStatus := FAIL;
  end;



      ResultRecord( ICCQ_TEST_RESULT );

      Disable( s_IGNORE_FUNC_FAIL, s_PMExit );

    TestClose;

  end;  (* ICCQ_TEST *)


{hijirev10d...}
procedure DEEP_SLEEP_ICCQ;
(*
************************************************************************
****            ICCQ TEST                                           ****
****                                                                ****
**** For GS40 Autogen assumes all pull-up cells will be disabled ****
**** during ICCQ measurements. All inputs & I/O's in input state    ****
**** will be driven.                                                ****
****                                                                ****
************************************************************************
*)
  var
    RESULT         : boolean;
    STATUS         : integer;
    i1             : integer;
TOTAL_ICCQ_DEEP_SLEEP	   : TReal;
DEEP_SLEEP_ICCQ_RESULT	   : boolean;


  begin  (* DEEP_SLEEP_ICCQ *)

{rev14c...}
ICCQ_VDD2_PST := 0na;
ICCQ_VDD4 := 0na;
ICCQ_VDD1 := 0na;
{...rev14c}

    TestOpen( DEEP_SLEEP );
      Datalog('VCC=',VMX1V_I,chr(10));
      SET_POWER( VMX1V_I, 750mA,VMX3V_I, 750mA,2mS ); {rev01b}
      Enable( s_IGNORE_FUNC_FAIL, s_PMExit );
      wait( 2mS );

      DEEP_SLEEP_ICCQ_RESULT := PASS;

      (*  ICCQ MEASURE STATEMENT IN TDL *)
      SetupSelect( ICCQ_DC, FORMAT_9, TIMING_9 );
      FormatSetInOut(s_OFF, s_NR, s_OFF, CLK32K_OUT);
      PMExSetDelay( s_PFLAGS, 1 );  (* PM 39 *)
      (* hel_tdl_sleep_sync *)
      Datalog('comment=''TDL NAME: hel_tdl_sleep_sync  PM: 39',
                  '  VECTOR: 4041''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922430 );
      SetupSelect( ICCQ_PM_BLEED, FORMAT_9, TIMING_9 );
      DCSetPMU( 6V, 0V, 0V,
                    -50uA, 50uA, ICCQ_OPEN_PM39 );
      DCSetOpen( ICCQ_OPEN_PM39 );
      DCSetForce( VMX1V_I, OSC1_OUT );

      discard( READ_ICCQ );
      discard( READ_ICCQ_DPLL );

  ICCQ_TEST_RESULT := PASS ;
  PM291P5VDD2PRE := ICCQ_VDD2_PST;
  PM291P5VDD4PRE := ICCQ_VDD4;
  PM291P5VDD1PRE := ICCQ_VDD1;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('PM401P5VDD2PRE', Amps, single(PM401P5VDD2PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD4PRE', Amps, single(PM401P5VDD4PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD1PRE', Amps, single(PM401P5VDD1PRE),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD2POST', Amps, single(PM381P5VDD2POST),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD4POST', Amps, single(PM381P5VDD4POST),
                                   TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD1POST', Amps, single(PM381P5VDD1POST),
                                   TWMinimumData);
#endif
#endif


TOTAL_ICCQ_DEEP_SLEEP := abs(PM401P5VDD2PRE) + abs(PM401P5VDD4PRE) + 
	      abs(PM401P5VDD1PRE);

if (abs(PM291P5VDD2PRE) > ICCQ_AMAX) or (abs(PM291P5VDD4PRE) > ICCQ_DMAX) or
(abs(PM291P5VDD1PRE) >   ICCQ_CMAX)  then	
  begin
    DEEP_SLEEP_ICCQ_RESULT := FAIL;
    DeviceStatus := FAIL;
  end;

      ResultRecord( DEEP_SLEEP_ICCQ_RESULT );

TOTAL_ICCQ_FJ_1p5 := TOTAL_ICCQ_DEEP_SLEEP; {rev15a}

      Disable( s_IGNORE_FUNC_FAIL, s_PMExit );

    TestClose;

  end;  (* DEEP_SLEEP_ICCQ *)
{...hijirev10d}





{hijirev10g...}
procedure TLB_MAX_TEST;
  var
    STATUS         : integer;
TEST_RESULT	   : boolean;
TLB_175V_RESULT	   : boolean;

  begin  (* TLB_MAX_TEST *)

TEST_RESULT := PASS;
TLB_175V_RESULT := PASS;

        TestOpen( TLB_175V ); (* led_test *)
          Datalog('comment=''TDL NAME: led_test''',chr(10));


          SET_POWER(1.75V, 2A,
		    VMX3V, 2A,
		    2ms);

         SetupSelect( FAST_MAX_DC, FORMAT_9 ,
                                   TIMING_9 );

  DCSetLDOFF( 1.75V, 0V,CP, 1.75V*0.75, 1.75V*0.25, OSC1V_INS );
  DCSetDyn( 1.75V, 0V,CP, 1.75V*0.75, 1.75V*0.25, 1.75V*0.5,
		 -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( 1.75V, 0V,CP, 1.75V*0.75, 1.75V*0.25, 1.75V*0.5,
		 -10.0uA, 10.0uA, OSC1V_IOS );

	 wait(2ms);

          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );


	if ( TEST_RESULT = FAIL ) then
          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );

	if ( TEST_RESULT = FAIL ) then
          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );

	if ( TEST_RESULT = FAIL ) then TLB_175V_RESULT := FAIL;

SearchVdd('FAST_MAX_DC', S_BINARY,
	   F751686_55922r90,F751686_55922r90,
	   1.5v, 2.5v, 25mV, 'c');

MVMAXPRER90 := SearchValue;


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMAXPRER90', Volts, single(MVMAXPRER90),
                                   TWMinimumData);
#endif
#endif


          ResultRecord( TEST_RESULT );
        TestClose;


	if (TLB_175V_RESULT = FAIL) then 
	begin

TEST_RESULT := PASS;

        TestOpen( TLB_17V ); (* led_test *)
          Datalog('comment=''TDL NAME: led_test''',chr(10));


          SET_POWER(1.7V, 2A,
		    VMX3V, 2A,
		    2ms);

         SetupSelect( FAST_MAX_DC, FORMAT_9 ,
                                   TIMING_9 );

  DCSetLDOFF( 1.7V, 0V,CP, 1.7V*0.75, 1.7V*0.25, OSC1V_INS );
  DCSetDyn( 1.7V, 0V,CP, 1.7V*0.75, 1.7V*0.25, 1.7V*0.5,
		 -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( 1.7V, 0V,CP, 1.7V*0.75, 1.7V*0.25, 1.7V*0.5,
		 -10.0uA, 10.0uA, OSC1V_IOS );

	 wait(2ms);

          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );


	if ( TEST_RESULT = FAIL ) then
          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );

	if ( TEST_RESULT = FAIL ) then
          TEST_RESULT := PatternExecute( STATUS, F751686_55922r90 );

          ResultRecord( TEST_RESULT );
        TestClose;
	end;

  end;  (* TLB_MAX_TEST *)
{...hijirev10g}

procedure MEM_RET_ICCQ_LV;

  var
    TEST_RESULT         : boolean;
    STATUS         : integer;
    i1             : integer;



  begin  (* MEM_RET_ICCQ_LV *)

    TestOpen( MEM_RET_ICCQ );

      SET_POWER( VNM1V, 750mA,
                 {VNM3V}1.8V, 750mA, {ftvsrev10i}
                 2mS ); 

{      wait( 10mS ); } {hijirev08l}

TEST_RESULT := PASS;

{amitvxxx...ftvsrev12f}

      SetupSelect( FAST_NOM_DC, FORMAT_11,
                   TIMING_11 );
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa3V_INS );
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa18V_INS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_IOS );{rev13h}
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSY );
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSYZ );
      wait( 2mS );


(* CHECKERBOARD MGS3 WRITE *)
if (TEST_RESULT = PASS) then 
          TEST_RESULT := PatternExecute( STATUS, F751686_55922rk0 );


{ftvsrev12f...amitvxxx}


      SetupSelect( FAST_NOM_DC, FORMAT_9,
                   TIMING_9 );
{ftvsrev10i...}
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa3V_INS );
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa18V_INS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_IOS );{rev13h}
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSY );
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSYZ );
{...ftvsrev10i}
PeriodSetBase(130NS);      
ACTableSet(130NS, 'TIMING_9');
      wait( 2mS );

{ftvsrev12e...}
Enable (S_Ignore_Func_Fail);
      discard(PatternExecute( STATUS, F751686_55922ra0 ));
Disable (S_Ignore_Func_Fail);

      discard(PatternExecute( STATUS, F751686_55922ra0 ));
{...ftvsrev12e}


(* STRESS TDLS *)
if (TEST_RESULT = PASS) then 
   begin
      Enable(s_PMExit );
      PMExSetDelay( s_PFLAGS, 1 );
      TEST_RESULT := PatternExecute( STATUS, F751686_55922ra0 );
   end;
if (TEST_RESULT = PASS) then 
begin
SupplySet(PS_VDD1, 1.0v,750ma); {hijirev08m}
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, 1.0v,750ma); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, 1.0v,750ma); {ftvsrev10f}
SupplySet(PS_VDD4, 1.0v,750ma); {hijirev08m}
wait(500ms);

SupplySet(PS_VDD1, 1.5v,750ma);
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, 1.5v,750ma); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, 1.5v,750ma); {ftvsrev10f}
SupplySet(PS_VDD4, 1.5v,750ma);
wait (10ms);

      Disable(s_PMExit );
      TEST_RESULT := PatternContinue( STATUS );
end;

{amitvxxx...
if (TEST_RESULT = PASS) then 
   begin
      Enable(s_PMExit );
      PMExSetDelay( s_PFLAGS, 1 );
      TEST_RESULT := PatternExecute( STATUS, F751686_55922rb0 );
   end;
if (TEST_RESULT = PASS) then 
begin
SupplySet(PS_VDD1, 1.0v,750ma); {hijirev08m}
SupplySet(PS_VDD2, 1.0v,750ma); {hijirev08m}
SupplySet(PS_VDD4, 1.0v,750ma); {hijirev08m}
wait(50ms);

SupplySet(PS_VDD1, 1.5v,750ma);
SupplySet(PS_VDD2, 1.5v,750ma);
SupplySet(PS_VDD4, 1.5v,750ma);
wait (10ms);

      Disable(s_PMExit );
      TEST_RESULT := PatternContinue( STATUS );
end;

...amitvxxx}

{ftvsrev12f...}
      SetupSelect( FAST_NOM_DC, FORMAT_11,
                   TIMING_11 );
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa3V_INS );
  DCSetLDOFF( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, CMOSa18V_INS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_OUTS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_OUTS );{rev13h}
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa3V_IOS );
  DCSetDyn( 1.8V, 0V,CP, 1.8V*0.5, 1.8V*0.5, 1.8V*0.8, -2.0mA, 2.0mA,
              CMOSa18V_IOS );{rev13h}
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSY );
  DCSetDyn( 1.8V, 0.0V,CP, 0.9V, 0.9V, 1.440V, -10uA, 10uA,
              USB3V_IOSYZ );
      wait( 2mS );

if (TEST_RESULT = PASS) then 
          TEST_RESULT := PatternExecute( STATUS, F751686_55922ri0 );
{...ftvsrev12f}


if (TEST_RESULT = FAIL) then DeviceStatus := false;
      ResultRecord( TEST_RESULT );

    TestClose;

  end;  (* MEM_RET_ICCQ_LV *)



procedure OSCILLATOR_TEST;
(*
*********************************************************************
****       PERFORM LEAKAGE TEST FOR 32KHz OSCILLATOR             ****
*********************************************************************
*)
  var
    TEST_RESULT    : boolean;
    RESULT         : boolean;
    STATUS         : integer;

  begin

    TestOpen( OSC_TEST );

	VTMX1V := VOSC1V;
	VTMX3V := VOSC3V;


      Datalog('VCC=',VTMX1V,chr(10));
      Datalog('BIDI=I',chr(10));

      SET_POWER( VTMX1V, 2A,
                 VTMX3V, 2A,
                 2mS );

{      wait (25ms);} {hijirev08l}

{hijirev04d...}

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_30, TIMING_30 );
      wait(5ms);
      TEST_RESULT := PatternExecute( STATUS, F751686_55922pl0 );

{...hijirev04d}

if (TEST_RESULT = PASS) then 
begin

      Enable( s_Ignore_Func_Fail, s_PMExit );
      wait( 2mS );

{amitvxxx...
(* PM 1 *)
      SetupSelect( LEAKAGE_PIN_DC, FORMAT_30, TIMING_30 );

      PMExSetDelay( s_PFLAGS, 1 );

      Datalog('comment=''TDL NAME: Oscillators_tdl  PM: 1',
              '  VECTOR: 6495''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922pl0 );

          DCSetPMU( -5.1nA, {-14.4nA}-30nA, 0V,
                    -50nA, 50nA, OSC32K_IN );
          DCSetPMU( -1.32uA, -3.74uA, 0V,
                    -60uA, 60uA, OSC32K_OUT );
	  wait(50ms);


      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

{(rev03hiji06)...}
PMUConvertADC;
OSC32KINPM1 := PMUGetADC(OSC32K_IN);
{...(rev03hiji06)}

...amitvxxx}


(* PM 2 *)
      SetupSelect( LEAKAGE_PIN_DC, FORMAT_30, TIMING_30 );

      PMExSetDelay( s_PFLAGS, 2 );

      Datalog('comment=''TDL NAME: Oscillators_tdl  PM: 2',
              '  VECTOR: 6496''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922pl0 );


          DCSetPMU( 17.1nA, 5nA, 1.5V,
                    -50nA, 50nA, OSC32K_IN );
          DCSetPMU( 109uA, 53uA, 1.0V,
                    -150uA, 150uA, OSC32K_OUT );
      wait( 50mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

(* PM 3 *)
      SetupSelect( LEAKAGE_PIN_DC, FORMAT_30, TIMING_30 );

      PMExSetDelay( s_PFLAGS, 3 );

      Datalog('comment=''TDL NAME: Oscillators_tdl  PM: 3',
              '  VECTOR: 6497''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922pl0 );

          DCSetPMU( -3.8nA, {-10.9nA}-20nA, 0V,
                    -50nA, 50nA, OSC32K_IN );
          DCSetPMU( -0.93nA, {-2.78uA}-3.78uA, 0V, {ftvsrev10j}
                    -60uA, 60uA, OSC32K_OUT );
      wait( 50mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

{(rev03hiji06)...}
PMUConvertADC;
OSC32KINPM3 := PMUGetADC(OSC32K_IN);

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('OSC32KINPM1', Amps, single(OSC32KINPM1),
                                   TWMinimumData);
TWPDLDataLogRealVariable('OSC32KINPM3', Amps, single(OSC32KINPM3),
                                   TWMinimumData);
#endif
#endif
{...(rev03hiji06)}

(* PM 4 *)
      SetupSelect( LEAKAGE_PIN_DC, FORMAT_30, TIMING_30 );

      PMExSetDelay( s_PFLAGS, 4 );

      Datalog('comment=''TDL NAME: Oscillators_tdl  PM: 4',
              '  VECTOR: 6498''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922pl0 );

{OMAP-DSP from 5nA to 3.5nA}

          DCSetPMU( 12.9nA, 3.5nA, 1.5V,
                    -50nA, 50nA, OSC32K_IN );
          DCSetPMU( 109uA, 53uA, 1.0V,
                    -150uA, 150uA, OSC32K_OUT );
      wait( 50mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

end;

if (TEST_RESULT = FAIL) then DeviceStatus := false;
      ResultRecord( TEST_RESULT );

	VTMX1V := VMX1V;
	VTMX3V := VMX3V;

      Disable( s_Ignore_Func_Fail, s_PMExit );


    TestClose;

  end;  (* OSCILLATOR_TEST *)


{(rev02c)...}
Procedure ReadDieID_vout;

TYPE
  dieid_bit_array_type        = array[ 1..64 ] of integer;
  dieid_bit_array_type1        = array[ 1..8 ] of integer;

VAR
  status, count,k             : INTEGER; 
  result                      : BOOLEAN;
  CR                          : char;
  die_id_arr,die_id_arr_rev   : dieid_bit_array_type;
  H			      : dieid_bit_array_type1;
  i                           : integer;
  temp_real                   : real;
  DieIDPattern		      : Pattern; {hijirev08e}
BEGIN
   CR                := chr(10); { carriage return }

{hijirev08e...}
    for i := 1 to 64 do
      Die_id_arr[i] := 0; 

       SetupSelect( FAST_MIN_DC, FORMAT_10, TIMING_10 );	
       wait(2ms);

    i := 1; 
    DieIDPattern := dieid1; 
    for DieIDPattern := dieid1 to dieid64 do 
      begin

        Test_result :=  PatternExecute( Status, DieIDPattern ) ;

            if (Test_Result = fail) then
              begin
                Die_id_arr[i] := 1;
              end
            else
              begin
                Die_id_arr[i] := 0;
              end;
         i := i + 1;

       end; 
{...hijirev08e}


if (Die_id_arr[56] = 1) then
Helen1_Die := false
else
Helen1_Die := true;

   { Parse bitfields }
       { X coordinate }
       temp_real := 0;
	j := 0;
       for i := 8 downto 1 do
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-1)) );
       die_id_x := trunc( temp_real );

       { Y coordinate }
       temp_real := 0;
       for i := 16 downto 9 do
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-9)) );
       die_id_y := trunc( temp_real );

       { Wafer Number }
       temp_real := 0;
       for i := 22 downto 17 do
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-17)) );
       die_id_wafer_nb := trunc( temp_real );

       { Lot Number }
       temp_real := 0;
       for i := 46 downto 23 do
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-23)) );
       die_id_lot_nb := trunc( temp_real );

       { fab }
       temp_real := 0;
       for i := 49 downto 47 do
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-47)) );
       die_id_fab := trunc( temp_real );

       { RAM Repair }
       temp_real := 0;
       for i := 55 downto 55 do {ftvsrev11f}
           temp_real := temp_real + ( die_id_arr[i] * (2 ** (i-55)) );
       die_id_ram_repair := trunc( temp_real );

    if (ICCQ_LOG) then begin
      write(iccq_dlog, die_id_lot_nb:7, '-');
      write(iccq_dlog, die_id_wafer_nb:2, '-', die_id_x:2, '-', die_id_y:2);
    end;

    die_id_lot_nb1 := die_id_lot_nb;
    x := 1000000;
    for z := 1 to 7 do begin
	div1 := die_id_lot_nb1 div x;
	mod1 := die_id_lot_nb1 mod x;
	die_id_lot_nb_arr[z] := div1;
	die_id_lot_nb1 := mod1;
	x := x div 10;
    end;

    die_id_lot_nb_string := '';
    for z := 1 to 7 do begin
	WriteString(lot_nb_string, die_id_lot_nb_arr[z]:1);
	die_id_lot_nb_string := concat(die_id_lot_nb_string, lot_nb_string);
    end;

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
    case die_id_fab of
      0 : TWc:='C-'; (* DMOS5 *)
      1 : TWc:='AK'; (* AFB1 Anam Fab *)
      2 : TWc:='--'; (* open *)
      3 : TWc:='D-'; (* KFAB Kilby Center Fab *)
      4 : TWc:='E-'; (* DMOS4 *)
      5 : TWc:='--'; (* open *)
      6 : TWc:='--'; (* open *)
      7 : TWc:='H-'; (* MIHO6 *)
      otherwise
        TWc:='--';
    end;

{    WriteString(die_id_lot_nb_string, die_id_lot_nb:7); }
    if (die_id_wafer_nb <= 9) then
	  WriteString(die_id_wafer_nb_string, '0', die_id_wafer_nb:1)
    else
	  WriteString(die_id_wafer_nb_string, die_id_wafer_nb:2);

    writestring(die_id_waferid, TWc, die_id_lot_nb_string, '-',
                die_id_wafer_nb_string);

    TWPDLDataLogDieID(die_id_lot_nb_string, die_id_wafer_nb, die_id_x,
                      die_id_y, ' ', ' ', ' ', TWc, die_id_waferid,
                      TWMinimumData);

    TWPDLDataLogVariable('DEVRAMREPAIR', die_id_ram_repair,
                         TWMinimumData);

{(ftrev02j)...}
    TWPDLDataLogVariable('DIEX', die_id_x,
                         TWMinimumData);
    TWPDLDataLogVariable('DIEY', die_id_y,
                         TWMinimumData);
    TWPDLDataLogVariable('DIEWAF', die_id_wafer_nb,
                         TWMinimumData);
    TWPDLDataLogVariable('DIELOT', die_id_lot_nb,
                         TWMinimumData);
{...(ftrev02j)}

#endif
#endif                        
{...(rev03a)}


    { Verify that ID is valid }
    valid_die_id := true;
{hijirev19c...
    if( (die_id_x <= 0) or (die_id_x > 26) ) then
       valid_die_id := false;
    if( (die_id_y <= 0) or (die_id_y > 24) ) then
       valid_die_id := false;
    if( (die_id_wafer_nb <= 0) or (die_id_wafer_nb > 24) ) then
       valid_die_id := false;
...hijirev19c}



{ HAMMING CODE calculation START}


      for i := 64 downto 1 do
begin
	die_id_arr_rev[64-i+1] := die_id_arr[i];
end;


for i:= 1 to 8 do
H[i] := 0;

 H[1] :=  0^die_id_arr[22]
^die_id_arr[23]^die_id_arr[24]^
	die_id_arr[25]^die_id_arr[26]^die_id_arr[27]
        ^die_id_arr[28]^die_id_arr[29]^
	die_id_arr[30]^die_id_arr[31]^die_id_arr[32]^
	die_id_arr[33]^die_id_arr[34]
        ^die_id_arr[35]^die_id_arr[36]^
	die_id_arr[37]^die_id_arr[38]^die_id_arr[39]^
	die_id_arr[40]^die_id_arr[41]
        ^die_id_arr[42]^die_id_arr[43]^
	die_id_arr[44]^die_id_arr[45]^die_id_arr[46]^
	die_id_arr[47]^die_id_arr[48]
        ^die_id_arr[49]^die_id_arr[50]^
	die_id_arr[51]^die_id_arr[52]^die_id_arr[53]^
	die_id_arr[54]^die_id_arr[55]^die_id_arr[56];

  H[2] := 	0^die_id_arr[ 7]^die_id_arr[ 8]
		^die_id_arr[ 9]^die_id_arr[10]^die_id_arr[11]
		^die_id_arr[12]^die_id_arr[13]
		^die_id_arr[14]^die_id_arr[15]^
		die_id_arr[16]^die_id_arr[17]^
		die_id_arr[18]^die_id_arr[19]
                ^die_id_arr[20]^die_id_arr[21]
		^die_id_arr[37]^die_id_arr[38]
		^die_id_arr[39]^die_id_arr[40]
		^die_id_arr[41]^die_id_arr[42]^die_id_arr[43]
		^die_id_arr[44]^die_id_arr[45]
		^die_id_arr[46]^die_id_arr[47]
		^die_id_arr[48]^die_id_arr[49]
		^die_id_arr[50]^die_id_arr[51]
		^die_id_arr[52]^die_id_arr[53]
		^die_id_arr[54]^die_id_arr[55]^die_id_arr[56];
  H[3] := 0^die_id_arr[ 2]
^die_id_arr[ 3]^die_id_arr[ 4]
^die_id_arr[ 5]^die_id_arr[ 6]
^die_id_arr[12]^die_id_arr[13]
^die_id_arr[14]^die_id_arr[15]
^die_id_arr[16]^die_id_arr[17]
^die_id_arr[18]^die_id_arr[19]
^die_id_arr[20]^die_id_arr[21]
^die_id_arr[27]^die_id_arr[28]
^die_id_arr[29]^die_id_arr[30]
^die_id_arr[31]^die_id_arr[32]
^die_id_arr[33]^die_id_arr[34]
^die_id_arr[35]^die_id_arr[36]
^die_id_arr[47]^die_id_arr[48]
^die_id_arr[49]^die_id_arr[50]
^die_id_arr[51]^die_id_arr[52]
^die_id_arr[53]^die_id_arr[54]
^die_id_arr[55]^die_id_arr[56];

  H[4] := 0 ^ die_id_arr[ 1 ]
^die_id_arr[ 3]^die_id_arr[ 4]
^die_id_arr[ 5]^die_id_arr[ 6]
^die_id_arr[ 8]^die_id_arr[ 9]
^die_id_arr[10]^die_id_arr[11]
^die_id_arr[16]^die_id_arr[17]
^die_id_arr[18]^die_id_arr[19]
^die_id_arr[20]^die_id_arr[21]
^die_id_arr[23]^die_id_arr[24]
^die_id_arr[25]^die_id_arr[26]
^die_id_arr[31]^die_id_arr[32]
^die_id_arr[33]^die_id_arr[34]
^die_id_arr[35]^die_id_arr[36]
^die_id_arr[41]^die_id_arr[42]
^die_id_arr[43]^die_id_arr[44]
^die_id_arr[45]^die_id_arr[46]
^die_id_arr[53]^die_id_arr[54]
^die_id_arr[55]^die_id_arr[56];

  H[5] :=  0^die_id_arr[0+1]^die_id_arr[ 1+1]
^die_id_arr[ 3+1]^die_id_arr[ 4+1]
^die_id_arr[ 5+1]^die_id_arr[ 6+1]
^die_id_arr[ 8+1]^die_id_arr[9+1]
^die_id_arr[10+1]^die_id_arr[12+1]
^die_id_arr[13+1]^die_id_arr[14+1]
^die_id_arr[18+1]^die_id_arr[19+1]
^die_id_arr[20+1]^die_id_arr[21+1]
^die_id_arr[23+1]^die_id_arr[24+1]
^die_id_arr[25+1]^die_id_arr[27+1]
^die_id_arr[28+1]^die_id_arr[29+1]
^die_id_arr[33+1]^die_id_arr[34+1]
^die_id_arr[35+1]^die_id_arr[37+1]
^die_id_arr[38+1]^die_id_arr[39+1] 
^die_id_arr[43+1]^die_id_arr[44+1]
^die_id_arr[45+1]^die_id_arr[49+1]
^die_id_arr[50+1]^die_id_arr[51+1]
^die_id_arr[55+1];

  H[6] := 1^die_id_arr[ 1]^die_id_arr[ 2]
^die_id_arr[ 3]^die_id_arr[ 4+1]
^die_id_arr[ 5+1]^die_id_arr[ 6+1]
^die_id_arr[ 7+1]^die_id_arr[ 9+1]
^die_id_arr[10+1]^die_id_arr[11+1]
^die_id_arr[13+1]^die_id_arr[14+1]
^die_id_arr[16+1]^die_id_arr[17+1]
^die_id_arr[20+1]^die_id_arr[21+1]
^die_id_arr[22+1]^die_id_arr[24+1]
^die_id_arr[25+1]^die_id_arr[26+1]
^die_id_arr[28+1]^die_id_arr[29+1]
^die_id_arr[31+1]^die_id_arr[32+1]
^die_id_arr[35+1]^die_id_arr[36+1]
^die_id_arr[38+1]^die_id_arr[39+1]
^die_id_arr[41+1]^die_id_arr[42+1]
^die_id_arr[45+1]^die_id_arr[47+1]
^die_id_arr[48+1]^die_id_arr[51+1]
^die_id_arr[54+1];

  H[7] := 1^die_id_arr[ 0+1]^die_id_arr[ 1+1]
^die_id_arr[ 2+1]^die_id_arr[ 3+1]
^die_id_arr[ 5+1]^die_id_arr[ 6+1]
^die_id_arr[ 7+1]^die_id_arr[ 8+1]
^die_id_arr[10+1]^die_id_arr[11+1]
^die_id_arr[12+1]^die_id_arr[14+1]
^die_id_arr[15+1]^die_id_arr[17+1]
^die_id_arr[19+1]^die_id_arr[21+1]
^die_id_arr[22+1]^die_id_arr[23+1]
^die_id_arr[25+1]^die_id_arr[26+1]
^die_id_arr[27+1]^die_id_arr[29+1]
^die_id_arr[30+1]^die_id_arr[32+1]
^die_id_arr[34+1]^die_id_arr[36+1]
^die_id_arr[37+1]^die_id_arr[39+1]
^die_id_arr[40+1]^die_id_arr[42+1]
^die_id_arr[44+1]^die_id_arr[46+1]
^die_id_arr[48+1]^die_id_arr[50+1]
^die_id_arr[53+1];

  H[8] := 1^die_id_arr[ 0+1]^die_id_arr[ 1+1]
^die_id_arr[ 2+1]^die_id_arr[ 3+1]
^die_id_arr[ 4+1]^die_id_arr[ 6+1]
^die_id_arr[ 7+1]^die_id_arr[ 8+1]
^die_id_arr[ 9+1]^die_id_arr[11+1]
^die_id_arr[12+1]^die_id_arr[13+1]
^die_id_arr[15+1]^die_id_arr[16+1]
^die_id_arr[18+1]^die_id_arr[21+1]
^die_id_arr[22+1]^die_id_arr[23+1]
^die_id_arr[24+1]^die_id_arr[26+1]
^die_id_arr[27+1]^die_id_arr[28+1]
^die_id_arr[30+1]^die_id_arr[31+1]
^die_id_arr[33+1]^die_id_arr[36+1]
^die_id_arr[37+1]^die_id_arr[38+1]
^die_id_arr[40+1]^die_id_arr[41+1]
^die_id_arr[43+1]^die_id_arr[46+1]
^die_id_arr[47+1]^die_id_arr[49+1]
^die_id_arr[52+1];

k := 0;
for i := 1 to 8 do
begin
   k := (H[i] ^ die_id_arr[56+i]);
	if k = 1 then
	begin

		writeln('Hamming code check failed');
 		valid_die_id := false;
 		break;

	end
end;

{ HAMMING CODE calculation END}




    if( V_DatalogEnabled ) then
    begin
       if ( not valid_die_id ) then begin
          writeln('*********************');
          writeln('** INVALID DIE ID! **');
          writeln('*********************');
       end
       else begin
          writeln('Fab =',die_id_fab:2,'  Lot# = ',die_id_lot_nb:7,
               '  Wf# = ',die_id_wafer_nb:2,
               '  X-Y = ',die_id_x:2,'-',die_id_y:2,
               '  Repair = ',die_id_ram_repair:2);
          datalog( CR, '***********');
          datalog( CR, '***********');
          datalog( CR, 'DIE ID INFO');
          datalog( CR, '***********');
          datalog( CR, '***********');
          datalog( CR, 'FAB ID: ',die_id_fab:2,'   LOT# : ',die_id_lot_nb:7,
               '   WAFER# : ',die_id_wafer_nb:2,
               '   X : ',die_id_x:2,'   Y : ',die_id_y:2,
               '   RAM REPAIR : ',die_id_ram_repair:2, CR);
       end; {else}
    end; { if }

END; { procedure ReadDieID_vout }


procedure DIEID_TEST;
(*
************************************************************************
****                       DIE_ID TEST                              ****
************************************************************************
*)
  var
    TEST_RESULT		: boolean;

begin

	TestOpen( DIEID ); 

	TEST_RESULT := PASS;

        SET_POWER( VMN1V, 750mA,				
                   VMN3V, 750mA,				
                   2mS );

        SetupSelect( FAST_MIN_DC, FORMAT_10,
                     TIMING_10 );
        wait( 2mS );

        ReadDieID_vout; 				

	if (valid_die_id = false) then
	   TEST_RESULT := false;

if (TEST_RESULT = FAIL) then DeviceStatus := False;
      ResultRecord( TEST_RESULT );

	TestClose; 

	TestOpen (HELEN);
		TEST_RESULT := PASS;
		if (not(Helen1_Die)) then 
		TEST_RESULT := FAIL;
      		ResultRecord( TEST_RESULT );
 
	TestClose; 


end;	
{...(rev02c)}

procedure QUAL_DELTA_ICCQ;

  var
PM391P5VDD2DELTA     : TReal;
PM391P5VDD21DELTA    : TReal;
PM391P5VDD4DELTA     : TReal;
PM391P5VDD1DELTA     : TReal;
PM391P5VDDSHVDELTA   : TReal;
PM391P1VDD2DELTA     : TReal;
PM391P1VDD21DELTA    : TReal;
PM391P1VDD4DELTA     : TReal;
PM391P1VDD1DELTA     : TReal;
PM391P1VDDSHVDELTA   : TReal;
PM401P5VDD2DELTA     : TReal;
PM401P5VDD21DELTA    : TReal;
PM401P5VDD4DELTA     : TReal;
PM401P5VDD1DELTA     : TReal;
PM401P5VDDSHVDELTA   : TReal;
PM401P1VDD2DELTA     : TReal;
PM401P1VDD21DELTA    : TReal;
PM401P1VDD4DELTA     : TReal;
PM401P1VDD1DELTA     : TReal;
PM401P1VDDSHVDELTA   : TReal;
PM381P5VDD2DELTA     : TReal;
PM381P5VDD21DELTA    : TReal;
PM381P5VDD4DELTA     : TReal;
PM381P5VDD1DELTA     : TReal;
PM381P5VDDSHVDELTA   : TReal;
PM371P5VDD2DELTA     : TReal;
PM371P5VDD21DELTA    : TReal;
PM371P5VDD4DELTA     : TReal;
PM371P5VDD1DELTA     : TReal;
PM371P5VDDSHVDELTA   : TReal;
PM361P5VDD2DELTA     : TReal;
PM361P5VDD21DELTA    : TReal;
PM361P5VDD4DELTA     : TReal;
PM361P5VDD1DELTA     : TReal;
PM361P5VDDSHVDELTA   : TReal;
PM351P5VDD2DELTA     : TReal;
PM351P5VDD21DELTA    : TReal;
PM351P5VDD4DELTA     : TReal;
PM351P5VDD1DELTA     : TReal;
PM351P5VDDSHVDELTA   : TReal;
PM341P5VDD2DELTA     : TReal;
PM341P5VDD21DELTA    : TReal;
PM341P5VDD4DELTA     : TReal;
PM341P5VDD1DELTA     : TReal;
PM341P5VDDSHVDELTA   : TReal;
PM331P5VDD2DELTA     : TReal;
PM331P5VDD21DELTA    : TReal;
PM331P5VDD4DELTA     : TReal;
PM331P5VDD1DELTA     : TReal;
PM331P5VDDSHVDELTA   : TReal;
PM321P5VDD2DELTA     : TReal;
PM321P5VDD21DELTA    : TReal;
PM321P5VDD4DELTA     : TReal;
PM321P5VDD1DELTA     : TReal;
PM321P5VDDSHVDELTA   : TReal;
PM311P5VDD2DELTA     : TReal;
PM311P5VDD21DELTA    : TReal;
PM311P5VDD4DELTA     : TReal;
PM311P5VDD1DELTA     : TReal;
PM311P5VDDSHVDELTA   : TReal;
PM301P5VDD2DELTA     : TReal;
PM301P5VDD21DELTA    : TReal;
PM301P5VDD4DELTA     : TReal;
PM301P5VDD1DELTA     : TReal;
PM301P5VDDSHVDELTA   : TReal;
PM291P5VDD2DELTA     : TReal;
PM291P5VDD21DELTA    : TReal;
PM291P5VDD4DELTA     : TReal;
PM291P5VDD1DELTA     : TReal;
PM291P5VDDSHVDELTA   : TReal;
  begin


PM391P5VDD2DELTA   := PM391P5VDD2PRE   - PM391P5VDD2POST   ;
PM391P5VDD21DELTA  := PM391P5VDD21PRE  - PM391P5VDD21POST  ;
PM391P5VDD4DELTA   := PM391P5VDD4PRE   - PM391P5VDD4POST   ;
PM391P5VDD1DELTA   := PM391P5VDD1PRE   - PM391P5VDD1POST   ;
{
PM391P5VDDSHVDELTA := PM391P5VDDSHVPRE - PM391P5VDDSHVPOST ;
PM391P1VDD2DELTA   := PM391P1VDD2PRE   - PM391P1VDD2POST   ;
PM391P1VDD21DELTA  := PM391P1VDD21PRE  - PM391P1VDD21POST  ;
PM391P1VDD4DELTA   := PM391P1VDD4PRE   - PM391P1VDD4POST   ;
PM391P1VDD1DELTA   := PM391P1VDD1PRE   - PM391P1VDD1POST   ;
PM391P1VDDSHVDELTA := PM391P1VDDSHVPRE - PM391P1VDDSHVPOST ;
}
PM401P5VDD2DELTA   := PM401P5VDD2PRE   - PM401P5VDD2POST   ;
PM401P5VDD21DELTA  := PM401P5VDD21PRE  - PM401P5VDD21POST  ;
PM401P5VDD4DELTA   := PM401P5VDD4PRE   - PM401P5VDD4POST   ;
PM401P5VDD1DELTA   := PM401P5VDD1PRE   - PM401P5VDD1POST   ;
{
PM401P5VDDSHVDELTA := PM401P5VDDSHVPRE - PM401P5VDDSHVPOST ;
PM401P1VDD2DELTA   := PM401P1VDD2PRE   - PM401P1VDD2POST   ;
PM401P1VDD21DELTA  := PM401P1VDD21PRE  - PM401P1VDD21POST  ;
PM401P1VDD4DELTA   := PM401P1VDD4PRE   - PM401P1VDD4POST   ;
PM401P1VDD1DELTA   := PM401P1VDD1PRE   - PM401P1VDD1POST   ;
PM401P1VDDSHVDELTA := PM401P1VDDSHVPRE - PM401P1VDDSHVPOST ;
}
PM381P5VDD2DELTA   := PM381P5VDD2PRE   - PM381P5VDD2POST   ;
PM381P5VDD21DELTA  := PM381P5VDD21PRE  - PM381P5VDD21POST  ;
PM381P5VDD4DELTA   := PM381P5VDD4PRE   - PM381P5VDD4POST   ;
PM381P5VDD1DELTA   := PM381P5VDD1PRE   - PM381P5VDD1POST   ;
PM381P5VDDSHVDELTA := PM381P5VDDSHVPRE - PM381P5VDDSHVPOST ;
{
PM371P5VDD2DELTA   := PM371P5VDD2PRE   - PM371P5VDD2POST   ;
PM371P5VDD21DELTA  := PM371P5VDD21PRE  - PM371P5VDD21POST  ;
PM371P5VDD4DELTA   := PM371P5VDD4PRE   - PM371P5VDD4POST   ;
PM371P5VDD1DELTA   := PM371P5VDD1PRE   - PM371P5VDD1POST   ;
PM371P5VDDSHVDELTA := PM371P5VDDSHVPRE - PM371P5VDDSHVPOST ;
PM361P5VDD2DELTA   := PM361P5VDD2PRE   - PM361P5VDD2POST   ;
PM361P5VDD21DELTA  := PM361P5VDD21PRE  - PM361P5VDD21POST  ;
PM361P5VDD4DELTA   := PM361P5VDD4PRE   - PM361P5VDD4POST   ;
PM361P5VDD1DELTA   := PM361P5VDD1PRE   - PM361P5VDD1POST   ;
PM361P5VDDSHVDELTA := PM361P5VDDSHVPRE - PM361P5VDDSHVPOST ;
}
PM351P5VDD2DELTA   := PM351P5VDD2PRE   - PM351P5VDD2POST   ;
PM351P5VDD21DELTA  := PM351P5VDD21PRE  - PM351P5VDD21POST  ;
PM351P5VDD4DELTA   := PM351P5VDD4PRE   - PM351P5VDD4POST   ;
PM351P5VDD1DELTA   := PM351P5VDD1PRE   - PM351P5VDD1POST   ;
PM351P5VDDSHVDELTA := PM351P5VDDSHVPRE - PM351P5VDDSHVPOST ;
{
PM341P5VDD2DELTA   := PM341P5VDD2PRE   - PM341P5VDD2POST   ;
PM341P5VDD21DELTA  := PM341P5VDD21PRE  - PM341P5VDD21POST  ;
PM341P5VDD4DELTA   := PM341P5VDD4PRE   - PM341P5VDD4POST   ;
PM341P5VDD1DELTA   := PM341P5VDD1PRE   - PM341P5VDD1POST   ;
PM341P5VDDSHVDELTA := PM341P5VDDSHVPRE - PM341P5VDDSHVPOST ;
}
PM331P5VDD2DELTA   := PM331P5VDD2PRE   - PM331P5VDD2POST   ;
PM331P5VDD21DELTA  := PM331P5VDD21PRE  - PM331P5VDD21POST  ;
PM331P5VDD4DELTA   := PM331P5VDD4PRE   - PM331P5VDD4POST   ;
PM331P5VDD1DELTA   := PM331P5VDD1PRE   - PM331P5VDD1POST   ;
PM331P5VDDSHVDELTA := PM331P5VDDSHVPRE - PM331P5VDDSHVPOST ;
PM321P5VDD2DELTA   := PM321P5VDD2PRE   - PM321P5VDD2POST   ;
PM321P5VDD21DELTA  := PM321P5VDD21PRE  - PM321P5VDD21POST  ;
PM321P5VDD4DELTA   := PM321P5VDD4PRE   - PM321P5VDD4POST   ;
PM321P5VDD1DELTA   := PM321P5VDD1PRE   - PM321P5VDD1POST   ;
PM321P5VDDSHVDELTA := PM321P5VDDSHVPRE - PM321P5VDDSHVPOST ;
{
PM311P5VDD2DELTA   := PM311P5VDD2PRE   - PM311P5VDD2POST   ;
PM311P5VDD21DELTA  := PM311P5VDD21PRE  - PM311P5VDD21POST  ;
PM311P5VDD4DELTA   := PM311P5VDD4PRE   - PM311P5VDD4POST   ;
PM311P5VDD1DELTA   := PM311P5VDD1PRE   - PM311P5VDD1POST   ;
PM311P5VDDSHVDELTA := PM311P5VDDSHVPRE - PM311P5VDDSHVPOST ;
}
PM301P5VDD2DELTA   := PM301P5VDD2PRE   - PM301P5VDD2POST   ;
PM301P5VDD21DELTA  := PM301P5VDD21PRE  - PM301P5VDD21POST  ;
PM301P5VDD4DELTA   := PM301P5VDD4PRE   - PM301P5VDD4POST   ;
PM301P5VDD1DELTA   := PM301P5VDD1PRE   - PM301P5VDD1POST   ;
PM301P5VDDSHVDELTA := PM301P5VDDSHVPRE - PM301P5VDDSHVPOST ;
{
PM291P5VDD2DELTA   := PM291P5VDD2PRE   - PM291P5VDD2POST   ;
PM291P5VDD21DELTA  := PM291P5VDD21PRE  - PM291P5VDD21POST  ;
PM291P5VDD4DELTA   := PM291P5VDD4PRE   - PM291P5VDD4POST   ;
PM291P5VDD1DELTA   := PM291P5VDD1PRE   - PM291P5VDD1POST   ;
PM291P5VDDSHVDELTA := PM291P5VDDSHVPRE - PM291P5VDDSHVPOST ;
}

{(revq01b)...
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('PM391P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P1VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P1VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P1VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P1VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM391P1VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P1VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P1VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P1VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P1VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM401P1VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM381P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM371P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM371P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM371P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM371P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM371P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM361P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM361P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM361P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM361P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM361P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM351P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM351P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM351P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM351P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM351P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM341P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM341P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM341P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM341P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM341P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM331P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM331P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM331P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM331P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM331P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM321P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM321P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM321P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM321P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM321P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM311P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM311P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM311P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM311P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM311P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM301P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM301P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM301P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM301P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM301P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD2DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD21DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD4DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDD1DELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);
TWPDLDataLogRealVariable('PM291P5VDDSHVDELTA', Amps,
			  single(SearchValue),
                          TWMinimumData);

#endif
#endif

...(revq01b)}

end; { QUAL_DELTA_ICCQ }





{(revq01a)...}
procedure VOLT_FREQ_C035(freq : TReal; voltage : TReal; 
		        FirstPattern : Pattern; 
			LastPattern : Pattern;
			timingtbl, dctbl : String20);

  var
    RESULT,VOLT_FREQ_C035_RESULT    : boolean;
    STATUS    : integer;
    Period    : TReal;
    PatternNow : Pattern;
  begin

Period := 1e-9 * 1/freq;
PeriodSetBase(Period);      
ACTableSet(Period, timingtbl);

SupplySet(PS_VDD4, voltage, 2A );
SupplySet(PS_VDD1, voltage, 2A );
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, voltage, 2A); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, voltage, 2A); {ftvsrev10f}



DCTableSet(voltage, dctbl);


wait(2ms);

RESULT := PASS;
PatternNow := FirstPattern;
while (PatternNow <> SUCC(LastPattern)) do
begin
      RESULT := PatternExecute( STATUS, PatternNow );
      PatternNow := SUCC(PatternNow);
      if (RESULT = FAIL) then break;
end;   {end while}

VOLT_FREQ_C035_RESULT := RESULT;

	writeln;
	writeln('membist tdls run at 20MHz and 1.5V', 
VOLT_FREQ_C035_RESULT);


  end; { VOLT_FREQ_C035 }
{(revq01a)...}



{(revq01b)...}
function VMIN_SEARCH_SINGLE( Search_Pattern : Pattern;
                       	     SearchMin      : treal;
                    	     SearchMax      : treal ) : treal;
  var
    RESULT,TEST_RESULT           : boolean;
    VDD, BStep       : treal;
    cnt,STATUS              : integer;

  begin

    TEST_RESULT := pass;
    VMIN_SEARCH_SINGLE := 0V;

    (* LINEAR SEARCH *)
    for VDD := SearchMin to (SearchMax+100mV) by 100mV do
      begin
        SupplySet(PS_VDD1, VDD, 2A );
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
	SupplySet(PS_VDD4, VDD, 2A );
        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
        if ( RESULT or (VDD > SearchMax)) then break;
      end;

    if ((VDD > SearchMax )or(VDD = SearchMin)) then 
       TEST_RESULT := FAIL;
 
    (* BINARY SEARCH *)
    if (TEST_RESULT) then
      begin
        BStep := 100mV;

        for cnt := 1 to 3 do 
          begin
            BStep := BStep/2;

            if(RESULT) then VDD:=VDD-BStep
            else VDD:=VDD+BStep;

            	SupplySet(PS_VDD1, VDD, 2A );
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
		SupplySet(PS_VDD4, VDD, 2A );
            wait(2mS);
            RESULT := PatternExecute(STATUS, Search_Pattern);

          end;

        if not RESULT then VDD := VDD+BStep;

        VMIN_SEARCH_SINGLE := VDD;


      end; {TEST_RESULT}
  
  end; { VMIN_SEARCH_SINGLE }
{(revq01b)...}


{(revq01c)...}
function VMIN_SEARCH_ALL( FirstPattern, LastPattern : Pattern;
                       	  SearchMin      : treal;
                    	  SearchMax      : treal ) : treal;
  var
    RESULT,TEST_RESULT           : boolean;
    VDD, BStep       : treal;
    cnt,STATUS              : integer;
    PatternNow	     : Pattern;
  begin

    TEST_RESULT := pass;
    VMIN_SEARCH_ALL := 0V;

    (* LINEAR SEARCH *)
    for VDD := SearchMin to (SearchMax+100mV) by 100mV do
      begin
            SupplySet(PS_VDD1,  VDD, 2A );
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
	    SupplySet(PS_VDD4, VDD, 2A );
            wait(2mS);
		PatternNow := FirstPattern;
		while (PatternNow <> SUCC(LastPattern)) do
		begin
		      RESULT := PatternExecute( STATUS, PatternNow );
		      PatternNow := SUCC(PatternNow);
                      if (RESULT = FAIL) then break;
		end;   {while}
        if ( RESULT or (VDD > SearchMax)) then break;
      end;{for}

    if ((VDD > SearchMax )or(VDD = SearchMin)) then 
       TEST_RESULT := FAIL;
 
    (* BINARY SEARCH *)
    if (TEST_RESULT) then
      begin
        BStep := 100mV;

        for cnt := 1 to 3 do 
          begin
            BStep := BStep/2;

            if(RESULT) then VDD:=VDD-BStep
            else VDD:=VDD+BStep;

            SupplySet(PS_VDD1,  VDD, 2A );
if (TIDeviceType = FT_1_HV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
if (TIDeviceType = FT_1_LV) then SupplySet(PS_VDD2, VDD, 2A ); {ftvsrev10f}
	    SupplySet(PS_VDD4, VDD, 2A );
            wait(2mS);
		PatternNow := FirstPattern;
		while (PatternNow <> SUCC(LastPattern)) do
		begin
		      RESULT := PatternExecute( STATUS, PatternNow );
		      PatternNow := SUCC(PatternNow);
                      if (RESULT = FAIL) then break;
		end;   {while}
          end; {for}

        if not RESULT then VDD := VDD+BStep;

        VMIN_SEARCH_ALL := VDD;


      end; {TEST_RESULT}
  
  end; { VMIN_SEARCH_ALL }
{(revq01c)...}



{(revq01e)...}
function FREQ_SEARCH_SINGLE( Search_Pattern : Pattern;
                       	     SearchMin      : treal;
                    	     SearchMax      : treal;
			     timingtbl	    : String20 ) : treal;
  var
    RESULT,TEST_RESULT           : boolean;
    PeriodNow, BStep       : treal;
    cnt,STATUS              : integer;

  begin

    TEST_RESULT := pass;
    FREQ_SEARCH_SINGLE := 0NS;

    (* LINEAR SEARCH *)
    for PeriodNow := SearchMin to (SearchMax+10NS) by 10NS do
      begin
	PeriodSetBase(PeriodNow);      
	ACTableSet(PeriodNow, timingtbl);
        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
        if ( RESULT or (PeriodNow > SearchMax)) then break;
      end;

    if ((PeriodNow > SearchMax )or(PeriodNow = SearchMin)) then 
       TEST_RESULT := FAIL;
 
    (* BINARY SEARCH *)
    if (TEST_RESULT) then
      begin
        BStep := 10NS;

        for cnt := 1 to 3 do 
          begin
            BStep := BStep/2;

            if(RESULT) then PeriodNow:=PeriodNow-BStep
            else PeriodNow:=PeriodNow+BStep;

	    PeriodSetBase(PeriodNow);      
       	    ACTableSet(PeriodNow, timingtbl);
            wait(2mS);
            RESULT := PatternExecute(STATUS, Search_Pattern);

          end;

        if not RESULT then PeriodNow := PeriodNow+BStep;

      end; {TEST_RESULT}
  
        FREQ_SEARCH_SINGLE := PeriodNow;

  end; { FREQ_SEARCH_SINGLE }
{(revq01e)...}



{(revq01f)...}
function FREQ_SEARCH_ALL( FirstPattern, LastPattern : Pattern;
                       	     SearchMin      : treal;
                    	     SearchMax      : treal;
			     timingtbl	    : String20 ) : treal;
  var
    RESULT,FREQ_RESULT1           : boolean;
    PeriodNow, BStep       : treal;
    cnt,STATUS              : integer;
    PatternNow	     : Pattern;

  begin

    FREQ_RESULT1 := pass;
    FREQ_SEARCH_ALL := 0NS;

    (* LINEAR SEARCH *)
    for PeriodNow := SearchMin to (SearchMax+10NS) by 10NS do
      begin
        PeriodSetBase(PeriodNow);      
	ACTableSet(PeriodNow, timingtbl);
        wait(2mS);

		PatternNow := FirstPattern;
		while (PatternNow <> SUCC(LastPattern)) do
		begin
		      RESULT := PatternExecute( STATUS, PatternNow );
		      PatternNow := SUCC(PatternNow);
                      if (RESULT = FAIL) then break;
		end;   {while}

        if ( RESULT or (PeriodNow > SearchMax)) then break;
      end;

    if ((PeriodNow > SearchMax )or(PeriodNow = SearchMin)) then 
       FREQ_RESULT1 := FAIL;
 
    (* BINARY SEARCH *)
    if (FREQ_RESULT1) then
      begin
        BStep := 2NS;

        for cnt := 1 to 3 do 
          begin
            BStep := BStep/2;

            if(RESULT) then PeriodNow:=PeriodNow-BStep
            else PeriodNow:=PeriodNow+BStep;

            PeriodSetBase(PeriodNow);      
       	    ACTableSet(PeriodNow, timingtbl);
            wait(2mS);

		PatternNow := FirstPattern;
		while (PatternNow <> SUCC(LastPattern)) do
		begin
		      RESULT := PatternExecute( STATUS, PatternNow );
		      PatternNow := SUCC(PatternNow);
                      if (RESULT = FAIL) then break;
		end;   {while}

          end;

        if not RESULT then PeriodNow := PeriodNow+BStep;

      end; {FREQ_RESULT1}

        FREQ_SEARCH_ALL := PeriodNow;

  end; { FREQ_SEARCH_ALL }
{(revq01f)...}



procedure MEMORY_C035_QUAL_VMINS_PRE;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );

	wait(2ms);

{(revq01b) ...

{ ### S_march13n_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dr0,F751686_55922dr0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREDR0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREDR0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...(revq01b)}

{ ### S_march13n_pd ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ds0,F751686_55922ds0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREDS0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREDS0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{(revq01b) ...

{ ### march13n_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mm0,F751686_55922mm0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREMM0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREMM0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...(revq01b)}


	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );

	wait(2ms);

PeriodSetBase(200NS);      
ACTableSet(200NS, 'TIMING_11');


{ ### march13n_pd ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mn0,F751686_55922mn0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREMN0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREMN0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );

	wait(2ms);

{ ### S_inv_checkerboard_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dq0,F751686_55922dq0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREDQ0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREDQ0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### inv_checkerboard_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ml0,F751686_55922ml0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREML0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREML0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_inv_checkerboard ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dp0,F751686_55922dp0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREDP0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREDP0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### inv_checkerboard ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mk0,F751686_55922mk0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREMK0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREMK0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

          SetupSelect( FAST_MIN_DC, FORMAT_20,
                       TIMING_20 );

          wait( 2mS );

{ ### hel_bist ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922kz0,F751686_55922kz0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPREKZ0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPREKZ0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

      	   Power_down;

  end; {MEMORY_C035_QUAL_VMINS_PRE}



procedure MEMORY_C035_QUAL_VMINS_POST;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );
	wait(2ms);

{(revq01b) ...
{ ### S_march13n_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dr0,F751686_55922dr0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTDR0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTDR0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...(revq01b)}


{ ### S_march13n_pd ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ds0,F751686_55922ds0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTDS0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTDS0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{(revq01b) ...
{ ### march13n_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mm0,F751686_55922mm0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTMM0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTMM0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...(revq01b)}

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );

	wait(2ms);

PeriodSetBase(200NS);      
ACTableSet(200NS, 'TIMING_11');

{ ### march13n_pd ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mn0,F751686_55922mn0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTMN0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTMN0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );

	wait(2ms);


{ ### S_inv_checkerboard_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dq0,F751686_55922dq0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTDQ0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTDQ0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### inv_checkerboard_d0 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ml0,F751686_55922ml0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTML0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTML0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_inv_checkerboard ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922dp0,F751686_55922dp0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTDP0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTDP0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### inv_checkerboard ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922mk0,F751686_55922mk0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTMK0 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTMK0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


          SetupSelect( FAST_MIN_DC, FORMAT_20,
                       TIMING_20 );
          wait( 2mS );

{ ### hel_bist ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922kz0,F751686_55922kz0,
	   VMIND, VMAXD, VSTEPD, 'c');

MVMINPOSTKZ0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MVMINPOSTKZ0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

      	   Power_down;

  end; {MEMORY_C035_QUAL_VMINS_POST}



procedure MEMORY_C035_QUAL_DELTA_VMIN;

  var
  begin

{
MDELTADR0 := MVMINPREDR0 - MVMINPOSTDR0 ;
}
MDELTADS0 := MVMINPREDS0 - MVMINPOSTDS0 ;
{
MDELTAMM0 := MVMINPREMM0 - MVMINPOSTMM0 ;
}
MDELTAMN0 := MVMINPREMN0 - MVMINPOSTMN0 ;
MDELTAKZ0 := MVMINPREKZ0 - MVMINPOSTKZ0 ;
MDELTADP0 := MVMINPREDP0 - MVMINPOSTDP0 ;
MDELTADQ0 := MVMINPREDQ0 - MVMINPOSTDQ0 ;
MDELTAML0 := MVMINPREML0 - MVMINPOSTML0 ;
MDELTAMK0 := MVMINPREMK0 - MVMINPOSTMK0 ;
{
MDELTAKZ1 := MVMINPREKZ1 - MVMINPOSTKZ1 ;
}

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('MDELTADR0', Volts,
			  single(MDELTADR0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTADS0', Volts,
			  single(MDELTADS0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTAMM0', Volts,
			  single(MDELTAMM0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTAMN0', Volts,
			  single(MDELTAMN0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTAKZ0', Volts,
			  single(MDELTAKZ0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTADP0', Volts,
			  single(MDELTADP0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTADQ0', Volts,
			  single(MDELTADQ0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTAML0', Volts,
			  single(MDELTAML0),
                          TWMinimumData);
TWPDLDataLogRealVariable('MDELTAMK0', Volts,
			  single(MDELTAMK0),
                          TWMinimumData);

#endif
#endif

  end; { MEMORY_C035_QUAL_DELTA_VMIN }





procedure ATPG_C035_QUAL_90C_VMINS_PRE;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);


	SetupSelect( SLOW_MIN_DC, FORMAT_1,
                     TIMING_1 );

PeriodSetBase(200NS);      
ACTableSet(200NS, 'TIMING_1');

	wait(2ms);


{ ### ATPG tdls VMIN SEARCH ### }

{ # TIMING_1 # }

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922080,F751686_55922080,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE080 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE080', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922010,F751686_55922010,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE010 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE010', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922120,F751686_55922120,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE120 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE120', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922310,F751686_55922310,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE310 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE310', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922370,F751686_55922370,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE370 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE370', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

	SetupSelect( SLOW_MIN_DC, FORMAT_1,
                     TIMING_1 );
	wait(2ms);

{ # TIMING_1 # }
SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922200,F751686_55922200,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE200 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE200', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922300,F751686_55922300,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPRE300 := SearchValue;
 
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPRE300', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

     	   Power_down;

  end; {ATPG_C035_QUAL_90C_VMINS_PRE}



procedure ATPG_C035_QUAL_90C_VMINS_POST;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);


	SetupSelect( SLOW_MIN_DC, FORMAT_1,
                     TIMING_1 );

PeriodSetBase(200NS);      
ACTableSet(200NS, 'TIMING_1');

	wait(2ms);


{ ### ATPG tdls VMIN SEARCH ### }

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922080,F751686_55922080,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST080 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST080', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922010,F751686_55922010,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST010 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST010', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922120,F751686_55922120,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST120 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST120', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922310,F751686_55922310,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST310 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST310', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922370,F751686_55922370,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST370 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST370', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

	SetupSelect( SLOW_MIN_DC, FORMAT_1,
                     TIMING_1 );
	wait(2ms);

{ # TIMING_1 # }
SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922200,F751686_55922200,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST200 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST200', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


SearchVdd('SLOW_MIN_DC', S_BINARY,
	   F751686_55922300,F751686_55922300,
	   VMIND, VMAXD, VSTEPD, 'c');

AVMINPOST300 := SearchValue;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('AVMINPOST300', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


      	   Power_down;

  end; {ATPG_C035_QUAL_90C_VMINS_POST}



procedure ATPG_C035_QUAL_DELTA_VMIN;

  var
  begin

ADELTA080 := AVMINPRE080 - AVMINPOST080 ;
ADELTA010 := AVMINPRE010 - AVMINPOST010 ;
ADELTA120 := AVMINPRE120 - AVMINPOST120 ;
ADELTA310 := AVMINPRE310 - AVMINPOST310 ;
ADELTA370 := AVMINPRE370 - AVMINPOST370 ;
ADELTA030 := AVMINPRE030 - AVMINPOST030 ;
ADELTA040 := AVMINPRE040 - AVMINPOST040 ;
ADELTA200 := AVMINPRE200 - AVMINPOST200 ;
ADELTA300 := AVMINPRE300 - AVMINPOST300 ;


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('ADELTA080', Volts,
			  single(ADELTA080),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA010', Volts,
			  single(ADELTA010),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA120', Volts,
			  single(ADELTA120),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA310', Volts,
			  single(ADELTA310),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA370', Volts,
			  single(ADELTA370),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA030', Volts,
			  single(ADELTA030),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA040', Volts,
			  single(ADELTA040),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA200', Volts,
			  single(ADELTA200),
                          TWMinimumData);
TWPDLDataLogRealVariable('ADELTA300', Volts,
			  single(ADELTA300),
                          TWMinimumData);
#endif
#endif

  end; { ATPG_C035_QUAL_DELTA_VMIN } 



procedure CPU_C035_QUAL_VMINS_PRE;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );
	wait(2ms);

{ ### MGS3 TDLS ### }
{ ### S_benchmark_conv2d ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922a20,F751686_55922a20,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREA20 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREA20', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



{ ### benchmark_conv2d ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922h80,F751686_55922h80,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREH80 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREH80', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_benchmark_fsdeint ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922af0,F751686_55922af0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREAF0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREAF0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### benchmark_fsdeint ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922hl0,F751686_55922hl0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREHL0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREHL0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_benchmark_arith_enc ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922a10,F751686_55922a10,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREA10 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREA10', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{v01z...
{ ### benchmark_arith_enc ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922h70,F751686_55922h70,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREH70 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREH70', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...v01z}

{ ### S_cpu_speedpath_alu40 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922by0,F751686_55922by0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREBY0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREBY0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_alu40 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922j40,F751686_55922j40,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREJ40 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREJ40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_cpu_speedpath_dagen ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922c40,F751686_55922c40,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREC40 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREC40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_dagen ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ja0,F751686_55922ja0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREJA0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREJA0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



          SetupSelect( FAST_MIN_DC, FORMAT_9,
                       TIMING_9y );


PeriodSetBase(126NS);      
ACTableSet(126NS, 'TIMING_9');


          wait( 2mS );

{ ### ARM9 TDLS ### }
{ ### Ls12_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922490,F751686_55922490,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPRE490 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPRE490', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls14_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922500,F751686_55922500,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPRE500 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPRE500', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls22_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922510,F751686_55922510,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPRE510 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPRE510', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls24_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922520,F751686_55922520,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPRE520 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPRE520', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



          SetupSelect( FAST_MIN_DC, FORMAT_29,
                       TIMING_29 );
          wait( 2mS );

{ ### Other Critical Path TDLS ### }
{ ### hel_tc1a_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pb0,F751686_55922pb0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREPB0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREPB0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### hel_tc1c_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pc0,F751686_55922pc0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREPC0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREPC0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### hel_tc2_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pd0,F751686_55922pd0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPREPD0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPREPD0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

      	   Power_down;

  end; {CPU_C035_QUAL_VMINS_PRE}




procedure CPU_C035_QUAL_VMINS_POST;

  var

  begin

          SET_POWER( VMN1V, 2A,
                     VMN3V, 2A,
                     2mS ); 
          wait(25ms);

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );
	wait(2ms);

{ ### MGS3 TDLS ### }
{ ### S_benchmark_conv2d ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922a20,F751686_55922a20,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTA20 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTA20', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



{ ### benchmark_conv2d ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922h80,F751686_55922h80,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTH80 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTH80', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_benchmark_fsdeint ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922af0,F751686_55922af0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTAF0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTAF0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### benchmark_fsdeint ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922hl0,F751686_55922hl0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTHL0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTHL0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_benchmark_arith_enc ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922a10,F751686_55922a10,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTA10 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTA10', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{v01z...
{ ### benchmark_arith_enc ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922h70,F751686_55922h70,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTH70 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTH70', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...v01z}

{ ### S_cpu_speedpath_alu40 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922by0,F751686_55922by0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTBY0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTBY0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_alu40 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922j40,F751686_55922j40,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTJ40 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTJ40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_cpu_speedpath_dagen ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922c40,F751686_55922c40,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTC40 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTC40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_dagen ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922ja0,F751686_55922ja0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTJA0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTJA0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


          SetupSelect( FAST_MIN_DC, FORMAT_9,
                       TIMING_9y );

PeriodSetBase(126NS);      
ACTableSet(126NS, 'TIMING_9');

          wait( 2mS );

{ ### ARM9 TDLS ### }
{ ### Ls12_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922490,F751686_55922490,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOST490 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOST490', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls14_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922500,F751686_55922500,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOST500 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOST500', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls22_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922510,F751686_55922510,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOST510 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOST510', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls24_writeseq_28_2 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922520,F751686_55922520,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOST520 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOST520', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



          SetupSelect( FAST_MIN_DC, FORMAT_29,
                       TIMING_29 );
          wait( 2mS );

{ ### Other Critical Path TDLS ### }
{ ### hel_tc1a_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pb0,F751686_55922pb0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTPB0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTPB0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### hel_tc1c_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pc0,F751686_55922pc0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTPC0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTPC0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### hel_tc2_m6 ### }
SearchVdd('FAST_MIN_DC', S_BINARY,
	   F751686_55922pd0,F751686_55922pd0,
	   VMIND, VMAXD, VSTEPD, 'c');

CVMINPOSTPD0 := SearchValue ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CVMINPOSTPD0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


      	   Power_down;

  end; {CPU_C035_QUAL_VMINS_POST}



procedure CPU_C035_QUAL_DELTA_VMIN;

  var

  begin


CDELTAA20 := CVMINPREA20 - CVMINPOSTA20 ;
CDELTAH80 := CVMINPREH80 - CVMINPOSTH80 ;
CDELTAAF0 := CVMINPREAF0 - CVMINPOSTAF0 ;
CDELTAHL0 := CVMINPREHL0 - CVMINPOSTHL0 ;
CDELTAA10 := CVMINPREA10 - CVMINPOSTA10 ;
{v01z...
CDELTAH70 := CVMINPREH70 - CVMINPOSTH70 ;
...v01z}
CDELTABY0 := CVMINPREBY0 - CVMINPOSTBY0 ;
CDELTAJ40 := CVMINPREJ40 - CVMINPOSTJ40 ;
CDELTAC40 := CVMINPREC40 - CVMINPOSTC40 ;
CDELTAJA0 := CVMINPREJA0 - CVMINPOSTJA0 ;
CDELTA490 := CVMINPRE490 - CVMINPOST490 ;
CDELTA500 := CVMINPRE500 - CVMINPOST500 ;
CDELTA510 := CVMINPRE510 - CVMINPOST510 ;
CDELTA520 := CVMINPRE520 - CVMINPOST520 ;
CDELTAPB0 := CVMINPREPB0 - CVMINPOSTPB0 ;
CDELTAPC0 := CVMINPREPC0 - CVMINPOSTPC0 ;
CDELTAPD0 := CVMINPREPD0 - CVMINPOSTPD0 ;

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CDELTAA20', Volts,
			  single(CDELTAA20),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAH80', Volts,
			  single(CDELTAH80),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAAF0', Volts,
			  single(CDELTAAF0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAHL0', Volts,
			  single(CDELTAHL0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAA10', Volts,
			  single(CDELTAA10),
                          TWMinimumData);
{v01z...
TWPDLDataLogRealVariable('CDELTAH70', Volts,
			  single(CDELTAH70),
                          TWMinimumData);
...v01z}
TWPDLDataLogRealVariable('CDELTABY0', Volts,
			  single(CDELTABY0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAJ40', Volts,
			  single(CDELTAJ40),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAC40', Volts,
			  single(CDELTAC40),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAJA0', Volts,
			  single(CDELTAJA0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTA490', Volts,
			  single(CDELTA490),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTA500', Volts,
			  single(CDELTA500),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTA510', Volts,
			  single(CDELTA510),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTA520', Volts,
			  single(CDELTA520),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAPB0', Volts,
			  single(CDELTAPB0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAPC0', Volts,
			  single(CDELTAPC0),
                          TWMinimumData);
TWPDLDataLogRealVariable('CDELTAPD0', Volts,
			  single(CDELTAPD0),
                          TWMinimumData);
#endif
#endif

  end; { CPU_C035_QUAL_DELTA_VMIN }



procedure CPU_C035_QUAL_FREQS_PRE;

  var
VFREQARM : TReal;

  begin

          SET_POWER( VFREQS1V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);

          SetupSelect( FAST_MIN_DC, FORMAT_11,
                       TIMING_11 );
          wait( 2mS );

{ ### MGS3 TDLS ### }
{ ### S_benchmark_conv2d ### }

CFREQPREA20 := FREQ_SEARCH_SINGLE(F751686_55922a20, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREA20', Volts,
			  single(CFREQPREA20),
                          TWMinimumData);
#endif
#endif



{ ### benchmark_conv2d ### }
CFREQPREH80 := FREQ_SEARCH_SINGLE(F751686_55922h80, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREH80', Volts,
			  single(CFREQPREH80),
                          TWMinimumData);
#endif
#endif


{ ### S_benchmark_fsdeint ### }
CFREQPREAF0 := FREQ_SEARCH_SINGLE(F751686_55922af0, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREAF0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### benchmark_fsdeint ### }
CFREQPREHL0 := FREQ_SEARCH_SINGLE(F751686_55922hl0, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREHL0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_benchmark_arith_enc ### }
CFREQPREA10 := FREQ_SEARCH_SINGLE(F751686_55922a10, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREA10', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{v01z...
{ ### benchmark_arith_enc ### }
CFREQPREH70 := FREQ_SEARCH_SINGLE(F751686_55922h70, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREH70', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...v01z}

{ ### S_cpu_speedpath_alu40 ### }
CFREQPREBY0 := FREQ_SEARCH_SINGLE(F751686_55922by0, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREBY0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_alu40 ### }
CFREQPREJ40 := FREQ_SEARCH_SINGLE(F751686_55922j40, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREJ40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_cpu_speedpath_dagen ### }
CFREQPREC40 := FREQ_SEARCH_SINGLE(F751686_55922c40, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREC40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_dagen ### }
CFREQPREJA0 := FREQ_SEARCH_SINGLE(F751686_55922ja0, 
			       	  40NS, 60NS, 
			       	  'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPREJA0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


          SET_POWER( 1.5V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);
VFREQARM := VMN1V;
VMN1V := 1.5V;
          SetupSelect( FAST_MIN_DC, FORMAT_9,
                       TIMING_9 );
          wait( 2mS );

{ ### ARM9 TDLS ### }
{ ### Ls12_writeseq_28_2 ### }
CFREQPRE490 := FREQ_SEARCH_SINGLE(F751686_55922490, 
			       	  80NS, 130NS, 
			       	  'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPRE490', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls14_writeseq_28_2 ### }
CFREQPRE500 := FREQ_SEARCH_SINGLE(F751686_55922500, 
			       	  80NS, 130NS, 
			       	  'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPRE500', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls22_writeseq_28_2 ### }
CFREQPRE510 := FREQ_SEARCH_SINGLE(F751686_55922510, 
			       	  80NS, 130NS, 
			       	  'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPRE510', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls24_writeseq_28_2 ### }
CFREQPRE520 := FREQ_SEARCH_SINGLE(F751686_55922520, 
			       	  80NS, 130NS, 
			       	  'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPRE520', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

          SET_POWER( VFREQS1V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);

VMN1V := VFREQARM;

          SetupSelect( FAST_MIN_DC, FORMAT_29,
                       TIMING_29 );
          wait( 2mS );

{ ### Other Critical Path TDLS ### }
{ ### hel_tc1a_m6 ### }
CFREQPREPB0 := FREQ_SEARCH_SINGLE(F751686_55922pb0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');

{ ### hel_tc1c_m6 ### }
CFREQPREPC0 := FREQ_SEARCH_SINGLE(F751686_55922pc0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');

{ ### hel_tc2_m6 ### }
CFREQPREPD0 := FREQ_SEARCH_SINGLE(F751686_55922pd0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');


      	   Power_down;


  end; {CPU_C035_QUAL_FREQS_PRE}




procedure CPU_C035_QUAL_FREQS_POST;

  var
VFREQARM : TReal;

  begin

          SET_POWER( VFREQS1V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );
	wait(2ms);

{ ### MGS3 TDLS ### }
{ ### S_benchmark_conv2d ### }

CFREQPOSTA20 := FREQ_SEARCH_SINGLE(F751686_55922a20, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTA20', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif



{ ### benchmark_conv2d ### }
CFREQPOSTH80 := FREQ_SEARCH_SINGLE(F751686_55922h80, 
                                   40NS, 60NS,
  			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTH80', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_benchmark_fsdeint ### }
CFREQPOSTAF0 := FREQ_SEARCH_SINGLE(F751686_55922af0, 
                                   40NS, 60NS,
  			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTAF0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### benchmark_fsdeint ### }
CFREQPOSTHL0 := FREQ_SEARCH_SINGLE(F751686_55922hl0, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTHL0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{ ### S_benchmark_arith_enc ### }
CFREQPOSTA10 := FREQ_SEARCH_SINGLE(F751686_55922a10, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTA10', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

{v01z...
{ ### benchmark_arith_enc ### }
CFREQPOSTH70 := FREQ_SEARCH_SINGLE(F751686_55922h70, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTH70', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif
...v01z}

{ ### S_cpu_speedpath_alu40 ### }
CFREQPOSTBY0 := FREQ_SEARCH_SINGLE(F751686_55922by0, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTBY0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_alu40 ### }
CFREQPOSTJ40 := FREQ_SEARCH_SINGLE(F751686_55922j40, 
                                   40NS, 60NS, 
			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTJ40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### S_cpu_speedpath_dagen ### }
CFREQPOSTC40 := FREQ_SEARCH_SINGLE(F751686_55922c40, 
                                   40NS, 60NS,
 			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTC40', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### cpu_speedpath_dagen ### }
CFREQPOSTJA0 := FREQ_SEARCH_SINGLE(F751686_55922ja0, 
                                   40NS, 60NS, 
			       	   'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOSTJA0', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif

          SET_POWER( 1.5V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);

VFREQARM := VMN1V;
VMN1V := 1.5V;

          SetupSelect( FAST_MIN_DC, FORMAT_9,
                       TIMING_9 );
          wait( 2mS );

{ ### ARM9 TDLS ### }
{ ### Ls12_writeseq_28_2 ### }
CFREQPOST490 := FREQ_SEARCH_SINGLE(F751686_55922490, 
                                   80NS, 130NS, 
			       	   'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOST490', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls14_writeseq_28_2 ### }
CFREQPOST500 := FREQ_SEARCH_SINGLE(F751686_55922500, 
                                   80NS, 130NS, 
  			       	   'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOST500', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls22_writeseq_28_2 ### }
CFREQPOST510 := FREQ_SEARCH_SINGLE(F751686_55922510, 
                                   80NS, 130NS, 
 			       	   'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOST510', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


{ ### Ls24_writeseq_28_2 ### }
CFREQPOST520 := FREQ_SEARCH_SINGLE(F751686_55922520, 
                                   80NS, 130NS, 
 			       	   'TIMING_9');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('CFREQPOST520', Volts,
			  single(SearchValue),
                          TWMinimumData);
#endif
#endif


          SET_POWER( VFREQS1V, 2A,
                     VFREQS3V, 2A,
                     2mS ); 
          wait(25ms);

VMN1V := VFREQARM;

          SetupSelect( FAST_MIN_DC, FORMAT_29,
                       TIMING_29 );
          wait( 2mS );

{ ### Other Critical Path TDLS ### }
{ ### hel_tc1a_m6 ### }
CFREQPOSTPB0 := FREQ_SEARCH_SINGLE(F751686_55922pb0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');

{ ### hel_tc1c_m6 ### }
CFREQPOSTPC0 := FREQ_SEARCH_SINGLE(F751686_55922pc0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');

{ ### hel_tc2_m6 ### }
CFREQPOSTPD0 := FREQ_SEARCH_SINGLE(F751686_55922pd0, 
			       	  60NS, 80NS, 
			       	  'TIMING_29');


      	   Power_down;


  end; {CPU_C035_QUAL_FREQS_POST}

{ftrev01g...}
procedure FREQ_SEARCH_ALL_ATSPEED;
  var
FREQS_V : TReal;
begin


if (BIN2FREQS) then
FREQS_V := 1.45V
else
if (BIN3FREQS) then
FREQS_V := 1.3V;

          SET_POWER( FREQS_V, 750mA,
                     VFREQS3V, 750mA,
                     2mS ); 
{      wait (25ms);} {hijirev08l}

if (Helen1_Die) then
begin

	SetupSelect( FAST_MIN_DC, FORMAT_11,
                     TIMING_11 );
	wait(2ms);

{ ### MGS3 TDLS ### }
FREQMGS3ALL := FREQ_SEARCH_ALL(F751686_55922850, {hijirev08j}
			       F751686_55922gb0, {hijirev08j}
                               40NS, 74NS,
 			       'TIMING_11');


#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('FREQMGS3ALL', SEC,
			  single(FREQMGS3ALL),
                          TWMinimumData);
#endif
#endif

end; {Helen1_Die}

	SetupSelect( FAST_MIN_DC, FORMAT_9,
                     TIMING_9 );
	wait(2ms);

{ ### ARM TDLS ### }
FREQARMALL := FREQ_SEARCH_ALL(F751686_55922480, 
			      F751686_55922840,
                              78NS, 130NS,
 			      'TIMING_9');

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('FREQARMALL', SEC,
			  single(FREQARMALL),
                          TWMinimumData);
#endif
#endif


if (Helen1_Die) then
begin
	SetupSelect( FAST_MIN_DC, FORMAT_29,
                     TIMING_29 );
	wait(2ms);

{ ### TC TDLS ### }
FREQTCALL := FREQ_SEARCH_ALL(F751686_55922pb0, 
			     F751686_55922pd0,
                             60NS, 110NS,
 			     'TIMING_29');

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('FREQTCALL', SEC,
			  single(FREQTCALL),
                          TWMinimumData);
#endif
#endif

	SetupSelect( FAST_MIN_DC, FORMAT_32,
                     TIMING_32 );
	wait(2ms);

{ ### OMAP TDLS ### }
FREQOMAPALL := FREQ_SEARCH_ALL(F751686_55922qh0, 
			       F751686_55922px0,
                               60NS, 110NS,
 			       'TIMING_32');

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then

TWPDLDataLogRealVariable('FREQOMAPALL', SEC,
			  single(FREQOMAPALL),
                          TWMinimumData);
#endif
#endif
end; {Helen1_Die}

power_down;
end; {FREQ_SEARCH_ALL_ATSPEED}
{...ftrev01g}

{new speed sorting ...}


{******************************************************************}
procedure ATSPEED_TC5_MIN_TEST;

var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    Datalog1       : String40;
 
begin

Datalog1:='ledTlbScreenTc5_1k';
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); {rev01b}
  SetupSelect( FAST_MIN_DC, FORMAT_9,TIMING_9 );
  PeriodSetBase(FREQARM);
  ACTableSet(FREQARM, 'TIMING_9');
  wait( 2mS );  
  TestOpen(TC5MINTEST);
  Datalog('comment=''TDL NAME: ''',Datalog1,chr(10));
  TEST_RESULT := PatternExecute( STATUS, ledTlbScreenTc5_1k );
  ResultRecord( TEST_RESULT );
  TestClose;  
end;
    
Tc005 :=DSPFB(ledTlbScreenTc5_1k, 9, 40ns, 100ns, VMN1V);

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
  TWPDLDataLogRealVariable('TC005',SEC,single(Tc005),TWMinimumData);
#endif
#endif   
 
end; {ATSPEED_TC5_MIN_TEST}



{*******************************************************************}
procedure ATSPEED_TC5_MAX_TEST;

  var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    Datalog1       : String40;
 
begin

Datalog1:='ledTlbScreenTc5_1k';
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin 
  SET_POWER( VMX1V, 2A,VMX3V, 2A,2mS ); 
  SetupSelect( FAST_MAX_DC, FORMAT_9 ,TIMING_9 );
  PeriodSetBase(FREQARM);
  ACTableSet(FREQARM, 'TIMING_9');
  wait(2ms);           
  TestOpen(TC5MAXTEST);
  Datalog('comment=''TDL NAME: ''',Datalog1,chr(10));
  TEST_RESULT := PatternExecute( STATUS, ledTlbScreenTc5_1k );
  ResultRecord( TEST_RESULT );
  TestClose;   
end;    

end; {ATSPEED_TC5_MAX_TEST}


{**********************************************************************}
procedure ATSPEED_MIN_TEST;

  var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    Failtest       : string[30];
    Failpattern    : pattern;
 
  begin

Flagstop:=1;

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); {rev01b}
  SetupSelect( FAST_MIN_DC, FORMAT_29 ,TIMING_29 );
  PeriodSetBase(FREQTC);
  ACTableSet(FREQTC, 'TIMING_29');
  wait(2ms);
end; 

PX3( F751686_55922pb0 , FAST_MIN_55922pb0_1 ,' hel_tc1a_m6 ',1);         
PX3( F751686_55922pc0 , FAST_MIN_55922pc0_1 ,' hel_tc1c_m6 ',0);
PX3( F751686_55922pd0 , FAST_MIN_55922pd0_1 ,' hel_tc2_m6 ',0);

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SetupSelect( FAST_MIN_DC, FORMAT_9,TIMING_9 );
  PeriodSetBase(FREQARM);
  ACTableSet(FREQARM, 'TIMING_9');
  wait( 2mS );
end;

PX1( F751686_55922480 ,FAST_MIN_55922480_1,' Ls12_writeseq_14_1 ',1,1);
PX1( F751686_55922490 ,FAST_MIN_55922490_1,' Ls12_writeseq_28_2 ',1,1);
PX1( F751686_55922500 ,FAST_MIN_55922500_1,' Ls14_writeseq_28_2 ',1,1);
PX1( F751686_55922510 ,FAST_MIN_55922510_1,' Ls22_writeseq_28_2 ',1,1);
PX1( F751686_55922520 ,FAST_MIN_55922520_1,' Ls24_writeseq_28_2 ',1,1);
PX1( F751686_55922530 ,FAST_MIN_55922530_1,' Ls2_32_16_ic_28_2 ',1,1);
PX1( F751686_55922540 ,FAST_MIN_55922540_1,' Ls2_cp15test31_28_2 ',1,1);
PX1( F751686_55922550 ,FAST_MIN_55922550_1,' Ls2_dc_cl_ful_28_2 ',1,1);
PX1( F751686_55922560 ,FAST_MIN_55922560_1,' Ls2_dc_cln_idx_28_2 ',1,1);
PX1( F751686_55922570 ,FAST_MIN_55922570_1,' Ls2_dc_rd_wr_28_2 ',1,1);
PX1( F751686_55922580 ,FAST_MIN_55922580_1,' Ls2_dche_hs1X_28_2 ',1,1);
PX1( F751686_55922590 ,FAST_MIN_55922590_1,' Ls2_dchitmiss_28_2 ',1,1);
PX1( F751686_55922620 ,FAST_MIN_55922620_1,' Ls2_ichitmiss_28_2 ',1,1);
PX1( F751686_55922630 ,FAST_MIN_55922630_1,' Ls2_mmu_w_dtlb_28_2 ',1,1);
PX1( F751686_55922640 ,FAST_MIN_55922640_1,' Ls2_mrc_usr_md_28_2 ',1,1);
PX1( F751686_55922650 ,FAST_MIN_55922650_1,' Ls2_o_dma_imif_28_2 ',1,1);
PX1( F751686_55922670 ,FAST_MIN_55922670_1,' Ls2_ostimer3_28_2 ',1,1);
PX1( F751686_55922680 ,FAST_MIN_55922680_1,' Ls2_prefetch_28_2 ',1,1);
PX1( F751686_55922690 ,FAST_MIN_55922690_1,' Ls2_raw_1010_28_2 ',1,1);
PX1( F751686_55922700 ,FAST_MIN_55922700_1,' Ls2_raw_110x_28_2 ',1,1);
PX1( F751686_55922710 ,FAST_MIN_55922710_1,' Ls2_raw_1110_28_2 ',1,1);
PX1( F751686_55922720 ,FAST_MIN_55922720_1,' Ls2_raw_1111_28_2 ',1,1);
PX1( F751686_55922730 ,FAST_MIN_55922730_1,' Ls2_raw_111Xcoh_28_2 ',1,1);
PX1( F751686_55922740 ,FAST_MIN_55922740_1,' Ls2_raw_111x_28_2 ',1,1);
PX1( F751686_55922750 ,FAST_MIN_55922750_1,' Ls2_swap_hzd_28_2 ',1,1);
PX1( F751686_55922760 ,FAST_MIN_55922760_1,' Ls2_swp_str_l1_28_2 ',1,1);
PX1( F751686_55922800 ,FAST_MIN_55922800_1,' Ls2_tiny_icw_28_2 ',1,1);
PX1( F751686_55922810 ,FAST_MIN_55922810_1,' Ls2_tlb_bistp2_28_2 ',1,1);
PX1( F751686_55922820 ,FAST_MIN_55922820_1,' Ls2_tlb_bistp3_28_2 ',1,1);
PX1( F751686_55922830 ,FAST_MIN_55922830_1,' Ls2_tlb_bistp_28_2 ',1,1);
PX1( F751686_55922840 ,FAST_MIN_55922840_1,' Ls2_tlbfill_28_2 ',1,1);
PX1( F751686_55922wi0 ,FAST_MIN_55922wi0_1,' led_arm925_acsecicw ',1,1);
PX1( F751686_55922wl0 ,FAST_MIN_55922wl0_1,' led_arm925_sp_fnicw ',1,1);

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SetupSelect( FAST_MIN_DC, FORMAT_11 ,TIMING_11 );
  PeriodSetBase(FREQDSP);
  ACTableSet(FREQDSP, 'TIMING_11');
  wait(2ms);
end;

PX1( F751686_mgs3long ,FAST_MIN_MGS3LONG_1,'MGS3_ATSPEED_LONG ',1,2);
PX1( F751686_55922va0 ,FAST_MIN_55922va0_1,'S_dsp_blockrepeat ',1,2);
PX1( F751686_55922vb0 ,FAST_MIN_55922vb0_1,'S_reta_context ',1,2);
PX1( F751686_55922vc0 ,FAST_MIN_55922vc0_1,'S_hwa_dcti8x8_D2_D7 ',1,2);
PX1( F751686_55922ve0 ,FAST_MIN_55922ve0_1,'S_led_dma_2d2d_xfer ',1,2);
PX1( F751686_55922rn0 ,FAST_MIN_55922rn0_1,'S_hwa_dct_idct8x8 ',1,2);
PX1( F751686_55922s30 ,FAST_MIN_55922s30_1,'S_hwa_ME_1 ',1,2);
PX1( F751686_55922s40 ,FAST_MIN_55922s40_1,'S_hwa_ME_2 ',1,2);
PX1( F751686_55922s50 ,FAST_MIN_55922s50_1,'S_hwa_ME_4 ',1,2);
PX1( F751686_55922tu0 ,FAST_MIN_55922tu0_1,'S_hwa_ME_8 ',1,2);
PX1( F751686_55922s60 ,FAST_MIN_55922s60_1,'S_a_PI_cod_dis0_alt1 ',1,2);
PX1( F751686_55922s70 ,FAST_MIN_55922s70_1,'S_hwa_PI_cod_dis01 ',1,2);
PX1( F751686_55922s80 ,FAST_MIN_55922s80_1,'S_a_PI_cod_dis1_alt1 ',1,2);
PX1( F751686_55922s90 ,FAST_MIN_55922s90_1,'S_hwa_PI_cod_dis11 ',1,2);
PX1( F751686_55922sa0 ,FAST_MIN_55922sa0_1,'S_a_PI_cod_dis2_alt1 ',1,2);
PX1( F751686_55922sb0 ,FAST_MIN_55922sb0_1,'S_hwa_PI_cod_dis21 ',1,2);
PX1( F751686_55922sc0 ,FAST_MIN_55922sc0_1,'S_a_PI_cod_dis3_alt1 ',1,2);
PX1( F751686_55922sd0 ,FAST_MIN_55922sd0_1,'S_hwa_PI_cod_dis31 ',1,2);
PX1( F751686_55922se0 ,FAST_MIN_55922se0_1,'S_hwaPIdecdis0vec11 ',1,2);
PX1( F751686_55922sf0 ,FAST_MIN_55922sf0_1,'S_hwaPIdecdis0vec21 ',1,2);
PX1( F751686_55922sg0 ,FAST_MIN_55922sg0_1,'S_hwaPIdecdis0vec31 ',1,2);
PX1( F751686_55922sh0 ,FAST_MIN_55922sh0_1,'S_hwaPIdecdis1vec11 ',1,2);
PX1( F751686_55922si0 ,FAST_MIN_55922si0_1,'S_hwaPIdecdis1vec31 ',1,2);
PX1( F751686_55922sj0 ,FAST_MIN_55922sj0_1,'S_hwaPIdecdis2vec11 ',1,2);
PX1( F751686_55922sk0 ,FAST_MIN_55922sk0_1,'S_hwaPIdecdis2vec21 ',1,2);
PX1( F751686_55922sl0 ,FAST_MIN_55922sl0_1,'S_hwaPIdecdis2vec31 ',1,2);
PX1( F751686_55922sm0 ,FAST_MIN_55922sm0_1,'S_hwaPIdecdis3vec11 ',1,2);
PX1( F751686_55922sn0 ,FAST_MIN_55922sn0_1,'S_hwaPIdecdis3vec21 ',1,2);
PX1( F751686_55922so0 ,FAST_MIN_55922so0_1,'S_hwaPIdecdis3vec31 ',1,2);
PX1( F751686_55922sp0 ,FAST_MIN_55922sp0_1,'S_hwa_dct_8x8_idct_led ',1,2);
PX1( F751686_55922sq0 ,FAST_MIN_55922sq0_1,'S_hwa_dct_8x8_idct_xcnd_led ',1,2);
PX1( F751686_55922tc0 ,FAST_MIN_55922tc0_1,'S_hwaPIdecdis1vec21 ',1,2);
PX1( F751686_55922ss0 ,FAST_MIN_55922ss0_1,'S_led_pdbus_DARAM01 ',1,2);
PX1( F751686_55922st0 ,FAST_MIN_55922st0_1,'S_led_pdbus_DARAM11 ',1,2);
PX1( F751686_55922su0 ,FAST_MIN_55922su0_1,'S_led_pdbus_DARAM21 ',1,2);
PX1( F751686_55922sv0 ,FAST_MIN_55922sv0_1,'S_led_pdbus_DARAM31 ',1,2);
PX1( F751686_55922sw0 ,FAST_MIN_55922sw0_1,'S_led_pdbus_DARAM41 ',1,2);
PX1( F751686_55922sx0 ,FAST_MIN_55922sx0_1,'S_led_pdbus_DARAM51 ',1,2);
PX1( F751686_55922sy0 ,FAST_MIN_55922sy0_1,'S_led_pdbus_DARAM61 ',1,2);
PX1( F751686_55922sz0 ,FAST_MIN_55922sz0_1,'S_led_pdbus_DARAM71 ',1,2);
PX1( F751686_55922t00 ,FAST_MIN_55922t00_1,'S_led_pdbus_SARAM01 ',1,2);
PX1( F751686_55922t10 ,FAST_MIN_55922t10_1,'S_led_pdbus_SARAM11 ',1,2);
PX1( F751686_55922t20 ,FAST_MIN_55922t20_1,'S_led_pdbus_SARAM101 ',1,2);
PX1( F751686_55922t30 ,FAST_MIN_55922t30_1,'S_led_pdbus_SARAM111 ',1,2);
PX1( F751686_55922t40 ,FAST_MIN_55922t40_1,'S_led_pdbus_SARAM21 ',1,2);
PX1( F751686_55922t50 ,FAST_MIN_55922t50_1,'S_led_pdbus_SARAM31 ',1,2);
PX1( F751686_55922t60 ,FAST_MIN_55922t60_1,'S_led_pdbus_SARAM41 ',1,2);
PX1( F751686_55922t70 ,FAST_MIN_55922t70_1,'S_led_pdbus_SARAM51 ',1,2);
PX1( F751686_55922t80 ,FAST_MIN_55922t80_1,'S_led_pdbus_SARAM61 ',1,2);
PX1( F751686_55922t90 ,FAST_MIN_55922t90_1,'S_led_pdbus_SARAM71 ',1,2);
PX1( F751686_55922ta0 ,FAST_MIN_55922ta0_1,'S_led_pdbus_SARAM81 ',1,2);
PX1( F751686_55922tb0 ,FAST_MIN_55922tb0_1,'S_led_pdbus_SARAM91 ',1,2);
PX1( F751686_55922tt0 ,FAST_MIN_55922tt0_1,'S_led_bdbus_pdrom ',1,2);
PX1( F751686_55922tv0 ,FAST_MIN_55922tv0_1,'S_led_dual_access_DARAM0 ',1,2);
PX1( F751686_55922tw0 ,FAST_MIN_55922tw0_1,'S_led_dual_access_DARAM1 ',1,2);
PX1( F751686_55922tx0 ,FAST_MIN_55922tx0_1,'S_led_dual_access_DARAM2 ',1,2);
PX1( F751686_55922ty0 ,FAST_MIN_55922ty0_1,'S_led_dual_access_DARAM3 ',1,2);
PX1( F751686_55922tz0 ,FAST_MIN_55922tz0_1,'S_led_dual_access_DARAM4 ',1,2);
PX1( F751686_55922u00 ,FAST_MIN_55922u00_1,'S_led_dual_access_DARAM5 ',1,2);
PX1( F751686_55922u10 ,FAST_MIN_55922u10_1,'S_led_dual_access_DARAM6 ',1,2);
PX1( F751686_55922u20 ,FAST_MIN_55922u20_1,'S_led_dual_access_DARAM7 ',1,2);
PX1( F751686_55922u30 ,FAST_MIN_55922u30_1,'S_led_dual_access_SARAM0 ',1,2);
PX1( F751686_55922u40 ,FAST_MIN_55922u40_1,'S_led_dual_access_SARAM1 ',1,2);
PX1( F751686_55922u50 ,FAST_MIN_55922u50_1,'S_led_dual_access_SARAM10 ',1,2);
PX1( F751686_55922u60 ,FAST_MIN_55922u60_1,'S_led_dual_access_SARAM11 ',1,2);
PX1( F751686_55922u70 ,FAST_MIN_55922u70_1,'S_led_dual_access_SARAM2 ',1,2);
PX1( F751686_55922u80 ,FAST_MIN_55922u80_1,'S_led_dual_access_SARAM3 ',1,2);
PX1( F751686_55922u90 ,FAST_MIN_55922u90_1,'S_led_dual_access_SARAM4 ',1,2);
PX1( F751686_55922ua0 ,FAST_MIN_55922ua0_1,'S_led_dual_access_SARAM5 ',1,2);
PX1( F751686_55922ub0 ,FAST_MIN_55922ub0_1,'S_led_dual_access_SARAM6 ',1,2);
PX1( F751686_55922uc0 ,FAST_MIN_55922uc0_1,'S_led_dual_access_SARAM7 ',1,2);
PX1( F751686_55922ud0 ,FAST_MIN_55922ud0_1,'S_led_dual_access_SARAM8 ',1,2);
PX1( F751686_55922ue0 ,FAST_MIN_55922ue0_1,'S_led_dual_access_SARAM9 ',1,2);
PX1( F751686_55922uf0 ,FAST_MIN_55922uf0_1,'S_led_dma_all_D2_S11 ',1,2);
PX1( F751686_55922ug0 ,FAST_MIN_55922ug0_1,'S_dma_saram8_saram9 ',1,2);
PX1( F751686_55922rt0 ,FAST_MIN_55922rt0_1,'S_march13n_d0 ',1,2);
PX1( F751686_55922ru0 ,FAST_MIN_55922ru0_1,'S_march13n_pd ',1,2);
PX1( F751686_55922ut0 ,FAST_MIN_55922ut0_1,'S_march17_pd_d0 ',1,2);
PX1( F751686_55922uu0 ,FAST_MIN_55922uu0_1,'S_march17_pd_dasa ',1,2);
PX1( F751686_55922rs0 ,FAST_MIN_55922rs0_1,'S_inv_checkerboard_d0 ',1,2);
PX1( F751686_55922rr0 ,FAST_MIN_55922rr0_1,'S_inv_checkerboard ',1,2);
PX1( F751686_55922rq0 ,FAST_MIN_55922rq0_1,'S_checkerboard_d0 ',1,2);
PX1( F751686_55922rp0 ,FAST_MIN_55922rp0_1,'S_checkerboard ',1,2);

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SetupSelect( FAST_MIN_DC, FORMAT_32 , TIMING_32 );
  PeriodSetBase(FREQTC);
  ACTableSet(FREQTC, 'TIMING_32');
  wait(2ms);
end;
PX1( F751686_55922qh0 ,FAST_MIN_55922qh0_1,'hel_mmu_cam_ram ',1,3);
PX1( F751686_55922qj0 ,FAST_MIN_55922qj0_1,'hel_mpu_diagnostic2 ',1,3);
PX1( F751686_55922q00 ,FAST_MIN_55922q00_1,'hel_dsp_timer1 ',1,3);
PX1( F751686_55922q90 ,FAST_MIN_55922q90_1,'hel_led_ostimer1 ',1,3);
PX1( F751686_55922qg0 ,FAST_MIN_55922qg0_1,'hel_mmu_arm_comp ',1,3);
PX1( F751686_55922pv0 ,FAST_MIN_55922pv0_1,'hel_concurrent_imif ',1,3);
PX1( F751686_55922px0 ,FAST_MIN_55922px0_1,'hel_concurrent_rhea ',1,3);

end;  (* ATSPEED_MIN_TEST *)



{************************************************************************}
procedure ATSPEED_MAX_TEST;

  var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    Failtest       : string[30];
    Failpattern    : pattern;
 
  begin

Flagstop:=1;

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMX1V, 2A,VMX3V, 2A,2mS ); 
  SetupSelect( FAST_MAX_DC, FORMAT_9,TIMING_9 );
  PeriodSetBase(FREQARM);
  ACTableSet(FREQARM, 'TIMING_9');
  wait( 2mS );
end;

PX1( F751686_55922480 ,FAST_MAX_55922480_1,' Ls12_writeseq_14_1 ',2,1);
PX1( F751686_55922490 ,FAST_MAX_55922490_1,' Ls12_writeseq_28_2 ',2,1);
PX1( F751686_55922500 ,FAST_MAX_55922500_1,' Ls14_writeseq_28_2 ',2,1);
PX1( F751686_55922510 ,FAST_MAX_55922510_1,' Ls22_writeseq_28_2 ',2,1);
PX1( F751686_55922520 ,FAST_MAX_55922520_1,' Ls24_writeseq_28_2 ',2,1);
PX1( F751686_55922530 ,FAST_MAX_55922530_1,' Ls2_32_16_ic_28_2 ',2,1);
PX1( F751686_55922540 ,FAST_MAX_55922540_1,' Ls2_cp15test31_28_2 ',2,1);
PX1( F751686_55922550 ,FAST_MAX_55922550_1,' Ls2_dc_cl_ful_28_2 ',2,1);
PX1( F751686_55922560 ,FAST_MAX_55922560_1,' Ls2_dc_cln_idx_28_2 ',2,1);
PX1( F751686_55922570 ,FAST_MAX_55922570_1,' Ls2_dc_rd_wr_28_2 ',2,1);
PX1( F751686_55922580 ,FAST_MAX_55922580_1,' Ls2_dche_hs1X_28_2 ',2,1);
PX1( F751686_55922590 ,FAST_MAX_55922590_1,' Ls2_dchitmiss_28_2 ',2,1);
PX1( F751686_55922620 ,FAST_MAX_55922620_1,' Ls2_ichitmiss_28_2 ',2,1);
PX1( F751686_55922630 ,FAST_MAX_55922630_1,' Ls2_mmu_w_dtlb_28_2 ',2,1);
PX1( F751686_55922640 ,FAST_MAX_55922640_1,' Ls2_mrc_usr_md_28_2 ',2,1);
PX1( F751686_55922650 ,FAST_MAX_55922650_1,' Ls2_o_dma_imif_28_2 ',2,1);
PX1( F751686_55922670 ,FAST_MAX_55922670_1,' Ls2_ostimer3_28_2 ',2,1);
PX1( F751686_55922680 ,FAST_MAX_55922680_1,' Ls2_prefetch_28_2 ',2,1);
PX1( F751686_55922690 ,FAST_MAX_55922690_1,' Ls2_raw_1010_28_2 ',2,1);
PX1( F751686_55922700 ,FAST_MAX_55922700_1,' Ls2_raw_110x_28_2 ',2,1);
PX1( F751686_55922710 ,FAST_MAX_55922710_1,' Ls2_raw_1110_28_2 ',2,1);
PX1( F751686_55922720 ,FAST_MAX_55922720_1,' Ls2_raw_1111_28_2 ',2,1);
PX1( F751686_55922730 ,FAST_MAX_55922730_1,' Ls2_raw_111Xcoh_28_2 ',2,1);
PX1( F751686_55922740 ,FAST_MAX_55922740_1,' Ls2_raw_111x_28_2 ',2,1);
PX1( F751686_55922750 ,FAST_MAX_55922750_1,' Ls2_swap_hzd_28_2 ',2,1);
PX1( F751686_55922760 ,FAST_MAX_55922760_1,' Ls2_swp_str_l1_28_2 ',2,1);
PX1( F751686_55922800 ,FAST_MAX_55922800_1,' Ls2_tiny_icw_28_2 ',2,1);
PX1( F751686_55922810 ,FAST_MAX_55922810_1,' Ls2_tlb_bistp2_28_2 ',2,1);
PX1( F751686_55922820 ,FAST_MAX_55922820_1,' Ls2_tlb_bistp3_28_2 ',2,1);
PX1( F751686_55922830 ,FAST_MAX_55922830_1,' Ls2_tlb_bistp_28_2 ',2,1);
PX1( F751686_55922840 ,FAST_MAX_55922840_1,' Ls2_tlbfill_28_2 ',2,1);
PX1( F751686_55922wi0 ,FAST_MAX_55922wi0_1,' led_arm925_acsecicw ',2,1);
PX1( F751686_55922wl0 ,FAST_MAX_55922wl0_1,' led_arm925_sp_fnicw ',2,1);

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SetupSelect( FAST_MAX_DC, FORMAT_11 ,TIMING_11 );
  PeriodSetBase(FREQDSP);
  ACTableSet(FREQDSP, 'TIMING_11');
  wait(2ms);
end;

PX1(F751686_mgs3long,FAST_MAX_MGS3LONG_1,'MGS3_ATSPEED_LONG',2,2);
PX1(F751686_55922va0,FAST_MAX_55922va0_1,'S_dsp_blockrepeat',2,2);
PX1(F751686_55922vb0,FAST_MAX_55922vb0_1,'S_reta_context',2,2);
PX1(F751686_55922vc0,FAST_MAX_55922vc0_1,'S_hwa_dcti8x8_D2_D7',2,2);
PX1(F751686_55922ve0,FAST_MAX_55922ve0_1,'S_led_dma_2d2d_xfer',2,2);
PX1(F751686_55922rn0,FAST_MAX_55922rn0_1,'S_hwa_dct_idct8x8',2,2);
PX1(F751686_55922s30,FAST_MAX_55922s30_1,'S_hwa_ME_1',2,2);
PX1(F751686_55922s40,FAST_MAX_55922s40_1,'S_hwa_ME_2',2,2);
PX1(F751686_55922s50,FAST_MAX_55922s50_1,'S_hwa_ME_4',2,2);
PX1(F751686_55922tu0,FAST_MAX_55922tu0_1,'S_hwa_ME_8',2,2);
PX1(F751686_55922s60,FAST_MAX_55922s60_1,'S_a_PI_cod_dis0_alt1',2,2);
PX1(F751686_55922s70,FAST_MAX_55922s70_1,'S_hwa_PI_cod_dis01',2,2);
PX1(F751686_55922s80,FAST_MAX_55922s80_1,'S_a_PI_cod_dis1_alt1',2,2);
PX1(F751686_55922s90,FAST_MAX_55922s90_1,'S_hwa_PI_cod_dis11',2,2);
PX1(F751686_55922sa0,FAST_MAX_55922sa0_1,'S_a_PI_cod_dis2_alt1',2,2);
PX1(F751686_55922sb0,FAST_MAX_55922sb0_1,'S_hwa_PI_cod_dis21',2,2);
PX1(F751686_55922sc0,FAST_MAX_55922sc0_1,'S_a_PI_cod_dis3_alt1',2,2);
PX1(F751686_55922sd0,FAST_MAX_55922sd0_1,'S_hwa_PI_cod_dis31',2,2);
PX1(F751686_55922se0,FAST_MAX_55922se0_1,'S_hwaPIdecdis0vec11',2,2);
PX1(F751686_55922sf0,FAST_MAX_55922sf0_1,'S_hwaPIdecdis0vec21',2,2);
PX1(F751686_55922sg0,FAST_MAX_55922sg0_1,'S_hwaPIdecdis0vec31',2,2);
PX1(F751686_55922sh0,FAST_MAX_55922sh0_1,'S_hwaPIdecdis1vec11',2,2);
PX1(F751686_55922si0,FAST_MAX_55922si0_1,'S_hwaPIdecdis1vec31',2,2);
PX1(F751686_55922sj0,FAST_MAX_55922sj0_1,'S_hwaPIdecdis2vec11',2,2);
PX1(F751686_55922sk0,FAST_MAX_55922sk0_1,'S_hwaPIdecdis2vec21',2,2);
PX1(F751686_55922sl0,FAST_MAX_55922sl0_1,'S_hwaPIdecdis2vec31',2,2);
PX1(F751686_55922sm0,FAST_MAX_55922sm0_1,'S_hwaPIdecdis3vec11',2,2);
PX1(F751686_55922sn0,FAST_MAX_55922sn0_1,'S_hwaPIdecdis3vec21',2,2);
PX1(F751686_55922so0,FAST_MAX_55922so0_1,'S_hwaPIdecdis3vec31',2,2);
PX1(F751686_55922sp0,FAST_MAX_55922sp0_1,'S_hwa_dct_8x8_idct_led',2,2);
PX1(F751686_55922sq0,FAST_MAX_55922sq0_1,'S_hwa_dct_8x8_idct_xcnd_led',2,2);
PX1(F751686_55922tc0,FAST_MAX_55922tc0_1,'S_hwaPIdecdis1vec21',2,2);
PX1(F751686_55922ss0,FAST_MAX_55922ss0_1,'S_led_pdbus_DARAM01',2,2);
PX1(F751686_55922st0,FAST_MAX_55922st0_1,'S_led_pdbus_DARAM11',2,2);
PX1(F751686_55922su0,FAST_MAX_55922su0_1,'S_led_pdbus_DARAM21',2,2);
PX1(F751686_55922sv0,FAST_MAX_55922sv0_1,'S_led_pdbus_DARAM31',2,2);
PX1(F751686_55922sw0,FAST_MAX_55922sw0_1,'S_led_pdbus_DARAM41',2,2);
PX1(F751686_55922sx0,FAST_MAX_55922sx0_1,'S_led_pdbus_DARAM51',2,2);
PX1(F751686_55922sy0,FAST_MAX_55922sy0_1,'S_led_pdbus_DARAM61',2,2);
PX1(F751686_55922sz0,FAST_MAX_55922sz0_1,'S_led_pdbus_DARAM71',2,2);
PX1(F751686_55922t00,FAST_MAX_55922t00_1,'S_led_pdbus_SARAM01',2,2);
PX1(F751686_55922t10,FAST_MAX_55922t10_1,'S_led_pdbus_SARAM11',2,2);
PX1(F751686_55922t20,FAST_MAX_55922t20_1,'S_led_pdbus_SARAM101',2,2);
PX1(F751686_55922t30,FAST_MAX_55922t30_1,'S_led_pdbus_SARAM111',2,2);
PX1(F751686_55922t40,FAST_MAX_55922t40_1,'S_led_pdbus_SARAM21',2,2);
PX1(F751686_55922t50,FAST_MAX_55922t50_1,'S_led_pdbus_SARAM31',2,2);
PX1(F751686_55922t60,FAST_MAX_55922t60_1,'S_led_pdbus_SARAM41',2,2);
PX1(F751686_55922t70,FAST_MAX_55922t70_1,'S_led_pdbus_SARAM51',2,2);
PX1(F751686_55922t80,FAST_MAX_55922t80_1,'S_led_pdbus_SARAM61',2,2);
PX1(F751686_55922t90,FAST_MAX_55922t90_1,'S_led_pdbus_SARAM71',2,2);
PX1(F751686_55922ta0,FAST_MAX_55922ta0_1,'S_led_pdbus_SARAM81',2,2);
PX1(F751686_55922tb0,FAST_MAX_55922tb0_1,'S_led_pdbus_SARAM91',2,2);
PX1(F751686_55922tt0,FAST_MAX_55922tt0_1,'S_led_bdbus_pdrom',2,2);
PX1(F751686_55922tv0,FAST_MAX_55922tv0_1,'S_led_dual_access_DARAM0',2,2);
PX1(F751686_55922tw0,FAST_MAX_55922tw0_1,'S_led_dual_access_DARAM1',2,2);
PX1(F751686_55922tx0,FAST_MAX_55922tx0_1,'S_led_dual_access_DARAM2',2,2);
PX1(F751686_55922ty0,FAST_MAX_55922ty0_1,'S_led_dual_access_DARAM3',2,2);
PX1(F751686_55922tz0,FAST_MAX_55922tz0_1,'S_led_dual_access_DARAM4',2,2);
PX1(F751686_55922u00,FAST_MAX_55922u00_1,'S_led_dual_access_DARAM5',2,2);
PX1(F751686_55922u10,FAST_MAX_55922u10_1,'S_led_dual_access_DARAM6',2,2);
PX1(F751686_55922u20,FAST_MAX_55922u20_1,'S_led_dual_access_DARAM7',2,2);
PX1(F751686_55922u30,FAST_MAX_55922u30_1,'S_led_dual_access_SARAM0',2,2);
PX1(F751686_55922u40,FAST_MAX_55922u40_1,'S_led_dual_access_SARAM1',2,2);
PX1(F751686_55922u50,FAST_MAX_55922u50_1,'S_led_dual_access_SARAM10',2,2);
PX1(F751686_55922u60,FAST_MAX_55922u60_1,'S_led_dual_access_SARAM11',2,2);
PX1(F751686_55922u70,FAST_MAX_55922u70_1,'S_led_dual_access_SARAM2',2,2);
PX1(F751686_55922u80,FAST_MAX_55922u80_1,'S_led_dual_access_SARAM3',2,2);
PX1(F751686_55922u90,FAST_MAX_55922u90_1,'S_led_dual_access_SARAM4',2,2);
PX1(F751686_55922ua0,FAST_MAX_55922ua0_1,'S_led_dual_access_SARAM5',2,2);
PX1(F751686_55922ub0,FAST_MAX_55922ub0_1,'S_led_dual_access_SARAM6',2,2);
PX1(F751686_55922uc0,FAST_MAX_55922uc0_1,'S_led_dual_access_SARAM7',2,2);
PX1(F751686_55922ud0,FAST_MAX_55922ud0_1,'S_led_dual_access_SARAM8',2,2);
PX1(F751686_55922ue0,FAST_MAX_55922ue0_1,'S_led_dual_access_SARAM9',2,2);
PX1(F751686_55922uf0,FAST_MAX_55922uf0_1,'S_led_dma_all_D2_S11',2,2);
PX1(F751686_55922ug0,FAST_MAX_55922ug0_1,'S_dma_saram8_saram9',2,2);
PX1(F751686_55922rt0,FAST_MAX_55922rt0_1,'S_march13n_d0',2,2);
PX1(F751686_55922ru0,FAST_MAX_55922ru0_1,'S_march13n_pd',2,2);
PX1(F751686_55922ut0,FAST_MAX_55922ut0_1,'S_march17_pd_d0',2,2);
PX1(F751686_55922uu0,FAST_MAX_55922uu0_1,'S_march17_pd_dasa',2,2);
PX1(F751686_55922rs0,FAST_MAX_55922rs0_1,'S_inv_checkerboard_d0',2,2);
PX1(F751686_55922rr0,FAST_MAX_55922rr0_1,'S_inv_checkerboard',2,2);
PX1(F751686_55922rq0,FAST_MAX_55922rq0_1,'S_checkerboard_d0',2,2);
PX1(F751686_55922rp0,FAST_MAX_55922rp0_1,'S_checkerboard',2,2);

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SetupSelect( FAST_MAX_DC, FORMAT_32 , TIMING_32 );
  PeriodSetBase(FREQTC);
  ACTableSet(FREQTC, 'TIMING_32');
  wait(2ms);
end;

PX1( F751686_55922qh0 ,FAST_MAX_55922qh0_1,'hel_mmu_cam_ram ',2,3);
PX1( F751686_55922qj0 ,FAST_MAX_55922qj0_1,'hel_mpu_diagnostic2 ',2,3);
PX1( F751686_55922q00 ,FAST_MAX_55922q00_1,'hel_dsp_timer1 ',2,3);
PX1( F751686_55922q90 ,FAST_MAX_55922q90_1,'hel_led_ostimer1 ',2,3);
PX1( F751686_55922qg0 ,FAST_MAX_55922qg0_1,'hel_mmu_arm_comp ',2,3);
PX1( F751686_55922pv0 ,FAST_MAX_55922pv0_1,'hel_concurrent_imif ',2,3);
PX1( F751686_55922px0 ,FAST_MAX_55922px0_1,'hel_concurrent_rhea ',2,3);

end;  (* ATSPEED_MAX_TEST *)



{*****************************************************************}
procedure HWA_MIN_TEST;
  var
    TEST_RESULT    : boolean;
    STATUS         : integer;

begin

TEST_RESULT := PASS;
    
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); 
  SetupSelect( FAST_MIN_DC, FORMAT_11 , TIMING_11 );
  wait(2ms);
  PX3( F751686_55922ro0 , FAST_MIN_55922ro0 ,' hwa_dct_idct8x8 ',0);
end;

end;  (* HWA_TEST *)



{*****************************************************************}
procedure HWA_MAX_TEST;

  var
    TEST_RESULT    : boolean;
    STATUS         : integer;

begin

TEST_RESULT := PASS;

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMX1V, 2A,VMX3V, 2A,2mS ); 
  SetupSelect( FAST_MAX_DC, FORMAT_11 , TIMING_11 );
  wait(2ms);
  PX3( F751686_55922ro0 , FAST_MAX_55922ro0 ,' hwa_dct_idct8x8 ',0);
end;
end;  (* HWA_TEST *)



(********************************************************************)
procedure API_MIN_TEST;
 var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    test	   : treal;
begin

TEST_RESULT := PASS;
  
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); 
  SetupSelect( FAST_MIN_DC, FORMAT_32 ,TIMING_32 );
  PeriodSetBase (FREQTC);
  ACTableSet(FREQTC,'TIMING_32');
  wait(2ms);
  PX3( F751686_55922td0 , FAST_MIN_55922td0 ,' addr_daram_sam ',0);
  PX3( F751686_55922tf0 , FAST_MIN_55922tf0 ,' addrsaramhomnew ',0);
  PX3( F751686_55922tk0 , FAST_MIN_55922tk0 ,' mltbnksaramhom ',0);
  PX3( F751686_55922tj0 , FAST_MIN_55922tj0 ,' mltbnkdaramsam ',0);
  PX3( F751686_55922th0 , FAST_MIN_55922th0 ,' addrsrmsmalnew ',0);
  PX3( F751686_55922tl0 , FAST_MIN_55922tl0 ,' mltbnksaramsam ',0);
  PX3( F751686_55922to0 , FAST_MIN_55922to0 ,' ramtestapiprod ',0);
  PX3( F751686_55922tn0 , FAST_MIN_55922tn0 ,' ldrmtstapiprod2 ',0);
  PX3( F751686_55922ts0 , FAST_MIN_55922ts0 ,' arm_api_rhea_path ',0);
  PX3( F751686_55922uy0 , FAST_MIN_55922uy0 ,' led_saram_hom2 ',0);

  SetupSelect( FAST_MIN_DC, FORMAT_32 ,TIMING_32 );
  DCSetLDOFF( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, OSC1V_INS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.5,
	    -10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( VMN1V, 0V,CP, VMN1V*0.75, VMN1V*0.25, VMN1V*0.5,
	    -10.0uA, 10.0uA, OSC1V_IOS );
  PeriodSetBase (FREQTC);
  ACTableSet(FREQTC,'TIMING_32');
  wait(2ms);
  PX3( F751686_55922uz0 , FAST_MIN_55922uz0 ,' led_stio_imif_sync ',0);
  PX3( F751686_55922ui0 , FAST_MIN_55922ui0 ,' Emifs_MMU_Sync ',0);   
end;
  
end;  (* API_MIN_TEST *)


(********************************************************************)
procedure API_MAX_TEST;
 var
    TEST_RESULT    : boolean;
    STATUS         : integer;
    test	   : treal;
begin

TEST_RESULT := PASS;
  
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMX1V, 2A, VMX3V, 2A,2mS ); 
  SetupSelect( FAST_MAX_DC, FORMAT_32 ,TIMING_32 );
  PeriodSetBase (FREQTC);
  ACTableSet(FREQTC,'TIMING_32');
  wait(2ms);
  PX3( F751686_55922td0 , FAST_MAX_55922td0 ,' addr_daram_sam ',1);
  PX3( F751686_55922tf0 , FAST_MAX_55922tf0 ,' addrsaramhomnew ',0);
  PX3( F751686_55922tk0 , FAST_MAX_55922tk0 ,' mltbnksaramhom ',0);
  PX3( F751686_55922tj0 , FAST_MAX_55922tj0 ,' mltbnkdaramsam ',0);
  PX3( F751686_55922th0 , FAST_MAX_55922th0 ,' addrsrmsmalnew ',0);
  PX3( F751686_55922tl0 , FAST_MAX_55922tl0 ,' mltbnksaramsam ',0);
  PX3( F751686_55922to0 , FAST_MAX_55922to0 ,' ramtestapiprod ',0);
  PX3( F751686_55922tn0 , FAST_MAX_55922tn0 ,' ldrmtstapiprod2 ',0);
  PX3( F751686_55922ts0 , FAST_MAX_55922ts0 ,' arm_api_rhea_path ',0);
  PX3( F751686_55922uy0 , FAST_MAX_55922uy0 ,' led_saram_hom2 ',0);
  PX3( F751686_55922uz0 , FAST_MAX_55922uz0 ,' led_stio_imif_sync ',0);
  PX3( F751686_55922ui0 , FAST_MAX_55922ui0 ,' Emifs_MMU_Sync ',0);  
end;  

end;  (* API_MAX_TEST *)



{**********************************************************************}
procedure DSP_ICACHE_MIN_TEST;

var
    TEST_RESULT    : boolean;
    STATUS         : integer;
begin

TEST_RESULT := PASS;
   
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A, VMN3V, 2A,2mS );
  SetupSelect( FAST_MIN_DC, FORMAT_32 , TIMING_32 );
  wait(2ms);   
  PX3( F751686_55922v10 , FAST_MIN_55922v10 ,' frv1icache2way ',0);
  PX3( F751686_55922v20 , FAST_MIN_55922v20 ,' frv1icachedm ',0);
  PX3( F751686_55922v30 , FAST_MIN_55922v30 ,' frv1vadramset1 ',0);
  PX3( F751686_55922v70 , FAST_MIN_55922v70 ,' led_dspdma_burst ',0);
  PX3( F751686_55922v80 , FAST_MIN_55922v80 ,' led_dspdma_pack ',0);
  PX3( F751686_55922v90 , FAST_MIN_55922v90 ,' led_hr_novad_1f_cache ',0);
  SetupSelect( FAST_MIN_DC, FORMAT_34 , TIMING_34 );
  wait(2ms); 
  PX3( F751686_55922vd0 , FAST_MIN_55922vd0 ,' 27x_rmr_emiffdspmmu ',0);
end; 
  
end;  (* DSP_ICACHE_MIN_TEST *)



{**********************************************************************}
procedure DSP_ICACHE_MAX_TEST;

var
    TEST_RESULT    : boolean;
    STATUS         : integer;
begin

TEST_RESULT := PASS;
  
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMX1V, 2A, VMX3V, 2A,2mS );
  SetupSelect( FAST_MAX_DC, FORMAT_32 , TIMING_32 );
  wait(2ms);   
  PX3( F751686_55922v10 , FAST_MAX_55922v10 ,' frv1icache2way ',1);
  PX3( F751686_55922v20 , FAST_MAX_55922v20 ,' frv1icachedm ',0);
  PX3( F751686_55922v30 , FAST_MAX_55922v30 ,' frv1vadramset1 ',0);
  PX3( F751686_55922v70 , FAST_MAX_55922v70 ,' led_dspdma_burst ',0);
  PX3( F751686_55922v80 , FAST_MAX_55922v80 ,' led_dspdma_pack ',0);
  PX3( F751686_55922v90 , FAST_MAX_55922v90 ,' led_hr_novad_1f_cache ',0);
  SetupSelect( FAST_MAX_DC, FORMAT_34 , TIMING_34 );
  wait(2ms); 
  PX3( F751686_55922vd0 , FAST_MAX_55922vd0 ,' 27x_rmr_emiffdspmmu ',0);
end;
  
end;  (* DSP_ICACHE_MAX_TEST *)




{**********************************************************************}
procedure BIG7_MIN_TEST;
var
    TEST_RESULT    : boolean;
    STATUS         : integer;
begin

if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); 
  SetupSelect( FAST_MIN_DC, FORMAT_11 ,TIMING_11 );
  PeriodSetBase(FREQDSP);
  ACTableSet(FREQDSP, 'TIMING_11');{ftvsrev10a}
  wait(2ms);    
PX1 ( F751686_55922uj0 , FAST_MIN_55922uj0 , ' S_down1_bdbus_pd_d0 ',1,2);
PX1 ( F751686_55922uk0 , FAST_MIN_55922uk0 , ' S_down1_bdbus_pd_dasa ',1,2);
PX1 ( F751686_55922ul0 , FAST_MIN_55922ul0 , ' S_down1_cdbus_pd_d0 ',1,2);
PX1 ( F751686_55922um0 , FAST_MIN_55922um0 , ' S_down1_cdbus_pd_dasa ',1,2);
PX1 ( F751686_55922un0 , FAST_MIN_55922un0 , ' S_down1_sense_pd_d0 ',1,2);
PX1 ( F751686_55922uo0 , FAST_MIN_55922uo0 , ' S_down1_sense_pd_dasa ',1,2);
PX1 ( F751686_55922up0 , FAST_MIN_55922up0 , ' S_dtxn_pd_d0 ',1,2);
PX1 ( F751686_55922uq0 , FAST_MIN_55922uq0 , ' S_dtxn_pd_dasa ',1,2);
PX1 ( F751686_55922ur0 , FAST_MIN_55922ur0 , ' S_mapcol_pd_d0 ',1,2);
PX1 ( F751686_55922us0 , FAST_MIN_55922us0 , ' S_mapcol_pd_dasa ',1,2);
PX1 ( F751686_55922uv0 , FAST_MIN_55922uv0 , ' S_precharge_pd_d0 ',1,2);
PX1 ( F751686_55922uw0 , FAST_MIN_55922uw0 , ' S_precharge_pd_dasa ',1,2);
end;

end;  (* BIG7_MIN_TEST *)




{**********************************************************************}
procedure BIG7_MAX_TEST;
var
    TEST_RESULT    : boolean;
    STATUS         : integer;
begin
 
if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
begin
  SET_POWER( VMX1V, 2A,VMX3V, 2A,2mS ); 
  SetupSelect( FAST_MAX_DC, FORMAT_11 ,TIMING_11 );
  PeriodSetBase(FREQDSP);
  ACTableSet(FREQDSP, 'TIMING_11');{ftvsrev10a}
  wait(2ms);          
PX1 ( F751686_55922uj0 , FAST_MAX_55922uj0 , ' S_down1_bdbus_pd_d0 ',2,2);
PX1 ( F751686_55922uk0 , FAST_MAX_55922uk0 , ' S_down1_bdbus_pd_dasa ',2,2);
PX1 ( F751686_55922ul0 , FAST_MAX_55922ul0 , ' S_down1_cdbus_pd_d0 ',2,2);
PX1 ( F751686_55922um0 , FAST_MAX_55922um0 , ' S_down1_cdbus_pd_dasa ',2,2);
PX1 ( F751686_55922un0 , FAST_MAX_55922un0 , ' S_down1_sense_pd_d0 ',2,2);
PX1 ( F751686_55922uo0 , FAST_MAX_55922uo0 , ' S_down1_sense_pd_dasa ',2,2);
PX1 ( F751686_55922up0 , FAST_MAX_55922up0 , ' S_dtxn_pd_d0 ',2,2);
PX1 ( F751686_55922uq0 , FAST_MAX_55922uq0 , ' S_dtxn_pd_dasa ',2,2);
PX1 ( F751686_55922ur0 , FAST_MAX_55922ur0 , ' S_mapcol_pd_d0 ',2,2);
PX1 ( F751686_55922us0 , FAST_MAX_55922us0 , ' S_mapcol_pd_dasa ',2,2);
PX1 ( F751686_55922uv0 , FAST_MAX_55922uv0 , ' S_precharge_pd_d0 ',2,2);
PX1 ( F751686_55922uw0 , FAST_MAX_55922uw0 , ' S_precharge_pd_dasa ',2,2);
end;

end;  (* BIG7_MAX_TEST *)



{**********************************************************************}
procedure FAST_FUNCTIONAL_MIN_TEST;

var
    TEST_RESULT    : boolean;
    STATUS         : integer;

begin

  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
  begin
    SET_POWER( VMN1V, 2A,VMN3V, 2A,2mS ); 
    SetupSelect( SLOW_MIN_DC, FORMAT_3,TIMING_3 );
    wait(50ms);    
PX3( F751686_55922050 , SLOW_MIN_55922050 ,' dcp_voh_vol ',1);
PX3( F751686_55922410 , SLOW_MIN_55922410 ,' dcp_vih_vil ',0);
PX3( F751686_55922440 , SLOW_MIN_55922440 ,' dcp_voh_vol (Vout) ',0);

    SetupSelect( SLOW_MIN_DC, FORMAT_5,TIMING_5 );
    wait(2ms);
PX3( F751686_55922070 , SLOW_MIN_55922070 ,' E_FUSE ',0);
    
    SetupSelect( FAST_MIN_DC, FORMAT_11 , TIMING_11 );
    wait(2ms);
PX3( F751686_55922gq0 , FAST_MIN_55922gq0 ,' USB_HELEN1 ',0);
    
    SetupSelect( FAST_MIN_DC, FORMAT_19 ,TIMING_19 );
    wait( 2mS );    
PX3( F751686_55922ky0 , FAST_MIN_55922ky0 ,' hel_tdl_apll ',0);
  
    SetupSelect( FAST_MIN_DC, FORMAT_9,TIMING_9 );
    PeriodSetBase(500ns);
    ACTableSet(500ns,'TIMING_9');
    wait( 2mS );
    discard (PatternExecute( STATUS, F751686_55922l00 )); 
PX3( F751686_55922l00 , FAST_MIN_55922l00 ,' hel_tdl_diag1_led ',0);
PX3( F751686_55922ql0 , FAST_MIN_55922ql0 ,' hel_tdl_diag6_sync ',0);

    SetupSelect( FAST_MIN_DC, FORMAT_9,TIMING_9 );
    ACSetInOut( OUT1_TS9_ACG, 0NS, 0NS, 79.000NS, 31NS-TGB, 36NS+TGB);
    wait(2ms);
PX3( F751686_55922qn0 , FAST_MIN_55922qn0 ,' hel_tdl_jtag1 ',0);
      
    SetupSelect( FAST_MIN_DC, FORMAT_9 ,TIMING_9 );
    wait(2ms);
PX3( F751686_55922qq0 , FAST_MIN_55922qq0 ,' hel_tdl_mcbsp3 ',0);
PX3( F751686_55922re0 , FAST_MIN_55922re0 ,' tdl_api_access_sync ',0);
PX3( F751686_55922m90 , FAST_MIN_55922m90 ,' hel_tdl_vbus_detect ',0);

   SetupSelect( FAST_MIN_DC, FORMAT_33,TIMING_33 );
   wait( 2mS );
PX3( F751686_55922qs0 , FAST_MIN_55922qs0 ,' hel_ulpd_dpll ',0);

   SetupSelect( FAST_MIN_DC, FORMAT_27 ,TIMING_27 );
    wait(2ms); 
PX3( F751686_55922mo0 , FAST_MIN_55922mo0 ,' omap_DPLL1 ',0);

   SetupSelect( FAST_MIN_DC, FORMAT_32 ,TIMING_32 );
   PeriodSetBase(200NS);
   ACTableSet(200NS, 'TIMING_32');	
   wait(2ms);  
PX3( F751686_55922ps0 , FAST_MIN_55922ps0 ,' hel_arm_gpio ',0);
PX3( F751686_55922pu0 , FAST_MIN_55922pu0 ,' hel_arm_uart_loopbk ',0);
PX3( F751686_55922py0 , FAST_MIN_55922py0 ,' hel_dsp_gpio ',0);
PX3( F751686_55922pz0 , FAST_MIN_55922pz0 ,' hel_dsp_intc ',0);
PX3( F751686_55922q10 , FAST_MIN_55922q10 ,' hel_dsp_timer2 ',0);
PX3( F751686_55922q20 , FAST_MIN_55922q20 ,' hel_dsp_timer3 ',0);
PX3( F751686_55922q30 , FAST_MIN_55922q30 ,' hel_dsp_uart_loopbk ',0);
PX3( F751686_55922q40 , FAST_MIN_55922q40 ,' hel_dsp_wdtimer ',0);
PX3( F751686_55922q70 , FAST_MIN_55922q70 ,' hel_led_inth ',0);
PX3( F751686_55922qa0 , FAST_MIN_55922qa0 ,' hel_led_ostimer2 ',0);
PX3( F751686_55922qc0 , FAST_MIN_55922qc0 ,' hel_led_psa ',0);
PX3( F751686_55922qe0 , FAST_MIN_55922qe0 ,' hel_led_wdtimer ',0);
PX3( F751686_55922qf0 , FAST_MIN_55922qf0 ,' hel_mb ',0);
PX3( F751686_55922qk0 , FAST_MIN_55922qk0 ,' hel_syncstio2emif ',0);
PX3( F751686_55922q50 , FAST_MIN_55922q50 ,' hel_led_clkm1 ',0);
PX3( F751686_55922q60 , FAST_MIN_55922q60 ,' hel_led_idle13 ',0);
PX3( F751686_55922qi0 , FAST_MIN_55922qi0 ,' hel_mpu_diagnostic ',0);
PX3( F751686_55922qd0 , FAST_MIN_55922qd0 ,' hel_led_rheabridge ',0);
PX3( F751686_55922q80 , FAST_MIN_55922q80 ,' hel_led_lcd_2frames ',0);


  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
      begin
        TestOpen( FAST_MIN_55922qt0 ); (* imif_march13_A *){ftvsrev11d}
          Datalog('comment=''TDL NAME: imif_march13_A''',chr(10));
          SetupSelect( FAST_MIN_DC, FORMAT_32 , TIMING_32 );
          PeriodSetBase(300NS);
          ACTableSet(300NS, 'TIMING_32');
          wait(2ms);
          TEST_RESULT := PatternExecute( STATUS, F751686_55922qt0  );

          if (TEST_RESULT = FAIL) then
          begin
            PeriodSetBase(1US);						
            ACTableSet(1US, 'TIMING_32');					
            wait(2ms);
            TEST_RESULT := PatternExecute( STATUS, F751686_55922qt0 );
          end;

          ResultRecord( TEST_RESULT );
          if (TEST_RESULT = FAIL) then DeviceStatus := false;
        TestClose;
      end;

    if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
      begin
        TestOpen( FAST_MIN_55922qu0 ); (* imif_march13_B *){ftvsrev11d}
          Datalog('comment=''TDL NAME: imif_march13_B''',chr(10));
          SetupSelect( FAST_MIN_DC, FORMAT_32 ,TIMING_32 );
          PeriodSetBase(300NS);
          ACTableSet(300NS, 'TIMING_32');
          wait(2ms);
          TEST_RESULT := PatternExecute( STATUS, F751686_55922qu0 );

          if (TEST_RESULT = FAIL) then
          begin
            PeriodSetBase(1US);						
            ACTableSet(1US, 'TIMING_32');					
            wait(2ms);
            TEST_RESULT := PatternExecute( STATUS, F751686_55922qu0 );
          end;

          ResultRecord( TEST_RESULT );
          if (TEST_RESULT = FAIL) then DeviceStatus := false;
        TestClose;
      end;

  SetupSelect( SLOW_MIN_DC, FORMAT_1 ,TIMING_1 );
  wait(2ms);
PX3( F751686_55922300 , SLOW_MIN_55922300 ,' mgs3_atpg_sc ',0);  

  end;
 
 if (TEST_RESULT = FAIL) then DeviceStatus := false;
 
 end;  (* FAST_FUNCTIONAL_MIN_TEST *)



{*********************************************************************}
procedure VMIN_OUTLIER_TEST;
var
    TEST_RESULT    : boolean;
    STATUS         : integer;

begin

Datalog('VBOX MIN TEST START');

if not(vboxmin_fail) then
begin
  SET_POWER( VMN1LV, 2A, VMN3V, 2A,2mS ); 
  if ((DeviceStatus = PASS) or ( V_DeviceStatus = PASS )) then
  begin
    SetupSelect( SLOW_LOMIN_DC, FORMAT_1 ,TIMING_1 );
    wait(2ms);    
    PX3( F751686_55922300 , SLOW_LOMIN_55922300 ,' mgs3_atpg_sc ',0);   
  end;

  Datalog('VBOX MIN TEST END');
  if (DeviceStatus = FAIL) then 
  begin
    DeviceStatus := true;
    vboxmin_fail := true;
  end;
    
end;

end;  (* VMIN_OUTLIER_TEST *)



{*********************************************************************}
procedure FAST_FUNCTIONAL_MAX_TEST;
  var
    TEST_RESULT    : boolean;
    STATUS         : integer;

begin
  
  if ( V_DeviceStatus = PASS ) then
  begin
    SET_POWER( VMX1V, 2A,VMX3V, 2A,2mS ); 
    SetupSelect( SLOW_MAX_DC, FORMAT_3,TIMING_3 );
    wait (50ms);    
PX3( F751686_55922050 , SLOW_MAX_55922050 ,' dcp_voh_vol ',1);   
PX3( F751686_55922410 , SLOW_MAX_55922410 ,' dcp_vih_vil ',0);   
PX3( F751686_55922440 , SLOW_MAX_55922440 ,' dcp_voh_vol (Vout) ',0);   
    
    SetupSelect( SLOW_MAX_DC, FORMAT_5,TIMING_5 );
    wait( 2mS ); 
PX3( F751686_55922070 , SLOW_MAX_55922070 ,' E_FUSE ',0);   

    SetupSelect( FAST_MAX_DC, FORMAT_29 ,TIMING_29 );
    PeriodSetBase(100NS);
    ACTableSet(100NS, 'TIMING_29');
    wait(2ms);
PX3( F751686_55922pb0 , FAST_MAX_55922pb0 ,' hel_tc1a_m6 ',0);   
PX3( F751686_55922pc0 , FAST_MAX_55922pc0 ,' hel_tc1c_m6 ',0);     
PX3( F751686_55922pd0 , FAST_MAX_55922pd0 ,' hel_tc2_m6 ',0);   

    SetupSelect( FAST_MAX_DC, FORMAT_11 ,TIMING_11 );
    wait(2ms);
PX3( F751686_55922gq0 , FAST_MAX_55922gq0 ,' USB_HELEN1 ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_19,TIMING_19 );
   wait( 2mS );
PX3( F751686_55922ky0 , FAST_MAX_55922ky0 ,' hel_tdl_apll ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_9,TIMING_9 );
   PeriodSetBase(500ns);
   ACTableSet(500ns,'TIMING_9');
   wait( 2mS );
   discard (PatternExecute( STATUS, F751686_55922l00 ));  
PX3( F751686_55922l00 , FAST_MAX_55922l00 ,' hel_tdl_diag1_led ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_9,TIMING_9 ); 
PX3( F751686_55922ql0 , FAST_MAX_55922ql0 ,' hel_tdl_diag6_sync ',0);   
PX3( F751686_55922qq0 , FAST_MAX_55922qq0 ,' hel_tdl_mcbsp3 ',0);   
PX3( F751686_55922re0 , FAST_MAX_55922re0 ,' tdl_api_access_sync ',0);   
PX3( F751686_55922m90 , FAST_MAX_55922m90 ,' hel_tdl_vbus_detect ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_33,TIMING_33 );
   wait( 2mS );
PX3( F751686_55922qs0 , FAST_MAX_55922qs0 ,' hel_ulpd_dpll ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_27 ,TIMING_27 );
   wait(2ms);
PX3( F751686_55922mo0 , FAST_MAX_55922mo0 ,' omap_DPLL1 ',0);   

   SetupSelect( FAST_MAX_DC, FORMAT_32 ,TIMING_32 );
   PeriodSetBase(100NS);
   ACTableSet(100NS, 'TIMING_32');
   wait(2ms);
PX3( F751686_55922ps0 , FAST_MAX_55922ps0 ,' hel_arm_gpio ',0);   
PX3( F751686_55922pu0 , FAST_MAX_55922pu0 ,' hel_arm_uart_loopbk ',0);   
PX3( F751686_55922py0 , FAST_MAX_55922py0 ,' hel_dsp_gpio ',0); 
PX3( F751686_55922pz0 , FAST_MAX_55922pz0 ,' hel_dsp_intc ',0); 
PX3( F751686_55922q10 , FAST_MAX_55922q10 ,' hel_dsp_timer2 ',0);   
PX3( F751686_55922q20 , FAST_MAX_55922q20 ,' hel_dsp_timer3 ',0);   
PX3( F751686_55922q30 , FAST_MAX_55922q30 ,' hel_dsp_uart_loopbk ',0);   
PX3( F751686_55922q40 , FAST_MAX_55922q40 ,' hel_dsp_wdtimer ',0);   
PX3( F751686_55922q50 , FAST_MAX_55922q50 ,' hel_led_clkm1 ',0);   
PX3( F751686_55922q60 , FAST_MAX_55922q60 ,' hel_led_idle13 ',0);   
PX3( F751686_55922q70 , FAST_MAX_55922q70 ,' hel_led_inth ',0);   
PX3( F751686_55922q80 , FAST_MAX_55922q80 ,' hel_led_lcd_2frames ',0);   
PX3( F751686_55922qa0 , FAST_MAX_55922qa0 ,' hel_led_ostimer2 ',0);
PX3( F751686_55922qc0 , FAST_MAX_55922qc0 ,' hel_led_psa ',0); 
PX3( F751686_55922qd0 , FAST_MAX_55922qd0 ,' hel_led_rheabridge ',0);
PX3( F751686_55922qe0 , FAST_MAX_55922qe0 ,' hel_led_wdtimer ',0);
PX3( F751686_55922qf0 , FAST_MAX_55922qf0 ,' hel_mb ',0);   
PX3( F751686_55922qi0 , FAST_MAX_55922qi0 ,' hel_mpu_diagnostic ',0);   
PX3( F751686_55922qk0 , FAST_MAX_55922qk0 ,' hel_syncstio2emif ',0);   

    SetupSelect( FAST_MAX_DC, FORMAT_32 ,TIMING_32 );
    PeriodSetBase(100NS);
    ACTableSet(100NS, 'TIMING_32');
    wait(2ms);
PX3( F751686_55922qt0 , FAST_MAX_55922qt0 ,' imif_march13_A ',0);   
PX3( F751686_55922qu0 , FAST_MAX_55922qu0 ,' imif_march13_B ',0);   


    SetupSelect( SLOW_MAX_DC, FORMAT_1 ,TIMING_1 );
    wait(2ms);
PX3( F751686_55922300 , SLOW_MAX_55922300 ,' mgs3_atpg_sc ',0);    

  end;
  
end;  (* FAST_FUNCTIONAL_MAX_TEST *)



procedure VIH_VIL_MIN_TEST;
(*
**********************************************************************
****            VIH/VIL FUNCTIONAL                                ****
**********************************************************************
*)
  var
    STATUS            : integer;
    TEST_RESULT       : boolean;
    VID_RESULT         : boolean;
    CMOSa_RESULT          : boolean;
    OSC_RESULT          : boolean;
    USB_RESULT          : boolean;
    USB3V_VID          : boolean;

  begin

    if ( V_DeviceStatus = PASS ) then
      begin

        TestOpen( VIHL_MIN_55922410 );

          Datalog(VMN1V_VIHL,chr(10));

          SET_POWER( VMN1V_VIHL, 2A,
                     VMN3V_VIHL, 2A,
                     2mS );

          SetupSelect( SLOW_MIN_DC_VIHL_MIN, FORMAT_3,
                       TIMING_3 );

          (* TEST CMOSa VIH *)
          Datalog('comment=''TEST CMOSa VIH''',chr(10));
          DCSetLDOFF( VIHCMOSa3V_VMIN, 0V,CP,
                      VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa3V_INS );
          DCSetLDOFF( VIHCMOSa18V_VMIN, 0V,CP,
                      VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa18V_INS );
          DCSetDyn( VIHCMOSa3V_VMIN, 0V,CP,
                    VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,
                    -2.0mA, 2.0mA, CMOSa3V_IOS );
          DCSetDyn( VIHCMOSa18V_VMIN, 0V,CP,
                    VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,
                    -2.0mA, 2.0mA, CMOSa18V_IOS );
          wait( 2mS );

          Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
          CMOSa_RESULT := PatternExecute( STATUS, F751686_55922410 );
          
          if (CMOSa_RESULT = FAIL) then
          CMOSa_RESULT := PatternExecute( STATUS, F751686_55922410 );
   
          (* TEST CMOSa VIL *)
          if ( CMOSa_RESULT = PASS ) then
          begin
            Datalog('comment=''TEST CMOSa VIL''',chr(10));
            DCSetLDOFF( VMN3V_VIHL, VILCMOSa3V_VMIN,CP,
                        VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa3V_INS );
            DCSetLDOFF( VMN3V_VIHL, VILCMOSa18V_VMIN,CP,
                        VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, CMOSa18V_INS );
            DCSetDyn( VMN3V_VIHL, VILCMOSa3V_VMIN,CP,
                      VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,
                      -2.0mA, 2.0mA, CMOSa3V_IOS );
            DCSetDyn( VMN3V_VIHL, VILCMOSa18V_VMIN,CP,
                      VMN3V_VIHL*0.75, VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,
                      -2.0mA, 2.0mA, CMOSa18V_IOS );
            wait( 2mS );

            Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
            CMOSa_RESULT := PatternExecute( STATUS, F751686_55922410 );
          end;

          SetupSelect( SLOW_MIN_DC_VIHL_MIN, FORMAT_3,
                       TIMING_3 );

          (* TEST OSC VIH *)
          Datalog('comment=''TEST OSC VIH''',chr(10));
          DCSetLDOFF( VIHOSC1V_VMIN, 0V,CP,
                      VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, OSC1V_INS );
          DCSetDyn( VIHOSC1V_VMIN, 0V,CP,
                    VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, VMN1V_VIHL*0.65,
                    -10.0uA, 10.0uA, OSC1V_IOS );
          wait( 2mS );

          Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
          OSC_RESULT := PatternExecute( STATUS, F751686_55922410 );

          (* TEST OSC VIL *)
          if ( OSC_RESULT = PASS ) then
          begin
            Datalog('comment=''TEST OSC VIL''',chr(10));
            DCSetLDOFF( VMN1V_VIHL, VILOSC1V_VMIN,CP,
                        VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, OSC1V_INS );
            DCSetDyn( VMN1V_VIHL, VILOSC1V_VMIN,CP,
                      VMN1V_VIHL*0.75, VMN1V_VIHL*0.25, VMN1V_VIHL*0.65,
                      -10.0uA, 10.0uA, OSC1V_IOS );
            wait( 2mS );

            Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
            OSC_RESULT := PatternExecute( STATUS, F751686_55922410 );
          end;

          SetupSelect( SLOW_MIN_DC_VIHL_MIN, FORMAT_3,
                       TIMING_3 );

          TEST_RESULT := PASS;

          IF (CMOSa_RESULT = FAIL) THEN TEST_RESULT := FAIL;

          IF (OSC_RESULT = FAIL) THEN TEST_RESULT := FAIL;

if ( TEST_RESULT = FAIL ) then DeviceStatus := false;
          ResultRecord( TEST_RESULT );

          (* Set Drvup,Drvdown to VIH,VIL limits for T_voltage_search.  *)


  DCSetLDOFF( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75,
  	VMN3V_VIHL*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75, 
  	VMN3V_VIHL*0.25,CMOSa18V_INS );
  DCSetDyn( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75, 
  	VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75, 
  	VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75, 
  	VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMN3V_VIHL*0.7, VMN3V_VIHL*0.2,CP, VMN3V_VIHL*0.75, 
  	VMN3V_VIHL*0.25, VMN3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMN1V_VIHL*0.7, VMN1V_VIHL*0.2,CP, VMN1V_VIHL*0.75, 
  	VMN1V_VIHL*0.25, OSC1V_INS );
  DCSetDyn( VMN1V_VIHL*0.7, VMN1V_VIHL*0.2,CP, VMN1V_VIHL*0.75, 
  	VMN1V_VIHL*0.25, VMN1V_VIHL*0.65,-10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( VMN1V_VIHL*0.7, VMN1V_VIHL*0.2,CP, VMN1V_VIHL*0.75, 
  	VMN1V_VIHL*0.25, VMN1V_VIHL*0.65,-10.0uA, 10.0uA, OSC1V_IOS );



        TestClose;

      end;

 
      
  end;  (* VIH_VIL_MIN_TEST *)






{******************************************************************}
procedure VIH_VIL_MAX_TEST;
(*
**********************************************************************
****            VIH/VIL FUNCTIONAL                                ****
**********************************************************************
*)
  var
    STATUS            : integer;
    TEST_RESULT       : boolean;
    VID_RESULT         : boolean;
    CMOSa_RESULT          : boolean;
    OSC_RESULT          : boolean;
    USB_RESULT          : boolean;
    USB3V_VID          : boolean;

  begin



    if ( V_DeviceStatus = PASS ) then
      begin

        TestOpen( VIHL_MAX_55922410 );

          Datalog(VMX1V_VIHL,chr(10));

          SET_POWER( VMX1V_VIHL, 2A,
                     VMX3V_VIHL, 2A,
                     2mS );


          SetupSelect( SLOW_MAX_DC_VIHL_MAX, FORMAT_3,
                       TIMING_3 );

          (* TEST CMOSa VIH *)
          Datalog('comment=''TEST CMOSa VIH''',chr(10));
          DCSetLDOFF( VIHCMOSa3V_VMAX, 0V,CP,
                      VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa3V_INS );
          DCSetLDOFF( VIHCMOSa18V_VMAX, 0V,CP,
                      VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa18V_INS );
          DCSetDyn( VIHCMOSa3V_VMAX, 0V,CP,
                    VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,
                    -2.0mA, 2.0mA, CMOSa3V_IOS );
          DCSetDyn( VIHCMOSa18V_VMAX, 0V,CP,
                    VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,
                    -2.0mA, 2.0mA, CMOSa18V_IOS );
          wait( 2mS );

          Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
          CMOSa_RESULT := PatternExecute( STATUS, F751686_55922410 );

          (* TEST CMOSa VIL *)
          if ( CMOSa_RESULT = PASS ) then
          begin
            Datalog('comment=''TEST CMOSa VIL''',chr(10));
            DCSetLDOFF( VMX3V_VIHL, VILCMOSa3V_VMAX,CP,
                        VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa3V_INS );
            DCSetLDOFF( VMX3V_VIHL, VILCMOSa18V_VMAX,CP,
                        VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, CMOSa18V_INS );
            DCSetDyn( VMX3V_VIHL, VILCMOSa3V_VMAX,CP,
                      VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,
                      -2.0mA, 2.0mA, CMOSa3V_IOS );
            DCSetDyn( VMX3V_VIHL, VILCMOSa18V_VMAX,CP,
                      VMX3V_VIHL*0.75, VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,
                      -2.0mA, 2.0mA, CMOSa18V_IOS );
            wait( 2mS );

            Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
            CMOSa_RESULT := PatternExecute( STATUS, F751686_55922410 );
          end;

          SetupSelect( SLOW_MAX_DC_VIHL_MAX, FORMAT_3,
                       TIMING_3 );

          (* TEST OSC VIH *)
          Datalog('comment=''TEST OSC VIH''',chr(10));
          DCSetLDOFF( VIHOSC1V_VMAX, 0V,CP,
                      VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, OSC1V_INS );
          DCSetDyn( VIHOSC1V_VMAX, 0V,CP,
                    VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, VMX1V_VIHL*0.65,
                    -10.0uA, 10.0uA, OSC1V_IOS );
          wait( 2mS );

          Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
          OSC_RESULT := PatternExecute( STATUS, F751686_55922410 );

          (* TEST OSC VIL *)
          if ( OSC_RESULT = PASS ) then
          begin
            Datalog('comment=''TEST OSC VIL''',chr(10));
            DCSetLDOFF( VMX1V_VIHL, VILOSC1V_VMAX,CP,
                        VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, OSC1V_INS );
            DCSetDyn( VMX1V, VILOSC1V_VMAX,CP,
                      VMX1V_VIHL*0.75, VMX1V_VIHL*0.25, VMX1V_VIHL*0.65,
                      -10.0uA, 10.0uA, OSC1V_IOS );
            wait( 2mS );

            Datalog('comment=''TDL NAME: dcp_vih_vil''',chr(10));
            OSC_RESULT := PatternExecute( STATUS, F751686_55922410 );
          end;

          SetupSelect( SLOW_MAX_DC_VIHL_MAX, FORMAT_3,
                       TIMING_3 );

          TEST_RESULT := PASS;

          IF (CMOSa_RESULT = FAIL) THEN TEST_RESULT := FAIL;

          IF (OSC_RESULT = FAIL) THEN TEST_RESULT := FAIL;

if ( TEST_RESULT = FAIL ) then DeviceStatus := false;
          ResultRecord( TEST_RESULT );

          (* Set Drvup,Drvdown to VIH,VIL limits for T_voltage_search.  *)


  DCSetLDOFF( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25, CMOSa3V_INS );
  DCSetLDOFF( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25,CMOSa18V_INS );
  DCSetDyn( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa3V_OUTS );
  DCSetDyn( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa18V_OUTS );
  DCSetDyn( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa3V_IOS );
  DCSetDyn( VMX3V_VIHL*0.7, VMX3V_VIHL*0.2,CP, VMX3V_VIHL*0.75, 
  	VMX3V_VIHL*0.25, VMX3V_VIHL*0.65,-2.0mA, 2.0mA, CMOSa18V_IOS );
  DCSetLDOFF( VMX1V_VIHL*0.7, VMX1V_VIHL*0.2,CP, VMX1V_VIHL*0.75, 
  	VMX1V_VIHL*0.25, OSC1V_INS );
  DCSetDyn( VMX1V_VIHL*0.7, VMX1V_VIHL*0.2,CP, VMX1V_VIHL*0.75, 
  	VMX1V_VIHL*0.25, VMX1V_VIHL*0.65,-10.0uA, 10.0uA, OSC1V_OUTS );
  DCSetDyn( VMX1V_VIHL*0.7, VMX1V_VIHL*0.2,CP, VMX1V_VIHL*0.75, 
 	 VMX1V_VIHL*0.25, VMX1V_VIHL*0.65,-10.0uA, 10.0uA, OSC1V_IOS );



        TestClose;

      end;
      
  end;  (* VIH_VIL_MAX_TEST *)










procedure IIH_IIL_TEST;

(*
********************************************************************
****            IIH/IIL TEST  (INPUTS)                          ****
********************************************************************
*)
  var
    TEST_RESULT    : boolean;
    RESULT         : boolean;
    STATUS         : integer;

  begin

    TestOpen( IIH_IIL );

      Datalog(VTMX1V,chr(10));


      if ( V_DatalogEnabled ) then
        begin
          DatalogResetPinList( ALL_PINS_PLUS );
          DatalogSetPinList( ALL_PINS );
        end;

      SET_POWER( VTMX1V, 2A,
                 VTMX3V, 2A,
                 2mS ); {rev01b}
      if (TIDeviceType = FT_STACK_HV) then
        SupplySetLimit( PS_VDDSHV1, 3.0V, 750mA, 8V, 0V );  {...rev08b}
      if (TIDeviceType = FT_STACK_LV) then
        SupplySetLimit( PS_VDDSHV1, 3.0V, 750mA, 8V, 0V );  {...rev08b}

      (* LINE CHARGE *)
      SetupSelect( LC_ODD_EVEN, FORMAT_1, TIMING_1 );
      wait( 1mS );

      (* TEST IIH ON ODD INPUTS, IIL ON EVEN INPUTS *)
      SetupSelect( II_ODD_EVEN, FORMAT_1, TIMING_1 );
      wait( 10mS );

      TEST_RESULT := PMUConvertPF;

      (* LINE CHARGE *)
      SetupSelect( LC_EVEN_ODD, FORMAT_1, TIMING_1 );
      wait( 1mS );

      (* TEST IIH ON EVEN INPUTS, IIL ON ODD INPUTS *)
      SetupSelect( II_EVEN_ODD, FORMAT_1, TIMING_1 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

if (TEST_RESULT = FAIL) then Devicestatus := false;

      ResultRecord( TEST_RESULT );

    TestClose;

  end;  (* IIH_IIL_TEST *)

procedure VOUT_TEST;
(*
********************************************************************
****            VOUT TESTS                                      ****
********************************************************************
*)
  var
    TEST_RESULT    : boolean;
    TEMP_RESULT    : boolean;
    RESULT         : boolean;
    STATUS         : integer;

  begin

    TestOpen( VOUT );

      TEST_RESULT := PASS;

      Datalog('VCC=',VTMN1V,chr(10));
      Datalog('BIDI=O',chr(10));

      SET_POWER( VTMN1V, 2A,
                 VTMN3V, 2A,
                 2mS );

      if (TIDeviceType = FT_STACK_HV) then
        SupplySetLimit( PS_VDDSHV1, 2.5V, 750mA, 8V, 0V );  {...rev08b}
      if (TIDeviceType = FT_STACK_LV) then
        SupplySetLimit( PS_VDDSHV1, 2.5V, 750mA, 8V, 0V );  {...rev08b}

(*
      VOUT FUNCTIONAL TEST
*)

      SetupSelect( VOUT_FUNC_DC, FORMAT_3,
                   TIMING_3 );
      wait( 2mS );

      (* dcp_iih_iil_nopull *)
      Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  (Voutfunc)''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922tp0 );
      if RESULT = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( VOUT_FUNC_DC, FORMAT_13,
                   TIMING_13 );
      wait( 2mS );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  (Voutfunc)''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922tq0 );
      if RESULT = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( VOUT_FUNC_DC, FORMAT_3,
                   TIMING_3 );
      wait( 2mS );

      (* dcp_voh_vol *)
      Datalog('comment=''TDL NAME: dcp_voh_vol  (Voutfunc)''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922440 );
      if RESULT = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( VOUT_FUNC_DC, FORMAT_14,
                   TIMING_14 );
      wait( 2mS );

      (* dcp_voh_vol_com *)
      Datalog('comment=''TDL NAME: dcp_voh_vol_com  (Voutfunc)''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922tr0 );
      if RESULT = FAIL then
        TEST_RESULT := FAIL;

(*
      TEST PIN-BY-PIN IF FAIL
*)
      if ( TEST_RESULT = FAIL ) or ( Datalog_In_Production ) then
        begin

          TEST_RESULT := PASS;
          Enable( s_Ignore_Func_Fail, s_PMExit );


(*
          TEST VOUT FOR CMOSa PINS
*)

          Enable( s_Ignore_Func_Fail, s_PMExit );


{ *** dcp_iih_iil_nopull *** }
          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 1 );

           (* dcp_iih_iil_nopull *)
          Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  PM: 1',
                  '  VECTOR: 18''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922js0 );

        if (TIDeviceType = FT_STACK_HV) then
          SetupSelect( VOUTCMOSa_PM1_ST_DC, FORMAT_3,
                       TIMING_3 )
        else
          SetupSelect( VOUTCMOSa_PM1_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

        if (TIDeviceType = FT_STACK_LV) then
          SetupSelect( VOUTCMOSa_PM1_ST_DC, FORMAT_3,
                       TIMING_3 )
        else
          SetupSelect( VOUTCMOSa_PM1_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 3 );

           (* dcp_iih_iil_nopull *)
          Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  PM: 3',
                  '  VECTOR: 197''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922js0 );

          SetupSelect( VOUTCMOSa_PM3_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

{ *** dcp_vih_vil_sdata *** }
          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 1 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 5',
                  '  VECTOR: 3''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM5_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 2 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 6',
                  '  VECTOR: 2324''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM6_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 8 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 12',
                  '  VECTOR: 5480''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

        if (TIDeviceType = FT_STACK_HV) then
          SetupSelect( VOUTCMOSa_PM12_ST_DC, FORMAT_13,
                       TIMING_13 )
        else
          SetupSelect( VOUTCMOSa_PM12_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

        if (TIDeviceType = FT_STACK_LV) then
          SetupSelect( VOUTCMOSa_PM12_ST_DC, FORMAT_13,
                       TIMING_13 )

        else
          SetupSelect( VOUTCMOSa_PM12_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 9 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 13',
                  '  VECTOR: 9119''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM13_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 10 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 14',
                  '  VECTOR: 16217''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM14_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 11 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 15',
                  '  VECTOR: 16219''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM15_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 12 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 16',
                  '  VECTOR: 16222''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

        if (TIDeviceType = FT_STACK_HV ) then
          SetupSelect( VOUTCMOSa_PM16_ST_DC, FORMAT_13,
                       TIMING_13 )

        else
          SetupSelect( VOUTCMOSa_PM16_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 14 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 18',
                  '  VECTOR: 16743''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM18_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 16 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 20',
                  '  VECTOR: 17552''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

{rev08a...}
        if (TIDeviceType = FT_STACK_HV) then
          SetupSelect( VOUTCMOSa_PM20_ST_DC, FORMAT_13,
                       TIMING_13 )
        else
          SetupSelect( VOUTCMOSa_PM20_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_13, TIMING_13 );

          PMExSetDelay( s_PFLAGS, 17 );

           (* dcp_vih_vil_sdata *)
          Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 21',
                  '  VECTOR: 17703''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922ju0 );

          SetupSelect( VOUTCMOSa_PM21_DC, FORMAT_13,
                       TIMING_13 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 1 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 22',
                  '  VECTOR: 164''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM22_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 2 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 23',
                  '  VECTOR: 356''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM23_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 3 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 24',
                  '  VECTOR: 1008''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM24_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 4 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 25',
                  '  VECTOR: 1130''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM25_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 5 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 26',
                  '  VECTOR: 2194''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM26_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 6 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 27',
                  '  VECTOR: 2390''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM27_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

{rev08xxx...}
          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 7 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 28',
                  '  VECTOR: 3267''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM28_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;
{...rev08xxx}
          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 8 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 29',
                  '  VECTOR: 3514''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM29_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_3, TIMING_3 );

          PMExSetDelay( s_PFLAGS, 9 );

           (* dcp_voh_vol *)
          Datalog('comment=''TDL NAME: dcp_voh_vol  PM: 30',
                  '  VECTOR: 4563''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922050 );

          SetupSelect( VOUTCMOSa_PM30_DC, FORMAT_3,
                       TIMING_3 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_14, TIMING_14 );

          PMExSetDelay( s_PFLAGS, 1 );

           (* dcp_voh_vol_com *)
          Datalog('comment=''TDL NAME: dcp_voh_vol_com  PM: 31',
                  '  VECTOR: 24''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922pp0 );

          SetupSelect( VOUTCMOSa_PM31_DC, FORMAT_14,
                       TIMING_14 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          SetupSelect( VOUT_PIN_DC, FORMAT_14, TIMING_14 );

          PMExSetDelay( s_PFLAGS, 2 );

           (* dcp_voh_vol_com *)
          Datalog('comment=''TDL NAME: dcp_voh_vol_com  PM: 32',
                  '  VECTOR: 25''',chr(10));
          RESULT := PatternExecute( STATUS, F751686_55922pp0 );

          SetupSelect( VOUTCMOSa_PM32_DC, FORMAT_14,
                       TIMING_14 );
          wait( 5mS );

          if PMUConvertPF = FAIL then
            TEST_RESULT := FAIL;

          Enable( s_Ignore_Func_Fail, s_PMExit );

        end;  (* TEST_RESULT or Datalog_In_Production *)

if (TEST_RESULT = FAIL) then Devicestatus := false;

      ResultRecord( TEST_RESULT );

      Disable( s_Ignore_Func_Fail, s_PMExit );


    TestClose;

  end;  (* VOUT_TEST *)

procedure LEAKAGE_TEST;
(*
*********************************************************************
****       PERFORM ALL LEAKAGE TESTS:                            ****
*********************************************************************
*)
  var
    TEST_RESULT    : boolean;
    RESULT         : boolean;
    STATUS         : integer;

  begin

    TestOpen( LEAKAGE );

      Datalog('VCC=',VTMX1V,chr(10));
      Datalog('BIDI=I',chr(10));

      SET_POWER( VTMX1V, 2A,
                 VTMX3V, 2A,
                 2mS ); {rev01b}
      if (TIDeviceType = FT_STACK_HV) then
        SupplySetLimit( PS_VDDSHV1, 3.0V, 750mA, 8V, 0V );  {...rev08b}
      if (TIDeviceType = FT_STACK_LV) then
        SupplySetLimit( PS_VDDSHV1, 3.0V, 750mA, 8V, 0V );  {...rev08b}

      Enable( s_Ignore_Func_Fail, s_PMExit );
      wait( 2mS );

      TEST_RESULT := PASS;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_3, TIMING_3 );

      PMExSetDelay( s_PFLAGS, 2 );

      (* dcp_iih_iil_nopull *)
      Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  PM: 2',
              '  VECTOR: 196''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922js0 );

(*
      MEASURE AT 0V
*)
      SetupSelect( LKGLO_PM2_DC,FORMAT_3,TIMING_3 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_3, TIMING_3 );

      PMExSetDelay( s_PFLAGS, 3 );

      (* dcp_iih_iil_nopull *)
      Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  PM: 3',
              '  VECTOR: 197''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922js0 );

(*
      MEASURE AT 1.95V
      MEASURE AT 3.6V
*)
      SetupSelect( LKGHI_PM3_DC,FORMAT_3,TIMING_3 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_3, TIMING_3 );

      PMExSetDelay( s_PFLAGS, 4 );

      (* dcp_iih_iil_nopull *)
      Datalog('comment=''TDL NAME: dcp_iih_iil_nopull  PM: 4',
              '  VECTOR: 375''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922js0 );

(*
      MEASURE AT 1.95V
      MEASURE AT 3.6V
*)
      SetupSelect( LKGHI_PM4_DC,FORMAT_3,TIMING_3 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 3 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 7',
              '  VECTOR: 2334''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 0V
*)
      SetupSelect( LKGLO_PM7_DC,FORMAT_13,TIMING_13 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 4 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 8',
              '  VECTOR: 2436''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 0V
*)
      SetupSelect( LKGLO_PM8_DC,FORMAT_13,TIMING_13 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 5 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 9',
              '  VECTOR: 2545''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 1.95V
      MEASURE AT 3.6V
*)
{rev08a...}
    if (TIDeviceType = FT_STACK_HV) then
      SetupSelect( LKGHI_PM9_ST_DC,FORMAT_13,TIMING_13 )
    else
      SetupSelect( LKGHI_PM9_DC,FORMAT_13,TIMING_13 );
{...rev08a}

      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 6 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 10',
              '  VECTOR: 2647''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 1.95V
      MEASURE AT 3.6V
*)
{rev08a...}
    if (TIDeviceType = FT_STACK_HV) then
      SetupSelect( LKGHI_PM10_ST_DC,FORMAT_13,TIMING_13 )
    else
      SetupSelect( LKGHI_PM10_DC,FORMAT_13,TIMING_13 );
{...rev08a}
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 7 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 11',
              '  VECTOR: 2756''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 0V
*)
      SetupSelect( LKGLO_PM11_DC,FORMAT_13,TIMING_13 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 13 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 17',
              '  VECTOR: 16260''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 1.95V
      MEASURE AT 3.6V
*)
      SetupSelect( LKGHI_PM17_DC,FORMAT_13,TIMING_13 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      SetupSelect( LEAKAGE_PIN_DC, FORMAT_13, TIMING_13 );

      PMExSetDelay( s_PFLAGS, 15 );

      (* dcp_vih_vil_sdata *)
      Datalog('comment=''TDL NAME: dcp_vih_vil_sdata  PM: 19',
              '  VECTOR: 17054''',chr(10));
      RESULT := PatternExecute( STATUS, F751686_55922ju0 );

(*
      MEASURE AT 0V
*)
      SetupSelect( LKGLO_PM19_DC,FORMAT_13,TIMING_13 );
      wait( 10mS );

      if PMUConvertPF = FAIL then
        TEST_RESULT := FAIL;

      ResultRecord( TEST_RESULT );
if (TEST_RESULT = FAIL) then Devicestatus := false;

      Disable( s_Ignore_Func_Fail, s_PMExit );


    TestClose;

  end;  (* LEAKAGE_TEST *)

{******************************************************************}

function DSP_VMINS( Search_Pattern : Pattern;
                       	     SearchMin      : treal;
                    	     SearchMax      : treal;
			     Vstep	    : treal;
                             F1             : treal) : treal;
  var
    RESULT,TEST_RESULT           : boolean;
    VDD, BStep       : treal;
    cnt,STATUS              : integer;

  begin

    TEST_RESULT := pass;
    DSP_VMINS := 0V;

    (* LINEAR SEARCH *)
    for VDD := SearchMax downto (SearchMin-Vstep) by Vstep do
      begin
        SupplySet(PS_VDD1, VDD, 2A );
        SupplySet(PS_VDD2, VDD, 2A );
	SupplySet(PS_VDD4, VDD, 2A );

SET_POWER( VDD, 2A,VMN3V, 2A,2mS ); 
SetupSelect( FAST_MIN_DC, FORMAT_9,TIMING_9 );
DCSetLDOFF( VDD, 0V,CP, VDD*0.75, VDD*0.25, OSC1V_INS );
DCSetDyn( VDD, 0V,CP, VDD*0.75, VDD*0.25, VDD*0.5,
-10.0uA, 10.0uA, OSC1V_OUTS );
DCSetDyn( VDD, 0V,CP, VDD*0.75, VDD*0.25, VDD*0.5,
-10.0uA, 10.0uA, OSC1V_IOS );

PeriodSetBase(F1);
ACTableSet(F1, 'TIMING_9');
wait( 2mS );

        wait(2mS);
        RESULT := PatternExecute(STATUS, Search_Pattern);
        if (not(RESULT)) then break;
      end;

        DSP_VMINS := VDD+Vstep;

  end; { DSP_VMINS }
  
{******************************************************************}

procedure DSP_SHMOO_ON_TEST;
var
 TT      : treal;

begin
TimerStart;

{Pattern, Min=1 Max=2, TMG/FMT, 
 Freq End-Start-Step, Volt End-Start-Step, Executions per window, }

xs:=sx(ledTlbScreenTc5_1k,1, 9,  62ns,102ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922480,  1, 9,  50ns, 90ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922490,  1, 9,  50ns, 90ns,2ns, 1.2V,1.7V,25mV, 1);

xs:=sx(F751686_mgs3long,  1, 11, 20ns, 60ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922uq0,  1, 11, 20ns, 60ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922uu0,  1, 11, 20ns, 60ns,2ns, 1.2V,1.7V,25mV, 1);

xs:=sx(F751686_55922qh0,  1, 32, 40ns, 80ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922td0,  1, 32, 42ns, 82ns,2ns, 1.2V,1.7V,25mV, 1);
xs:=sx(F751686_55922v10,  1, 32, 57ns, 97ns,2ns, 1.2V,1.7V,25mV, 1);

TT:= TimerRead;
writeln(' TestTime for Shmoo Routine ', TT);

end;{DSP_SHMOO_ON_TEST} 
  
{******************************************************************} 

procedure DSP_SEARCH;
var
 V1, F1  :  treal;

begin 

V1:=1.58V;

Tc480 :=DSPFB( F751686_55922480,  9,  20NS, 100NS, V1);	{ARM WRITE}
Tc490 :=DSPFB( F751686_55922490,  9,  20NS, 100NS, V1);	{ARM WRITE}
Tcmgs :=DSPFB( F751686_mgs3long,  11, 20NS, 100NS, V1);	{MGS3LONG}
Tctd0 :=DSPFB( F751686_55922td0,  32, 20NS, 100NS, V1);	{API ADDR DASA}

#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
TWPDLDataLogRealVariable('TC480',SEC,single(Tc480),TWMinimumData);
TWPDLDataLogRealVariable('TC490',SEC,single(Tc490),TWMinimumData);
TWPDLDataLogRealVariable('TCMGS',SEC,single(Tcmgs),TWMinimumData);
TWPDLDataLogRealVariable('TCTD0',SEC,single(Tctd0),TWMinimumData);
#endif
#endif
 
end;


{******************************************************************} 
Procedure DEVICE_VARS;
begin
  TestOpen(Devicevars);
  Datalog('Device Type = ',TIDeviceType,chr(10));
  Datalog('Temp   Type = ',TITestTemp,chr(10));
  Datalog('Test   Type = ',Test_Limit,chr(10));
  Datalog('VMN1V       = ',VMN1V:5:3,chr(10));
  TestClose;
end;


procedure TEST_SEQUENCE; Export;
(*
*********************************************************************
****          TEST SEQUENCE                                      ****
*********************************************************************
*)
  var
    TT,TOTAL  :  treal;

  begin

    Datalog_In_Production := V_DatalogEnabled;          (* default *)
    DeviceStatus:= true;
    Blazing_Speed := true;
    Athena_Speed_1 := true;
    OK_Speed	 := true;
    ICCQ_VDD1:= 0nA; {rev03c}
    ICCQ_VDD1_PST:= 0nA; {rev03c}
    ICCQ_VDD2:= 0nA; {rev03c}
    ICCQ_VDD4:= 0nA; {rev03c}
    ICCQ_VDDSHV := 0nA; {rev08c}
    ICCQ_VDDSHV1:= 0nA; {rev03c}
    ICCQ_VDDSHV2:= 0nA; {rev03c}
    ICCQ_VDDSHV4:= 0nA;  {rev03c}
    ICCQ_VDDSHV5:= 0nA; {rev03c}
    ICCQ_VDDSHV6:= 0nA; {rev03c}
    ICCQ_VDD2_PST:= 0nA; {rev03e}
TOTAL_ICCQ_FJ_1p5:= 0na;{rev15a}
    Pass_Opens := true;
    Pass_Shorts := true;
    BIN2FREQS := false;
    BIN3FREQS := false;
    Helen1_Die := true;
    short_pgm := true;
    STACK_HF_TEST1 := true;
    STACK_HF_TEST2 := true;

    vboxmin_fail := false;
    vboxmax_fail := false;
    vmin_fail    := false;
    vmax_fail    := false;

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
        usn_value := DeviceGetUSN;
         TWPDLDatalogNewUnit(usn_value);  

case TIDeviceType of
  FT_1_HV    ,
  FT_STACK_HV,
  PB_1_HV    ,
  FT_13_HV   ,
  PB_12_HV   :
  begin
    TWPDLDatalogText('DEVICEV','HV',TWMinimumData);
  end;

  FT_1_LV    ,
  FT_STACK_LV,
  PB_1_LV    ,
  FT_13_LV   ,
  PB_12_LV   :
  begin
    TWPDLDatalogText('DEVICEV','LV',TWMinimumData);
  end;
end; 
                                   
#endif
#endif
{...(rev03a)}

INIT_QUAL_VAR;
INIT_SEARCH_VAR;

DEVICE_VARS;

if (Test_Timer = FALSE) then
begin
        TimerStart;

        LOG_PINS_AND_BINS;
        SHORTS_TEST;{ftvsrev12b}

        if (V_DeviceStatus = PASS) then
           SUPPLY_SHORTS_TEST;

        if ((Pass_Shorts))  then	{ftvsrev12b}
           DIODE_TEST;

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           DIEID_TEST; 	
	
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	begin
        if DSP_SEARCH_ON then  DSP_SEARCH;
	end;

If ((Helen1_Die) or (V_DeviceStatus = PASS)) then
begin
     
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           FAST_FUNCTIONAL_MIN_TEST; 
                       
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           HWA_MIN_TEST; 

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           API_MIN_TEST; {rescrn05}

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           BIG7_MIN_TEST;             
            
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           DSP_ICACHE_MIN_TEST;     
                     
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	   ATSPEED_MIN_TEST;	

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
           VOUT_TEST;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
           VIH_VIL_MIN_TEST;
                     
        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	   MEM_RET_ICCQ_LV;

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	   ICCQ_TEST;

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) and 
	    (TITestTemp <> TEMP_N45_DEG) then
           DEEP_SLEEP_ICCQ;	

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	   OSCILLATOR_TEST;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
           LEAKAGE_TEST;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
           IIH_IIL_TEST;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
           VIH_VIL_MAX_TEST;

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
          FAST_FUNCTIONAL_MAX_TEST; 

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           HWA_MAX_TEST; 

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           API_MAX_TEST; 

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           BIG7_MAX_TEST; 

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
           DSP_ICACHE_MAX_TEST;

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) then
	   ATSPEED_MAX_TEST;


end;{Helen1_Die}


          TT := TimerRead;
          writeln( 'Elapsed time for test = ',TT );
          
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
TWPDLDataLogRealVariable('TTIME',SEC,single(TT),TWMinimumData);
#endif
#endif         
                   
end; {Timer}

if (Test_Timer = TRUE) then
begin


      TimerStart;
        LOG_PINS_AND_BINS;
        TT := TimerRead;
        TOTAL := TT;
        writeln;
        writeln( 'Elapsed time for LOG_PINS = ',TT );

        TimerStart;
        SHORTS_TEST;
        TT := TimerRead;
        TOTAL := TOTAL+TT;
        writeln;
        writeln( 'Elapsed time for SHORTS_TEST = ',TT );

        if (V_DeviceStatus = PASS) then
          begin
           TimerStart;
           SUPPLY_SHORTS_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for SUPPLY_SHORTS_TEST = ',TT );
          end;

        if (Pass_Shorts) then 
          begin
           TimerStart;
           DIODE_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for DIODE_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
	  begin
            TimerStart;
            DIEID_TEST;
            TT := TimerRead;
            TOTAL := TOTAL+TT;
            writeln;
            writeln( 'Elapsed time for DIEID_TEST = ',TT );
          end;
                  
        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           FAST_FUNCTIONAL_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for FAST_FUNCTIONAL_MIN_TEST = ',TT );
          end;          

       if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           HWA_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for HWA_MIN_TEST; = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           API_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for API_MIN_TEST; = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           BIG7_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for BIG7_MIN_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           DSP_ICACHE_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for DSP_ICACHE_MIN_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           ATSPEED_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for ATSPEED_MIN_TEST = ',TT );
          end;
          
        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           VOUT_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for VOUT_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           VIH_VIL_MIN_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for VIH_VIL_MIN_TEST = ',TT );
          end;    

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           MEM_RET_ICCQ_LV;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for MEM_RET_ICCQ_LV; = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           ICCQ_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for ICCQ_TEST = ',TT );
          end;          

        if ((DeviceStatus = PASS) or (V_DeviceStatus = PASS)) and 
           (TITestTemp <> TEMP_N45_DEG) then
         begin	
           TimerStart;
           DEEP_SLEEP_ICCQ;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for DEEP_SLEEP_ICCQ = ',TT );
         end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           OSCILLATOR_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for OSCILLATOR_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           LEAKAGE_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for LEAKAGE_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           IIH_IIL_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for IIH_IIL_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           VIH_VIL_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for VIH_MAX_TEST = ',TT );
          end;          
                                      
        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           FAST_FUNCTIONAL_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for FAST_FUNCTIONAL_MAX_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           HWA_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for HWA_MAX_TEST; = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           API_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for API_MAX_TEST; = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           BIG7_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for BIG7_MAX_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           DSP_ICACHE_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for DSP_ICACHE_MAX_TEST = ',TT );
          end;

        if ((V_DeviceStatus = PASS) or (DeviceStatus = PASS)) then 
          begin
           TimerStart;
           ATSPEED_MAX_TEST;
           TT := TimerRead;
           TOTAL := TOTAL + TT;
           writeln;
           writeln( 'Elapsed time for ATSPEED_MAX_TEST = ',TT );
          end;
 

        writeln;
        writeln;
        writeln( 'Total Elapsed time = ',TOTAL );

end;{TIMER}

end;  (* TEST_SEQUENCE *)




(*
*********************************************************************
****                LOAD PATTERNS                                ****
*********************************************************************
*)
Procedure Load_Patterns;           Export;
  begin

writeln('TOTAL Pattern Memory Available',MemoryGetAvailable(S_PM32_VEC));
writeln('TOTAL CRAM    Memory Available',MemoryGetAvailable(S_PSC_CRAM));
wait (10s);


case TIDeviceType of
FT_1_HV :
begin

V_PATT_START_PAD :=2;          {DSP29}
V_PATT_END_PAD   :=2;          {DSP29}

 PatternLoadGlobal( 'Vectors/f751686g_56081g00.vgo' );

 PatternLoad( ledTlbScreenTc5_1k, 'Vectors/ledTlbScreenTC5_1k_new.vvo');

 PatternLoad( F751686_55922050, 'Vectors/f751686g_56081040.vvo');
 PatternLoad( F751686_55922320, 'Vectors/f751686g_56081350.vvo');	  
 PatternLoad( F751686_55922210, 'Vectors/f751686g_56081270.vvo');	 
 PatternLoad( F751686_55922070, 'Vectors/f751686g_56081100.vvo');
 PatternLoad( F751686_55922180, 'Vectors/f751686g_56081220.vvo');	 
 PatternLoad( F751686_55922410, 'Vectors/f751686g_56081410.vvo');	 
 PatternLoad( F751686_55922440, 'Vectors/f751686g_56081530.vvo');
 PatternLoad( F751686_55922gq0, 'Vectors/f751686g_56081gi0.vvo');
 PatternLoad( F751686_55922ky0, 'Vectors/f751686g_56081mb1_new.vvo');
 PatternLoad( F751686_55922l00, 'Vectors/f751686g_56081md1.vvo');{rev16a}
 PatternLoad( F751686_55922ql0, 'Vectors/f751686g_56081mi1.vvo');{ftvsrev11c}
 PatternLoad( F751686_55922qn0, 'Vectors/f751686g_56081ml0.vvo');
 PatternLoad( F751686_55922qq0, 'Vectors/f751686g_56081mp0.vvo');
 PatternLoad( F751686_55922re0, 'Vectors/f751686g_56081on1_new.vvo');
 PatternLoad( F751686_55922qs0, 'Vectors/f751686g_56081mu1_new.vvo');
 PatternLoad( F751686_55922m90, 'Vectors/f751686g_56081ms1_new.vvo');
 PatternLoad( F751686_55922mo0, 'Vectors/f751686g_56081nu0.vvo');
 PatternLoad( F751686_55922ps0, 'Vectors/f751686g_56081kh0.vvo');
 PatternLoad( F751686_55922pu0, 'Vectors/f751686g_56081kj0.vvo');
 PatternLoad( F751686_55922py0, 'Vectors/f751686g_56081lk0.vvo');{rev13b}
 PatternLoad( F751686_55922pz0, 'Vectors/f751686g_56081lm0.vvo');
 PatternLoad( F751686_55922q10, 'Vectors/f751686g_56081lo0.vvo');
 PatternLoad( F751686_55922q20, 'Vectors/f751686g_56081lp0.vvo');
 PatternLoad( F751686_55922q30, 'Vectors/f751686g_56081lq0.vvo');
 PatternLoad( F751686_55922q40, 'Vectors/f751686g_56081lr0.vvo');{rev13a}
 PatternLoad( F751686_55922q70, 'Vectors/f751686g_56081lu0.vvo');
 PatternLoad( F751686_55922qa0, 'Vectors/f751686g_56081lx0.vvo');
 PatternLoad( F751686_55922qc0, 'Vectors/f751686g_56081lz0.vvo');
 PatternLoad( F751686_55922qe0, 'Vectors/f751686g_56081m10.vvo');
 PatternLoad( F751686_55922qf0, 'Vectors/f751686g_56081m20.vvo');
 PatternLoad( F751686_55922qk0, 'Vectors/f751686g_56081m70.vvo');
 PatternLoad( F751686_55922q50, 'Vectors/f751686g_56081ls0.vvo');
 PatternLoad( F751686_55922q60, 'Vectors/f751686g_56081lt0.vvo');
 PatternLoad( F751686_55922qi0, 'Vectors/f751686g_56081m50.vvo');
 PatternLoad( F751686_55922qd0, 'Vectors/f751686g_56081m00.vvo');
 PatternLoad( F751686_55922q80, 'Vectors/f751686g_56081lv0.vvo');
 PatternLoad( F751686_55922qt0, 'Vectors/imif_march13_A.vvo');
 PatternLoad( F751686_55922qu0, 'Vectors/imif_march13_B.vvo');
 PatternLoad( F751686_55922300, 'Vectors/f751686g_56081330.vvo');	
 PatternLoad( F751686_55922480, 'Vectors/f751686g_56081571_new.vvo');
 PatternLoad( F751686_55922490, 'Vectors/f751686g_56081581_new.vvo');
 PatternLoad( F751686_55922500, 'Vectors/f751686g_56081591_new.vvo');
 PatternLoad( F751686_55922510, 'Vectors/f751686g_56081601_new.vvo');
 PatternLoad( F751686_55922520, 'Vectors/f751686g_56081611_new.vvo');
 PatternLoad( F751686_55922530, 'Vectors/f751686g_56081621_new.vvo');
 PatternLoad( F751686_55922540, 'Vectors/f751686g_56081631_new.vvo');
 PatternLoad( F751686_55922550, 'Vectors/f751686g_56081641_new.vvo');
 PatternLoad( F751686_55922560, 'Vectors/f751686g_56081651_new.vvo');
 PatternLoad( F751686_55922570, 'Vectors/f751686g_56081661_new.vvo');
 PatternLoad( F751686_55922580, 'Vectors/f751686g_56081671_new.vvo');
 PatternLoad( F751686_55922590, 'Vectors/f751686g_56081681_new.vvo');
 PatternLoad( F751686_55922620, 'Vectors/f751686g_56081691_new.vvo');
 PatternLoad( F751686_55922630, 'Vectors/f751686g_56081701_new.vvo');
 PatternLoad( F751686_55922640, 'Vectors/f751686g_56081711_new.vvo');
 PatternLoad( F751686_55922650, 'Vectors/f751686g_56081721_new.vvo');
 PatternLoad( F751686_55922670, 'Vectors/f751686g_56081741_new.vvo');
 PatternLoad( F751686_55922680, 'Vectors/f751686g_56081751_new.vvo');
 PatternLoad( F751686_55922690, 'Vectors/f751686g_56081761_new.vvo');
 PatternLoad( F751686_55922700, 'Vectors/f751686g_56081771_new.vvo');
 PatternLoad( F751686_55922710, 'Vectors/f751686g_56081781_new.vvo');
 PatternLoad( F751686_55922720, 'Vectors/f751686g_56081791_new.vvo');
 PatternLoad( F751686_55922730, 'Vectors/f751686g_56081801_new.vvo');
 PatternLoad( F751686_55922740, 'Vectors/f751686g_56081811_new.vvo');
 PatternLoad( F751686_55922750, 'Vectors/f751686g_56081821_new.vvo');
 PatternLoad( F751686_55922760, 'Vectors/f751686g_56081831_new.vvo');
 PatternLoad( F751686_55922800, 'Vectors/f751686g_56081841_new.vvo');
 PatternLoad( F751686_55922810, 'Vectors/f751686g_56081851_new.vvo');
 PatternLoad( F751686_55922820, 'Vectors/f751686g_56081861_new.vvo');
 PatternLoad( F751686_55922830, 'Vectors/f751686g_56081871_new.vvo');
 PatternLoad( F751686_55922840, 'Vectors/f751686g_56081881_new.vvo');

 PatternLoad( F751686_mgs3long, 'Vectors/F751686_mgs3long.vvo');{rev13g}

PatternLoad(F751686_55922tp0,  'Vectors/f751686g_56081510.vvo');
PatternLoad(F751686_55922tq0,  'Vectors/f751686g_56081521_new.vvo');
PatternLoad(F751686_55922tr0,  'Vectors/f751686g_56081540.vvo');

 PatternLoad( F751686_55922js0, 'Vectors/f751686g_56081010.vvo');
 PatternLoad( F751686_55922jt0, 'Vectors/f751686g_56081020.vvo');	 
 PatternLoad( F751686_55922ju0, 'Vectors/f751686g_56081031_new.vvo');
 PatternLoad( F751686_55922pp0, 'Vectors/f751686g_56081060.vvo');
 PatternLoad( F751686_55922pq0, 'Vectors/f751686g_56081070.vvo');
 PatternLoad( F751686_55922pl0, 'Vectors/f751686g_56081090.vvo');
 PatternLoad( F751686_55922ra0, 'Vectors/f751686g_56081471_new.vvo');
 PatternLoad( F751686_55922rn0, 'Vectors/f751686g_56081dj0.vvo');
 PatternLoad( F751686_55922ro0, 'Vectors/f751686g_56081mv0.vvo');
 PatternLoad( F751686_55922ri0, 'Vectors/F751686_55922ri0.vvo');
 PatternLoad( F751686_55922rk0, 'Vectors/F751686_55922rk0.vvo');

PatternLoad( dieid64 , 'Vectors/dieid64.vvo');
PatternLoad( dieid63 , 'Vectors/dieid63.vvo');
PatternLoad( dieid62 , 'Vectors/dieid62.vvo');
PatternLoad( dieid61 , 'Vectors/dieid61.vvo');
PatternLoad( dieid60 , 'Vectors/dieid60.vvo');
PatternLoad( dieid59 , 'Vectors/dieid59.vvo');
PatternLoad( dieid58 , 'Vectors/dieid58.vvo');
PatternLoad( dieid57 , 'Vectors/dieid57.vvo');
PatternLoad( dieid56 , 'Vectors/dieid56.vvo');
PatternLoad( dieid55 , 'Vectors/dieid55.vvo');
PatternLoad( dieid54 , 'Vectors/dieid54.vvo');
PatternLoad( dieid53 , 'Vectors/dieid53.vvo');
PatternLoad( dieid52 , 'Vectors/dieid52.vvo');
PatternLoad( dieid51 , 'Vectors/dieid51.vvo');
PatternLoad( dieid50 , 'Vectors/dieid50.vvo');
PatternLoad( dieid49 , 'Vectors/dieid49.vvo');
PatternLoad( dieid48 , 'Vectors/dieid48.vvo');
PatternLoad( dieid47 , 'Vectors/dieid47.vvo');
PatternLoad( dieid46 , 'Vectors/dieid46.vvo');
PatternLoad( dieid45 , 'Vectors/dieid45.vvo');
PatternLoad( dieid44 , 'Vectors/dieid44.vvo');
PatternLoad( dieid43 , 'Vectors/dieid43.vvo');
PatternLoad( dieid42 , 'Vectors/dieid42.vvo');
PatternLoad( dieid41 , 'Vectors/dieid41.vvo');
PatternLoad( dieid40 , 'Vectors/dieid40.vvo');
PatternLoad( dieid39 , 'Vectors/dieid39.vvo');
PatternLoad( dieid38 , 'Vectors/dieid38.vvo');
PatternLoad( dieid37 , 'Vectors/dieid37.vvo');
PatternLoad( dieid36 , 'Vectors/dieid36.vvo');
PatternLoad( dieid35 , 'Vectors/dieid35.vvo');
PatternLoad( dieid34 , 'Vectors/dieid34.vvo');
PatternLoad( dieid33 , 'Vectors/dieid33.vvo');
PatternLoad( dieid32 , 'Vectors/dieid32.vvo');
PatternLoad( dieid31 , 'Vectors/dieid31.vvo');
PatternLoad( dieid30 , 'Vectors/dieid30.vvo');
PatternLoad( dieid29 , 'Vectors/dieid29.vvo');
PatternLoad( dieid28 , 'Vectors/dieid28.vvo');
PatternLoad( dieid27 , 'Vectors/dieid27.vvo');
PatternLoad( dieid26 , 'Vectors/dieid26.vvo');
PatternLoad( dieid25 , 'Vectors/dieid25.vvo');
PatternLoad( dieid24 , 'Vectors/dieid24.vvo');
PatternLoad( dieid23 , 'Vectors/dieid23.vvo');
PatternLoad( dieid22 , 'Vectors/dieid22.vvo');
PatternLoad( dieid21 , 'Vectors/dieid21.vvo');
PatternLoad( dieid20 , 'Vectors/dieid20.vvo');
PatternLoad( dieid19 , 'Vectors/dieid19.vvo');
PatternLoad( dieid18 , 'Vectors/dieid18.vvo');
PatternLoad( dieid17 , 'Vectors/dieid17.vvo');
PatternLoad( dieid16 , 'Vectors/dieid16.vvo');
PatternLoad( dieid15 , 'Vectors/dieid15.vvo');
PatternLoad( dieid14 , 'Vectors/dieid14.vvo');
PatternLoad( dieid13 , 'Vectors/dieid13.vvo');
PatternLoad( dieid12 , 'Vectors/dieid12.vvo');
PatternLoad( dieid11 , 'Vectors/dieid11.vvo');
PatternLoad( dieid10 , 'Vectors/dieid10.vvo');
PatternLoad( dieid9  , 'Vectors/dieid9.vvo');
PatternLoad( dieid8  , 'Vectors/dieid8.vvo');
PatternLoad( dieid7  , 'Vectors/dieid7.vvo');
PatternLoad( dieid6  , 'Vectors/dieid6.vvo');
PatternLoad( dieid5  , 'Vectors/dieid5.vvo');
PatternLoad( dieid4  , 'Vectors/dieid4.vvo');
PatternLoad( dieid3  , 'Vectors/dieid3.vvo');
PatternLoad( dieid2  , 'Vectors/dieid2.vvo');
PatternLoad( dieid1  , 'Vectors/dieid1.vvo');
{rescrn05...}
    PatternLoad (F751686_55922s30, 'Vectors/F751686_55922s30.vvo');
    PatternLoad (F751686_55922s40, 'Vectors/F751686_55922s40.vvo');
    PatternLoad (F751686_55922s50, 'Vectors/F751686_55922s50.vvo');
    PatternLoad (F751686_55922s60, 'Vectors/F751686_55922s60.vvo');
    PatternLoad (F751686_55922s70, 'Vectors/F751686_55922s70.vvo');
    PatternLoad (F751686_55922s80, 'Vectors/F751686_55922s80.vvo');
    PatternLoad (F751686_55922s90, 'Vectors/F751686_55922s90.vvo');
    PatternLoad (F751686_55922sa0, 'Vectors/F751686_55922sa0.vvo');
    PatternLoad (F751686_55922sb0, 'Vectors/F751686_55922sb0.vvo');
    PatternLoad (F751686_55922sc0, 'Vectors/F751686_55922sc0.vvo');
    PatternLoad (F751686_55922sd0, 'Vectors/F751686_55922sd0.vvo');
    PatternLoad (F751686_55922se0, 'Vectors/F751686_55922se0.vvo');
    PatternLoad (F751686_55922sf0, 'Vectors/F751686_55922sf0.vvo');
    PatternLoad (F751686_55922sg0, 'Vectors/F751686_55922sg0.vvo');
    PatternLoad (F751686_55922sh0, 'Vectors/F751686_55922sh0.vvo');
    PatternLoad (F751686_55922si0, 'Vectors/F751686_55922si0.vvo');
    PatternLoad (F751686_55922sj0, 'Vectors/F751686_55922sj0.vvo');
    PatternLoad (F751686_55922sk0, 'Vectors/F751686_55922sk0.vvo');
    PatternLoad (F751686_55922sl0, 'Vectors/F751686_55922sl0.vvo');
    PatternLoad (F751686_55922sm0, 'Vectors/F751686_55922sm0.vvo');
    PatternLoad (F751686_55922sn0, 'Vectors/F751686_55922sn0.vvo');
    PatternLoad (F751686_55922so0, 'Vectors/F751686_55922so0.vvo');
    PatternLoad (F751686_55922ss0, 'Vectors/F751686_55922ss0.vvo');
    PatternLoad (F751686_55922st0, 'Vectors/F751686_55922st0.vvo');
    PatternLoad (F751686_55922su0, 'Vectors/F751686_55922su0.vvo');
    PatternLoad (F751686_55922sv0, 'Vectors/F751686_55922sv0.vvo');
    PatternLoad (F751686_55922sw0, 'Vectors/F751686_55922sw0.vvo');
    PatternLoad (F751686_55922sx0, 'Vectors/F751686_55922sx0.vvo');
    PatternLoad (F751686_55922sy0, 'Vectors/F751686_55922sy0.vvo');
    PatternLoad (F751686_55922sz0, 'Vectors/F751686_55922sz0.vvo');
    PatternLoad (F751686_55922t00, 'Vectors/F751686_55922t00.vvo');
    PatternLoad (F751686_55922t10, 'Vectors/F751686_55922t10.vvo');
    PatternLoad (F751686_55922t20, 'Vectors/F751686_55922t20.vvo');
    PatternLoad (F751686_55922t30, 'Vectors/F751686_55922t30.vvo');
    PatternLoad (F751686_55922t40, 'Vectors/F751686_55922t40.vvo');
    PatternLoad (F751686_55922t50, 'Vectors/F751686_55922t50.vvo');
    PatternLoad (F751686_55922t60, 'Vectors/F751686_55922t60.vvo');
    PatternLoad (F751686_55922t70, 'Vectors/F751686_55922t70.vvo');
    PatternLoad (F751686_55922t80, 'Vectors/F751686_55922t80.vvo');
    PatternLoad (F751686_55922t90, 'Vectors/F751686_55922t90.vvo');{protorev05}
    PatternLoad (F751686_55922ta0, 'Vectors/F751686_55922ta0.vvo');
    PatternLoad (F751686_55922tb0, 'Vectors/F751686_55922tb0.vvo');
    PatternLoad (F751686_55922tc0, 'Vectors/F751686_55922tc0.vvo');
    PatternLoad (F751686_55922td0, 'Vectors/F751686_55922td0.vvo');
    PatternLoad (F751686_55922tf0, 'Vectors/F751686_55922tf0.vvo');
    PatternLoad (F751686_55922th0, 'Vectors/F751686_55922th0.vvo');  
    PatternLoad (F751686_55922tj0, 'Vectors/F751686_55922tj0.vvo');
    PatternLoad (F751686_55922tk0, 'Vectors/F751686_55922tk0.vvo');
    PatternLoad (F751686_55922tl0, 'Vectors/F751686_55922tl0.vvo');
    PatternLoad (F751686_55922tn0, 'Vectors/F751686_55922tn0.vvo');
    PatternLoad (F751686_55922to0, 'Vectors/F751686_55922to0.vvo');

PatternLoad(F751686_55922rp0,  'Vectors/F751686_55922rp0.vvo');
PatternLoad(F751686_55922rq0,  'Vectors/F751686_55922rq0.vvo');
PatternLoad(F751686_55922rr0,  'Vectors/F751686_55922rr0.vvo');
PatternLoad(F751686_55922rs0,  'Vectors/F751686_55922rs0.vvo');
PatternLoad(F751686_55922rt0,  'Vectors/F751686_55922rt0.vvo');
PatternLoad(F751686_55922ru0,  'Vectors/F751686_55922ru0.vvo');
{rescrn09...}
    PatternLoad (F751686_55922tv0, 'Vectors/F751686_55922tv0.vvo');
    PatternLoad (F751686_55922tw0, 'Vectors/F751686_55922tw0.vvo');
    PatternLoad (F751686_55922tx0, 'Vectors/F751686_55922tx0.vvo');
    PatternLoad (F751686_55922ty0, 'Vectors/F751686_55922ty0.vvo');
    PatternLoad (F751686_55922tz0, 'Vectors/F751686_55922tz0.vvo');
    PatternLoad (F751686_55922u00, 'Vectors/F751686_55922u00.vvo');
    PatternLoad (F751686_55922u10, 'Vectors/F751686_55922u10.vvo');
    PatternLoad (F751686_55922u20, 'Vectors/F751686_55922u20.vvo');
    PatternLoad (F751686_55922u30, 'Vectors/F751686_55922u30.vvo');
    PatternLoad (F751686_55922u40, 'Vectors/F751686_55922u40.vvo');
    PatternLoad (F751686_55922u50, 'Vectors/F751686_55922u50.vvo');
    PatternLoad (F751686_55922u60, 'Vectors/F751686_55922u60.vvo');
    PatternLoad (F751686_55922u70, 'Vectors/F751686_55922u70.vvo');
    PatternLoad (F751686_55922u80, 'Vectors/F751686_55922u80.vvo');
    PatternLoad (F751686_55922u90, 'Vectors/F751686_55922u90.vvo');
    PatternLoad (F751686_55922ua0, 'Vectors/F751686_55922ua0.vvo');
    PatternLoad (F751686_55922ub0, 'Vectors/F751686_55922ub0.vvo');
    PatternLoad (F751686_55922uc0, 'Vectors/F751686_55922uc0.vvo');
    PatternLoad (F751686_55922ud0, 'Vectors/F751686_55922ud0.vvo');
    PatternLoad (F751686_55922ue0, 'Vectors/F751686_55922ue0.vvo');
    PatternLoad (F751686_55922uf0, 'Vectors/F751686_55922uf0.vvo');
    PatternLoad (F751686_55922ug0, 'Vectors/F751686_55922ug0.vvo');
    PatternLoad (F751686_55922ui0, 'Vectors/F751686_55922ui0.vvo');


{ftrev23a...}
    PatternLoad (F751686_55922uj0, 'Vectors/f751686_55922uj0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uk0, 'Vectors/f751686_55922uk0.vvo');
    PatternLoad (F751686_55922ul0, 'Vectors/f751686_55922ul0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922um0, 'Vectors/f751686_55922um0.vvo');
    PatternLoad (F751686_55922un0, 'Vectors/f751686_55922un0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uo0, 'Vectors/f751686_55922uo0.vvo');
    PatternLoad (F751686_55922up0, 'Vectors/f751686_55922up0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uq0, 'Vectors/f751686_55922uq0.vvo');
    PatternLoad (F751686_55922ur0, 'Vectors/f751686_55922ur0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922us0, 'Vectors/f751686_55922us0.vvo');
    PatternLoad (F751686_55922ut0, 'Vectors/f751686_55922ut0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uu0, 'Vectors/f751686_55922uu0.vvo');
    PatternLoad (F751686_55922uv0, 'Vectors/f751686_55922uv0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uw0, 'Vectors/f751686_55922uw0.vvo');
    PatternLoad (F751686_55922uy0, 'Vectors/f751686_55922uy0.vvo');
    PatternLoad (F751686_55922uz0, 'Vectors/f751686_55922uz0.vvo');
    PatternLoad (F751686_55922wi0, 'Vectors/f751686_55922wi1.vvo');{ftvsrev11c}
    PatternLoad (F751686_55922wl0, 'Vectors/f751686_55922wl1.vvo');{ftvsrev11c}

{...ftrev23a}

    PatternLoad (F751686_55922wm0, 'Vectors/f751686g_56081gw0.vvo');{ftrevg09e}
    PatternLoad (F751686_55922wn0, 'Vectors/f751686g_56081gx0.vvo');{ftrevg09e}

PatternLoad(F751686_55922tu0,  'Vectors/F751686_55922tu0.vvo'); 
PatternLoad(F751686_55922sp0,  'Vectors/F751686_55922sp0.vvo'); 
PatternLoad(F751686_55922sq0,  'Vectors/F751686_55922sq0.vvo'); 
PatternLoad(F751686_55922tt0,  'Vectors/F751686_55922tt0.vvo'); 
PatternLoad(F751686_55922ts0,  'Vectors/F751686_55922ts0.vvo'); 
{...hijirev21b}
 PatternLoad( F751686_55922pb0, 'Vectors/f751686g_56081m80.vvo');
 PatternLoad( F751686_55922pc0, 'Vectors/f751686g_56081m90.vvo');
 PatternLoad( F751686_55922pd0, 'Vectors/f751686g_56081ma0.vvo');
 PatternLoad( F751686_55922qo0, 'Vectors/f751686g_56081mn1_new.vvo');
 PatternLoad( F751686_55922qp0, 'Vectors/f751686g_56081mo1_new.vvo');
 PatternLoad( F751686_55922qh0, 'Vectors/f751686g_56081m40.vvo');
 PatternLoad( F751686_55922qj0, 'Vectors/f751686g_56081m60.vvo');
 PatternLoad( F751686_55922pv0, 'Vectors/f751686g_56081li0.vvo');
 PatternLoad( F751686_55922q00, 'Vectors/f751686g_56081ln0.vvo');
 PatternLoad( F751686_55922q90, 'Vectors/f751686g_56081lw0.vvo');
 PatternLoad( F751686_55922qg0, 'Vectors/f751686g_56081m30.vvo');
 PatternLoad( F751686_55922430, 'Vectors/f751686g_56081461_new.vvo');
 PatternLoad( F751686_55922px0, 'Vectors/f751686g_56081lj0.vvo');

{ftvsrev11e...}
 PatternLoad( F751686_55922v10, 'Vectors/F751686_55922v10.vvo');
 PatternLoad( F751686_55922v20, 'Vectors/F751686_55922v20.vvo');
 PatternLoad( F751686_55922v30, 'Vectors/F751686_55922v30.vvo');

{rev17a...}
 PatternLoad( F751686_55922v70, 'Vectors/F751686_55922v70.vvo');
 PatternLoad( F751686_55922v80, 'Vectors/F751686_55922v80.vvo');
 PatternLoad( F751686_55922v90, 'Vectors/F751686_55922v90.vvo');
{...rev17a}
 PatternLoad( F751686_55922vd0, 'Vectors/F751686_55922vd0.vvo');{rev20a}
{...ftvsrev11e}
 PatternLoad( F751686_55922va0, 'Vectors/F751686_55922va0.vvo');{rev18a}
 PatternLoad( F751686_55922vb0, 'Vectors/F751686_55922vb0.vvo');{rev18a}

 PatternLoad( F751686_55922vc0, 'Vectors/F751686_55922vc0.vvo');{rev19a}
 PatternLoad( F751686_55922ve0, 'Vectors/F751686_55922ve0.vvo');{rev21b}

writeln('Pattern Memory Left after PGM loaded',MemoryGetAvailable(S_PM32_VEC));
writeln('CRAM    Memory Left after PGM loaded',MemoryGetAvailable(S_PSC_CRAM));
wait (1s);

end;

FT_1_LV :
begin

V_PATT_START_PAD :=2;          {DSP29}
V_PATT_END_PAD   :=2;          {DSP29}

 PatternLoadGlobal( 'Vectors/f751686g_56081g00.vgo' );

 PatternLoad( ledTlbScreenTc5_1k, 'Vectors/ledTlbScreenTC5_1k_new.vvo');

 PatternLoad( F751686_55922050, 'Vectors/f751686g_56081040.vvo');
 PatternLoad( F751686_55922320, 'Vectors/f751686g_56081350.vvo');	  
 PatternLoad( F751686_55922210, 'Vectors/f751686g_56081270.vvo');	 
 PatternLoad( F751686_55922070, 'Vectors/f751686g_56081100.vvo');
 PatternLoad( F751686_55922180, 'Vectors/f751686g_56081220.vvo');	 
 PatternLoad( F751686_55922410, 'Vectors/f751686g_56081410.vvo');	 
 PatternLoad( F751686_55922440, 'Vectors/f751686g_56081530.vvo');
 PatternLoad( F751686_55922gq0, 'Vectors/f751686g_56081gi0.vvo');
 PatternLoad( F751686_55922ky0, 'Vectors/f751686g_56081mb1_new.vvo');
 PatternLoad( F751686_55922l00, 'Vectors/f751686g_56081md1.vvo');{rev16a}
 PatternLoad( F751686_55922ql0, 'Vectors/f751686g_56081mi1.vvo');{ftvsrev11c}
 PatternLoad( F751686_55922qn0, 'Vectors/f751686g_56081ml0.vvo');
 PatternLoad( F751686_55922qq0, 'Vectors/f751686g_56081mp0.vvo');
 PatternLoad( F751686_55922re0, 'Vectors/f751686g_56081on1_new.vvo');
 PatternLoad( F751686_55922qs0, 'Vectors/f751686g_56081mu1_new.vvo');
 PatternLoad( F751686_55922m90, 'Vectors/f751686g_56081ms1_new.vvo');
 PatternLoad( F751686_55922mo0, 'Vectors/f751686g_56081nu0.vvo');
 PatternLoad( F751686_55922ps0, 'Vectors/f751686g_56081kh0.vvo');
 PatternLoad( F751686_55922pu0, 'Vectors/f751686g_56081kj0.vvo');
 PatternLoad( F751686_55922py0, 'Vectors/f751686g_56081lk0.vvo');{rev13b}
 PatternLoad( F751686_55922pz0, 'Vectors/f751686g_56081lm0.vvo');
 PatternLoad( F751686_55922q10, 'Vectors/f751686g_56081lo0.vvo');
 PatternLoad( F751686_55922q20, 'Vectors/f751686g_56081lp0.vvo');
 PatternLoad( F751686_55922q30, 'Vectors/f751686g_56081lq0.vvo');
 PatternLoad( F751686_55922q40, 'Vectors/f751686g_56081lr0.vvo');{rev13a}
 PatternLoad( F751686_55922q70, 'Vectors/f751686g_56081lu0.vvo');
 PatternLoad( F751686_55922qa0, 'Vectors/f751686g_56081lx0.vvo');
 PatternLoad( F751686_55922qc0, 'Vectors/f751686g_56081lz0.vvo');
 PatternLoad( F751686_55922qe0, 'Vectors/f751686g_56081m10.vvo');
 PatternLoad( F751686_55922qf0, 'Vectors/f751686g_56081m20.vvo');
 PatternLoad( F751686_55922qk0, 'Vectors/f751686g_56081m70.vvo');
 PatternLoad( F751686_55922q50, 'Vectors/f751686g_56081ls0.vvo');
 PatternLoad( F751686_55922q60, 'Vectors/f751686g_56081lt0.vvo');
 PatternLoad( F751686_55922qi0, 'Vectors/f751686g_56081m50.vvo');
 PatternLoad( F751686_55922qd0, 'Vectors/f751686g_56081m00.vvo');
 PatternLoad( F751686_55922q80, 'Vectors/f751686g_56081lv0.vvo');
 PatternLoad( F751686_55922qt0, 'Vectors/imif_march13_A.vvo');
 PatternLoad( F751686_55922qu0, 'Vectors/imif_march13_B.vvo');
 PatternLoad( F751686_55922300, 'Vectors/f751686g_56081330.vvo');	
 PatternLoad( F751686_55922480, 'Vectors/f751686g_56081571_new.vvo');
 PatternLoad( F751686_55922490, 'Vectors/f751686g_56081581_new.vvo');
 PatternLoad( F751686_55922500, 'Vectors/f751686g_56081591_new.vvo');
 PatternLoad( F751686_55922510, 'Vectors/f751686g_56081601_new.vvo');
 PatternLoad( F751686_55922520, 'Vectors/f751686g_56081611_new.vvo');
 PatternLoad( F751686_55922530, 'Vectors/f751686g_56081621_new.vvo');
 PatternLoad( F751686_55922540, 'Vectors/f751686g_56081631_new.vvo');
 PatternLoad( F751686_55922550, 'Vectors/f751686g_56081641_new.vvo');
 PatternLoad( F751686_55922560, 'Vectors/f751686g_56081651_new.vvo');
 PatternLoad( F751686_55922570, 'Vectors/f751686g_56081661_new.vvo');
 PatternLoad( F751686_55922580, 'Vectors/f751686g_56081671_new.vvo');
 PatternLoad( F751686_55922590, 'Vectors/f751686g_56081681_new.vvo');
 PatternLoad( F751686_55922620, 'Vectors/f751686g_56081691_new.vvo');
 PatternLoad( F751686_55922630, 'Vectors/f751686g_56081701_new.vvo');
 PatternLoad( F751686_55922640, 'Vectors/f751686g_56081711_new.vvo');
 PatternLoad( F751686_55922650, 'Vectors/f751686g_56081721_new.vvo');
 PatternLoad( F751686_55922670, 'Vectors/f751686g_56081741_new.vvo');
 PatternLoad( F751686_55922680, 'Vectors/f751686g_56081751_new.vvo');
 PatternLoad( F751686_55922690, 'Vectors/f751686g_56081761_new.vvo');
 PatternLoad( F751686_55922700, 'Vectors/f751686g_56081771_new.vvo');
 PatternLoad( F751686_55922710, 'Vectors/f751686g_56081781_new.vvo');
 PatternLoad( F751686_55922720, 'Vectors/f751686g_56081791_new.vvo');
 PatternLoad( F751686_55922730, 'Vectors/f751686g_56081801_new.vvo');
 PatternLoad( F751686_55922740, 'Vectors/f751686g_56081811_new.vvo');
 PatternLoad( F751686_55922750, 'Vectors/f751686g_56081821_new.vvo');
 PatternLoad( F751686_55922760, 'Vectors/f751686g_56081831_new.vvo');
 PatternLoad( F751686_55922800, 'Vectors/f751686g_56081841_new.vvo');
 PatternLoad( F751686_55922810, 'Vectors/f751686g_56081851_new.vvo');
 PatternLoad( F751686_55922820, 'Vectors/f751686g_56081861_new.vvo');
 PatternLoad( F751686_55922830, 'Vectors/f751686g_56081871_new.vvo');
 PatternLoad( F751686_55922840, 'Vectors/f751686g_56081881_new.vvo');

 PatternLoad( F751686_mgs3long, 'Vectors/F751686_mgs3long.vvo');{rev13g}

PatternLoad(F751686_55922tp0,  'Vectors/f751686g_56081510.vvo');
PatternLoad(F751686_55922tq0,  'Vectors/f751686g_56081521_new.vvo');
PatternLoad(F751686_55922tr0,  'Vectors/f751686g_56081540.vvo');

 PatternLoad( F751686_55922js0, 'Vectors/f751686g_56081010.vvo');
 PatternLoad( F751686_55922jt0, 'Vectors/f751686g_56081020.vvo');	 
 PatternLoad( F751686_55922ju0, 'Vectors/f751686g_56081031_new.vvo');
 PatternLoad( F751686_55922pp0, 'Vectors/f751686g_56081060.vvo');
 PatternLoad( F751686_55922pq0, 'Vectors/f751686g_56081070.vvo');
 PatternLoad( F751686_55922pl0, 'Vectors/f751686g_56081090.vvo');
 PatternLoad( F751686_55922ra0, 'Vectors/f751686g_56081471_new.vvo');
 PatternLoad( F751686_55922rn0, 'Vectors/f751686g_56081dj0.vvo');
 PatternLoad( F751686_55922ro0, 'Vectors/f751686g_56081mv0.vvo');
 PatternLoad( F751686_55922ri0, 'Vectors/F751686_55922ri0.vvo');
 PatternLoad( F751686_55922rk0, 'Vectors/F751686_55922rk0.vvo');

PatternLoad( dieid64 , 'Vectors/dieid64.vvo');
PatternLoad( dieid63 , 'Vectors/dieid63.vvo');
PatternLoad( dieid62 , 'Vectors/dieid62.vvo');
PatternLoad( dieid61 , 'Vectors/dieid61.vvo');
PatternLoad( dieid60 , 'Vectors/dieid60.vvo');
PatternLoad( dieid59 , 'Vectors/dieid59.vvo');
PatternLoad( dieid58 , 'Vectors/dieid58.vvo');
PatternLoad( dieid57 , 'Vectors/dieid57.vvo');
PatternLoad( dieid56 , 'Vectors/dieid56.vvo');
PatternLoad( dieid55 , 'Vectors/dieid55.vvo');
PatternLoad( dieid54 , 'Vectors/dieid54.vvo');
PatternLoad( dieid53 , 'Vectors/dieid53.vvo');
PatternLoad( dieid52 , 'Vectors/dieid52.vvo');
PatternLoad( dieid51 , 'Vectors/dieid51.vvo');
PatternLoad( dieid50 , 'Vectors/dieid50.vvo');
PatternLoad( dieid49 , 'Vectors/dieid49.vvo');
PatternLoad( dieid48 , 'Vectors/dieid48.vvo');
PatternLoad( dieid47 , 'Vectors/dieid47.vvo');
PatternLoad( dieid46 , 'Vectors/dieid46.vvo');
PatternLoad( dieid45 , 'Vectors/dieid45.vvo');
PatternLoad( dieid44 , 'Vectors/dieid44.vvo');
PatternLoad( dieid43 , 'Vectors/dieid43.vvo');
PatternLoad( dieid42 , 'Vectors/dieid42.vvo');
PatternLoad( dieid41 , 'Vectors/dieid41.vvo');
PatternLoad( dieid40 , 'Vectors/dieid40.vvo');
PatternLoad( dieid39 , 'Vectors/dieid39.vvo');
PatternLoad( dieid38 , 'Vectors/dieid38.vvo');
PatternLoad( dieid37 , 'Vectors/dieid37.vvo');
PatternLoad( dieid36 , 'Vectors/dieid36.vvo');
PatternLoad( dieid35 , 'Vectors/dieid35.vvo');
PatternLoad( dieid34 , 'Vectors/dieid34.vvo');
PatternLoad( dieid33 , 'Vectors/dieid33.vvo');
PatternLoad( dieid32 , 'Vectors/dieid32.vvo');
PatternLoad( dieid31 , 'Vectors/dieid31.vvo');
PatternLoad( dieid30 , 'Vectors/dieid30.vvo');
PatternLoad( dieid29 , 'Vectors/dieid29.vvo');
PatternLoad( dieid28 , 'Vectors/dieid28.vvo');
PatternLoad( dieid27 , 'Vectors/dieid27.vvo');
PatternLoad( dieid26 , 'Vectors/dieid26.vvo');
PatternLoad( dieid25 , 'Vectors/dieid25.vvo');
PatternLoad( dieid24 , 'Vectors/dieid24.vvo');
PatternLoad( dieid23 , 'Vectors/dieid23.vvo');
PatternLoad( dieid22 , 'Vectors/dieid22.vvo');
PatternLoad( dieid21 , 'Vectors/dieid21.vvo');
PatternLoad( dieid20 , 'Vectors/dieid20.vvo');
PatternLoad( dieid19 , 'Vectors/dieid19.vvo');
PatternLoad( dieid18 , 'Vectors/dieid18.vvo');
PatternLoad( dieid17 , 'Vectors/dieid17.vvo');
PatternLoad( dieid16 , 'Vectors/dieid16.vvo');
PatternLoad( dieid15 , 'Vectors/dieid15.vvo');
PatternLoad( dieid14 , 'Vectors/dieid14.vvo');
PatternLoad( dieid13 , 'Vectors/dieid13.vvo');
PatternLoad( dieid12 , 'Vectors/dieid12.vvo');
PatternLoad( dieid11 , 'Vectors/dieid11.vvo');
PatternLoad( dieid10 , 'Vectors/dieid10.vvo');
PatternLoad( dieid9  , 'Vectors/dieid9.vvo');
PatternLoad( dieid8  , 'Vectors/dieid8.vvo');
PatternLoad( dieid7  , 'Vectors/dieid7.vvo');
PatternLoad( dieid6  , 'Vectors/dieid6.vvo');
PatternLoad( dieid5  , 'Vectors/dieid5.vvo');
PatternLoad( dieid4  , 'Vectors/dieid4.vvo');
PatternLoad( dieid3  , 'Vectors/dieid3.vvo');
PatternLoad( dieid2  , 'Vectors/dieid2.vvo');
PatternLoad( dieid1  , 'Vectors/dieid1.vvo');
{rescrn05...}
    PatternLoad (F751686_55922s30, 'Vectors/F751686_55922s30.vvo');
    PatternLoad (F751686_55922s40, 'Vectors/F751686_55922s40.vvo');
    PatternLoad (F751686_55922s50, 'Vectors/F751686_55922s50.vvo');
    PatternLoad (F751686_55922s60, 'Vectors/F751686_55922s60.vvo');
    PatternLoad (F751686_55922s70, 'Vectors/F751686_55922s70.vvo');
    PatternLoad (F751686_55922s80, 'Vectors/F751686_55922s80.vvo');
    PatternLoad (F751686_55922s90, 'Vectors/F751686_55922s90.vvo');
    PatternLoad (F751686_55922sa0, 'Vectors/F751686_55922sa0.vvo');
    PatternLoad (F751686_55922sb0, 'Vectors/F751686_55922sb0.vvo');
    PatternLoad (F751686_55922sc0, 'Vectors/F751686_55922sc0.vvo');
    PatternLoad (F751686_55922sd0, 'Vectors/F751686_55922sd0.vvo');
    PatternLoad (F751686_55922se0, 'Vectors/F751686_55922se0.vvo');
    PatternLoad (F751686_55922sf0, 'Vectors/F751686_55922sf0.vvo');
    PatternLoad (F751686_55922sg0, 'Vectors/F751686_55922sg0.vvo');
    PatternLoad (F751686_55922sh0, 'Vectors/F751686_55922sh0.vvo');
    PatternLoad (F751686_55922si0, 'Vectors/F751686_55922si0.vvo');
    PatternLoad (F751686_55922sj0, 'Vectors/F751686_55922sj0.vvo');
    PatternLoad (F751686_55922sk0, 'Vectors/F751686_55922sk0.vvo');
    PatternLoad (F751686_55922sl0, 'Vectors/F751686_55922sl0.vvo');
    PatternLoad (F751686_55922sm0, 'Vectors/F751686_55922sm0.vvo');
    PatternLoad (F751686_55922sn0, 'Vectors/F751686_55922sn0.vvo');
    PatternLoad (F751686_55922so0, 'Vectors/F751686_55922so0.vvo');
    PatternLoad (F751686_55922ss0, 'Vectors/F751686_55922ss0.vvo');
    PatternLoad (F751686_55922st0, 'Vectors/F751686_55922st0.vvo');
    PatternLoad (F751686_55922su0, 'Vectors/F751686_55922su0.vvo');
    PatternLoad (F751686_55922sv0, 'Vectors/F751686_55922sv0.vvo');
    PatternLoad (F751686_55922sw0, 'Vectors/F751686_55922sw0.vvo');
    PatternLoad (F751686_55922sx0, 'Vectors/F751686_55922sx0.vvo');
    PatternLoad (F751686_55922sy0, 'Vectors/F751686_55922sy0.vvo');
    PatternLoad (F751686_55922sz0, 'Vectors/F751686_55922sz0.vvo');
    PatternLoad (F751686_55922t00, 'Vectors/F751686_55922t00.vvo');
    PatternLoad (F751686_55922t10, 'Vectors/F751686_55922t10.vvo');
    PatternLoad (F751686_55922t20, 'Vectors/F751686_55922t20.vvo');
    PatternLoad (F751686_55922t30, 'Vectors/F751686_55922t30.vvo');
    PatternLoad (F751686_55922t40, 'Vectors/F751686_55922t40.vvo');
    PatternLoad (F751686_55922t50, 'Vectors/F751686_55922t50.vvo');
    PatternLoad (F751686_55922t60, 'Vectors/F751686_55922t60.vvo');
    PatternLoad (F751686_55922t70, 'Vectors/F751686_55922t70.vvo');
    PatternLoad (F751686_55922t80, 'Vectors/F751686_55922t80.vvo');
    PatternLoad (F751686_55922t90, 'Vectors/F751686_55922t90.vvo');{protorev05}
    PatternLoad (F751686_55922ta0, 'Vectors/F751686_55922ta0.vvo');
    PatternLoad (F751686_55922tb0, 'Vectors/F751686_55922tb0.vvo');
    PatternLoad (F751686_55922tc0, 'Vectors/F751686_55922tc0.vvo');
    PatternLoad (F751686_55922td0, 'Vectors/F751686_55922td0.vvo');
    PatternLoad (F751686_55922tf0, 'Vectors/F751686_55922tf0.vvo');
    PatternLoad (F751686_55922th0, 'Vectors/F751686_55922th0.vvo');  
    PatternLoad (F751686_55922tj0, 'Vectors/F751686_55922tj0.vvo');
    PatternLoad (F751686_55922tk0, 'Vectors/F751686_55922tk0.vvo');
    PatternLoad (F751686_55922tl0, 'Vectors/F751686_55922tl0.vvo');
    PatternLoad (F751686_55922tn0, 'Vectors/F751686_55922tn0.vvo');
    PatternLoad (F751686_55922to0, 'Vectors/F751686_55922to0.vvo');

PatternLoad(F751686_55922rp0,  'Vectors/F751686_55922rp0.vvo');
PatternLoad(F751686_55922rq0,  'Vectors/F751686_55922rq0.vvo');
PatternLoad(F751686_55922rr0,  'Vectors/F751686_55922rr0.vvo');
PatternLoad(F751686_55922rs0,  'Vectors/F751686_55922rs0.vvo');
PatternLoad(F751686_55922rt0,  'Vectors/F751686_55922rt0.vvo');
PatternLoad(F751686_55922ru0,  'Vectors/F751686_55922ru0.vvo');
{rescrn09...}
    PatternLoad (F751686_55922tv0, 'Vectors/F751686_55922tv0.vvo');
    PatternLoad (F751686_55922tw0, 'Vectors/F751686_55922tw0.vvo');
    PatternLoad (F751686_55922tx0, 'Vectors/F751686_55922tx0.vvo');
    PatternLoad (F751686_55922ty0, 'Vectors/F751686_55922ty0.vvo');
    PatternLoad (F751686_55922tz0, 'Vectors/F751686_55922tz0.vvo');
    PatternLoad (F751686_55922u00, 'Vectors/F751686_55922u00.vvo');
    PatternLoad (F751686_55922u10, 'Vectors/F751686_55922u10.vvo');
    PatternLoad (F751686_55922u20, 'Vectors/F751686_55922u20.vvo');
    PatternLoad (F751686_55922u30, 'Vectors/F751686_55922u30.vvo');
    PatternLoad (F751686_55922u40, 'Vectors/F751686_55922u40.vvo');
    PatternLoad (F751686_55922u50, 'Vectors/F751686_55922u50.vvo');
    PatternLoad (F751686_55922u60, 'Vectors/F751686_55922u60.vvo');
    PatternLoad (F751686_55922u70, 'Vectors/F751686_55922u70.vvo');
    PatternLoad (F751686_55922u80, 'Vectors/F751686_55922u80.vvo');
    PatternLoad (F751686_55922u90, 'Vectors/F751686_55922u90.vvo');
    PatternLoad (F751686_55922ua0, 'Vectors/F751686_55922ua0.vvo');
    PatternLoad (F751686_55922ub0, 'Vectors/F751686_55922ub0.vvo');
    PatternLoad (F751686_55922uc0, 'Vectors/F751686_55922uc0.vvo');
    PatternLoad (F751686_55922ud0, 'Vectors/F751686_55922ud0.vvo');
    PatternLoad (F751686_55922ue0, 'Vectors/F751686_55922ue0.vvo');
    PatternLoad (F751686_55922uf0, 'Vectors/F751686_55922uf0.vvo');
    PatternLoad (F751686_55922ug0, 'Vectors/F751686_55922ug0.vvo');
    PatternLoad (F751686_55922ui0, 'Vectors/F751686_55922ui0.vvo');


{ftrev23a...}
    PatternLoad (F751686_55922uj0, 'Vectors/f751686_55922uj0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uk0, 'Vectors/f751686_55922uk0.vvo');
    PatternLoad (F751686_55922ul0, 'Vectors/f751686_55922ul0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922um0, 'Vectors/f751686_55922um0.vvo');
    PatternLoad (F751686_55922un0, 'Vectors/f751686_55922un0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uo0, 'Vectors/f751686_55922uo0.vvo');
    PatternLoad (F751686_55922up0, 'Vectors/f751686_55922up0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uq0, 'Vectors/f751686_55922uq0.vvo');
    PatternLoad (F751686_55922ur0, 'Vectors/f751686_55922ur0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922us0, 'Vectors/f751686_55922us0.vvo');
    PatternLoad (F751686_55922ut0, 'Vectors/f751686_55922ut0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uu0, 'Vectors/f751686_55922uu0.vvo');
    PatternLoad (F751686_55922uv0, 'Vectors/f751686_55922uv0.vvo');{ftvsrev12a}
    PatternLoad (F751686_55922uw0, 'Vectors/f751686_55922uw0.vvo');
    PatternLoad (F751686_55922uy0, 'Vectors/f751686_55922uy0.vvo');
    PatternLoad (F751686_55922uz0, 'Vectors/f751686_55922uz0.vvo');
    PatternLoad (F751686_55922wi0, 'Vectors/f751686_55922wi1.vvo');{ftvsrev11c}
    PatternLoad (F751686_55922wl0, 'Vectors/f751686_55922wl1.vvo');{ftvsrev11c}

{...ftrev23a}

    PatternLoad (F751686_55922wm0, 'Vectors/f751686g_56081gw0.vvo');{ftrevg09e}
    PatternLoad (F751686_55922wn0, 'Vectors/f751686g_56081gx0.vvo');{ftrevg09e}

PatternLoad(F751686_55922tu0,  'Vectors/F751686_55922tu0.vvo'); 
PatternLoad(F751686_55922sp0,  'Vectors/F751686_55922sp0.vvo'); 
PatternLoad(F751686_55922sq0,  'Vectors/F751686_55922sq0.vvo'); 
PatternLoad(F751686_55922tt0,  'Vectors/F751686_55922tt0.vvo'); 
PatternLoad(F751686_55922ts0,  'Vectors/F751686_55922ts0.vvo'); 
{...hijirev21b}
 PatternLoad( F751686_55922pb0, 'Vectors/f751686g_56081m80.vvo');
 PatternLoad( F751686_55922pc0, 'Vectors/f751686g_56081m90.vvo');
 PatternLoad( F751686_55922pd0, 'Vectors/f751686g_56081ma0.vvo');
 PatternLoad( F751686_55922qo0, 'Vectors/f751686g_56081mn1_new.vvo');
 PatternLoad( F751686_55922qp0, 'Vectors/f751686g_56081mo1_new.vvo');
 PatternLoad( F751686_55922qh0, 'Vectors/f751686g_56081m40.vvo');
 PatternLoad( F751686_55922qj0, 'Vectors/f751686g_56081m60.vvo');
 PatternLoad( F751686_55922pv0, 'Vectors/f751686g_56081li0.vvo');
 PatternLoad( F751686_55922q00, 'Vectors/f751686g_56081ln0.vvo');
 PatternLoad( F751686_55922q90, 'Vectors/f751686g_56081lw0.vvo');
 PatternLoad( F751686_55922qg0, 'Vectors/f751686g_56081m30.vvo');
 PatternLoad( F751686_55922430, 'Vectors/f751686g_56081461_new.vvo');
 PatternLoad( F751686_55922px0, 'Vectors/f751686g_56081lj0.vvo');

{ftvsrev11e...}
 PatternLoad( F751686_55922v10, 'Vectors/F751686_55922v10.vvo');
 PatternLoad( F751686_55922v20, 'Vectors/F751686_55922v20.vvo');
 PatternLoad( F751686_55922v30, 'Vectors/F751686_55922v30.vvo');

{rev17a...}
 PatternLoad( F751686_55922v70, 'Vectors/F751686_55922v70.vvo');
 PatternLoad( F751686_55922v80, 'Vectors/F751686_55922v80.vvo');
 PatternLoad( F751686_55922v90, 'Vectors/F751686_55922v90.vvo');
{...rev17a}
 PatternLoad( F751686_55922vd0, 'Vectors/F751686_55922vd0.vvo');{rev20a}
{...ftvsrev11e}
 PatternLoad( F751686_55922va0, 'Vectors/F751686_55922va0.vvo');{rev18a}
 PatternLoad( F751686_55922vb0, 'Vectors/F751686_55922vb0.vvo');{rev18a}

 PatternLoad( F751686_55922vc0, 'Vectors/F751686_55922vc0.vvo');{rev19a}
 PatternLoad( F751686_55922ve0, 'Vectors/F751686_55922ve0.vvo');{rev21b}

writeln('Pattern Memory Left after PGM loaded',MemoryGetAvailable(S_PM32_VEC));
writeln('CRAM    Memory Left after PGM loaded',MemoryGetAvailable(S_PSC_CRAM));
wait (1s);

end;
 
otherwise
begin
  PatternLoadGlobal( 'ST_Vectors/f751686g_56081g00_ST.vgo' );
end;

end; {case}
end; {Load_Patterns}


(*
*********************************************************************
****          MAIN PROGRAM                                       ****
*********************************************************************
*)

  begin


    Reload_the_Setups := FALSE;

    OnError( Error_Trap );

    INITIALIZE_LOT_INFORMATION;
    INITIALIZE_TEST_LIMIT_ARRAYS;

    {Initialize default Values}
    trange  := 5;          {Margin ranges}
    vrange  := 1000;
    
    AC_marg_nom := false;
    AC_marg_min := false;
    AC_marg_max := false;
    DC_marg_nom := false;
    DC_marg_min := false;
    DC_marg_max := false;
    AC_marg_min2:= false;
    AC_marg_max2:= false;
    DC_marg_min2:= false;
    DC_marg_max2:= false;
    ALL_SCAN 	:= false;
    DPLL_OFF	:= false;    
    vddshmoo    := false;
    vddshmoo_tlb:= false;
    iddqshmoo  	:= false;
    delayshmoo	:= false;
    LU_Enable  	:= false;
    ICCQ_LOG 	:= false;
    QUAL_LEG   	:= false;
    READ_POINT 	:= false;

    Operator_Setup;

{ Initialize Pin_Maps Type - ELM 08 Mar 2007 }
case TIDeviceType of
  FT_1_HV    ,
  FT_1_LV    : Pin_Maps := FT_1;

  FT_STACK_LV,
  FT_STACK_HV: Pin_Maps := FT_STACK;

  PB_1_HV    ,
  PB_1_LV    : Pin_Maps := PB_1;

  FT_13_HV   ,
  FT_13_LV   : Pin_Maps := FT_13;

  PB_12_HV   ,
  PB_12_LV   : Pin_Maps := PB_12;

  otherwise
  begin
    writeln;writeln;
    writeln('     ! ! !   W A R N I N G   ! ! ! !');
    writeln('   NO Pin_Maps type assigned to ', TIDeviceType);
    writeln;writeln('      CONTACT APPS/PRODUCT ENGINEER');
    writeln;writeln;write('Press [Enter] if you understood -> ');
    readln(PinMapString);
  end;

end; {case}

{(rev03a)...}
#ifdef $SITE_TESTWARE_FLAG then
#if    $SITE_TESTWARE_FLAG then
       TWPDLInitialize(1,TWMinimumData);		
#endif
#endif


{(rev01h)...}
PinListGetTopLevel(ALL_PINS_9, PIN_ARRAY_9, PIN_COUNT_9);
PinListGetTopLevel(ALL_PINS_VMARGIN, PIN_ARRAY_VMARGIN, PIN_COUNT_VMARGIN);
{...(rev01h)}

    PinListGet(ALL_PINS, PIN_ARRAY, PIN_COUNT);
    PinListGet(ALL_PINS_PLUS, APP_ARRAY, APP_COUNT);
    ResultSetDefault( PASS );
    RelayCheckDone := false;
    Test;

  end.
 
