enVision:"bl8:R15.4.2:S4.3";

PinType inout {
    Type = Norm;
    Direction = Bidirect;
    Mode = NoTerm;
    Mux = False;
}
PinType input {
    Type = Norm;
    Direction = Input;
    Mode = NoTerm;
    Mux = False;
}
PinType output {
    Type = Norm;
    Direction = Output;
    Mode = NoTerm;
    Mux = False;
}
PinType power {
    Type = Pwr;
}
PinType Type_SMS {
    Type = Res;
}
PinType ground {
    Type = Pwr;
}
PinGroup DIG_ALLPINS {
	Group = Expr { String = "inpins+outpins+iopins"; }
}
PinGroup ADCMUX_PINS {
	Group = Expr { String = "CODEC_INT+CODEC_CS_N+CODEC_FS+CODEC_RINGIN4+CODEC_RINGIN3+CODEC_RINGIN2"; }
}
PinGroup scan_out {
	Group = Expr { String = "LAN_LINKON+LAN_ACTIVITY"; }
}
PinGroup scan_in {
	Group = Expr { String = "GPIO0+GPIO1"; }
}
PinGroup LCD_PD {
	Group = Expr { String = "LCD_PD00+LCD_PD01+LCD_PD02+LCD_PD03+LCD_PD04+LCD_PD05+LCD_PD06+LCD_PD07+LCD_PD08+LCD_PD09+LCD_PD10+LCD_PD11+LCD_PD12+LCD_PD13+LCD_PD14+LCD_PD15"; }
}
PinGroup TX_MAG {
	Group = Expr { String = "LAN_TXP+PC_TXP+LAN_TXM+PC_TXM"; }
}
PinGroup inpins {
	Group = Expr { String = "LAN_SPEED100+
        LCD_AC_NCS+CODEC_CLKIN+
        REFCLKI+RST_N+LCD_VSYNC_A0+
        LCD_PD07+LCD_PD05+LCD_PD01+LCD_PD02+LCD_PD03+LCD_PD04+GPIO4+JTAG_TCK+GPIO0+EJTAG_TCK+
        GPIO1+GPIO3+CODEC_DCLK+CODEC_DIN+GPIO2"; }
}
PinGroup outpins {
	Group = Expr { String = "
        CODEC_DOUT+PC_SPEED100+PC_LINKON+PC_ACTIVITY+PC_FDUPLEX+LCD_PD15+LCD_PD14+LCD_PD13+LCD_PD12+LCD_PD11+LCD_PD10+LCD_PD09+
        LCD_PD06+LCD_PD08+LCD_PD00+LAN_LINKON+LAN_ACTIVITY+LAN_FDUPLEX+CODEC_RINGIN2+CODEC_RINGIN3+
        CODEC_RINGIN4+CODEC_FS+CODEC_CS_N+CODEC_INT+CODEC_RESET_N+CODEC_CLKOUT+CODEC_RINGIN1        "; }
}
PinGroup FeedThru_Apins {
	Group = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM+REFCLKI+PHY_EXRES+PHY_TSTA"; }
}
PinGroup TTL_pins {
	Group = Expr { String = "LCD_PD01+LCD_PD02+LCD_PD03+LCD_PD04+LCD_PD05+LCD_PD07+LCD_PD08+LCD_PD00+LCD_PD12+LCD_PD13+LCD_PD14+LCD_PD15+LCD_PD11+LCD_PD09+
                             LCD_PD06+LCD_PD10+CODEC_RINGIN1+LCD_HSYNC_RNW+LCD_VSYNC_A0+RST_N"; }
}
PinGroup iopins {
	Group = Expr { String = "LCD_HSYNC_RNW"; }
}
PinGroup analog_iopins {
	Group = Expr { String = "PHY_EXRES+PHY_TSTA"; }
}
PinGroup ALL_VDDPINS {
	Group = Expr { String = "VDD_14+VDDSHV_8+VDDSHV_7+VDDSHV_6+VDDSHV_5"; }
}
PinGroup VDD_ANA_GRP {
	Group = Expr { String = "VDDSHV_8+VDDSHV_7+VDDSHV_6+VDDSHV_5"; }
}
PinGroup analog_in {
	Group = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
}
PinGroup analog_out {
}
PinGroup all_analog {
	Group = Expr { String = "analog_in+analog_out+analog_iopins"; }
}
Spec OS_specs {
    Category[0] = cat0;
    Param[0] = vol_opsh;
    Param[1] = voh_opsh;
    Param[2] = iol_opsh;
    Param[3] = ioh_opsh;
    Param[4] = vref_opsh;
    Param[5] = vdd_opens_3_3V;
    Param[6] = vdd_opens_1_8V;
    Param[7] = vdd_opens;
    Param[8] = vdd_shorts;
    Param[9] = iol_vdd_opsh;
    Param[10] = ioh_vdd_opsh;
}
Param vol_opsh {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "-0.9V"; }
    }
}
Param voh_opsh {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "-400mV"; }
    }
}
Param iol_opsh {
    Type = A;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "1mA"; }
    }
}
Param ioh_opsh {
    Type = A;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "-1mA"; }
    }
}
Param vref_opsh {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "-2V"; }
    }
}
Param vdd_opens_3_3V {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "3.3V"; }
        Max = Expr { String = "3.6V"; }
    }
}
Param vdd_opens_1_8V {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "1.8V"; }
        Max = Expr { String = "2V"; }
    }
}
Param vdd_opens {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "vdd.Typ"; }
    }
}
Param vdd_shorts {
    Type = V;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "500mV"; }
    }
}
Param iol_vdd_opsh {
    Type = A;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "20uA"; }
    }
}
Param ioh_vdd_opsh {
    Type = A;
    Spec = OS_specs;
    cat0 {
        Typ = Expr { String = "1mA"; }
    }
}
Spec AC_specs {
    Category[0] = cat0;
    Param[0] = t0;
    Param[1] = pw;
    Param[2] = ret;
    Param[3] = period;
}
Param t0 {
    Comment = "tester t0";
    Type = s;
    Spec = AC_specs;
    cat0 {
        Typ = Expr { String = "0nS"; }
    }
}
Param pw {
    Comment = "default window strobe pulse width";
    Type = s;
    Spec = AC_specs;
    cat0 {
        Typ = Expr { String = "5nS"; }
    }
}
Param ret {
    Comment = "default edge-to-edge retrigger delay";
    Type = s;
    Spec = AC_specs;
    cat0 {
        Typ = Expr { String = "16nS"; }
    }
}
Param period {
    Comment = "period for scan tables";
    Type = s;
    Spec = AC_specs;
    cat0 {
        Min = Expr { String = "0.000000nS"; }
        Typ = Expr { String = "25.000000nS"; }
        Max = Expr { String = "0.000000nS"; }
    }
}
Spec DC_specs {
    Category[0] = cat0;
    Param[0] = ioh;
    Param[1] = iol;
    Param[2] = iozl;
    Param[3] = vdd;
    Param[4] = STDF_vdd;
    Param[5] = vil;
    Param[6] = vih;
    Param[7] = vol;
    Param[8] = voh;
    Param[9] = vref;
    Param[10] = iil;
    Param[11] = dynamic_idd;
    Param[12] = static_idd;
    Param[13] = vdd_stress;
    Param[14] = vdds_stress;
    Param[15] = iol_stress;
    Param[16] = ioh_stress;
    Param[17] = vsb;
    Param[18] = vdigital;
    Param[19] = avcc;
    Param[20] = dac_measured_limit;
    Param[21] = vil_vinp;
    Param[22] = vih_vinp;
    Param[23] = idd_dyn_meas;
    Param[24] = IDD_Dynamic;
    Param[25] = IDD_Static;
    Param[26] = IDDQ_Core;
    Param[27] = IDDQ_IO;
    Param[28] = IDDQ_DAC;
    Param[29] = IDDQ_ADC;
    Param[30] = IDDQ_PBGR;
    Param[31] = IDDQ_ANALOD_DIG;
    Param[32] = vbox_vdd_low;
    Param[33] = vbox_vdd_high;
    Param[34] = vbox_vdds_low;
    Param[35] = vbox_vdds_high;
    Param[36] = via_pre_voltage;
    Param[37] = via_post_voltage;
}
Param ioh {
    Comment = "IOH levels";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "-400uA"; }
        Typ = Expr { String = "-100uA"; }
    }
}
Param iol {
    Comment = "IOL levels";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "100uA"; }
        Max = Expr { String = "2mA"; }
    }
}
Param iozl {
    Comment = "Tristate Leakage Current";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "-100uA"; }
        Max = Expr { String = "30uA"; }
    }
}
Param vdd {
    Comment = "DUT vdd";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "2.72V"; }
        Typ = Expr { String = "3.0V"; }
        Max = Expr { String = "3.6V"; }
    }
}
Param STDF_vdd {
    Comment = "Vdd field for STDF->MBayse logs";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "vdd"; }
    }
}
Param vil {
    Comment = "VIL levels";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "450mV"; }
        Max = Expr { String = "800mV"; }
    }
}
Param vih {
    Comment = "VIH levels";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "2.0V"; }
        Typ = Expr { String = "2.8V"; }
    }
}
Param vol {
    Comment = "VOL levels";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "0.5V"; }
        Max = Expr { String = "0.45V"; }
    }
}
Param voh {
    Comment = "VOH levels";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "2.4V"; }
        Typ = Expr { String = "1.5V"; }
    }
}
Param vref {
    Comment = "VREF levels";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "1.5V"; }
    }
}
Param iil {
    Comment = "Input Leakage Current";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "-1uA"; }
        Max = Expr { String = "2uA"; }
    }
}
Param dynamic_idd {
    Comment = "VDD Dynamic Supply Current";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "1mA"; }
        Max = Expr { String = "900mA"; }
    }
}
Param static_idd {
    Comment = "VDD Static Supply Current";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "1uA"; }
        Max = Expr { String = "10mA"; }
    }
}
Param vdd_stress {
    Comment = "VDD levels for Stress test";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "2.4V"; }
    }
}
Param vdds_stress {
    Comment = "VDDS levels for Stress test";
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "4.8V"; }
    }
}
Param iol_stress {
    Comment = "IOL levels for stress tests";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "iol.Max"; }
    }
}
Param ioh_stress {
    Comment = "IOH levels for stress tests";
    Type = A;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "ioh.Min"; }
    }
}
Param vsb {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "3V"; }
        Typ = Expr { String = "3.3V"; }
        Max = Expr { String = "3.6V"; }
    }
}
Param vdigital {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "2.25V"; }
        Typ = Expr { String = "2.5V"; }
        Max = Expr { String = "4.5V"; }
    }
}
Param avcc {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Min = Expr { String = "1.8V"; }
        Typ = Expr { String = "3.3V"; }
        Max = Expr { String = "5V"; }
    }
}
Param dac_measured_limit {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "1V"; }
    }
}
Param vil_vinp {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "0.75V"; }
    }
}
Param vih_vinp {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "1.25V"; }
    }
}
Param idd_dyn_meas {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "200mA"; }
    }
}
Param IDD_Dynamic {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "50mA"; }
    }
}
Param IDD_Static {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "50mA"; }
    }
}
Param IDDQ_Core {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "100uA"; }
    }
}
Param IDDQ_IO {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "100uA"; }
    }
}
Param IDDQ_DAC {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "1.5mA"; }
    }
}
Param IDDQ_ADC {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "0.1mA"; }
    }
}
Param IDDQ_PBGR {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "1mA"; }
    }
}
Param IDDQ_ANALOD_DIG {
    Type = A;
    Spec = DC_specs;
    cat0 {
        Max = Expr { String = "0.1mA"; }
    }
}
Param vbox_vdd_low {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "0.95V"; }
    }
}
Param vbox_vdd_high {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "3.2V"; }
    }
}
Param vbox_vdds_low {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "1.35V"; }
    }
}
Param vbox_vdds_high {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "5V"; }
    }
}
Param via_pre_voltage {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "50mV"; }
    }
}
Param via_post_voltage {
    Type = V;
    Spec = DC_specs;
    cat0 {
        Typ = Expr { String = "50mV"; }
    }
}
Spec SpecTable {
    Category StdSpec {
        VDD.Min = "1.35V";
        VDD.Typ = "1.5V";
        VDD.Max = "1.65V";
        AVdd.Min = "3.0V";
        AVdd.Typ = "3.3V";
        AVdd.Max = "3.6V";
        IOVdd.Min = "3V";
        IOVdd.Typ = "3.3V";
        IOVdd.Max = "3.6V";
        VilCMOS.Min = "0.0V";
        VilCMOS.Typ = "0.0V";
        VilCMOS.Max = "0V";
        VihCMOS.Min = "IOVdd";
        VihCMOS.Typ = "IOVdd";
        VihCMOS.Max = "IOVdd";
        Vref_3V.Min = "IOVdd";
        Vref_3V.Typ = "3.3V";
        Vref_3V.Max = "3.6V";
        Vil3CMOS.Min = "0V";
        Vil3CMOS.Typ = "0V";
        Vil3CMOS.Max = "0V";
        Vih3CMOS.Min = "IOVdd";
        Vih3CMOS.Typ = "IOVdd";
        Vih3CMOS.Max = "IOVdd";
        VilTTL.Min = "0.0V";
        VilTTL.Typ = "0V";
        VilTTL.Max = "0.0V";
        VihTTL.Min = "IOVdd";
        VihTTL.Typ = "IOVdd";
        VihTTL.Max = "IOVdd";
        VilPECL = "IOVdd-2.00V";
        VihPECL.Min = "IOVdd-1.165V";
        VihPECL.Typ = "IOVdd-0.65V";
        VilPECL_diff = "IOVdd-2.00V";
        VihPECL_diff.Min = "IOVdd-1.165V";
        VihPECL_diff.Typ = "IOVdd-0.88V";
        IilCMOS.Min = "-1uA";
        IilCMOS.Max = "1uA";
        IihCMOS.Min = "-1uA";
        IihCMOS.Max = "1uA";
        Iiil_pullup.Min = "-155uA";
        Iiil_pullup.Max = "-10uA";
        Iih_pulldown.Min = "10uA";
        Iih_pulldown.Max = "155uA";
        Iil3CMOS.Min = "-1uA";
        Iil3CMOS.Max = "1uA";
        Iih3CMOS.Min = "-1uA";
        Iih3CMOS.Max = "1uA";
        IilTTL.Min = "-1uA";
        IilTTL.Max = "1uA";
        IihTTL.Min = "-1uA";
        IihTTL.Max = "1uA";
        IilPECL.Min = "0uA";
        IilPECL.Max = "5uA";
        IihPECL.Min = "-1.1uA";
        IihPECL.Max = "5.6uA";
        IilPECL_diff.Min = "-1.1uA";
        IilPECL_diff.Max = "5.6uA";
        IihPECL_diff.Min = "-1.1uA";
        IihPECL_diff.Max = "5.6uA";
        VolCMOS.Min = "2.2V";
        VolCMOS.Typ = "2.5V";
        VolCMOS.Max = "2.8V";
        VohCMOS.Min = "2.7V";
        VohCMOS.Typ = "3V";
        VohCMOS.Max = "3.3V";
        Vref_CMOS.Min = "2.0V";
        Vref_CMOS.Typ = "2.3V";
        Vref_CMOS.Max = "2.6V";
        Vol3CMOS.Min = "0.5V";
        Vol3CMOS.Typ = "0.5V";
        Vol3CMOS.Max = "0.5V";
        Voh3CMOS = "2.2V";
        Vref_3CMOS = "1.3V";
        VolTTL = "1.0V";
        VohTTL = "2.3V";
        Vref_TTL = "2.0V";
        VolECL = "-1.32V";
        VohECL = "-1.32V";
        Vterm_ECL = "-2.0V";
        VolPECL = "IOVdd-1.32V";
        VohPECL = "IOVdd-1.32V";
        Vterm_PECL = "IOVdd-2.0V";
        Iol8mA.Min = "0mA";
        Iol8mA.Typ = "2mA";
        Iol8mA.Max = "8mA";
        Iol16mA.Min = "0mA";
        Iol16mA.Typ = "2mA";
        Iol16mA.Max = "16mA";
        Iol24mA.Min = "0mA";
        Iol24mA.Typ = "2mA";
        Iol24mA.Max = "24mA";
        Iol48mA.Min = "0mA";
        Iol48mA.Typ = "2mA";
        Iol48mA.Max = "30mA";
        Ioh8mA = "-2mA";
        Ioh16mA = "-2mA";
        Ioh24mA = "-2mA";
        Ioh48mA = "-2mA";
        IozlCMOS.Min = "-10uA";
        IozlCMOS.Max = "10uA";
        IozhCMOS.Min = "-10uA";
        IozhCMOS.Max = "10uA";
        Iozl3CMOS.Min = "20uA";
        Iozl3CMOS.Max = "-20uA";
        Iozh3CMOS.Min = "20uA";
        Iozh3CMOS.Max = "-20uA";
        IozlTTL.Min = "-10uA";
        IozlTTL.Max = "10uA";
        IozhTTL.Min = "-10uA";
        IozhTTL.Max = "10uA";
        Iolod_CMOS.Min = "-10uA";
        Iolod_CMOS.Max = "10uA";
        Iohod_CMOS.Min = "-10uA";
        Iohod_CMOS.Max = "10uA";
        Iolod_TTL.Min = "-10uA";
        Iolod_TTL.Max = "10uA";
        Iohod_TTL.Min = "-10uA";
        Iohod_TTL.Max = "10uA";
        SMS_SRC.Min = "'String_variable and used in the sms to know the selected WAve'";
        SMS_AMP.Min = "0.0";
        SMS_AMP.Max = "8.0";
    }
    Category Std_catagory {
        VDD.Min = "1.35V";
        VDD.Typ = "1.5V";
        VDD.Max = "1.65V";
        AVdd.Min = "3.0V";
        AVdd.Typ = "3.3V";
        AVdd.Max = "3.6V";
        IOVdd.Min = "3V";
        IOVdd.Typ = "3.3V";
        IOVdd.Max = "3.6V";
        VilCMOS.Min = "0.0V";
        VilCMOS.Typ = "0.0V";
        VilCMOS.Max = "0.2*IOVdd";
        VihCMOS.Min = "0.7*IOVdd";
        VihCMOS.Typ = "IOVdd";
        VihCMOS.Max = "IOVdd";
        Vref_3V.Typ = "3.3V";
        Vref_3V.Max = "3.6V";
        Vil3CMOS.Typ = "0V";
        Vil3CMOS.Max = "0.2*Vref_3V";
        Vih3CMOS.Min = "0.7*Vref_3V";
        Vih3CMOS.Typ = "Vref_3V";
        VilTTL.Min = "0.0V";
        VilTTL.Typ = "0V";
        VilTTL.Max = "0.8V";
        VihTTL.Min = "2V";
        VihTTL.Typ = "3V";
        VihTTL.Max = "4.5V";
        VilPECL = "IOVdd-2.00V";
        VihPECL.Min = "IOVdd-1.165V";
        VihPECL.Typ = "IOVdd-0.65V";
        VilPECL_diff = "IOVdd-2.00V";
        VihPECL_diff.Min = "IOVdd-1.165V";
        VihPECL_diff.Typ = "IOVdd-0.88V";
        IilCMOS.Min = "-1uA";
        IilCMOS.Max = "1uA";
        IihCMOS.Min = "-1uA";
        IihCMOS.Max = "1uA";
        Iiil_pullup.Min = "-155uA";
        Iiil_pullup.Max = "-10uA";
        Iih_pulldown.Min = "10uA";
        Iih_pulldown.Max = "155uA";
        Iil3CMOS.Min = "-1uA";
        Iil3CMOS.Max = "1uA";
        Iih3CMOS.Min = "-1uA";
        Iih3CMOS.Max = "1uA";
        IilTTL.Min = "-1uA";
        IilTTL.Max = "1uA";
        IihTTL.Min = "-1uA";
        IihTTL.Max = "1uA";
        IilPECL.Min = "0uA";
        IilPECL.Max = "5uA";
        IihPECL.Min = "-1.1uA";
        IihPECL.Max = "5.6uA";
        IilPECL_diff.Min = "-1.1uA";
        IilPECL_diff.Max = "5.6uA";
        IihPECL_diff.Min = "-1.1uA";
        IihPECL_diff.Max = "5.6uA";
        VolCMOS = "1.0V";
        VohCMOS = "2.4V";
        Vref_CMOS = "1.3V";
        Vol3CMOS = "1.0V";
        Voh3CMOS = "2.2V";
        Vref_3CMOS = "1.3V";
        VolTTL = "1.0V";
        VohTTL = "2.3V";
        Vref_TTL = "2.0V";
        VolECL = "-1.32V";
        VohECL = "-1.32V";
        Vterm_ECL = "-2.0V";
        VolPECL = "IOVdd-1.32V";
        VohPECL = "IOVdd-1.32V";
        Vterm_PECL = "IOVdd-2.0V";
        Iol8mA.Min = "0mA";
        Iol8mA.Typ = "2mA";
        Iol8mA.Max = "8mA";
        Iol16mA.Min = "0mA";
        Iol16mA.Typ = "2mA";
        Iol16mA.Max = "16mA";
        Iol24mA.Min = "0mA";
        Iol24mA.Typ = "2mA";
        Iol24mA.Max = "24mA";
        Iol48mA.Min = "0mA";
        Iol48mA.Typ = "2mA";
        Iol48mA.Max = "30mA";
        Ioh8mA = "-2mA";
        Ioh16mA = "-2mA";
        Ioh24mA = "-2mA";
        Ioh48mA = "-2mA";
        IozlCMOS.Min = "-10uA";
        IozlCMOS.Max = "10uA";
        IozhCMOS.Min = "-10uA";
        IozhCMOS.Max = "10uA";
        Iozl3CMOS.Min = "20uA";
        Iozl3CMOS.Max = "-20uA";
        Iozh3CMOS.Min = "20uA";
        Iozh3CMOS.Max = "-20uA";
        IozlTTL.Min = "-10uA";
        IozlTTL.Max = "10uA";
        IozhTTL.Min = "-10uA";
        IozhTTL.Max = "10uA";
        Iolod_CMOS.Min = "-10uA";
        Iolod_CMOS.Max = "10uA";
        Iohod_CMOS.Min = "-10uA";
        Iohod_CMOS.Max = "10uA";
        Iolod_TTL.Min = "-10uA";
        Iolod_TTL.Max = "10uA";
        Iohod_TTL.Min = "-10uA";
        Iohod_TTL.Max = "10uA";
    }
    Category MinSpec {
        VDD.Min = "1.35V";
        VDD.Typ = "1.35V";
        VDD.Max = "1.35V";
        AVdd.Min = "3.0V";
        AVdd.Typ = "3.0V";
        AVdd.Max = "3.0V";
        IOVdd.Min = "3V";
        IOVdd.Typ = "3V";
        IOVdd.Max = "3V";
        VilCMOS.Min = "0.0V";
        VilCMOS.Typ = "0.0V";
        VilCMOS.Max = "0.0V";
        VihCMOS.Min = "IOVdd";
        VihCMOS.Typ = "IOVdd";
        VihCMOS.Max = "IOVdd";
        Vref_3V.Min = "IOVdd";
        Vref_3V.Typ = "IOVdd";
        Vref_3V.Max = "IOVdd";
        Vil3CMOS.Min = "0V";
        Vil3CMOS.Typ = "0V";
        Vil3CMOS.Max = "0V";
        Vih3CMOS.Min = "IOVdd";
        Vih3CMOS.Typ = "IOVdd";
        Vih3CMOS.Max = "IOVdd";
        VilTTL.Min = "0.0V";
        VilTTL.Typ = "0V";
        VilTTL.Max = "0.0V";
        VihTTL.Min = "IOVdd";
        VihTTL.Typ = "IOVdd";
        VihTTL.Max = "IOVdd";
        VilPECL = "IOVdd-2.00V";
        VihPECL.Min = "IOVdd-1.165V";
        VihPECL.Typ = "IOVdd-0.65V";
        VilPECL_diff = "IOVdd-2.00V";
        VihPECL_diff.Min = "IOVdd-1.165V";
        VihPECL_diff.Typ = "IOVdd-0.88V";
        IilCMOS.Min = "-1uA";
        IilCMOS.Max = "1uA";
        IihCMOS.Min = "-1uA";
        IihCMOS.Max = "1uA";
        Iiil_pullup.Min = "-155uA";
        Iiil_pullup.Max = "-10uA";
        Iih_pulldown.Min = "10uA";
        Iih_pulldown.Max = "155uA";
        Iil3CMOS.Min = "-1uA";
        Iil3CMOS.Max = "1uA";
        Iih3CMOS.Min = "-1uA";
        Iih3CMOS.Max = "1uA";
        IilTTL.Min = "-1uA";
        IilTTL.Max = "1uA";
        IihTTL.Min = "-1uA";
        IihTTL.Max = "1uA";
        IilPECL.Min = "0uA";
        IilPECL.Max = "5uA";
        IihPECL.Min = "-1.1uA";
        IihPECL.Max = "5.6uA";
        IilPECL_diff.Min = "-1.1uA";
        IilPECL_diff.Max = "5.6uA";
        IihPECL_diff.Min = "-1.1uA";
        IihPECL_diff.Max = "5.6uA";
        VolCMOS.Min = "2.2V";
        VolCMOS.Typ = "2.2V";
        VolCMOS.Max = "2.2V";
        VohCMOS.Min = "2.7V";
        VohCMOS.Typ = "2.7V";
        VohCMOS.Max = "2.7V";
        Vref_CMOS.Min = "2.0V";
        Vref_CMOS.Typ = "2.0V";
        Vref_CMOS.Max = "2.0V";
        Vol3CMOS.Min = "0.5V";
        Vol3CMOS.Typ = "0.5V";
        Vol3CMOS.Max = "0.5V";
        Voh3CMOS = "2.2V";
        Vref_3CMOS = "1.3V";
        VolTTL = "1.0V";
        VohTTL = "2.3V";
        Vref_TTL = "2.0V";
        VolECL = "-1.32V";
        VohECL = "-1.32V";
        Vterm_ECL = "-2.0V";
        VolPECL = "IOVdd-1.32V";
        VohPECL = "IOVdd-1.32V";
        Vterm_PECL = "IOVdd-2.0V";
        Iol8mA.Min = "0mA";
        Iol8mA.Typ = "2mA";
        Iol8mA.Max = "8mA";
        Iol16mA.Min = "0mA";
        Iol16mA.Typ = "2mA";
        Iol16mA.Max = "16mA";
        Iol24mA.Min = "0mA";
        Iol24mA.Typ = "2mA";
        Iol24mA.Max = "24mA";
        Iol48mA.Min = "0mA";
        Iol48mA.Typ = "2mA";
        Iol48mA.Max = "30mA";
        Ioh8mA = "-2mA";
        Ioh16mA = "-2mA";
        Ioh24mA = "-2mA";
        Ioh48mA = "-2mA";
        IozlCMOS.Min = "-10uA";
        IozlCMOS.Max = "10uA";
        IozhCMOS.Min = "-10uA";
        IozhCMOS.Max = "10uA";
        Iozl3CMOS.Min = "20uA";
        Iozl3CMOS.Max = "-20uA";
        Iozh3CMOS.Min = "20uA";
        Iozh3CMOS.Max = "-20uA";
        IozlTTL.Min = "-10uA";
        IozlTTL.Max = "10uA";
        IozhTTL.Min = "-10uA";
        IozhTTL.Max = "10uA";
        Iolod_CMOS.Min = "-10uA";
        Iolod_CMOS.Max = "10uA";
        Iohod_CMOS.Min = "-10uA";
        Iohod_CMOS.Max = "10uA";
        Iolod_TTL.Min = "-10uA";
        Iolod_TTL.Max = "10uA";
        Iohod_TTL.Min = "-10uA";
        Iohod_TTL.Max = "10uA";
        SMS_SRC.Min = "'String_variable and used in the sms to know the selected WAve'";
        SMS_AMP.Min = "0.0";
        SMS_AMP.Max = "8.0";
    }
    Category TypSpec {
        VDD.Min = "1.5V";
        VDD.Typ = "1.5V";
        VDD.Max = "1.5V";
        AVdd.Min = "3.3V";
        AVdd.Typ = "3.3V";
        AVdd.Max = "3.3V";
        IOVdd.Min = "3.3V";
        IOVdd.Typ = "3.3V";
        IOVdd.Max = "3.3V";
        VilCMOS.Min = "0.0V";
        VilCMOS.Typ = "0.0V";
        VilCMOS.Max = "0.0V";
        VihCMOS.Min = "IOVdd";
        VihCMOS.Typ = "IOVdd";
        VihCMOS.Max = "IOVdd";
        Vref_3V.Min = "3.3V";
        Vref_3V.Typ = "3.3V";
        Vref_3V.Max = "3.3V";
        Vil3CMOS.Min = "0V";
        Vil3CMOS.Typ = "0V";
        Vil3CMOS.Max = "0V";
        Vih3CMOS.Min = "IOVdd";
        Vih3CMOS.Typ = "IOVdd";
        Vih3CMOS.Max = "IOVdd";
        VilTTL.Min = "0.0V";
        VilTTL.Typ = "0V";
        VilTTL.Max = "0V";
        VihTTL.Min = "IOVdd";
        VihTTL.Typ = "IOVdd";
        VihTTL.Max = "IOVdd";
        VilPECL = "IOVdd-2.00V";
        VihPECL.Min = "IOVdd-1.165V";
        VihPECL.Typ = "IOVdd-0.65V";
        VilPECL_diff = "IOVdd-2.00V";
        VihPECL_diff.Min = "IOVdd-1.165V";
        VihPECL_diff.Typ = "IOVdd-0.88V";
        IilCMOS.Min = "-1uA";
        IilCMOS.Max = "1uA";
        IihCMOS.Min = "-1uA";
        IihCMOS.Max = "1uA";
        Iiil_pullup.Min = "-155uA";
        Iiil_pullup.Max = "-10uA";
        Iih_pulldown.Min = "10uA";
        Iih_pulldown.Max = "155uA";
        Iil3CMOS.Min = "-1uA";
        Iil3CMOS.Max = "1uA";
        Iih3CMOS.Min = "-1uA";
        Iih3CMOS.Max = "1uA";
        IilTTL.Min = "-1uA";
        IilTTL.Max = "1uA";
        IihTTL.Min = "-1uA";
        IihTTL.Max = "1uA";
        IilPECL.Min = "0uA";
        IilPECL.Max = "5uA";
        IihPECL.Min = "-1.1uA";
        IihPECL.Max = "5.6uA";
        IilPECL_diff.Min = "-1.1uA";
        IilPECL_diff.Max = "5.6uA";
        IihPECL_diff.Min = "-1.1uA";
        IihPECL_diff.Max = "5.6uA";
        VolCMOS.Min = "2.5V";
        VolCMOS.Typ = "2.5V";
        VolCMOS.Max = "2.5V";
        VohCMOS.Min = "3V";
        VohCMOS.Typ = "3V";
        VohCMOS.Max = "3V";
        Vref_CMOS.Min = "2.3V";
        Vref_CMOS.Typ = "2.3V";
        Vref_CMOS.Max = "2.3V";
        Vol3CMOS.Min = "0.5V";
        Vol3CMOS.Typ = "0.5V";
        Vol3CMOS.Max = "0.5V";
        Voh3CMOS = "2.2V";
        Vref_3CMOS = "1.3V";
        VolTTL = "1.0V";
        VohTTL = "2.3V";
        Vref_TTL = "2.0V";
        VolECL = "-1.32V";
        VohECL = "-1.32V";
        Vterm_ECL = "-2.0V";
        VolPECL = "IOVdd-1.32V";
        VohPECL = "IOVdd-1.32V";
        Vterm_PECL = "IOVdd-2.0V";
        Iol8mA.Min = "0mA";
        Iol8mA.Typ = "2mA";
        Iol8mA.Max = "8mA";
        Iol16mA.Min = "0mA";
        Iol16mA.Typ = "2mA";
        Iol16mA.Max = "16mA";
        Iol24mA.Min = "0mA";
        Iol24mA.Typ = "2mA";
        Iol24mA.Max = "24mA";
        Iol48mA.Min = "0mA";
        Iol48mA.Typ = "2mA";
        Iol48mA.Max = "30mA";
        Ioh8mA = "-2mA";
        Ioh16mA = "-2mA";
        Ioh24mA = "-2mA";
        Ioh48mA = "-2mA";
        IozlCMOS.Min = "-10uA";
        IozlCMOS.Max = "10uA";
        IozhCMOS.Min = "-10uA";
        IozhCMOS.Max = "10uA";
        Iozl3CMOS.Min = "20uA";
        Iozl3CMOS.Max = "-20uA";
        Iozh3CMOS.Min = "20uA";
        Iozh3CMOS.Max = "-20uA";
        IozlTTL.Min = "-10uA";
        IozlTTL.Max = "10uA";
        IozhTTL.Min = "-10uA";
        IozhTTL.Max = "10uA";
        Iolod_CMOS.Min = "-10uA";
        Iolod_CMOS.Max = "10uA";
        Iohod_CMOS.Min = "-10uA";
        Iohod_CMOS.Max = "10uA";
        Iolod_TTL.Min = "-10uA";
        Iolod_TTL.Max = "10uA";
        Iohod_TTL.Min = "-10uA";
        Iohod_TTL.Max = "10uA";
        SMS_SRC.Min = "'String_variable and used in the sms to know the selected WAve'";
        SMS_AMP.Min = "0.0";
        SMS_AMP.Max = "8.0";
    }
    Category MaxSpec {
        VDD.Min = "1.65V";
        VDD.Typ = "1.65V";
        VDD.Max = "1.65V";
        AVdd.Min = "3.6V";
        AVdd.Typ = "3.6V";
        AVdd.Max = "3.6V";
        IOVdd.Min = "3.6V";
        IOVdd.Typ = "3.6V";
        IOVdd.Max = "3.6V";
        VilCMOS.Min = "0.0V";
        VilCMOS.Typ = "0.0V";
        VilCMOS.Max = "0V";
        VihCMOS.Min = "IOVdd";
        VihCMOS.Typ = "IOVdd";
        VihCMOS.Max = "IOVdd";
        Vref_3V.Min = "IOVdd";
        Vref_3V.Typ = "3.6V";
        Vref_3V.Max = "3.6V";
        Vil3CMOS.Min = "0V";
        Vil3CMOS.Typ = "0V";
        Vil3CMOS.Max = "0V";
        Vih3CMOS.Min = "IOVdd";
        Vih3CMOS.Typ = "IOVdd";
        Vih3CMOS.Max = "IOVdd";
        VilTTL.Min = "0.0V";
        VilTTL.Typ = "0V";
        VilTTL.Max = "0.0V";
        VihTTL.Min = "IOVdd";
        VihTTL.Typ = "IOVdd";
        VihTTL.Max = "IOVdd";
        VilPECL = "IOVdd-2.00V";
        VihPECL.Min = "IOVdd-1.165V";
        VihPECL.Typ = "IOVdd-0.65V";
        VilPECL_diff = "IOVdd-2.00V";
        VihPECL_diff.Min = "IOVdd-1.165V";
        VihPECL_diff.Typ = "IOVdd-0.88V";
        IilCMOS.Min = "-1uA";
        IilCMOS.Max = "1uA";
        IihCMOS.Min = "-1uA";
        IihCMOS.Max = "1uA";
        Iiil_pullup.Min = "-155uA";
        Iiil_pullup.Max = "-10uA";
        Iih_pulldown.Min = "10uA";
        Iih_pulldown.Max = "155uA";
        Iil3CMOS.Min = "-1uA";
        Iil3CMOS.Max = "1uA";
        Iih3CMOS.Min = "-1uA";
        Iih3CMOS.Max = "1uA";
        IilTTL.Min = "-1uA";
        IilTTL.Max = "1uA";
        IihTTL.Min = "-1uA";
        IihTTL.Max = "1uA";
        IilPECL.Min = "0uA";
        IilPECL.Max = "5uA";
        IihPECL.Min = "-1.1uA";
        IihPECL.Max = "5.6uA";
        IilPECL_diff.Min = "-1.1uA";
        IilPECL_diff.Max = "5.6uA";
        IihPECL_diff.Min = "-1.1uA";
        IihPECL_diff.Max = "5.6uA";
        VolCMOS.Min = "2.2V";
        VolCMOS.Typ = "2.5V";
        VolCMOS.Max = "2.8V";
        VohCMOS.Min = "2.7V";
        VohCMOS.Typ = "3V";
        VohCMOS.Max = "3.3V";
        Vref_CMOS.Min = "2.0V";
        Vref_CMOS.Typ = "2.3V";
        Vref_CMOS.Max = "2.6V";
        Vol3CMOS.Min = "0.5V";
        Vol3CMOS.Typ = "0.5V";
        Vol3CMOS.Max = "0.5V";
        Voh3CMOS = "2.2V";
        Vref_3CMOS = "1.3V";
        VolTTL = "1.0V";
        VohTTL = "2.3V";
        Vref_TTL = "2.0V";
        VolECL = "-1.32V";
        VohECL = "-1.32V";
        Vterm_ECL = "-2.0V";
        VolPECL = "IOVdd-1.32V";
        VohPECL = "IOVdd-1.32V";
        Vterm_PECL = "IOVdd-2.0V";
        Iol8mA.Min = "0mA";
        Iol8mA.Typ = "2mA";
        Iol8mA.Max = "8mA";
        Iol16mA.Min = "0mA";
        Iol16mA.Typ = "2mA";
        Iol16mA.Max = "16mA";
        Iol24mA.Min = "0mA";
        Iol24mA.Typ = "2mA";
        Iol24mA.Max = "24mA";
        Iol48mA.Min = "0mA";
        Iol48mA.Typ = "2mA";
        Iol48mA.Max = "30mA";
        Ioh8mA = "-2mA";
        Ioh16mA = "-2mA";
        Ioh24mA = "-2mA";
        Ioh48mA = "-2mA";
        IozlCMOS.Min = "-10uA";
        IozlCMOS.Max = "10uA";
        IozhCMOS.Min = "-10uA";
        IozhCMOS.Max = "10uA";
        Iozl3CMOS.Min = "20uA";
        Iozl3CMOS.Max = "-20uA";
        Iozh3CMOS.Min = "20uA";
        Iozh3CMOS.Max = "-20uA";
        IozlTTL.Min = "-10uA";
        IozlTTL.Max = "10uA";
        IozhTTL.Min = "-10uA";
        IozhTTL.Max = "10uA";
        Iolod_CMOS.Min = "-10uA";
        Iolod_CMOS.Max = "10uA";
        Iohod_CMOS.Min = "-10uA";
        Iohod_CMOS.Max = "10uA";
        Iolod_TTL.Min = "-10uA";
        Iolod_TTL.Max = "10uA";
        Iohod_TTL.Min = "-10uA";
        Iohod_TTL.Max = "10uA";
        SMS_SRC.Min = "'String_variable and used in the sms to know the selected WAve'";
        SMS_AMP.Min = "0.0";
        SMS_AMP.Max = "8.0";
    }
    ParamGlobals {
            VDD { Type = V; }
            AVdd { Type = V; }
            IOVdd { Type = V; }
            VilCMOS { Type = V; }
            VihCMOS { Type = V; }
            Vref_3V { Type = V; }
            Vil3CMOS { Type = V; }
            Vih3CMOS { Type = V; }
            VilTTL { Type = V; }
            VihTTL { Type = V; }
            VilPECL { Type = V; Comment = "For CLOCK pins see TI TCL, VIH,VIL"; }
            VihPECL { Type = V; Comment = "For CLOCK pins see TI TCL, VIH,VIL"; }
            VilPECL_diff { Type = V; }
            VihPECL_diff { Type = V; }
            IilCMOS { Type = A; }
            IihCMOS { Type = A; }
            Iiil_pullup { Type = A; }
            Iih_pulldown { Type = A; }
            Iil3CMOS { Type = A; }
            Iih3CMOS { Type = A; }
            IilTTL { Type = A; }
            IihTTL { Type = A; }
            IilPECL { Type = A; }
            IihPECL { Type = A; }
            IilPECL_diff { Type = A; }
            IihPECL_diff { Type = A; }
            VolCMOS { Type = V; }
            VohCMOS { Type = V; }
            Vref_CMOS { Type = V; }
            Vol3CMOS { Type = V; }
            Voh3CMOS { Type = V; }
            Vref_3CMOS { Type = V; }
            VolTTL { Type = V; }
            VohTTL { Type = V; }
            Vref_TTL { Type = V; }
            VolECL { Type = V; }
            VohECL { Type = V; }
            Vterm_ECL { Type = V; }
            VolPECL { Type = V; }
            VohPECL { Type = V; }
            Vterm_PECL { Type = V; }
            Iol8mA { Type = A; }
            Iol16mA { Type = A; }
            Iol24mA { Type = A; }
            Iol48mA { Type = A; }
            Ioh8mA { Type = A; }
            Ioh16mA { Type = A; }
            Ioh24mA { Type = A; }
            Ioh48mA { Type = A; }
            IozlCMOS { Type = A; }
            IozhCMOS { Type = A; }
            Iozl3CMOS { Type = A; }
            Iozh3CMOS { Type = A; }
            IozlTTL { Type = A; }
            IozhTTL { Type = A; }
            Iolod_CMOS { Type = A; }
            Iohod_CMOS { Type = A; }
            Iolod_TTL { Type = A; }
            Iohod_TTL { Type = A; }
            SMS_SRC { Type = STRING; }
            SMS_AMP { Type = SCALAR; }
    }
}
Spec AC_SpecTable {
    Category Cat0 {
        tClkle1_t3_por_0 = "0.00ns";
        tClkle1_t3_por_bypass_0 = "0.00ns";
        tClkle1_t3_100bt_clk_out_phase_2 = "2.00ns";
        tClkle1_t3_100bt_clk_out_phase_6 = "6.00ns";
        tClkle1_t3_100bt_std_2 = "2.00ns";
        tClkle1_t3_100bt_std_6 = "6.00ns";
        tClkle1_t3_100bt_tx_clkout_2 = "2.00ns";
        tClkle1_t3_100bt_tx_clkout_6 = "6.00ns";
        tClkle1_t3_10bt_rcv_clkout_2 = "2.00ns";
        tClkle1_t3_10bt_rcv_clkout_6 = "6.00ns";
        tClkle1_t3_10bt_std_2 = "2.00ns";
        tClkle1_t3_10bt_std_6 = "6.00ns";
        tClkle1_t3_adc_bandgap_2 = "2.00ns";
        tClkle1_t3_adc_bandgap_6 = "6.00ns";
        tClkle1_t3_adc_disable_2 = "2.00ns";
        tClkle1_t3_adc_disable_6 = "6.00ns";
        tClkle1_t3_adc_enable_obs_2 = "2.00ns";
        tClkle1_t3_adc_enable_obs_6 = "6.00ns";
        tClkle1_t3_adc_gain7_6 = "6.00ns";
        tClkle1_t3_adc_gain7_convert_6 = "6.00ns";
        tClkle1_t3_adc_gain_000_2 = "2.00ns";
        tClkle1_t3_adc_gain_000_6 = "6.00ns";
        tClkle1_t3_sqlpf_ex_2 = "2.00ns";
        tClkle1_t3_sqlpf_ex_6 = "6.00ns";
        tClkle1_t3_sqlpf_std_2 = "2.00ns";
        tClkle1_t3_sqlpf_std_6 = "6.00ns";
        tClkte0_t3_por_100 = "100.00ns";
        tClkte0_t3_por_bypass_100 = "100.00ns";
        tClkte0_t3_100bt_clk_out_phase_100 = "100.00ns";
        tClkte0_t3_100bt_std_100 = "100.00ns";
        tClkte0_t3_100bt_tx_clkout_100 = "100.00ns";
        tClkte0_t3_10bt_rcv_clkout_100 = "100.00ns";
        tClkte0_t3_10bt_std_100 = "100.00ns";
        tClkte0_t3_adc_bandgap_100 = "100.00ns";
        tClkte0_t3_adc_disable_100 = "100.00ns";
        tClkte0_t3_adc_enable_obs_100 = "100.00ns";
        tClkte0_t3_adc_gain7_100 = "100.00ns";
        tClkte0_t3_adc_gain7_convert_100 = "100.00ns";
        tClkte0_t3_adc_gain_000_100 = "100.00ns";
        tClkte0_t3_sqlpf_ex_100 = "100.00ns";
        tClkte0_t3_sqlpf_std_100 = "100.00ns";
        tCmp_t3_por_190 = "190.00ns";
        tCmp_t3_por_bypass_190 = "190.00ns";
        tCmp_t3_100bt_clk_out_phase_190 = "190.00ns";
        tCmp_t3_100bt_std_190 = "190.00ns";
        tCmp_t3_100bt_tx_clkout_190 = "190.00ns";
        tCmp_t3_10bt_rcv_clkout_190 = "190.00ns";
        tCmp_t3_10bt_std_190 = "190.00ns";
        tCmp_t3_adc_bandgap_190 = "190.00ns";
        tCmp_t3_adc_disable_190 = "190.00ns";
        tCmp_t3_adc_enable_obs_190 = "190.00ns";
        tCmp_t3_adc_gain7_190 = "190.00ns";
        tCmp_t3_adc_gain7_convert_190 = "190.00ns";
        tCmp_t3_adc_gain_000_190 = "190.00ns";
        tCmp_t3_sqlpf_ex_190 = "190.00ns";
        tCmp_t3_sqlpf_std_190 = "190.00ns";
        tDrv_t3_por_0 = "0.00ns";
        tDrv_t3_por_bypass_0 = "0.00ns";
        tDrv_t3_100bt_clk_out_phase_0 = "0.00ns";
        tDrv_t3_100bt_clk_out_phase_1 = "1.00ns";
        tDrv_t3_100bt_clk_out_phase_20 = "20.00ns";
        tDrv_t3_100bt_clk_out_phase_27 = "27.00ns";
        tDrv_t3_100bt_clk_out_phase_50 = "50.00ns";
        tDrv_t3_100bt_clk_out_phase_60 = "60.00ns";
        tDrv_t3_100bt_std_0 = "0.00ns";
        tDrv_t3_100bt_std_1 = "1.00ns";
        tDrv_t3_100bt_std_20 = "20.00ns";
        tDrv_t3_100bt_std_27 = "27.00ns";
        tDrv_t3_100bt_std_50 = "50.00ns";
        tDrv_t3_100bt_std_60 = "60.00ns";
        tDrv_t3_100bt_tx_clkout_0 = "0.00ns";
        tDrv_t3_100bt_tx_clkout_1 = "1.00ns";
        tDrv_t3_100bt_tx_clkout_20 = "20.00ns";
        tDrv_t3_100bt_tx_clkout_27 = "27.00ns";
        tDrv_t3_100bt_tx_clkout_50 = "50.00ns";
        tDrv_t3_100bt_tx_clkout_60 = "60.00ns";
        tDrv_t3_10bt_rcv_clkout_0 = "0.00ns";
        tDrv_t3_10bt_rcv_clkout_1 = "1.00ns";
        tDrv_t3_10bt_rcv_clkout_20 = "20.00ns";
        tDrv_t3_10bt_rcv_clkout_27 = "27.00ns";
        tDrv_t3_10bt_rcv_clkout_50 = "50.00ns";
        tDrv_t3_10bt_rcv_clkout_60 = "60.00ns";
        tDrv_t3_10bt_std_0 = "0.00ns";
        tDrv_t3_10bt_std_1 = "1.00ns";
        tDrv_t3_10bt_std_20 = "20.00ns";
        tDrv_t3_10bt_std_27 = "27.00ns";
        tDrv_t3_10bt_std_50 = "50.00ns";
        tDrv_t3_10bt_std_60 = "60.00ns";
        tDrv_t3_adc_bandgap_0 = "0.00ns";
        tDrv_t3_adc_bandgap_1 = "1.00ns";
        tDrv_t3_adc_bandgap_20 = "20.00ns";
        tDrv_t3_adc_bandgap_27 = "27.00ns";
        tDrv_t3_adc_bandgap_50 = "50.00ns";
        tDrv_t3_adc_bandgap_60 = "60.00ns";
        tDrv_t3_adc_disable_0 = "0.00ns";
        tDrv_t3_adc_disable_1 = "1.00ns";
        tDrv_t3_adc_disable_20 = "20.00ns";
        tDrv_t3_adc_disable_27 = "27.00ns";
        tDrv_t3_adc_disable_50 = "50.00ns";
        tDrv_t3_adc_disable_60 = "60.00ns";
        tDrv_t3_adc_enable_obs_0 = "0.00ns";
        tDrv_t3_adc_enable_obs_1 = "1.00ns";
        tDrv_t3_adc_enable_obs_20 = "20.00ns";
        tDrv_t3_adc_enable_obs_27 = "27.00ns";
        tDrv_t3_adc_enable_obs_50 = "50.00ns";
        tDrv_t3_adc_enable_obs_60 = "60.00ns";
        tDrv_t3_adc_gain7_0 = "0.00ns";
        tDrv_t3_adc_gain7_1 = "1.00ns";
        tDrv_t3_adc_gain7_20 = "20.00ns";
        tDrv_t3_adc_gain7_27 = "27.00ns";
        tDrv_t3_adc_gain7_50 = "50.00ns";
        tDrv_t3_adc_gain7_60 = "60.00ns";
        tDrv_t3_adc_gain7_convert_0 = "0.00ns";
        tDrv_t3_adc_gain7_convert_1 = "1.00ns";
        tDrv_t3_adc_gain7_convert_20 = "20.00ns";
        tDrv_t3_adc_gain7_convert_27 = "27.00ns";
        tDrv_t3_adc_gain7_convert_50 = "50.00ns";
        tDrv_t3_adc_gain7_convert_60 = "60.00ns";
        tDrv_t3_adc_gain_000_0 = "0.00ns";
        tDrv_t3_adc_gain_000_1 = "1.00ns";
        tDrv_t3_adc_gain_000_20 = "20.00ns";
        tDrv_t3_adc_gain_000_27 = "27.00ns";
        tDrv_t3_adc_gain_000_50 = "50.00ns";
        tDrv_t3_adc_gain_000_60 = "60.00ns";
        tDrv_t3_sqlpf_ex_0 = "0.00ns";
        tDrv_t3_sqlpf_ex_1 = "1.00ns";
        tDrv_t3_sqlpf_ex_20 = "20.00ns";
        tDrv_t3_sqlpf_ex_27 = "27.00ns";
        tDrv_t3_sqlpf_ex_50 = "50.00ns";
        tDrv_t3_sqlpf_ex_60 = "60.00ns";
        tDrv_t3_sqlpf_std_0 = "0.00ns";
        tDrv_t3_sqlpf_std_1 = "1.00ns";
        tDrv_t3_sqlpf_std_20 = "20.00ns";
        tDrv_t3_sqlpf_std_27 = "27.00ns";
        tDrv_t3_sqlpf_std_50 = "50.00ns";
        tDrv_t3_sqlpf_std_60 = "60.00ns";
        tPer_t3_por_200 = "200.00ns";
        tPer_t3_por_bypass_200 = "200.00ns";
        tPer_t3_100bt_clk_out_phase_200 = "200.00ns";
        tPer_t3_100bt_std_200 = "200.00ns";
        tPer_t3_100bt_tx_clkout_200 = "200.00ns";
        tPer_t3_10bt_rcv_clkout_200 = "200.00ns";
        tPer_t3_10bt_std_200 = "200.00ns";
        tPer_t3_adc_bandgap_200 = "200.00ns";
        tPer_t3_adc_disable_200 = "200.00ns";
        tPer_t3_adc_enable_obs_200 = "200.00ns";
        tPer_t3_adc_gain7_200 = "200.00ns";
        tPer_t3_adc_gain7_convert_200 = "200.00ns";
        tPer_t3_adc_gain_000_200 = "200.00ns";
        tPer_t3_sqlpf_ex_200 = "200.00ns";
        tPer_t3_sqlpf_std_200 = "200.00ns";
    }
    ParamGlobals {
            tClkle1_t3_por_0 { Type = s; }
            tClkle1_t3_por_bypass_0 { Type = s; }
            tClkle1_t3_100bt_clk_out_phase_2 { Type = s; }
            tClkle1_t3_100bt_clk_out_phase_6 { Type = s; }
            tClkle1_t3_100bt_std_2 { Type = s; }
            tClkle1_t3_100bt_std_6 { Type = s; }
            tClkle1_t3_100bt_tx_clkout_2 { Type = s; }
            tClkle1_t3_100bt_tx_clkout_6 { Type = s; }
            tClkle1_t3_10bt_rcv_clkout_2 { Type = s; }
            tClkle1_t3_10bt_rcv_clkout_6 { Type = s; }
            tClkle1_t3_10bt_std_2 { Type = s; }
            tClkle1_t3_10bt_std_6 { Type = s; }
            tClkle1_t3_adc_bandgap_2 { Type = s; }
            tClkle1_t3_adc_bandgap_6 { Type = s; }
            tClkle1_t3_adc_disable_2 { Type = s; }
            tClkle1_t3_adc_disable_6 { Type = s; }
            tClkle1_t3_adc_enable_obs_2 { Type = s; }
            tClkle1_t3_adc_enable_obs_6 { Type = s; }
            tClkle1_t3_adc_gain7_6 { Type = s; }
            tClkle1_t3_adc_gain7_convert_6 { Type = s; }
            tClkle1_t3_adc_gain_000_2 { Type = s; }
            tClkle1_t3_adc_gain_000_6 { Type = s; }
            tClkle1_t3_sqlpf_ex_2 { Type = s; }
            tClkle1_t3_sqlpf_ex_6 { Type = s; }
            tClkle1_t3_sqlpf_std_2 { Type = s; }
            tClkle1_t3_sqlpf_std_6 { Type = s; }
            tClkte0_t3_por_100 { Type = s; }
            tClkte0_t3_por_bypass_100 { Type = s; }
            tClkte0_t3_100bt_clk_out_phase_100 { Type = s; }
            tClkte0_t3_100bt_std_100 { Type = s; }
            tClkte0_t3_100bt_tx_clkout_100 { Type = s; }
            tClkte0_t3_10bt_rcv_clkout_100 { Type = s; }
            tClkte0_t3_10bt_std_100 { Type = s; }
            tClkte0_t3_adc_bandgap_100 { Type = s; }
            tClkte0_t3_adc_disable_100 { Type = s; }
            tClkte0_t3_adc_enable_obs_100 { Type = s; }
            tClkte0_t3_adc_gain7_100 { Type = s; }
            tClkte0_t3_adc_gain7_convert_100 { Type = s; }
            tClkte0_t3_adc_gain_000_100 { Type = s; }
            tClkte0_t3_sqlpf_ex_100 { Type = s; }
            tClkte0_t3_sqlpf_std_100 { Type = s; }
            tCmp_t3_por_190 { Type = s; }
            tCmp_t3_por_bypass_190 { Type = s; }
            tCmp_t3_100bt_clk_out_phase_190 { Type = s; }
            tCmp_t3_100bt_std_190 { Type = s; }
            tCmp_t3_100bt_tx_clkout_190 { Type = s; }
            tCmp_t3_10bt_rcv_clkout_190 { Type = s; }
            tCmp_t3_10bt_std_190 { Type = s; }
            tCmp_t3_adc_bandgap_190 { Type = s; }
            tCmp_t3_adc_disable_190 { Type = s; }
            tCmp_t3_adc_enable_obs_190 { Type = s; }
            tCmp_t3_adc_gain7_190 { Type = s; }
            tCmp_t3_adc_gain7_convert_190 { Type = s; }
            tCmp_t3_adc_gain_000_190 { Type = s; }
            tCmp_t3_sqlpf_ex_190 { Type = s; }
            tCmp_t3_sqlpf_std_190 { Type = s; }
            tDrv_t3_por_0 { Type = s; }
            tDrv_t3_por_bypass_0 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_0 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_1 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_20 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_27 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_50 { Type = s; }
            tDrv_t3_100bt_clk_out_phase_60 { Type = s; }
            tDrv_t3_100bt_std_0 { Type = s; }
            tDrv_t3_100bt_std_1 { Type = s; }
            tDrv_t3_100bt_std_20 { Type = s; }
            tDrv_t3_100bt_std_27 { Type = s; }
            tDrv_t3_100bt_std_50 { Type = s; }
            tDrv_t3_100bt_std_60 { Type = s; }
            tDrv_t3_100bt_tx_clkout_0 { Type = s; }
            tDrv_t3_100bt_tx_clkout_1 { Type = s; }
            tDrv_t3_100bt_tx_clkout_20 { Type = s; }
            tDrv_t3_100bt_tx_clkout_27 { Type = s; }
            tDrv_t3_100bt_tx_clkout_50 { Type = s; }
            tDrv_t3_100bt_tx_clkout_60 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_0 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_1 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_20 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_27 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_50 { Type = s; }
            tDrv_t3_10bt_rcv_clkout_60 { Type = s; }
            tDrv_t3_10bt_std_0 { Type = s; }
            tDrv_t3_10bt_std_1 { Type = s; }
            tDrv_t3_10bt_std_20 { Type = s; }
            tDrv_t3_10bt_std_27 { Type = s; }
            tDrv_t3_10bt_std_50 { Type = s; }
            tDrv_t3_10bt_std_60 { Type = s; }
            tDrv_t3_adc_bandgap_0 { Type = s; }
            tDrv_t3_adc_bandgap_1 { Type = s; }
            tDrv_t3_adc_bandgap_20 { Type = s; }
            tDrv_t3_adc_bandgap_27 { Type = s; }
            tDrv_t3_adc_bandgap_50 { Type = s; }
            tDrv_t3_adc_bandgap_60 { Type = s; }
            tDrv_t3_adc_disable_0 { Type = s; }
            tDrv_t3_adc_disable_1 { Type = s; }
            tDrv_t3_adc_disable_20 { Type = s; }
            tDrv_t3_adc_disable_27 { Type = s; }
            tDrv_t3_adc_disable_50 { Type = s; }
            tDrv_t3_adc_disable_60 { Type = s; }
            tDrv_t3_adc_enable_obs_0 { Type = s; }
            tDrv_t3_adc_enable_obs_1 { Type = s; }
            tDrv_t3_adc_enable_obs_20 { Type = s; }
            tDrv_t3_adc_enable_obs_27 { Type = s; }
            tDrv_t3_adc_enable_obs_50 { Type = s; }
            tDrv_t3_adc_enable_obs_60 { Type = s; }
            tDrv_t3_adc_gain7_0 { Type = s; }
            tDrv_t3_adc_gain7_1 { Type = s; }
            tDrv_t3_adc_gain7_20 { Type = s; }
            tDrv_t3_adc_gain7_27 { Type = s; }
            tDrv_t3_adc_gain7_50 { Type = s; }
            tDrv_t3_adc_gain7_60 { Type = s; }
            tDrv_t3_adc_gain7_convert_0 { Type = s; }
            tDrv_t3_adc_gain7_convert_1 { Type = s; }
            tDrv_t3_adc_gain7_convert_20 { Type = s; }
            tDrv_t3_adc_gain7_convert_27 { Type = s; }
            tDrv_t3_adc_gain7_convert_50 { Type = s; }
            tDrv_t3_adc_gain7_convert_60 { Type = s; }
            tDrv_t3_adc_gain_000_0 { Type = s; }
            tDrv_t3_adc_gain_000_1 { Type = s; }
            tDrv_t3_adc_gain_000_20 { Type = s; }
            tDrv_t3_adc_gain_000_27 { Type = s; }
            tDrv_t3_adc_gain_000_50 { Type = s; }
            tDrv_t3_adc_gain_000_60 { Type = s; }
            tDrv_t3_sqlpf_ex_0 { Type = s; }
            tDrv_t3_sqlpf_ex_1 { Type = s; }
            tDrv_t3_sqlpf_ex_20 { Type = s; }
            tDrv_t3_sqlpf_ex_27 { Type = s; }
            tDrv_t3_sqlpf_ex_50 { Type = s; }
            tDrv_t3_sqlpf_ex_60 { Type = s; }
            tDrv_t3_sqlpf_std_0 { Type = s; }
            tDrv_t3_sqlpf_std_1 { Type = s; }
            tDrv_t3_sqlpf_std_20 { Type = s; }
            tDrv_t3_sqlpf_std_27 { Type = s; }
            tDrv_t3_sqlpf_std_50 { Type = s; }
            tDrv_t3_sqlpf_std_60 { Type = s; }
            tPer_t3_por_200 { Type = s; }
            tPer_t3_por_bypass_200 { Type = s; }
            tPer_t3_100bt_clk_out_phase_200 { Type = s; }
            tPer_t3_100bt_std_200 { Type = s; }
            tPer_t3_100bt_tx_clkout_200 { Type = s; }
            tPer_t3_10bt_rcv_clkout_200 { Type = s; }
            tPer_t3_10bt_std_200 { Type = s; }
            tPer_t3_adc_bandgap_200 { Type = s; }
            tPer_t3_adc_disable_200 { Type = s; }
            tPer_t3_adc_enable_obs_200 { Type = s; }
            tPer_t3_adc_gain7_200 { Type = s; }
            tPer_t3_adc_gain7_convert_200 { Type = s; }
            tPer_t3_adc_gain_000_200 { Type = s; }
            tPer_t3_sqlpf_ex_200 { Type = s; }
            tPer_t3_sqlpf_std_200 { Type = s; }
    }
}
Spec ADC_SpecTable {
    Category Cat0 {
        PHY0_sel.Typ = "TRUE";
        PHY0_sel.Max = "False";
        PHY1_sel = "TRUE";
        Source_M.Min = "33";
        Source_M.Typ = "839";
        Source_M.Max = "1673";
        Source_N.Min = "4096";
        Source_N.Typ = "8192";
        Source_N.Max = "8192";
        Source_SampleRate.Min = "125MHz";
        Source_SampleRate.Max = "250MHz";
        DPRO_SampleRate.Min = "17ns";
        DPRO_SampleRate.Typ = "WFT_ADC_GAIN.Period";
        DPRO_Samples.Typ = "8192";
        DPRO_Samples.Max = "16384";
        SMSFreqUsed.Min = "1";
        SMSFreqUsed.Typ = "2";
        SMSFreqUsed.Max = "3";
        SMSFirstRun.Min = "FALSE";
        SMSFirstRun.Max = "TRUE";
        ENOB_limit.Min = "3.8";
        ENOB_limit.Typ = "3.8";
        ENOB_limit.Max = "5.06";
        SNR_limit.Min = "-24dB";
        SNR_limit.Typ = "-25dB";
        SNR_limit.Max = "-34dB";
        THD_limit.Min = "-26dB+2dB";
        THD_limit.Typ = "-26dB";
        THD_limit.Max = "-28.5dB";
        INL_limit.Min = "-0.5";
        INL_limit.Typ = "0";
        INL_limit.Max = "0.5";
        DNL_limit.Min = "-0.5";
        DNL_limit.Typ = "0";
        DNL_limit.Max = "0.5";
        GainLoopCounter.Min = "0";
        GainLoopCounter.Max = "3";
        GainLoopCounter_higain.Min = "4";
        GainLoopCounter_higain.Max = "7";
        INL_30MHz_limit.Min = "-3";
        INL_30MHz_limit.Typ = "0";
        INL_30MHz_limit.Max = "3";
        DNL_30MHz_limit.Min = "-1.5";
        DNL_30MHz_limit.Typ = "0";
        DNL_30MHz_limit.Max = "1.5";
        InitAttSet1MHz = "0.4";
        InitAttSet30MHz = "0.5";
        InitAttSet60MHz = "0.5";
        SMSAmpMult1MHz.Min = "2.0";
        SMSAmpMult1MHz.Typ = "2.48";
        SMSAmpMult1MHz.Max = "4.0";
        SMSAmpMult30MHz.Min = "2";
        SMSAmpMult30MHz.Typ = "2.48";
        SMSAmpMult30MHz.Max = "4";
        SMSAmpMult60MHz.Min = "2";
        SMSAmpMult60MHz.Typ = "2.48";
        SMSAmpMult60MHz.Max = "4.5";
        SMSAmpMult1MHz_higain.Min = "1";
        SMSAmpMult1MHz_higain.Typ = "1.9";
        SMSAmpMult1MHz_higain.Max = "3";
        SMSAmpMult30MHz_higain.Min = "1";
        SMSAmpMult30MHz_higain.Typ = "2.2";
        SMSAmpMult30MHz_higain.Max = "3";
        SMSAmpMult60MHz_higain.Min = "1";
        SMSAmpMult60MHz_higain.Typ = "2.75";
        SMSAmpMult60MHz_higain.Max = "3";
        mux_offset = "adc_per/2";
        adc_per = "1/62.5MHz";
        clk_out_coarse.Min = "0ns";
        clk_out_coarse.Typ = "1ns";
        clk_out_coarse.Max = "adc_per*1/2";
        clk_out_offset.Min = "0ns";
        clk_out_offset.Typ = "adc_per/8";
        clk_out_offset.Max = "adc_per/4";
        clk_out_voh.Min = "0V";
        clk_out_voh.Typ = "1.5V";
        clk_out_voh.Max = "AVdd";
        transmit_100bt_period = "1/50MHz";
        period_100bt_tx.Min = ".Typ*.99";
        period_100bt_tx.Typ = "40ns";
        period_100bt_tx.Max = ".Typ*1.08";
        jitter_100bt_tx.Min = "-1ns";
        jitter_100bt_tx.Typ = "0ns";
        jitter_100bt_tx.Max = "1ns";
        pw_distortion_100bt_tx.Min = "0ns";
        pw_distortion_100bt_tx.Max = "0.5ns";
        risefall_100bt_tx.Min = "3ns";
        risefall_100bt_tx.Typ = "4ns";
        risefall_100bt_tx.Max = "5ns";
        risefall_100bt_tx_match.Min = "0ns";
        risefall_100bt_tx_match.Typ = "500ps";
        risefall_100bt_tx_match.Max = "500ps";
        risefall_10bt_tx.Min = "25ns";
        risefall_10bt_tx.Typ = "35ns";
        risefall_10bt_tx.Max = "45ns";
        risefall_10bt_tx_match.Min = "0ns";
        risefall_10bt_tx_match.Typ = "5ns";
        risefall_10bt_tx_match.Max = "10ns";
        pll10_clk_freq.Min = ".Typ*.995";
        pll10_clk_freq.Typ = "20MHz";
        pll10_clk_freq.Max = ".Typ*1.005";
        pll10_clk_jitter.Min = "0ns";
        pll10_clk_jitter.Typ = "10ns";
        pll10_clk_jitter.Max = "500ps";
        tx_10bt_data_offset.Min = "0Hz";
        tx_10bt_data_offset.Typ = "pll10_clk_freq/4.0*0.005";
        tx_10bt_data_offset.Max = "200kHz";
        tx_10bt_rcv_freq.Min = ".Typ*.99";
        tx_10bt_rcv_freq.Typ = "pll10_clk_freq";
        tx_10bt_rcv_freq.Max = ".Typ*1.01";
        pll10_rcv_lo_freq.Min = ".Typ*.99";
        pll10_rcv_lo_freq.Typ = "(pll10_clk_freq+tx_10bt_data_offset)";
        pll10_rcv_lo_freq.Max = ".Typ*1.01";
        tx_10bt_rcv_input_freq.Min = "(pll10_clk_freq-tx_10bt_data_offset)/4.0";
        tx_10bt_rcv_input_freq.Typ = "pll10_clk_freq/4.0";
        tx_10bt_rcv_input_freq.Max = "(pll10_clk_freq+tx_10bt_data_offset)/4.0";
        tx_10bt_short_width.Min = "37ns";
        tx_10bt_short_width.Typ = "50ns";
        tx_10bt_short_width.Max = "63ns";
        tx_10bt_long_width.Min = "87ns";
        tx_10bt_long_width.Typ = "100ns";
        tx_10bt_long_width.Max = "113ns";
        pll10_jitter.Min = "-650ps";
        pll10_jitter.Typ = "0ns";
        pll10_jitter.Max = "650ps";
        tx_10bt_short_per.Min = "87ns";
        tx_10bt_short_per.Typ = "100ns";
        tx_10bt_short_per.Max = "113ns";
        tx_10bt_long_per.Min = "187ns";
        tx_10bt_long_per.Typ = "200ns";
        tx_10bt_long_per.Max = "213ns";
        tx_10bt_diff_out_V.Min = "2.2V";
        tx_10bt_diff_out_V.Typ = "2.5V";
        tx_10bt_diff_out_V.Max = "2.8V";
        pll100_per.Min = ".Typ*.99";
        pll100_per.Typ = "1/125MHz";
        pll100_per.Max = ".Typ*1.01";
        pll100_jitter.Min = "-1.4ns";
        pll100_jitter.Typ = "0ns";
        pll100_jitter.Max = "1.4ns";
        pll_100bt_phase_step.Min = ".Typ - 150ps";
        pll_100bt_phase_step.Typ = "250ps";
        pll_100bt_phase_step.Max = ".Typ *2";
        tx_100bt_diff_out_V.Min = ".Typ - 50mV";
        tx_100bt_diff_out_V.Typ = "1V";
        tx_100bt_diff_out_V.Max = ".Typ + 50mV";
        XTALI_freq.Min = "25MHz";
        XTALI_freq.Max = "50MHz";
        PowerUpNeeded.Min = "FALSE";
        PowerUpNeeded.Max = "TRUE";
        DebugTest.Min = "FALSE";
        DebugTest.Max = "TRUE";
        Amp10bt.Min = "1.7V";
        Amp10bt.Typ = "2.0V";
        Amp10bt.Max = "2.3V";
        Amp10btLow.Min = "1.4V";
        Amp10btLow.Typ = "1.6V";
        Amp10btLow.Max = "1.8V";
        Amp100btMidLow.Min = "-200mV";
        Amp100btMidLow.Typ = "0V";
        Amp100btMidLow.Max = "200mV";
        Amp100btHigh.Min = ".Typ*0.95";
        Amp100btHigh.Typ = "1V";
        Amp100btHigh.Max = ".Typ*1.05";
        Amp100btMidHigh.Min = "-200mV";
        Amp100btMidHigh.Typ = "0V";
        Amp100btMidHigh.Max = "200mV";
        Amp100btLow.Min = ".Typ*1.05";
        Amp100btLow.Typ = "-1V";
        Amp100btLow.Max = ".Typ*0.95";
        V_Diff.Min = "800mV";
        V_Diff.Typ = "0V";
        V_DiffLo.Min = "-500mV";
        V_DiffLo.Typ = "0V";
        V_DiffLo.Max = "500mV";
        Vbg1.Min = "1.14V";
        Vbg1.Typ = "1.23V";
        Vbg1.Max = "1.34V";
        Vbg.Min = "1.14V";
        Vbg.Typ = "1.23V";
        Vbg.Max = "1.34V";
        Vcb.Min = "1.14V";
        Vcb.Typ = "1.24V";
        Vcb.Max = "1.34V";
        VCOM_gain0.Min = "1.9V";
        VCOM_gain0.Typ = "2V";
        VCOM_gain0.Max = "2.1V";
        VCOM_gain1.Min = "1.75V";
        VCOM_gain1.Typ = "1.8525V";
        VCOM_gain1.Max = "1.95V";
        VCOM_gain2.Min = "1.69V";
        VCOM_gain2.Typ = "1.7964V";
        VCOM_gain2.Max = "1.9V";
        VCOM_gain3.Min = "1.64V";
        VCOM_gain3.Typ = "1.7496V";
        VCOM_gain3.Max = "1.85V";
        VCOM_gain4.Min = "1.61V";
        VCOM_gain4.Typ = "1.71V";
        VCOM_gain4.Max = "1.81V";
        VCOM_gain5.Min = "1.576V";
        VCOM_gain5.Typ = "1.6761V";
        VCOM_gain5.Max = "1.776V";
        VCOM_gain6.Min = "1.547V";
        VCOM_gain6.Typ = "1.6467V";
        VCOM_gain6.Max = "1.75V";
        VCOM_gain7.Min = "1.52V";
        VCOM_gain7.Typ = "1.6209V";
        VCOM_gain7.Max = "1.72V";
        Vih_ramp.Min = "VCOM_gain7 - 500mV";
        Vih_ramp.Typ = "VCOM_gain7";
        Vih_ramp.Max = "VCOM_gain7 + 500mV";
        Vil_ramp.Min = "VCOM_gain7 - 500mV";
        Vil_ramp.Typ = "VCOM_gain7";
        Vil_ramp.Max = "VCOM_gain7 + 500mV";
        VihOffsetEvenLVM = "35mV";
        VihOffsetOddLVM = "35mV";
        IohOffsetEvenLVM = "-250uA";
        IohOffsetOddLVM = "-250uA";
        VohLVM = "2.1V";
        VolLVM = "1.1V";
        SQE_Thres.Min = "200mV";
        SQE_Thres.Typ = "200mV";
        SQE_Thres.Max = "600mV";
        RXTP_Thres.Min = "0V";
        RXTP_Thres.Typ = "50mV";
        RXTP_Thres.Max = "400mV";
        NSQE.Min = "50mV";
        NSQE.Typ = "200mV";
        NSQE.Max = "400mV";
        PSQE.Min = "50mV";
        PSQE.Typ = "200mV";
        PSQE.Max = "400mV";
        RXTPM.Min = "5mV";
        RXTPM.Typ = "50mV";
        RXTPM.Max = "100mV";
        RXTPP.Min = "5mV";
        RXTPP.Typ = "50mV";
        RXTPP.Max = "100mV";
        CatSel.Min = "1";
        CatSel.Typ = "2";
        CatSel.Max = "3";
        vbg_array.Min = "SimpleArray(1,1V)";
        vbg_array.Typ = "SimpleArray(1,1V)";
        vbg_array.Max = "SimpleArray(1,1V)";
        vcom_array7.Min = "SimpleArray(1,1V)";
        vcom_array7.Typ = "SimpleArray(1,1V)";
        vcom_array7.Max = "SimpleArray(1,1V)";
        vcom_array6.Min = "SimpleArray(1,1V)";
        vcom_array6.Typ = "SimpleArray(1,1V)";
        vcom_array6.Max = "SimpleArray(1,1V)";
        vcom_array5.Min = "SimpleArray(1,1V)";
        vcom_array5.Typ = "SimpleArray(1,1V)";
        vcom_array5.Max = "SimpleArray(1,1V)";
        vcom_array4.Min = "SimpleArray(1,1V)";
        vcom_array4.Typ = "SimpleArray(1,1V)";
        vcom_array4.Max = "SimpleArray(1,1V)";
        vcom_array3.Min = "SimpleArray(1,1V)";
        vcom_array3.Typ = "SimpleArray(1,1V)";
        vcom_array3.Max = "SimpleArray(1,1V)";
        vcom_array2.Min = "SimpleArray(1,1V)";
        vcom_array2.Typ = "SimpleArray(1,1V)";
        vcom_array2.Max = "SimpleArray(1,1V)";
        vcom_array1.Min = "SimpleArray(1,1V)";
        vcom_array1.Typ = "SimpleArray(1,1V)";
        vcom_array1.Max = "SimpleArray(1,1V)";
        vcom_array0.Min = "SimpleArray(1,1V)";
        vcom_array0.Typ = "SimpleArray(1,1V)";
        vcom_array0.Max = "SimpleArray(1,1V)";
        DlogVbg.Min = "FALSE";
        DlogVbg.Typ = "TRUE";
        DlogVbg.Max = "TRUE";
        sin_win = "SimpleArray(DPRO_Samples,1)";
        lin_win = "SimpleArray(DPRO_Samples * 4,1)";
        minus_1dB_loop_counter.Min = "0";
        minus_1dB_loop_counter.Max = "1";
        VPHY_EXRES.Min = ".Typ - 0.1V";
        VPHY_EXRES.Typ = "1.24V";
        VPHY_EXRES.Max = ".Typ + 0.1V";
        Vcentbias.Min = ".Typ - 0.1V";
        Vcentbias.Typ = "2V";
        Vcentbias.Max = ".Typ + 0.1V";
        iovdd_parm.Min = "3V";
        iovdd_parm.Typ = "3.3V";
        iovdd_parm.Max = "3.6V";
        in_ADC_test = "FALSE";
        sqlpf_loop = "1";
        loop_count = "0";
        warning_message = "' '";
    }
    ParamGlobals {
            PHY0_sel { Type = BOOLEAN; }
            PHY1_sel { Type = BOOLEAN; }
            Source_M { Type = SCALAR; Comment = "1.01Mhz,30.24Mhz,60.03Mhz"; }
            Source_N { Type = SCALAR; Comment = ""; }
            Source_SampleRate { Type = Hz; }
            DPRO_SampleRate { Type = s; }
            DPRO_Samples { Type = SCALAR; }
            SMSFreqUsed { Type = SCALAR; }
            SMSFirstRun { Type = BOOLEAN; }
            ENOB_limit { Type = SCALAR; }
            SNR_limit { Type = dB; }
            THD_limit { Type = dB; }
            INL_limit { Type = SCALAR; }
            DNL_limit { Type = SCALAR; }
            GainLoopCounter { Type = SCALAR; }
            GainLoopCounter_higain { Type = SCALAR; }
            INL_30MHz_limit { Type = SCALAR; }
            DNL_30MHz_limit { Type = SCALAR; }
            InitAttSet1MHz { Type = SCALAR; }
            InitAttSet30MHz { Type = SCALAR; }
            InitAttSet60MHz { Type = SCALAR; }
            SMSAmpMult1MHz { Type = SCALAR; }
            SMSAmpMult30MHz { Type = SCALAR; Comment = ""; }
            SMSAmpMult60MHz { Type = SCALAR; }
            SMSAmpMult1MHz_higain { Type = SCALAR; }
            SMSAmpMult30MHz_higain { Type = SCALAR; }
            SMSAmpMult60MHz_higain { Type = SCALAR; }
            mux_offset { Type = s; }
            adc_per { Type = s; }
            clk_out_coarse { Type = s; }
            clk_out_offset { Type = s; }
            clk_out_voh { Type = V; }
            transmit_100bt_period { Type = s; }
            period_100bt_tx { Type = s; }
            jitter_100bt_tx { Type = s; }
            pw_distortion_100bt_tx { Type = s; }
            risefall_100bt_tx { Type = s; }
            risefall_100bt_tx_match { Type = s; }
            risefall_10bt_tx { Type = s; }
            risefall_10bt_tx_match { Type = s; }
            pll10_clk_freq { Type = Hz; Comment = ""; }
            pll10_clk_jitter { Type = s; }
            tx_10bt_data_offset { Type = Hz; }
            tx_10bt_rcv_freq { Type = Hz; }
            pll10_rcv_lo_freq { Type = Hz; }
            tx_10bt_rcv_input_freq { Type = Hz; }
            tx_10bt_short_width { Type = s; }
            tx_10bt_long_width { Type = s; }
            pll10_jitter { Type = s; }
            tx_10bt_short_per { Type = s; }
            tx_10bt_long_per { Type = s; }
            tx_10bt_diff_out_V { Type = V; }
            pll100_per { Type = s; }
            pll100_jitter { Type = s; }
            pll_100bt_phase_step { Type = s; }
            tx_100bt_diff_out_V { Type = V; }
            XTALI_freq { Type = Hz; Comment = "25MHz for Triton3 pkgs, all others 50MHz"; }
            PowerUpNeeded { Type = BOOLEAN; }
            DebugTest { Type = BOOLEAN; Comment = ""; }
            Amp10bt { Type = V; }
            Amp10btLow { Type = V; }
            Amp100btMidLow { Type = V; }
            Amp100btHigh { Type = V; }
            Amp100btMidHigh { Type = V; }
            Amp100btLow { Type = V; }
            V_Diff { Type = V; }
            V_DiffLo { Type = V; }
            Vbg1 { Type = V; }
            Vbg { Type = V; }
            Vcb { Type = V; }
            VCOM_gain0 { Type = V; }
            VCOM_gain1 { Type = V; }
            VCOM_gain2 { Type = V; }
            VCOM_gain3 { Type = V; }
            VCOM_gain4 { Type = V; }
            VCOM_gain5 { Type = V; }
            VCOM_gain6 { Type = V; }
            VCOM_gain7 { Type = V; }
            Vih_ramp { Type = V; }
            Vil_ramp { Type = V; }
            VihOffsetEvenLVM { Type = V; }
            VihOffsetOddLVM { Type = V; }
            IohOffsetEvenLVM { Type = A; }
            IohOffsetOddLVM { Type = A; }
            VohLVM { Type = V; }
            VolLVM { Type = V; }
            SQE_Thres { Type = V; }
            RXTP_Thres { Type = V; }
            NSQE { Type = V; }
            PSQE { Type = V; }
            RXTPM { Type = V; }
            RXTPP { Type = V; }
            CatSel { Type = SCALAR; }
            vbg_array { Type = V[INTEGER]; }
            vcom_array7 { Type = V[INTEGER]; }
            vcom_array6 { Type = V[INTEGER]; }
            vcom_array5 { Type = V[INTEGER]; }
            vcom_array4 { Type = V[INTEGER]; }
            vcom_array3 { Type = V[INTEGER]; }
            vcom_array2 { Type = V[INTEGER]; }
            vcom_array1 { Type = V[INTEGER]; }
            vcom_array0 { Type = V[INTEGER]; }
            DlogVbg { Type = BOOLEAN; }
            sin_win { Type = SCALAR[INTEGER]; }
            lin_win { Type = SCALAR[INTEGER]; }
            minus_1dB_loop_counter { Type = SCALAR; }
            VPHY_EXRES { Type = V; }
            Vcentbias { Type = V; }
            iovdd_parm { Type = V; }
            in_ADC_test { Type = BOOLEAN; }
            sqlpf_loop { Type = SCALAR; }
            loop_count { Type = SCALAR; }
            warning_message { Type = STRING; }
    }
}
Mask TritonInitMask {
    Source_M = Typ;
    Source_N = Typ;
    DPRO_Samples = Typ;
    SMSFreqUsed = Meas;
    SMSFirstRun = Meas;
    ENOB_limit = Meas;
    THD_limit = Meas;
    INL_limit = Typ;
    DNL_limit = Typ;
    GainLoopCounter = Meas;
    GainLoopCounter_higain = Meas;
    INL_30MHz_limit = Typ;
    DNL_30MHz_limit = Typ;
    InitAttSet1MHz = Typ;
    InitAttSet30MHz = Typ;
    InitAttSet60MHz = Typ;
    SMSAmpMult1MHz = Typ;
    SMSAmpMult30MHz = Typ;
    SMSAmpMult60MHz = Typ;
    SMSAmpMult1MHz_higain = Typ;
    SMSAmpMult30MHz_higain = Typ;
    SMSAmpMult60MHz_higain = Typ;
    mux_offset = Typ;
    adc_per = Typ;
    clk_out_coarse = Typ;
    clk_out_offset = Typ;
    clk_out_voh = Typ;
    transmit_100bt_period = Typ;
    period_100bt_tx = Typ;
    jitter_100bt_tx = Typ;
    risefall_100bt_tx = Typ;
    risefall_100bt_tx_match = Typ;
    risefall_10bt_tx = Typ;
    risefall_10bt_tx_match = Typ;
    pll10_clk_freq = Typ;
    pll10_clk_jitter = Typ;
    tx_10bt_data_offset = Max;
    tx_10bt_rcv_freq = Typ;
    pll10_rcv_lo_freq = Typ;
    tx_10bt_rcv_input_freq = Typ;
    tx_10bt_short_width = Typ;
    tx_10bt_long_width = Typ;
    pll10_jitter = Typ;
    tx_10bt_short_per = Typ;
    tx_10bt_long_per = Typ;
    pll100_jitter = Typ;
    pll100_per = Typ;
    pll_100bt_phase_step = Typ;
    XTALI_freq = Min;
    Amp100btMidLow = Typ;
    Amp100btHigh = Typ;
    Amp100btMidHigh = Typ;
    Amp100btLow = Typ;
    PowerUpNeeded = Max;
    DebugTest = Min;
    V_DiffLo = Typ;
    VCOM_gain3 = Meas;
    Vbg = Meas;
    VCOM_gain0 = Meas;
    VCOM_gain1 = Meas;
    VCOM_gain2 = Meas;
    VCOM_gain4 = Meas;
    VCOM_gain5 = Meas;
    VCOM_gain6 = Meas;
    VCOM_gain7 = Meas;
    SQE_Thres = Typ;
    RXTP_Thres = Typ;
    Amp10bt = Typ;
    Amp10btLow = Typ;
    Vih_ramp = Typ;
    Vil_ramp = Typ;
    VihOffsetEvenLVM = Meas;
    VihOffsetOddLVM = Meas;
    IohOffsetEvenLVM = Meas;
    IohOffsetOddLVM = Meas;
    VohLVM = Meas;
    VolLVM = Meas;
    Source_SampleRate = Max;
    Vcb = Meas;
    NSQE = Meas;
    PSQE = Meas;
    RXTPM = Meas;
    RXTPP = Meas;
    CatSel = Meas;
    vbg_array = Meas;
    vcom_array7 = Meas;
    vcom_array5 = Meas;
    vcom_array6 = Meas;
    vcom_array4 = Meas;
    vcom_array3 = Meas;
    vcom_array2 = Meas;
    vcom_array1 = Meas;
    vcom_array0 = Meas;
    DlogVbg = Meas;
    minus_1dB_loop_counter = Meas;
    V_Diff = Meas;
    iovdd_parm = Meas;
    tx_10bt_diff_out_V = Typ;
    tx_100bt_diff_out_V = Typ;
    in_ADC_test = Meas;
    SNR_limit = Meas;
    sqlpf_loop = Meas;
    loop_count = Meas;
    pw_distortion_100bt_tx = Max;
    PHY1_sel = Typ;
    PHY0_sel = Typ;
    Vbg1 = Meas;
    warning_message = Meas;
}


SignalHeader ADC_GAIN_signalheader {
    Signals {
        DUT_PM DUT_PM_ %Scope_Trigger %AIC_XTALI %LAN_LINKON LAN_SPEED100 %LAN_ACTIVITY %PC_SPEED100 %LCD_AC_NCS LAN_FDUPLEX %EJTAG_TCK %JTAG_TCK %GPIO0 GPIO2 %GPIO3 %GPIO4
        %LCD_HSYNC_RNW %LCD_VSYNC_A0 %CODEC_CLKIN %RST_N %REFCLKI %CODEC_DCLK %CODEC_DIN %LAN_RXM PC_RXM %LAN_RXP PC_RXP %PHY_EXRES %PHY_TSTA %PC_LINKON %PC_ACTIVITY %PC_FDUPLEX
        %CODEC_DOUT %CODEC_CLKOUT %CODEC_RESET_N %CODEC_INT %CODEC_CS_N %CODEC_FS %CODEC_RINGIN4 %CODEC_RINGIN3 %CODEC_RINGIN2 %CODEC_RINGIN1 %LCD_PD00 %LCD_PD01 %LCD_PD02 %LCD_PD03 %LCD_PD04 %LCD_PD05
        %LCD_PD06 %LCD_PD07 %LCD_PD08 %LCD_PD09 %LCD_PD10 %LCD_PD11 %LCD_PD12 %LCD_PD13 %LCD_PD14 %LCD_PD15 %KEYPAD15 KEYPAD14 KEYPAD13 KEYPAD12 KEYPAD11 KEYPAD10
        KEYPAD09 KEYPAD08 KEYPAD07 KEYPAD06 KEYPAD05 KEYPAD04 KEYPAD03 KEYPAD02 KEYPAD01 KEYPAD00 TEST RST_N_OUT SSP0 SSP1 SSP2 SSP3
        EJTAG_DINT EJTAG_SYS_RST_N EJTAG_TRST0_N EJTAG_TRST1_N EJTAG_TDI EJTAG_TDO EJTAG_TMS JTAG_EMU0 JTAG_EMU1 JTAG_TRST_N JTAG_TDI JTAG_TDO JTAG_TMS VLYNQ5_CLK VLYNQ5_RXD0 VLYNQ5_RXD1
        VLYNQ5_TXD0 VLYNQ5_TXD1 VLYNQ3_CLK VLYNQ3_RXD0 VLYNQ3_TXD0 USB_PULLE USB_DM USB_DP MBSP_RCLK MBSP_TCLK MBSP_RD MBSP_TD MBSP_RFS MBSP_TFS AIC_XTALO GPIO1
        GPIO5 GPIO6 GPIO7 AIC_OUTM2_150 AIC_OUTP2_150 AIC_OUTP1_150 AIC_OUTM1_150 AIC_OUTP_600 AIC_OUTM_600 AIC_LN_INP AIC_LN_INM AIC_CID_INP AIC_CID_INM AIC_HN_INP AIC_HN_INM AIC_HD_INP
        AIC_HD_INM AIC_MIC_INP AIC_MIC_INM AIC_LCD AIC_MICBIAS AIC_OUTM_8 AIC_OUTP_8 VR_ENZ LCD_PCLK_E LCD_MCLK LAN_TXP LAN_TXM PC_TXM PC_TXP ALT_CLK REFCLKO
        EM_A00 EM_A01 EM_A02 EM_A03 EM_A04 EM_A05 EM_A06 EM_A07 EM_A08 EM_A09 EM_A10 EM_A11 EM_A12 EM_A13 EM_A14 EM_A15
        EM_A16 EM_A17 EM_A18 EM_A19 EM_A20 EM_A21 EM_A22 EM_A23 EM_D00 EM_D01 EM_D02 EM_D03 EM_D04 EM_D05 EM_D06 EM_D07
        EM_D08 EM_D09 EM_D10 EM_D11 EM_D12 EM_D13 EM_D14 EM_D15 EM_D16 EM_D17 EM_D18 EM_D19 EM_D20 EM_D21 EM_D22 EM_D23
        EM_D24 EM_D25 EM_D26 EM_D27 EM_D28 EM_D29 EM_D30 EM_D31 EM_WE_DQM0 EM_WE_DQM1 EM_WE_DQM2 EM_WE_DQM3 EM_CS0 EM_CS1 EM_CS2 EM_CS3
        EM_CS4 EM_CS5 EM_SDCLK EM_SDCKE EM_WAIT EM_HIZ EM_RAS EM_CAS EM_WE EM_RNW EM_OE UART_RD UART_TD UART_RTS UART_CTS
    }
}

PatternGroup FUNC_GRP {
    SignalHeader ADC_GAIN_signalheader;
}
WaveformTable EPHY_PatGrp EPHY_PatGrp {
    Cell "EPHY_PatGrp.Pins+AIC_HN_INP+AIC_HN_INM" 0/1 drive {
        Data 6/7;
        Drive {
            Waveform { DriveOn; }
        }
    }
    Cell "EPHY_PatGrp.Pins" L/H compare {
        Data 0/1;
    }
    Cell "ALLPINS+FUNC_GRP.Pins+EPHY_PatGrp.Pins" x/X dont_care_xX {
        Data 2/3;
    }
    Cell "EPHY_PatGrp.Pins" - hold {
        Data 6;
    }
    Cell "EPHY_PatGrp.Pins" . mask {
        Data 2;
    }
    Cell "EPHY_PatGrp.Pins" c/C capture {
        Data 0/1;
    }
    Cell "EPHY_PatGrp.Pins" u/U capture {
        Data 0/1;
    }
    Cell "EPHY_PatGrp.Pins" S capture {
        Data 0;
    }
    Cell "EPHY_PatGrp.Pins" n/N capture {
        Data 0/1;
    }
    Cell "EPHY_PatGrp.Pins" a/A capture {
        Data 0/1;
    }
    Cell "EPHY_PatGrp.Pins" z/Z Input_z {
        Data 6/7;
    }
    Cell "EPHY_PatGrp.Pins+Scope_Trigger" s/S dspsend {
        Data 6/7;
    }
}

WaveformTable FUNC_GRP FUNC_GRP {
    Cell "FUNC_GRP.Pins" z/Z Input_z {
        Data 6/7;
    }
    Cell "FUNC_GRP.Pins" a/A output_a {
        Data 0/1;
    }
    Cell "FUNC_GRP.Pins" 0/1 input_0_1 {
        Data 6/7;
    }
    Cell "FUNC_GRP.Pins" L/H output_L_H {
        Data 0/1;
    }
    Cell "ALLPINS+FUNC_GRP.Pins" x/X dont_care_xX {
        Data 2/3;
    }
    Cell "Scope_Trigger" s/S Sync_clk {
        Data 6/7;
    }
    Cell "FUNC_GRP.Pins" . dont_care_ {
        Data 2;
        Drive {
            Waveform { DriveOn; }
        }
    }
    Cell "FUNC_GRP.Pins+ALLPINS+DUT_PM+DUT_PM_+Scope_Trigger" d PatSrcOther {
        Data 3 Other;
        Color 6;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
}
WaveformTable WFT_ADC_GAIN {
    Period "40nS";
    Cell "DUT_PM+DUT_PM_" z/Z PM_Line {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0nS"; DriveData @ "0nS"; }
        }
    }
    Cell "LCD_PD01" z/Z LCD_PD01_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LCD_PD05" z/Z LCD_PD05_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "CODEC_CLKIN" z/Z CODEC_CLKIN_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "RST_N" z/Z RST_N_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "REFCLKI" z/Z REFCLKI_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.05"; DriveData @ "WFT_ADC_GAIN.Period*0.05"; DriveLow @ "WFT_ADC_GAIN.Period*.55"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "EJTAG_TCK" z/Z EJTAG_TCK_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "JTAG_TCK" z/Z JTAG_TCK_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LAN_RXM" z/Z LAN_RXM_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "PC_RXM" z/Z PC_RXM_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LAN_RXP" z/Z LAN_RXP_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "PC_RXP" z/Z PC_RXP_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO2" z/Z GPIO2_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.3000"; DriveData @ "WFT_ADC_GAIN.Period*0.3000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO0" z/Z GPIO0_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.3000"; DriveData @ "WFT_ADC_GAIN.Period*0.3000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO3" z/Z GPIO3_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.1000"; DriveData @ "WFT_ADC_GAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO4" z/Z GPIO4_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.3"; DriveData @ "WFT_ADC_GAIN.Period*0.3"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LCD_PD08" a/A LCD_PD08_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD00" a/A LCD_PD00_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD12" a/A LCD_PD12_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.2500"; CompareClose @ "WFT_ADC_GAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD13" a/A LCD_PD13_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD14" a/A LCD_PD14_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.2500"; CompareClose @ "WFT_ADC_GAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD15" a/A LCD_PD15_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD11" a/A LCD_PD11_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD09" a/A LCD_PD09_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*1"; CompareClose @ "WFT_ADC_GAIN.Period*1.2"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD06" a/A LCD_PD06_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.2500"; CompareClose @ "WFT_ADC_GAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD10" a/A LCD_PD10_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.2500"; CompareClose @ "WFT_ADC_GAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_SPEED100" a/A PC_SPEED100_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.2500"; CompareClose @ "WFT_ADC_GAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_LINKON" a/A PC_LINKON_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.6000"; CompareClose @ "WFT_ADC_GAIN.Period*0.7500"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_ACTIVITY" a/A PC_ACTIVITY_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_FDUPLEX" a/A PC_FDUPLEX_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_HSYNC_RNW" a/A co_mdo_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_CLKOUT" a/A CODEC_CLKOUT_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RESET_N" a/A CODEC_RESET_N_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.25"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_INT" a/A CODEC_INT_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.Period*0.2+24nS"; @ "WFT_ADC_GAIN.Period*0.35"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_CS_N" a/A CODEC_CS_N_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C1"; @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_FS" a/A CODEC_FS_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C1"; @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN4" a/A CODEC_RINGIN4_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C1"; @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN3" a/A CODEC_RINGIN3_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C1"; @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN2" a/A CODEC_RINGIN2_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C1"; @ "WFT_ADC_GAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN1" a/A CODEC_RINGIN1_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LAN_FDUPLEX" a/A LAN_FDUPLEX_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.1000"; CompareClose @ "WFT_ADC_GAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "ALLPINS" 0/1 _default_drive_ {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_ADC_GAIN.Period*0.00"; DriveData @ "WFT_ADC_GAIN.Period*0.00"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "ALLPINS" L/H _default_compare_inouts_ {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "WFT_ADC_GAIN.Period*0.00"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC_GAIN.Period*0.8"; CompareClose @ "WFT_ADC_GAIN.Period*1.00"; }
            Control Care NonMuxed;
        }
    }
    Cell "ALLPINS+FUNC_GRP.Pins" x/X dont_care_xX {
        Data 2/3;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "FUNC_GRP.Pins" . _dontcare_ {
        Data 2;
        Drive {
            Waveform { }
        }
    }
    Cell "ALLPINS" z/Z Input_z {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0nS"; DriveData @ "0nS"; }
            Control DriveOn NonMuxed;
        }
    }
    Inherit TDLScanPatGrp__TDLScanPatGrp.PatSrcOther;
}

Test Transmit_100BT {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = RunPowerUpOnly_MF;
    Exit[0] = Datalog_tx_100_diffV_MF;
    PortExpr[0] = Expr { String = ".Result"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = Transmit_100bt;
    TestMethod = "Titan.tp.Transmit_10_100bt";
    SMS_PIN = Expr { String = "SMS4"; }
    ftt = Expr { String = "SMSFirstRun"; }
    debug_test = Expr { String = "DebugTest "; }
    AnalogWaveformName = Expr { String = "'transmit_100bt_mn'"; }
    line_rate = Expr { String = "100"; }
    Nm = Expr { String = "1280"; }
    Amp = Expr { String = "2.5V"; }
    Vonly = Expr { String = "FALSE"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
MicroFlow RunPowerUpOnly_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_modes;
                Pins = Expr { String = "TX_MAG"; }
                Load = Expr { String = "Loads:DRIVE_LOW"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_modes;
                Load = Expr { String = "Loads:DRIVE_HIGH"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
                Vin_low = Expr { String = "0V"; }
                Vin_high = Expr { String = "2.5V"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pin_state = Expr { String = "State:TRISTATE"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+PHY_EXRES_RTN"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "LAN_RXP+PC_RXP"; }
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "LAN_RXM+PC_RXM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_100bt_DupThrd0,ADCPatSeq.Thread.t3_100bt_DupThrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "NOT Transmit_100BT.Vonly"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST Transmit_100BT >>>>>>>>>\n`')"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "NOT Transmit_100BT.Vonly"; }
        enVisionObject = ReadyForDatalog;
    }
}


MicroFlow SetUpSquelch_phy0_xfmr_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "mag_squelch"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_cbits";
                SetRelayNumber_str = Expr { String = "'15 17 22 28 29 3 22 1 2 30 19'"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'16 18 1 2'"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM_"; }
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "SQULCH_PINS"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+PHY_EXRES_RTN"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "LAN_RXM+PC_RXM+LAN_RXP+PC_RXP+ADCMUX_PINS+DUT_PM+DUT_PM_"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
}
Test Transmit_10BT {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = Transmit_10BT_Setup_MF;
    Exit[0] = Datalog_tx_10_diffV_MF;
    PortExpr[0] = Expr { String = ".Result[0] = 1 AND .Result[1] = 1  OR Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result[0] = 0"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    Title[0] = Transmit_10bt;
    TestMethod = "Titan.tp.Transmit_10_100bt";
    SMS_PIN = Expr { String = "SMS4"; }
    ftt = Expr { String = "SMSFirstRun"; }
    debug_test = Expr { String = "DebugTest OR TRUE"; }
    AnalogWaveformName = Expr { String = "'Transmit_10BT'"; }
    line_rate = Expr { String = "10"; }
    Nm = Expr { String = "800"; }
    Amp = Expr { String = "2.5V"; }
    Vonly = Expr { String = "FALSE"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
MicroFlow SetUp10btTXTest_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_modes;
                Load = Expr { String = "Loads:DRIVE_LOW"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_modes;
                Load = Expr { String = "Loads:DRIVE_HIGH"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_levels;
                Vin_low = Expr { String = "VCOM_gain7-1V"; }
                Vin_high = Expr { String = "VCOM_gain7+1V"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pin_state = Expr { String = "State:TRISTATE"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "SMS"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "SMS"; }
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "SMS"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "PowerUpNeeded"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_porThrd0,ADCPatSeq.Thread.t3_porThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
        }
    }
}
MicroFlow DisconnectSMSTrig_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "SMS"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
}
Test LAN_Tx_100BT_Timing {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = PowerUp100BT_MF;
    Exit[0] = Datalog_TX100bt_MF;
    Exit[1] = continue_patt;
    PortExpr[0] = Expr { String = "(Tx_100BT_Timing.Test_result.Match = tm_rslt:PASS) OR (NOT Connected_to_tester())"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = Period;
    Title[1] = High_pulse;
    Title[2] = Low_pulse;
    Title[3] = PosRise;
    Title[4] = PosFall;
    Title[5] = NegFall;
    Title[6] = NegRise;
    Title[7] = Match;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[3] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[4] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[5] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[6] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[7] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_pins[0] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[1] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[2] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[3] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[4] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[5] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[6] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[7] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Test_result[4] = Expr { String = "#"; Mode = Output; }
    Test_result[5] = Expr { String = "#"; Mode = Output; }
    Test_result[6] = Expr { String = "#"; Mode = Output; }
    Test_result[7] = Expr { String = "RiseFallMatch_MF.Rslt"; Mode = Output; }
    Levels_setup[0] = TXDiffPeriodLevels;
    Levels_setup[1] = High_pulse_width_levels;
    Levels_setup[2] = Low_pulse_width_levels;
    Levels_setup[3] = TxDiffRisePos_levels;
    Levels_setup[4] = TXDiffPos_Levels;
    Levels_setup[5] = TXDiffNegFall_levels;
    Levels_setup[6] = TXDiffNeg_levels;
    Micro_flow_sequence[0] = continue_patt;
    Micro_flow_sequence[1] = continue_patt;
    Micro_flow_sequence[2] = continue_patt;
    Micro_flow_sequence[3] = continue_patt;
    Micro_flow_sequence[4] = continue_patt;
    Micro_flow_sequence[5] = continue_patt;
    Micro_flow_sequence[6] = continue_patt;
    Micro_flow_sequence[7] = RiseFallMatch_MF;
    Test_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:HIGH_PULSE_WIDTH"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:LOW_PULSE_WIDTH"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:RISE_TIME"; }
    Measurement_type[4] = Expr { String = "ACPMU_Meas_type:FALL_TIME"; }
    Measurement_type[5] = Expr { String = "ACPMU_Meas_type:RISE_TIME"; }
    Measurement_type[6] = Expr { String = "ACPMU_Meas_type:FALL_TIME"; }
    Measurement_type[7] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Tpd_reference_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[1] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[4] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[5] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[6] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_STOP_EDGE"; }
    Trigger_enable_mode[4] = Expr { String = "ACPMU_enable_mode:ON_STOP_EDGE"; }
    Trigger_enable_mode[5] = Expr { String = "ACPMU_enable_mode:ON_STOP_EDGE"; }
    Trigger_enable_mode[6] = Expr { String = "ACPMU_enable_mode:ON_STOP_EDGE"; }
    Number_of_samples[0] = Expr { String = "1000"; }
    Number_of_samples[1] = Expr { String = "100"; }
    Number_of_samples[2] = Expr { String = "100"; }
    Number_of_samples[3] = Expr { String = "100"; }
    Number_of_samples[4] = Expr { String = "100"; }
    Number_of_samples[5] = Expr { String = "100"; }
    Number_of_samples[6] = Expr { String = "100"; }
    Trigger_start_count[1] = Expr { String = "1"; }
    Trigger_start_count[2] = Expr { String = "1"; }
    Trigger_stop_count[1] = Expr { String = "1"; }
    Trigger_stop_count[2] = Expr { String = "1"; }
    Bit_cell[0] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[1] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[2] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[3] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[4] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[5] = Expr { String = "period_100bt_tx.Typ"; }
    Bit_cell[6] = Expr { String = "period_100bt_tx.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[1] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Start_pattern_first[3] = Expr { String = "FALSE"; }
    Start_pattern_first[4] = Expr { String = "FALSE"; }
    Start_pattern_first[5] = Expr { String = "FALSE"; }
    Start_pattern_first[6] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[1] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[2] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[3] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[4] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[5] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Pattern_index[6] = Expr { String = "ADCPatSeq.Thread.t3_100bt_StdThrd"; }
    Override_pattern_fails[0] = Expr { String = "TRUE"; }
    Override_pattern_fails[1] = Expr { String = "TRUE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Override_pattern_fails[4] = Expr { String = "TRUE"; }
    Override_pattern_fails[5] = Expr { String = "TRUE"; }
    Override_pattern_fails[6] = Expr { String = "TRUE"; }
    Override_pattern_fails[7] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "period_100bt_tx.Min*.8"; }
    Low_limit[1] = Expr { String = "period_100bt_tx.Min/3.5"; }
    Low_limit[2] = Expr { String = "period_100bt_tx.Min/3.5"; }
    Low_limit[3] = Expr { String = "risefall_100bt_tx.Min*40/100"; }
    Low_limit[4] = Expr { String = "risefall_100bt_tx.Min*40/100"; }
    Low_limit[5] = Expr { String = "risefall_100bt_tx.Min*40/100"; }
    Low_limit[6] = Expr { String = "risefall_100bt_tx.Min*40/100"; }
    Low_limit[7] = Expr { String = "0ns"; }
    High_limit[0] = Expr { String = "period_100bt_tx.Max"; }
    High_limit[1] = Expr { String = "period_100bt_tx.Max/2"; }
    High_limit[2] = Expr { String = "period_100bt_tx.Max/2"; }
    High_limit[3] = Expr { String = "risefall_100bt_tx.Max*40/100"; }
    High_limit[4] = Expr { String = "risefall_100bt_tx.Max*40/100"; }
    High_limit[5] = Expr { String = "risefall_100bt_tx.Max*40/100"; }
    High_limit[6] = Expr { String = "risefall_100bt_tx.Max*40/100"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[2] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[3] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[4] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[5] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[6] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_low_limit[0] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[1] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[2] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[3] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[4] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[5] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_low_limit[6] = Expr { String = "jitter_100bt_tx.Min"; }
    Additional_high_limit[0] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[1] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[2] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[3] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[4] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[5] = Expr { String = "jitter_100bt_tx.Max"; }
    Additional_high_limit[6] = Expr { String = "jitter_100bt_tx.Max"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[1] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "TRUE"; }
    Test_measurement_results[3] = Expr { String = "TRUE"; }
    Test_measurement_results[4] = Expr { String = "TRUE"; }
    Test_measurement_results[5] = Expr { String = "TRUE"; }
    Test_measurement_results[6] = Expr { String = "TRUE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Test_additional_results[1] = Expr { String = "TRUE"; }
    Test_additional_results[2] = Expr { String = "TRUE"; }
    Test_additional_results[3] = Expr { String = "FALSE"; }
    Test_additional_results[4] = Expr { String = "FALSE"; }
    Test_additional_results[5] = Expr { String = "FALSE"; }
    Test_additional_results[6] = Expr { String = "FALSE"; }
    Measurement_timeout[1] = Expr { String = "2s"; }
    Measurement_timeout[2] = Expr { String = "2s"; }
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[0] = Expr { String = "35ns"; }
    Simulator_measurement[1] = Expr { String = "18ns"; }
    Simulator_measurement[2] = Expr { String = "18ns"; }
    Simulator_measurement[3] = Expr { String = "4ns"; }
    Simulator_measurement[4] = Expr { String = "4ns"; }
    Simulator_measurement[5] = Expr { String = "4ns"; }
    Simulator_measurement[6] = Expr { String = "4ns"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Raw_data_to_Log_tool[1] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[2] = Expr { String = "FALSE"; }
    Measurement_results[0] = Expr { String = "#"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Measurement_results[4] = Expr { String = "#"; Mode = Output; }
    Measurement_results[5] = Expr { String = "#"; Mode = Output; }
    Measurement_results[6] = Expr { String = "#"; Mode = Output; }
    Measurement_results[7] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[4] = Expr { String = "#"; Mode = Output; }
    Additional_results[5] = Expr { String = "#"; Mode = Output; }
    Additional_results[6] = Expr { String = "#"; Mode = Output; }
    Additional_results[7] = Expr { String = "#"; Mode = Output; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
}
Levels TXDiffNegFall_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXNegPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "-0.300V"; }
    	Voh = Expr { String = "-700mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "5ms"; }
    }
}
Levels TXDiffNeg_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXNegPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "-700mV"; }
    	Voh = Expr { String = "-300mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "5ms"; }
    }
}
MicroFlow RiseFallMatch_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
        }
    }
    Event[1] {
        Tag = HighPulse;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.High_pulse"; }
    }
    Event[2] {
        Tag = LowPulse;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.Low_pulse"; }
    }
    Event[3] {
        Tag = PosRise;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.PosRise*100/40"; }
    }
    Event[4] {
        Tag = PosFall;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.PosFall*100/40"; }
    }
    Event[5] {
        Tag = NegRise;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.NegRise*100/40"; }
    }
    Event[6] {
        Tag = NegFall;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Tx_100BT_Timing.Measurement_results.NegFall*100/40"; }
    }
    Event[7] {
        Tag = PulseMin;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Expr = Expr { String = "min(.HighPulse[0],.LowPulse[0])"; }
    }
    Event[8] {
        Tag = PulseMax;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Expr = Expr { String = "max(.HighPulse[0],.LowPulse[0])"; }
    }
    Event[9] {
        Tag = MaxVal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "max(.PosRise[0],.PosFall[0],.NegFall[0],.NegRise[0])"; }
    }
    Event[10] {
        Tag = MinVal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "min(.PosRise[0],.PosFall[0],.NegRise[0],.NegFall[0])"; }
    }
    Event[11] {
        Tag = PWMatch;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Expr = Expr { String = ".PulseMax-.PulseMin"; }
    }
    Event[12] {
        Tag = RFMatch;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = ".MaxVal-.MinVal"; }
    }
    Event[13] {
        Tag = TestDC_dist;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".PWMatch"; }
                Low_limit = Expr { String = "pw_distortion_100bt_tx.Min"; }
                High_limit = Expr { String = "pw_distortion_100bt_tx.Max"; }
                Message_pins = Expr { String = "LAN_TXP+PC_TXP"; }
        }
    }
    Event[14] {
        Tag = TestVal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".RFMatch"; }
                Low_limit = Expr { String = "risefall_100bt_tx_match.Min"; }
                High_limit = Expr { String = "risefall_100bt_tx_match.Max*3"; }
                Message_pins = Expr { String = "LAN_TXP+PC_TXP"; }
        }
    }
    Event[15] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Return {
            Expr { String = ".TestDC_dist"; }
        }
    }
    RTypeStatus[15] = 1;
}
MicroFlow Datalog_TX100bt_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST Tx_100BT_Timing >>>>>>>>>\n`')"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Measurement_results.Period[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.Period"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.Period"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Period'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.Period[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.Period"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.Period"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Period jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.HighPulse[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.High_pulse"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.High_pulse"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'High pulse width'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.High_pulse[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.High_pulse"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.High_pulse"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'High pulse width jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.LowPulse[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.Low_pulse"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.Low_pulse"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Low pulse width'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.Low_pulse[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.Low_pulse"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.Low_pulse"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Low pulse width jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.PosRise[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.PosRise*100/40"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.PosRise*100/40"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Positive rise time'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.PosRise[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.PosRise"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.PosRise"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Positive rise time jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.PosFall[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.PosFall*100/40"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.PosFall*100/40"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Positive fall time'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.PosFall[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.PosFall"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.PosFall"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Positive fall time jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.NegRise[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.NegRise*100/40"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.NegRise*100/40"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Negative rise time'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.NegRise[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.NegRise"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.NegRise"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Negative rise time jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.NegFall[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Low_limit.NegFall*100/40"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.High_limit.NegFall*100/40"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Negative fall time'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_100BT_Timing.Additional_results.NegFall[0]"; }
                lo_lim_val = Expr { String = "Tx_100BT_Timing.Additional_low_limit.NegFall"; }
                hi_lim_val = Expr { String = "Tx_100BT_Timing.Additional_high_limit.NegFall"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Negative fall time jitter'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('stdout, ``')"; }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.PWMatch"; }
                lo_lim_val = Expr { String = "RiseFallMatch_MF.TestDC_dist.Low_limit"; }
                hi_lim_val = Expr { String = "RiseFallMatch_MF.TestDC_dist.High_limit"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Pulse width matching'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "RiseFallMatch_MF.RFMatch"; }
                lo_lim_val = Expr { String = "RiseFallMatch_MF.TestVal.Low_limit"; }
                hi_lim_val = Expr { String = "RiseFallMatch_MF.TestVal.High_limit"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Rise/Fall matching'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
}
MicroFlow PowerUp100BT_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "TX_MAG"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "LAN_TXM+PC_TXM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_modes;
                Load = Expr { String = "Loads:DRIVE_LOW"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_levels;
                Vin_low = Expr { String = "0V"; }
                Vin_high = Expr { String = "AVdd/2"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'1'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_100bt_StdThrd0,ADCPatSeq.Thread.t3_100bt_StdThrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
}
Test Tx_10BT_Timing {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = PowerUp10BTTx_MF;
    Exit[0] = Pattern_Continue_MF;
    Exit[1] = StopSMSSineWave_MF;
    Exit[2] = Datalog_TX10bt_MF;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester())"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    Title[0] = LongPeriod;
    Title[1] = LongDutyCycle;
    Title[2] = ShortPeriod;
    Title[3] = ShortDutyCycle;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[3] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_pins[0] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[1] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[2] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_pins[3] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = TXDiffPeriodLevels;
    Levels_setup[1] = TXDiffPeriodLevels;
    Levels_setup[2] = TXDiffPeriodLevels;
    Levels_setup[3] = TXDiffPeriodLevels;
    Micro_flow_sequence[0] = continue_patt;
    Micro_flow_sequence[1] = continue_patt;
    Micro_flow_sequence[2] = continue_patt;
    Micro_flow_sequence[3] = continue_patt;
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:HIGH_PULSE_WIDTH"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:HIGH_PULSE_WIDTH"; }
    Tpd_reference_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[1] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Number_of_samples[0] = Expr { String = "100"; }
    Number_of_samples[1] = Expr { String = "100"; }
    Number_of_samples[2] = Expr { String = "100"; }
    Number_of_samples[3] = Expr { String = "100"; }
    Bit_cell[0] = Expr { String = "tx_10bt_long_per.Typ"; }
    Bit_cell[1] = Expr { String = "tx_10bt_long_width.Typ"; }
    Bit_cell[2] = Expr { String = "tx_10bt_short_per.Typ"; }
    Bit_cell[3] = Expr { String = "tx_10bt_short_width.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[1] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "ADCPatSeq.Thread.tx_long_10bt_Thread"; }
    Pattern_index[1] = Expr { String = "ADCPatSeq.Thread.tx_long_10bt_Thread"; }
    Pattern_index[2] = Expr { String = "ADCPatSeq.Thread.tx_short_10bt_Thread"; }
    Pattern_index[3] = Expr { String = "ADCPatSeq.Thread.tx_short_10bt_Thread"; }
    Override_pattern_fails[0] = Expr { String = "TRUE"; }
    Override_pattern_fails[1] = Expr { String = "TRUE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "tx_10bt_long_per.Min"; }
    Low_limit[1] = Expr { String = "tx_10bt_long_width.Min"; }
    Low_limit[2] = Expr { String = "tx_10bt_short_per.Min"; }
    Low_limit[3] = Expr { String = "tx_10bt_short_width.Min"; }
    High_limit[0] = Expr { String = "tx_10bt_long_per.Max"; }
    High_limit[1] = Expr { String = "tx_10bt_long_width.Max"; }
    High_limit[2] = Expr { String = "tx_10bt_short_per.Max"; }
    High_limit[3] = Expr { String = "tx_10bt_short_width.Max"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[2] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[3] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_low_limit[0] = Expr { String = "pll10_jitter.Min"; }
    Additional_low_limit[1] = Expr { String = "pll10_jitter.Min"; }
    Additional_low_limit[2] = Expr { String = "pll10_jitter.Min"; }
    Additional_low_limit[3] = Expr { String = "pll10_jitter.Min"; }
    Additional_high_limit[0] = Expr { String = "pll10_jitter.Max"; }
    Additional_high_limit[1] = Expr { String = "pll10_jitter.Max"; }
    Additional_high_limit[2] = Expr { String = "pll10_jitter.Max"; }
    Additional_high_limit[3] = Expr { String = "pll10_jitter.Max"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[1] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "TRUE"; }
    Test_measurement_results[3] = Expr { String = "TRUE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Test_additional_results[1] = Expr { String = "TRUE"; }
    Test_additional_results[2] = Expr { String = "TRUE"; }
    Test_additional_results[3] = Expr { String = "TRUE"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[0] = Expr { String = "200ns"; }
    Simulator_measurement[1] = Expr { String = "100ns"; }
    Simulator_measurement[2] = Expr { String = "100ns"; }
    Simulator_measurement[3] = Expr { String = "50ns"; }
    Measurement_results[0] = Expr { String = "#"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
}
MicroFlow Run10BTTxLongTimingPattern_MF {
    FinderFilter = "";
    Event[0] {
        Tag = setc;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbit";
                SetRelayNumber = Expr { String = "4"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_long_10bt_Thread0+1,ADCPatSeq.Thread.tx_long_10bt_Thread1+1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_cbit";
                SetRelayNumber = Expr { String = "4"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_long_10bt_Thread0+1,ADCPatSeq.Thread.tx_long_10bt_Thread1+1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Goto {
            Expr { String = ".setc.Index"; }
        }
    }
}
MicroFlow Pattern_Continue_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
        }
    }
}
MicroFlow Run10BTTxShortTimingPattern_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_short_10bt_Thread0,ADCPatSeq.Thread.tx_short_10bt_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
}
MicroFlow PHY1_Fix100BTPhase_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = Datalog_PHY1_PLL100_DV_1A_Min;
    }
    Event[1] {
        Tag = Array1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "NOT (Connected_to_tester())"; }
        Method {
                MicroFlowMid = "Titan.tp.Make_sim_phase_data";
                p_array = Expr { String = "SimpleArray(640,7nS)"; }
                p_array_out = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[2] {
        Tag = FixPhase;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Shift_Clkout_phase";
                DIG_PIN = Expr { String = "CODEC_RINGIN1"; }
                p_array = Expr { String = " PHY1_PLL100_DV_1A.Measurement_results.PHY1_PhaseInc "; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                length = Expr { String = "PHY1_PLL100_DV_1A.Trigger_stop_count_high.PHY1_PhaseInc"; }
                numOfSamples = Expr { String = "10"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[3] {
        Tag = FixPhase1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "NOT Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Shift_Clkout_phase";
                DIG_PIN = Expr { String = "CODEC_RINGIN1"; }
                p_array = Expr { String = " Fix100BTPhase_MF.Array1.p_array_out"; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                length = Expr { String = "PHY1_PLL100_DV_1A.Trigger_stop_count_high.PHY1_PhaseInc"; }
                numOfSamples = Expr { String = "10"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[4] {
        Tag = SimRslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT (Connected_to_tester())"; }
        Return {
            Expr { String = "if(.FixPhase1, tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    Event[5] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "Connected_to_tester()"; }
        Return {
            Expr { String = "if(.FixPhase AND Datalog_PHY1_PLL100_DV_1A_Min.rst1 AND Datalog_PHY1_PLL100_DV_1A_Min.rst2,tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[5] = 1;
}
Levels TXDiffPeriodLevels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXPeriod;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "-100mV"; }
    	Voh = Expr { String = "100mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "5ms"; }
    }
}
Levels TxDiffRisePos_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXPosPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "700mV"; }
    	Voh = Expr { String = "300mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "1ms"; }
    }
}
Levels TXDiffPos_Levels {
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXPosPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "0.300V"; }
    	Voh = Expr { String = "700mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "1ms"; }
    }
}
MicroFlow PHY1_MakeSMSSineWave_Rcv_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Disable_datalog = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.StopSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = Set_PC_RX_cbit_MF;
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.MakeSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "TRUE"; }
                WaveName = Expr { String = "'pll10bt_hi_freq'"; }
                Amplitude = Expr { String = "3V"; }
                Freq = Expr { String = "tx_10bt_rcv_input_freq.Typ"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "50ms"; }
        }
    }
}
MicroFlow PHY1_MakeSMSSineWave_Rcv_hi_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Disable_datalog = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.StopSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = Set_PC_RX_cbit_MF;
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.MakeSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "TRUE"; }
                WaveName = Expr { String = "'pll10bt_lo_freq'"; }
                Amplitude = Expr { String = "4.V"; }
                Freq = Expr { String = "tx_10bt_rcv_input_freq.Max"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "10ms"; }
        }
    }
}
Test PHY0_PLL10_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = StopSMSSineWave_MF;
    Exit[1] = continue_patt;
    Exit[2] = Datalog_PHY0_PLL10_DV_1A_Min;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester()) OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'PHY0_PLL10_DV_1A', TWDataType:TWMinimumData)"; }
    LoopDepth = Inside;
    Title[0] = P0_PLL10_XMIT_DV_1A;
    Title[1] = P0_PLL10_RCV_DV_1A_ref;
    Title[2] = P0_PLL10_RCV_DV_1A_data;
    Title[3] = P0_PLL10_RCV_DV_1A_data_hi;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[3] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL10;
    Micro_flow_sequence[1] = continue_patt;
    Micro_flow_sequence[2] = PHY0_MakeSMSSineWave_Rcv_MF;
    Micro_flow_sequence[3] = PHY0_MakeSMSSineWave_Rcv_hi_MF;
    Test_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Tpd_reference_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[1] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Number_of_samples[0] = Expr { String = "1000"; }
    Number_of_samples[1] = Expr { String = "1000"; }
    Number_of_samples[2] = Expr { String = "1000"; }
    Number_of_samples[3] = Expr { String = "1000"; }
    Trigger_start_count[0] = Expr { String = "1"; }
    Trigger_start_count[1] = Expr { String = "1"; }
    Trigger_start_count[2] = Expr { String = "1"; }
    Trigger_start_count[3] = Expr { String = "1"; }
    Trigger_stop_count[0] = Expr { String = "1"; }
    Trigger_stop_count[1] = Expr { String = "1"; }
    Trigger_stop_count[2] = Expr { String = "1"; }
    Trigger_stop_count[3] = Expr { String = "1"; }
    Bit_cell[0] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[1] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[2] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[3] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[1] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Start_pattern_first[3] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_xmt_dv_1a_Thread0"; }
    Pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Pattern_index[3] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Override_pattern_fails[0] = Expr { String = "TRUE"; }
    Override_pattern_fails[1] = Expr { String = "TRUE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "1.0/pll10_clk_freq.Max+2.8e-11s*SigmaGuardbandFactor"; }
    Low_limit[1] = Expr { String = "1.0/pll10_clk_freq.Max+8.5e-12s*SigmaGuardbandFactor"; }
    Low_limit[2] = Expr { String = "1.0/pll10_clk_freq.Max+2.9e-11s*SigmaGuardbandFactor"; }
    Low_limit[3] = Expr { String = "1.0/pll10_rcv_lo_freq.Max+1.3e-11s*SigmaGuardbandFactor"; }
    High_limit[0] = Expr { String = "1.0/pll10_clk_freq.Min-2.8e-11s*SigmaGuardbandFactor"; }
    High_limit[1] = Expr { String = "1.0/pll10_clk_freq.Min-8.5e-12s*SigmaGuardbandFactor"; }
    High_limit[2] = Expr { String = "1.0/pll10_clk_freq.Min-2.9e-11s*SigmaGuardbandFactor"; }
    High_limit[3] = Expr { String = "1.0/pll10_rcv_lo_freq.Min-1.3e-11s*SigmaGuardbandFactor"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[2] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[3] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_low_limit[0] = Expr { String = "pll10_jitter.Min+1.6e-11s*SigmaGuardbandFactor"; }
    Additional_low_limit[1] = Expr { String = "pll10_jitter.Min+2.6e-12s*SigmaGuardbandFactor"; }
    Additional_low_limit[2] = Expr { String = "pll10_jitter.Min+4.0e-11s*SigmaGuardbandFactor"; }
    Additional_low_limit[3] = Expr { String = "pll10_jitter.Min+2.2e-12s*SigmaGuardbandFactor"; }
    Additional_high_limit[0] = Expr { String = "pll10_jitter.Max-1.6e-11s*SigmaGuardbandFactor"; }
    Additional_high_limit[1] = Expr { String = "pll10_jitter.Max-2.6e-12s*SigmaGuardbandFactor"; }
    Additional_high_limit[2] = Expr { String = "pll10_jitter.Max-4.0e-11s*SigmaGuardbandFactor"; }
    Additional_high_limit[3] = Expr { String = "pll10_jitter.Max-2.2e-12s*SigmaGuardbandFactor"; }
    Analysis_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[1] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "TRUE"; }
    Test_measurement_results[3] = Expr { String = "TRUE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Test_additional_results[1] = Expr { String = "TRUE"; }
    Test_additional_results[2] = Expr { String = "TRUE"; }
    Test_additional_results[3] = Expr { String = "TRUE"; }
    Measurement_timeout[0] = Expr { String = "2s/100"; }
    Measurement_timeout[1] = Expr { String = "2s/100"; }
    Measurement_timeout[2] = Expr { String = "2s/100"; }
    Measurement_timeout[3] = Expr { String = "2s/100"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[3] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[0] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Simulator_measurement[1] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Simulator_measurement[2] = Expr { String = "1.0/tx_10bt_rcv_freq.Typ"; }
    Simulator_measurement[3] = Expr { String = "1.0/pll10_rcv_lo_freq.Typ"; }
    Disable_pattern_datalog[0] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[1] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[2] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[3] = Expr { String = "FALSE"; }
    Output_run_time_errors[0] = Expr { String = "FALSE"; }
    Output_run_time_errors[1] = Expr { String = "FALSE"; }
    Output_run_time_errors[2] = Expr { String = "FALSE"; }
    Output_run_time_errors[3] = Expr { String = "FALSE"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
    Execute_sites_serially[1] = Expr { String = "FALSE"; }
    Execute_sites_serially[2] = Expr { String = "FALSE"; }
    Execute_sites_serially[3] = Expr { String = "FALSE"; }
    Log_enable[0] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[3] = Expr { String = "Log:LOG_OFF"; }
    Raw_data_to_Log_tool[0] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[1] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[2] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[3] = Expr { String = "FALSE"; }
    Raw_data_to_text_file = Expr { String = "''"; }
    Measurement_results[0] = Expr { String = "#"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
    Characterization_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable[3] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[3] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[3] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[3] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[3] = Expr { String = "FALSE"; }
}
Test PHY0_PLL100_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level_36V;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = continue_patt;
    Exit[1] = Datalog_PHY0_PLL100_DV_1A_Min;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester()) OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    Title[0] = P0_PhaseFreq;
    Title[1] = P0_PhaseFreq2;
    Title[2] = P0_PhaseInc;
    Title[3] = P0_PhaseIncDlog;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:ON_FAIL_ONLY_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[3] = Expr { String = "Seq_en:BYPASS"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "tm_rslt:PASS"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL100;
    Levels_setup[1] = CODEC_RINGIN1_PLL100;
    Micro_flow_sequence[3] = PHY0_Fix100BTPhase_MF;
    Test_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:FREQUENCY_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:FREQUENCY_MEAS"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:TPD_FALL_TO_RISE"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Tpd_reference_pin[2] = Expr { String = "REFCLKI"; }
    Tpd_reference_pin[3] = Expr { String = "REFCLKI"; }
    Tpd_reference_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_input"; }
    Tpd_reference_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Number_of_samples[0] = Expr { String = "100"; }
    Number_of_samples[1] = Expr { String = "100"; }
    Number_of_samples[2] = Expr { String = "640"; }
    Number_of_samples[3] = Expr { String = "100"; }
    Trigger_start_count[1] = Expr { String = "1"; }
    Trigger_start_count[2] = Expr { String = "1"; }
    Trigger_start_count[3] = Expr { String = "1"; }
    Trigger_stop_count[0] = Expr { String = "100"; }
    Trigger_stop_count[1] = Expr { String = "100"; }
    Trigger_stop_count[2] = Expr { String = "2"; }
    Trigger_stop_count[3] = Expr { String = "100"; }
    Trigger_stop_count_high[2] = Expr { String = "640"; }
    Bit_cell[0] = Expr { String = "pll100_per.Typ"; }
    Bit_cell[1] = Expr { String = "pll100_per.Typ"; }
    Bit_cell[2] = Expr { String = "pll100_per.Typ"; }
    Bit_cell[3] = Expr { String = "pll100_per.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Pattern_index[3] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Override_pattern_fails[0] = Expr { String = "FALSE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "123MHz"; }
    Low_limit[1] = Expr { String = "123MHz"; }
    Low_limit[2] = Expr { String = "0ns"; }
    Low_limit[3] = Expr { String = "pll100_per.Min*100"; }
    High_limit[0] = Expr { String = "1/pll100_per.Min"; }
    High_limit[1] = Expr { String = "1/pll100_per.Min"; }
    High_limit[2] = Expr { String = "pll100_per.Max*2.0"; }
    High_limit[3] = Expr { String = "pll100_per.Max*100"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_low_limit[0] = Expr { String = "-1/pll100_jitter.Max+3.8MHz*SigmaGuardbandFactor"; }
    Additional_low_limit[1] = Expr { String = "-1/pll100_jitter.Max+3.8MHz*SigmaGuardbandFactor"; }
    Additional_high_limit[0] = Expr { String = "1/pll100_jitter.Max-3.8MHz*SigmaGuardbandFactor"; }
    Additional_high_limit[1] = Expr { String = "1/pll100_jitter.Max-3.8MHz*SigmaGuardbandFactor"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "FALSE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Simulator_measurement[0] = Expr { String = "125MHz"; }
    Measurement_results[0] = Expr { String = "#/100"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
}
MicroFlow PowerUp10BTTx_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "TX_MAG"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "LAN_TXM+PC_TXM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'1 4 5' "; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.MakeSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "TRUE"; }
                WaveName = Expr { String = "'sinwave5'"; }
                Amplitude = Expr { String = "5.3V"; }
                Freq = Expr { String = "5MHz"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_10bt_Thread0,ADCPatSeq.Thread.tx_10bt_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
}
Levels CODEC_RINGIN1_PLL10 {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = AdjCODEC_RINGIN1;
    	Group = Expr { String = "CODEC_RINGIN1"; }
    	Vol = Expr { String = "CODEC_RINGIN1_PLL10.Voh.AdjCODEC_RINGIN1*2"; }
    	Voh = Expr { String = "2*450mV"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evDigitalType;
    	Title = ADJXTALO_PAD;
    	Group = Expr { String = "REFCLKI"; }
    	Vil = Expr { String = "0.005V"; }
    	Vih = Expr { String = "3V/2"; }
    	Vol = Expr { String = "450mV"; }
    	Voh = Expr { String = "450mV"; }
    	Delay = Expr { String = "1ms"; }
    }
}
Levels CODEC_RINGIN1_PLL100 {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = AdjCODEC_RINGIN1;
    	Group = Expr { String = "CODEC_RINGIN1"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Delay = Expr { String = "1ms"; }
    }
}
Test SMS_Init {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = TritonInitMask;
    Entry[0] = Reset_ADC_test;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "TRUE->SMSFirstRun"; Mode = Output; }
    Micro_flow_sequence[0] = SetSMSFirstRun_MF;
}
Mask TritonMask {
    Source_M = Min;
    Source_N = Typ;
    DPRO_Samples = Typ;
    SMSFirstRun = Meas;
    ENOB_limit = Typ;
    THD_limit = Typ;
    INL_limit = Typ;
    DNL_limit = Typ;
    GainLoopCounter = Meas;
    INL_30MHz_limit = Typ;
    DNL_30MHz_limit = Typ;
    InitAttSet1MHz = Typ;
    InitAttSet30MHz = Typ;
    InitAttSet60MHz = Typ;
    SMSAmpMult1MHz = Typ;
    SMSAmpMult30MHz = Min;
    SMSAmpMult60MHz = Typ;
    SMSAmpMult1MHz_higain = Typ;
    SMSAmpMult30MHz_higain = Typ;
    SMSAmpMult60MHz_higain = Typ;
    GainLoopCounter_higain = Meas;
    SMSFreqUsed = Meas;
    adc_per = Typ;
    clk_out_coarse = Meas;
    clk_out_offset = Meas;
    clk_out_voh = Typ;
    transmit_100bt_period = Typ;
    period_100bt_tx = Typ;
    jitter_100bt_tx = Typ;
    risefall_100bt_tx = Typ;
    risefall_100bt_tx_match = Typ;
    risefall_10bt_tx = Typ;
    risefall_10bt_tx_match = Typ;
    pll10_clk_freq = Typ;
    pll10_clk_jitter = Typ;
    tx_10bt_data_offset = Typ;
    tx_10bt_rcv_freq = Typ;
    pll10_rcv_lo_freq = Typ;
    tx_10bt_rcv_input_freq = Typ;
    tx_10bt_short_width = Typ;
    tx_10bt_long_width = Typ;
    pll10_jitter = Typ;
    tx_10bt_short_per = Typ;
    tx_10bt_long_per = Typ;
    pll100_per = Typ;
    pll100_jitter = Typ;
    XTALI_freq = Min;
    PowerUpNeeded = Meas;
    DebugTest = Min;
    Amp100btMidLow = Typ;
    Amp100btHigh = Typ;
    Amp100btMidHigh = Typ;
    Amp100btLow = Typ;
    pll_100bt_phase_step = Typ;
    mux_offset = Typ;
    V_DiffLo = Min;
    Source_SampleRate = Max;
    Vbg = Meas;
    Amp10bt = Typ;
    Amp10btLow = Typ;
    VCOM_gain0 = Meas;
    VCOM_gain1 = Meas;
    VCOM_gain2 = Meas;
    VCOM_gain3 = Meas;
    VCOM_gain4 = Meas;
    VCOM_gain5 = Meas;
    VCOM_gain6 = Meas;
    VCOM_gain7 = Meas;
    Vih_ramp = Typ;
    Vil_ramp = Typ;
    VihOffsetEvenLVM = Meas;
    VihOffsetOddLVM = Meas;
    IohOffsetEvenLVM = Meas;
    IohOffsetOddLVM = Meas;
    VohLVM = Meas;
    VolLVM = Meas;
    SQE_Thres = Typ;
    RXTP_Thres = Typ;
    CatSel = Meas;
    SNR_limit = Typ;
    Vcb = Typ;
    sin_win = Meas;
    lin_win = Meas;
    minus_1dB_loop_counter = Meas;
    DPRO_SampleRate = Typ;
}
MicroFlow SetSMSFirstRun_MF {
    Event[0] {
        Tag = Init;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Init_sms";
                SMS_PIN = Expr { String = "SMS4"; }
                full = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Tag = Init1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Init_sms";
                SMS_PIN = Expr { String = "SMS1"; }
                full = Expr { String = "TRUE"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#->sin_win"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.Generate_window";
                window_type = Expr { String = "1"; }
                sample_size = Expr { String = "DPRO_Samples"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#->lin_win"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.Generate_window";
                window_type = Expr { String = "1"; }
                sample_size = Expr { String = "DPRO_Samples * 4"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#->DebugTest"; Mode = Output; }
        Index = Expr { String = "5"; }
        Expr = Expr { String = "FALSE"; }
    }
    Event[5] {
        Value = Expr { String = "#->PowerUpNeeded"; Mode = Output; }
        Index = Expr { String = "6"; }
        Expr = Expr { String = "FALSE"; }
    }
}

Test Connect_to_DUT {
    Result = Expr { String = "#"; Mode = Output; }
    Entry[0] = vdd_0V_levels;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = connect_PS;
    Title[1] = connect_pins;
    TestMethod = SYScntl;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "ALL_VDDPINS"; }
    Test_pins[1] = Expr { String = "ALLPINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Pin_control[0] = Expr { String = "Action:CONNECT_TO_DUT"; }
    Pin_control[1] = Expr { String = "Action:CONNECT_TO_DUT"; }
}

Test Disconnect_from_DUT {
    Result = Expr { String = "#"; Mode = Output; }
    Entry[0] = vdd_0V_levels;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = disconnect_pins;
    Title[1] = disconnect_PS;
    TestMethod = SYScntl;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "ALLPINS"; }
    Test_pins[1] = Expr { String = "ALL_VDDPINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Pin_control[0] = Expr { String = "Action:DISCONNECT_FROM_DUT"; }
    Pin_control[1] = Expr { String = "Action:DISCONNECT_FROM_DUT"; }
}
MicroFlow TurnOnObs_MUX_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_000Thrd0,ADCPatSeq.Thread.t3_adc_gain_000Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "ADCMUX_PINS"; }
        }
    }
}
MicroFlow SetSmsFreqUsed {
    Event[0] {
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "SMSFreqUsed.Min"; }
    }
}
MicroFlow StopSMSSineWave_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.StopSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Disable_datalog = Expr { String = "TRUE"; }
        }
    }
}
Mask FuncTypMask {
    VDD = Typ;
    AVdd = Typ;
    IOVdd = Typ;
    VilCMOS = Typ;
    VihCMOS = Typ;
    Vref_3V = Typ;
    Vil3CMOS = Typ;
    Vih3CMOS = Typ;
    VilTTL = Typ;
    VihTTL = Typ;
    VilPECL = Typ;
    VihPECL = Typ;
    VilPECL_diff = Typ;
    VihPECL_diff = Typ;
    VolCMOS = Typ;
    VohCMOS = Typ;
    Vref_CMOS = Typ;
    Vol3CMOS = Typ;
    Voh3CMOS = Typ;
    Vref_3CMOS = Typ;
    VolTTL = Typ;
    VohTTL = Typ;
    Vref_TTL = Typ;
    VolECL = Typ;
    VohECL = Typ;
    Vterm_ECL = Typ;
    VolPECL = Typ;
    VohPECL = Typ;
    Vterm_PECL = Typ;
    Iol8mA = Typ;
    Iol16mA = Typ;
    Iol24mA = Typ;
    Iol48mA = Typ;
}
MicroFlow Rx_DV1A_test_MUX_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "0"; }
    }
    Event[1] {
        Value = Expr { String = "#->minus_1dB_loop_counter"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "minus_1dB_loop_counter.Min-1"; }
    }
    Event[2] {
        Value = Expr { String = "#->Vbg"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "NOT Connected_to_tester()"; }
        Expr = Expr { String = "1.2V"; }
    }
    Event[3] {
        Tag = TwosCompTable;
        Comment = "";
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.Twos_complement_lookup_table";
        }
    }
    Event[4] {
        Tag = HarmLocs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(selectx(SMSFreqUsed,9999,Source_M.Min,Source_M.Typ,Source_M.Max)*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[5] {
        Tag = SMSInitSet;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.Setup_SMS_Rx100";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                do_cbits = Expr { String = "TRUE"; }
                Vbg = Expr { String = "if(Connected_to_tester(),Vbg,1.23V)"; }
                AnalogWaveformName = Expr { String = "selectx(SMSFreqUsed,'InvalidWave','Rx100BT_1MHz','Rx100BT_30MHz','Rx100BT_60MHz')"; }
                FSs = Expr { String = "Source_SampleRate"; }
                Ms_loc = Expr { String = "selectx(SMSFreqUsed,9999,Source_M.Min,Source_M.Typ,Source_M.Max)"; }
                Ns = Expr { String = "8192"; }
                Amp = Expr { String = "selectx(SMSFreqUsed,1.111V,SMSAmpMult1MHz*Vbg,SMSAmpMult30MHz*Vbg,SMSAmpMult60MHz*Vbg)*1.7"; }
                AttSet = Expr { String = "selectx(SMSFreqUsed,0.9999,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.ddlog_test";
                val = Expr { String = "VDD"; }
                llim = Expr { String = "0"; }
                hlim = Expr { String = "2"; }
                comm = Expr { String = "'Test:'"; }
                pin_name = Expr { String = "SMS4"; }
                unit = Expr { String = "'V'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_lin'"; }
                Samples = Expr { String = "DPRO_Samples*4+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_lin'"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = DSP_load_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_file = Expr { String = "'./Dpro/adc_all_MUX_calc.wmod'"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Char_by_pin = Expr { String = "FALSE"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_lin_Thread0,ADCPatSeq.Thread.ADC_lin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocs"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
            Expr = Expr { String = ".TwosCompTable"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_cal";
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_sinalrai.";
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_lin";
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFTdB";
        }
    }
    Event[21] {
        Tag = DummyTwosComp;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
        }
    }
    Event[22] {
        Tag = DummyHarmLocs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
        }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[24] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[25] {
        Tag = RawCalData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "26"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_cal";
        }
    }
    Event[26] {
        Tag = FloatCalData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "27"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[27] {
        Tag = snr_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "28"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_cal";
        }
    }
    Event[28] {
        Tag = lin_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "29"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "lin_cal";
        }
    }
    Event[29] {
        Tag = minus_1dB_loop;
        Value = Expr { String = "#->minus_1dB_loop_counter"; Mode = Output; }
        Index = Expr { String = "30"; }
        Expr = Expr { String = "minus_1dB_loop_counter+1"; }
    }
    Event[30] {
        Tag = SnrAttSet;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "31"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = ".snr_cal_factor*.SMSInitSet*1.05 * (minus_1dB_loop_counter=1 ? 0.891250938 {= -1 dB} : 1)"; }
        }
    }
    Event[31] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "32"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "selectx(SMSFreqUsed,'InvalidWave','Rx100BT_1MHz','Rx100BT_30MHz','Rx100BT_60MHz')"; }
        }
    }
    Event[32] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "33"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[33] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "34"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[34] {
        Tag = RawSinData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "35"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_sin";
        }
    }
    Event[35] {
        Tag = FloatSinData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "36"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[36] {
        Tag = PowerFFTdB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "37"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFTdB";
        }
    }
    Event[37] {
        Tag = PowerFFT;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "38"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFT";
        }
    }
    Event[38] {
        Tag = Thd;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "39"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "THDdB";
        }
    }
    Event[39] {
        Tag = Snr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "40"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_db";
        }
    }
    Event[40] {
        Tag = Enob;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "41"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "enob";
        }
    }
    Event[41] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "42"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "selectx(SMSFreqUsed,'InvalidWave','Rx100BT_1MHz','Rx100BT_30MHz','Rx100BT_60MHz')"; }
                sms_meas = Expr { String = "''"; }
        }
    }
    Event[42] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "43"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Min"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST AC_DV_MUX_1A_Min >>>>>>>>>\n`')"; }
    }
    Event[43] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "44"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Min"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave\n`')"; }
    }
    Event[44] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "45"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Max"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[45] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "46"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Min"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave\n`')"; }
    }
    Event[46] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "47"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Max"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[47] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "48"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Min"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave\n`')"; }
    }
    Event[48] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "49"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND minus_1dB_loop_counter=minus_1dB_loop_counter.Max"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[49] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "50"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[50] {
        Tag = TestTHD;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "51"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "THD_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, THD_limit.Max, THD_limit.Typ, THD_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'THD'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[51] {
        Tag = TestSnr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "52"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "SNR_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, SNR_limit.Max, SNR_limit.Typ, SNR_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'SNR'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[52] {
        Tag = TestENOB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "53"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "select (SMSFreqUsed, ENOB_limit.Max, ENOB_limit.Typ, ENOB_limit.Min)"; }
                hi_lim_val = Expr { String = "ENOB_limit"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'ENOB'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[53] {
        Tag = TestINL;
        Index = Expr { String = "54"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.InlMax,0.5)"; }
                lo_lim_val = Expr { String = "INL_limit.Min"; }
                hi_lim_val = Expr { String = "INL_limit.Max"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'INL'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[54] {
        Tag = TestDNL;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "55"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.DnlMax,0.5)"; }
                lo_lim_val = Expr { String = "DNL_limit.Min"; }
                hi_lim_val = Expr { String = "DNL_limit.Max"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'DNL'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[55] {
        Tag = TestRslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "56"; }
        Enable = Expr { String = "if(minus_1dB_loop_counter=minus_1dB_loop_counter.Min,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[56] {
        Tag = TestRslt_1dB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "57"; }
        Enable = Expr { String = "if(minus_1dB_loop_counter=minus_1dB_loop_counter.Max,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[57] {
        Tag = Inc_dBloop;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "58"; }
        Enable = Expr { String = "if(minus_1dB_loop_counter=minus_1dB_loop_counter.Max,FALSE,TRUE)"; }
        Goto {
            Expr { String = ".minus_1dB_loop.Index"; }
        }
    }
    Event[58] {
        Tag = IncFreqUsed;
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "59"; }
        Expr = Expr { String = "SMSFreqUsed+1"; }
    }
    Event[59] {
        Tag = RetVal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "60"; }
        Return {
            Expr { String = "if (.TestRslt = tm_rslt:PASS AND .TestRslt_1dB = tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[59] = 1;
}
MicroFlow ClearPowerUpNeeded_MF {
    Event[0] {
        Value = Expr { String = "#->PowerUpNeeded"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "FALSE"; }
    }
}
Test PowerUpOnly_Min {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncMinMask;
    Mask[2] = TritonInitMask;
    Entry[0] = ADCPatSeq;
    Entry[1] = FuncSetup;
    Exit[0] = ClearPowerUpNeeded_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = Ftest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Pattern_index[0] = Expr { String = "ADCPatSeq.Thread.t3_porThrd"; }
}
Mask ACTypMask {
    tClkle1_t3_por_0 = Typ;
    tClkle1_t3_por_bypass_0 = Typ;
    tClkle1_t3_100bt_clk_out_phase_2 = Typ;
    tClkle1_t3_100bt_clk_out_phase_6 = Typ;
    tClkle1_t3_100bt_std_2 = Typ;
    tClkle1_t3_100bt_std_6 = Typ;
    tClkle1_t3_100bt_tx_clkout_2 = Typ;
    tClkle1_t3_100bt_tx_clkout_6 = Typ;
    tClkle1_t3_10bt_rcv_clkout_2 = Typ;
    tClkle1_t3_10bt_rcv_clkout_6 = Typ;
    tClkle1_t3_10bt_std_2 = Typ;
    tClkle1_t3_10bt_std_6 = Typ;
    tClkle1_t3_adc_bandgap_2 = Typ;
    tClkle1_t3_adc_bandgap_6 = Typ;
    tClkle1_t3_adc_disable_2 = Typ;
    tClkle1_t3_adc_disable_6 = Typ;
    tClkle1_t3_adc_enable_obs_2 = Typ;
    tClkle1_t3_adc_enable_obs_6 = Typ;
    tClkle1_t3_adc_gain7_6 = Typ;
    tClkle1_t3_adc_gain7_convert_6 = Typ;
    tClkle1_t3_adc_gain_000_2 = Typ;
    tClkle1_t3_adc_gain_000_6 = Typ;
    tClkle1_t3_sqlpf_ex_2 = Typ;
    tClkle1_t3_sqlpf_ex_6 = Typ;
    tClkle1_t3_sqlpf_std_2 = Typ;
    tClkle1_t3_sqlpf_std_6 = Typ;
    tClkte0_t3_por_100 = Typ;
    tClkte0_t3_por_bypass_100 = Typ;
    tClkte0_t3_100bt_clk_out_phase_100 = Typ;
    tClkte0_t3_100bt_std_100 = Typ;
    tClkte0_t3_100bt_tx_clkout_100 = Typ;
    tClkte0_t3_10bt_rcv_clkout_100 = Typ;
    tClkte0_t3_10bt_std_100 = Typ;
    tClkte0_t3_adc_bandgap_100 = Typ;
    tClkte0_t3_adc_disable_100 = Typ;
    tClkte0_t3_adc_enable_obs_100 = Typ;
    tClkte0_t3_adc_gain7_100 = Typ;
    tClkte0_t3_adc_gain7_convert_100 = Typ;
    tClkte0_t3_adc_gain_000_100 = Typ;
    tClkte0_t3_sqlpf_ex_100 = Typ;
    tClkte0_t3_sqlpf_std_100 = Typ;
    tCmp_t3_por_190 = Typ;
    tCmp_t3_por_bypass_190 = Typ;
    tCmp_t3_100bt_clk_out_phase_190 = Typ;
    tCmp_t3_100bt_std_190 = Typ;
    tCmp_t3_100bt_tx_clkout_190 = Typ;
    tCmp_t3_10bt_rcv_clkout_190 = Typ;
    tCmp_t3_10bt_std_190 = Typ;
    tCmp_t3_adc_bandgap_190 = Typ;
    tCmp_t3_adc_disable_190 = Typ;
    tCmp_t3_adc_enable_obs_190 = Typ;
    tCmp_t3_adc_gain7_190 = Typ;
    tCmp_t3_adc_gain7_convert_190 = Typ;
    tCmp_t3_adc_gain_000_190 = Typ;
    tCmp_t3_sqlpf_ex_190 = Typ;
    tCmp_t3_sqlpf_std_190 = Typ;
    tDrv_t3_por_0 = Typ;
    tDrv_t3_por_bypass_0 = Typ;
    tDrv_t3_100bt_clk_out_phase_0 = Typ;
    tDrv_t3_100bt_clk_out_phase_1 = Typ;
    tDrv_t3_100bt_clk_out_phase_20 = Typ;
    tDrv_t3_100bt_clk_out_phase_27 = Typ;
    tDrv_t3_100bt_clk_out_phase_50 = Typ;
    tDrv_t3_100bt_clk_out_phase_60 = Typ;
    tDrv_t3_100bt_std_0 = Typ;
    tDrv_t3_100bt_std_1 = Typ;
    tDrv_t3_100bt_std_20 = Typ;
    tDrv_t3_100bt_std_27 = Typ;
    tDrv_t3_100bt_std_50 = Typ;
    tDrv_t3_100bt_std_60 = Typ;
    tDrv_t3_100bt_tx_clkout_0 = Typ;
    tDrv_t3_100bt_tx_clkout_1 = Typ;
    tDrv_t3_100bt_tx_clkout_20 = Typ;
    tDrv_t3_100bt_tx_clkout_27 = Typ;
    tDrv_t3_100bt_tx_clkout_50 = Typ;
    tDrv_t3_100bt_tx_clkout_60 = Typ;
    tDrv_t3_10bt_rcv_clkout_0 = Typ;
    tDrv_t3_10bt_rcv_clkout_1 = Typ;
    tDrv_t3_10bt_rcv_clkout_20 = Typ;
    tDrv_t3_10bt_rcv_clkout_27 = Typ;
    tDrv_t3_10bt_rcv_clkout_50 = Typ;
    tDrv_t3_10bt_rcv_clkout_60 = Typ;
    tDrv_t3_10bt_std_0 = Typ;
    tDrv_t3_10bt_std_1 = Typ;
    tDrv_t3_10bt_std_20 = Typ;
    tDrv_t3_10bt_std_27 = Typ;
    tDrv_t3_10bt_std_50 = Typ;
    tDrv_t3_10bt_std_60 = Typ;
    tDrv_t3_adc_bandgap_0 = Typ;
    tDrv_t3_adc_bandgap_1 = Typ;
    tDrv_t3_adc_bandgap_20 = Typ;
    tDrv_t3_adc_bandgap_27 = Typ;
    tDrv_t3_adc_bandgap_50 = Typ;
    tDrv_t3_adc_bandgap_60 = Typ;
    tDrv_t3_adc_disable_0 = Typ;
    tDrv_t3_adc_disable_1 = Typ;
    tDrv_t3_adc_disable_20 = Typ;
    tDrv_t3_adc_disable_27 = Typ;
    tDrv_t3_adc_disable_50 = Typ;
    tDrv_t3_adc_disable_60 = Typ;
    tDrv_t3_adc_enable_obs_0 = Typ;
    tDrv_t3_adc_enable_obs_1 = Typ;
    tDrv_t3_adc_enable_obs_20 = Typ;
    tDrv_t3_adc_enable_obs_27 = Typ;
    tDrv_t3_adc_enable_obs_50 = Typ;
    tDrv_t3_adc_enable_obs_60 = Typ;
    tDrv_t3_adc_gain7_0 = Typ;
    tDrv_t3_adc_gain7_1 = Typ;
    tDrv_t3_adc_gain7_20 = Typ;
    tDrv_t3_adc_gain7_27 = Typ;
    tDrv_t3_adc_gain7_50 = Typ;
    tDrv_t3_adc_gain7_60 = Typ;
    tDrv_t3_adc_gain7_convert_0 = Typ;
    tDrv_t3_adc_gain7_convert_1 = Typ;
    tDrv_t3_adc_gain7_convert_20 = Typ;
    tDrv_t3_adc_gain7_convert_27 = Typ;
    tDrv_t3_adc_gain7_convert_50 = Typ;
    tDrv_t3_adc_gain7_convert_60 = Typ;
    tDrv_t3_adc_gain_000_0 = Typ;
    tDrv_t3_adc_gain_000_1 = Typ;
    tDrv_t3_adc_gain_000_20 = Typ;
    tDrv_t3_adc_gain_000_27 = Typ;
    tDrv_t3_adc_gain_000_50 = Typ;
    tDrv_t3_adc_gain_000_60 = Typ;
    tDrv_t3_sqlpf_ex_0 = Typ;
    tDrv_t3_sqlpf_ex_1 = Typ;
    tDrv_t3_sqlpf_ex_20 = Typ;
    tDrv_t3_sqlpf_ex_27 = Typ;
    tDrv_t3_sqlpf_ex_50 = Typ;
    tDrv_t3_sqlpf_ex_60 = Typ;
    tDrv_t3_sqlpf_std_0 = Typ;
    tDrv_t3_sqlpf_std_1 = Typ;
    tDrv_t3_sqlpf_std_20 = Typ;
    tDrv_t3_sqlpf_std_27 = Typ;
    tDrv_t3_sqlpf_std_50 = Typ;
    tDrv_t3_sqlpf_std_60 = Typ;
    tPer_t3_por_200 = Typ;
    tPer_t3_por_bypass_200 = Typ;
    tPer_t3_100bt_clk_out_phase_200 = Typ;
    tPer_t3_100bt_std_200 = Typ;
    tPer_t3_100bt_tx_clkout_200 = Typ;
    tPer_t3_10bt_rcv_clkout_200 = Typ;
    tPer_t3_10bt_std_200 = Typ;
    tPer_t3_adc_bandgap_200 = Typ;
    tPer_t3_adc_disable_200 = Typ;
    tPer_t3_adc_enable_obs_200 = Typ;
    tPer_t3_adc_gain7_200 = Typ;
    tPer_t3_adc_gain7_convert_200 = Typ;
    tPer_t3_adc_gain_000_200 = Typ;
    tPer_t3_sqlpf_ex_200 = Typ;
    tPer_t3_sqlpf_std_200 = Typ;
    VDD = Max;
    AVdd = Max;
    IOVdd = Max;
    VilCMOS = Max;
    VihCMOS = Max;
    Vref_3V = Max;
    Vil3CMOS = Max;
    Vih3CMOS = Max;
    VilTTL = Max;
    VihTTL = Max;
    VilPECL = Typ;
    VihPECL = Typ;
    VilPECL_diff = Typ;
    VihPECL_diff = Typ;
    VolCMOS = Max;
    VohCMOS = Max;
    Vref_CMOS = Max;
    Vol3CMOS = Max;
    Voh3CMOS = Typ;
    Vref_3CMOS = Typ;
    VolTTL = Typ;
    VohTTL = Typ;
    Vref_TTL = Typ;
    VolECL = Typ;
    VohECL = Typ;
    Vterm_ECL = Typ;
    VolPECL = Typ;
    VohPECL = Typ;
    Vterm_PECL = Typ;
    Iol8mA = Typ;
    Iol16mA = Typ;
    Iol24mA = Typ;
    Iol48mA = Typ;
}
Mask FuncMinMask {
    VDD = Min;
    AVdd = Min;
    IOVdd = Min;
    VilCMOS = Min;
    VihCMOS = Min;
    Vref_3V = Min;
    Vil3CMOS = Min;
    Vih3CMOS = Min;
    VilTTL = Min;
    VihTTL = Min;
    VilPECL = Typ;
    VihPECL = Typ;
    VilPECL_diff = Typ;
    VihPECL_diff = Typ;
    VolCMOS = Min.StdSpec;
    VohCMOS = Min.StdSpec;
    Vref_CMOS = Min.StdSpec;
    Vol3CMOS = Min.StdSpec;
    Voh3CMOS = Typ;
    Vref_3CMOS = Typ;
    VolTTL = Typ;
    VohTTL = Typ;
    Vref_TTL = Typ;
    VolECL = Typ;
    VohECL = Typ;
    Vterm_ECL = Typ;
    VolPECL = Typ;
    VohPECL = Typ;
    Vterm_PECL = Typ;
    Iol8mA = Typ;
    Iol16mA = Typ;
    Iol24mA = Typ;
    Iol48mA = Typ;
    SMS_SRC = Meas;
    SMS_AMP = Meas;
}
MicroFlow RunT12_por_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "CODEC_RINGIN1"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_porThrd0,ADCPatSeq.Thread.t3_porThrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "CODEC_RINGIN1"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
}
MicroFlow ReadyForDatalog {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "Print('stdout, ``')"; }
    }
}


Test OpenShort_IO {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = opens_shorts_DC_mask;
    Entry[0] = vdd_0V_levels;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = ".Test_result.Open_to_gnd=tm_rslt:FAIL"; }
    PortExpr[2] = Expr { String = " .Test_result.Open_to_pwr=tm_rslt:FAIL"; }
    PortExpr[3] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = Open_to_gnd;
    Title[1] = Open_to_pwr;
    Title[2] = short_to_gnd;
    TestMethod = OSpins;
    Test_enable[0] = Expr { String = "if(Connected_to_tester(),Seq_en:DEFAULT_EXECUTION,Seq_en:BYPASS)"; }
    Test_enable[1] = Expr { String = "if(Connected_to_tester(),Seq_en:DEFAULT_EXECUTION,Seq_en:BYPASS)"; }
    Test_enable[2] = Expr { String = "if(Connected_to_tester(),Seq_en:DEFAULT_EXECUTION,Seq_en:BYPASS)"; }
    Test_pins[0] = Expr { String = "DIG_ALLPINS"; }
    Test_pins[1] = Expr { String = "DIG_ALLPINS"; }
    Test_pins[2] = Expr { String = "DIG_ALLPINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Static_test_enable[0] = Expr { String = "TRUE"; }
    Static_test_enable[1] = Expr { String = "TRUE"; }
    Static_test_enable[2] = Expr { String = "TRUE"; }
    Forced_current[0] = Expr { String = "ioh_opsh"; }
    Forced_current[1] = Expr { String = "-ioh_opsh"; }
    Forced_current[2] = Expr { String = "ioh_opsh"; }
    Max_allowed_voltage[0] = Expr { String = "vref_opsh"; }
    Max_allowed_voltage[1] = Expr { String = "-vref_opsh"; }
    Max_allowed_voltage[2] = Expr { String = "vref_opsh"; }
    Opens_limit[0] = Expr { String = "-1V"; }
    Opens_limit[1] = Expr { String = "1V"; }
    Shorts_limit[2] = Expr { String = "voh_opsh+10mV"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Log_enable[0] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
}
Mask opens_shorts_DC_mask {
    vol_opsh = Typ;
    voh_opsh = Typ;
    iol_opsh = Typ;
    ioh_opsh = Typ;
    vref_opsh = Typ;
    vdd_opens = Typ;
    vdd_shorts = Typ;
    iol_vdd_opsh = Typ;
    ioh_vdd_opsh = Typ;
    vdd_opens_1_8V = Max;
    vdd_opens_3_3V = Max;
}
Mask DC_mask_standard {
    vdd = Max;
    vref = Typ;
    vil = Typ;
    vih = Typ;
    vol = Typ;
    voh = Typ;
    iol = Typ;
    ioh = Typ;
    vdd_stress = Typ;
    STDF_vdd = Typ;
    iol_stress = Typ;
    ioh_stress = Typ;
    vsb = Typ;
    vdigital = Max;
    avcc = Min;
    dynamic_idd = Max;
    static_idd = Max;
    iil = Max;
    iozl = Max;
    dac_measured_limit = Typ;
    vil_vinp = Typ;
    idd_dyn_meas = Typ;
    vih_vinp = Typ;
    IDDQ_Core = Max;
    IDDQ_IO = Max;
    IDDQ_DAC = Max;
    IDDQ_ADC = Max;
    IDDQ_PBGR = Max;
    IDDQ_ANALOD_DIG = Max;
    IDD_Static = Max;
    IDD_Dynamic = Max;
    vbox_vdd_low = Typ;
    vbox_vdd_high = Typ;
    vbox_vdds_low = Typ;
    vbox_vdds_high = Typ;
    vdds_stress = Typ;
    via_pre_voltage = Typ;
    via_post_voltage = Typ;
}
Mask AC_mask_standard {
    t0 = Typ;
    pw = Typ;
    ret = Typ;
    period = Typ;
}

// new saved Mix_signal_onstart flow

SubFlow Mix_signal_onstart {
    Node[53] =     FlowNode_  {
        XCoord = (684,435);
        Port[0] {
            To = 84;
            UIFPort = 91;
        }
        Port[1] {
            To = 84;
            UIFPort = 152;
        }
        UIFInfo = 271;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "28610";
        Exec = Bandgap;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[55] =     FlowNode_  {
        XCoord = (195,16);
        Port[0] {
            To = 98;
            UIFPort = 91;
        }
        Port[1] {
            To = 57;
            UIFPort = 158;
        }
        UIFInfo = 303;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "29270";
        Exec = PHY0_PLL10_DV_1A;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[56] =     FlowNode_  {
        XCoord = (3,75);
        Port[0] {
            To = 70;
            UIFPort = 358;
        }
        Port[1] {
            To = 76;
            UIFPort = 151;
        }
        UIFInfo = 191;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "29280";
        Exec = PHY0_PLL100_DV_1A;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[57] =     FlowNode_  {
        XCoord = (175,266);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY0_Fail10BTPLL;
    }
    Node[64] =     FlowNode_  {
        XCoord = (51,329);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY1_Fail100BTPLL;
    }
    Node[65] =     FlowNode_  {
        XCoord = (1051,491);
        UIFInfo = 352;
        TestId = "3000";
        PortSelect = "0";
        PortNumber = 0;
    }
    Node[68] =     FlowNode_  {
        XCoord = (806,231);
        UIFInfo = 0;
        TestId = "279";
        Exec = Fail_PHY0_ADC;
    }
    Node[69] =     FlowNode_  {
        XCoord = (7,195);
        Port[0] {
            To = 70;
            UIFPort = 344;
        }
        Port[1] {
            To = 64;
            UIFPort = 158;
        }
        UIFInfo = 200;
        SpecPairs {
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "24800";
        Exec = PHY1_PLL100_DV_1A;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[70] =     FlowNode_  {
        XCoord = (99,50);
        Port[0] {
            To = 55;
            UIFPort = 14;
        }
        Port[1] {
            To = 99;
            UIFPort = 149;
        }
        UIFInfo = 308;
        SpecPairs {
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "25100";
        Exec = PHY1_PLL10_DV_1A;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[75] =     FlowNode_  {
        XCoord = (695,644);
        Port[0] {
            To = 79;
            UIFPort = 65;
        }
        Port[1] {
            To = 79;
            UIFPort = 114;
        }
        UIFInfo = 341;
        SpecPairs {
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "267";
        Exec = VCO_Test;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[76] =     FlowNode_  {
        XCoord = (72,204);
        UIFInfo = 357;
        TestId = "";
        Exec = PHY0_Fail100BTPLL;
    }
    Node[77] =     FlowNode_  {
        XCoord = (30,483);
        Port[0] {
            To = 78;
            UIFPort = 332;
        }
        Port[1] {
            To = 78;
            UIFPort = 11;
        }
        UIFInfo = 84;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "299";
        SyncPoint = True;
        Exec = DisconnectResources;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[78] =     FlowNode_  {
        XCoord = (0,354);
        Port[0] {
            To = 70;
            UIFPort = 1;
        }
        Port[1] {
            To = 69;
            UIFPort = 338;
        }
        UIFInfo = 181;
        SpecPairs {
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "26100";
        Exec = ConnectResources;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[79] =     FlowNode_  {
        XCoord = (810,642);
        Port[0] {
            To = 116;
            UIFPort = 94;
        }
        Port[1] {
            To = 116;
            UIFPort = 58;
        }
        Port[2] {
            To = 115;
            UIFPort = 159;
        }
        Port[3] {
            To = 117;
            UIFPort = 193;
        }
        UIFInfo = 284;
        SpecPairs {
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "26400";
        Exec = TX100_TST;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[82] =     FlowNode_  {
        XCoord = (351,750);
        UIFInfo = 0;
        TestId = "271";
        Exec = PHY1_Fail100BTPLL;
    }
    Node[83] =     FlowNode_  {
        XCoord = (467,739);
        UIFInfo = 0;
        TestId = "272";
        Exec = PHY1_Fail10BTPLL;
    }
    Node[84] =     FlowNode_  {
        XCoord = (813,526);
        UIFInfo = 0;
        TestId = "273";
        Exec = FailBandgap;
    }
    Node[85] =     FlowNode_  {
        XCoord = (971,333);
        UIFInfo = 0;
        TestId = "274";
        Exec = PHY1_FailTX10BT;
    }
    Node[86] =     FlowNode_  {
        XCoord = (458,436);
        UIFInfo = 0;
        TestId = "275";
        Exec = PHY0_FailTX100BTtiming;
    }
    Node[87] =     FlowNode_  {
        XCoord = (851,183);
        UIFInfo = 2;
        TestId = "276";
        Exec = FailSquelch;
    }
    Node[88] =     FlowNode_  {
        XCoord = (519,354);
        UIFInfo = 0;
        TestId = "277";
        Exec = PHY0_FailTX100BTLevels;
    }
    Node[89] =     FlowNode_  {
        XCoord = (385,713);
        UIFInfo = 0;
        TestId = "290";
        Exec = PHY0_Fail100BTPLL;
    }
    Node[90] =     FlowNode_  {
        XCoord = (623,838);
        UIFInfo = 0;
        TestId = "291";
        Exec = PHY0_Fail10BTPLL;
    }
    Node[91] =     FlowNode_  {
        XCoord = (727,215);
        UIFInfo = 0;
        TestId = "292";
        Exec = Fail_PHY1_ADC;
    }
    Node[92] =     FlowNode_  {
        XCoord = (1077,326);
        UIFInfo = 0;
        TestId = "296";
        Exec = PHY0_FailTX10BT;
    }
    Node[93] =     FlowNode_  {
        XCoord = (486,393);
        UIFInfo = 0;
        TestId = "297";
        Exec = PHY1_FailTX100BTtiming;
    }
    Node[94] =     FlowNode_  {
        XCoord = (346,597);
        Port[0] {
            To = 97;
            UIFPort = 96;
        }
        Port[1] {
            To = 82;
            UIFPort = 190;
        }
        Port[2] {
            To = 89;
            UIFPort = 156;
        }
        UIFInfo = 293;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "305";
        Exec = PLL100_FREQ_Test;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[97] =     FlowNode_  {
        XCoord = (467,582);
        Port[0] {
            To = 102;
            UIFPort = 341;
        }
        Port[1] {
            To = 83;
            UIFPort = 186;
        }
        Port[2] {
            To = 90;
            UIFPort = 162;
        }
        UIFInfo = 280;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "312";
        Exec = PLL10_Freq_Test;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[98] =     FlowNode_  {
        XCoord = (653,43);
        Port[0] {
            To = 101;
            UIFPort = 71;
        }
        Port[1] {
            To = 68;
            UIFPort = 152;
        }
        Port[2] {
            To = 91;
            UIFPort = 176;
        }
        Port[3] {
            To = 91;
            UIFPort = 201;
        }
        UIFInfo = 310;
        SpecPairs {
            AC_specs = Expr { String = "AC_specs.cat0"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "8000000";
        Exec = RCV_ADC_PHY_TST;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[99] =     FlowNode_  {
        XCoord = (150,172);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY1_Fail10BTPLL;
    }
    Node[100] =     FlowNode_  {
        XCoord = (969,183);
        Port[0] {
            To = 65;
            UIFPort = 265;
        }
        Port[1] {
            To = 92;
            UIFPort = 123;
        }
        Port[2] {
            To = 85;
            UIFPort = 180;
        }
        Port[3] {
            To = 85;
            UIFPort = 201;
        }
        UIFInfo = 354;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "10000000";
        Exec = TX10_TST;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[101] =     FlowNode_  {
        XCoord = (779,40);
        Port[0] {
            To = 118;
            UIFPort = 90;
        }
        Port[1] {
            To = 87;
            UIFPort = 158;
        }
        UIFInfo = 295;
        SpecPairs {
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "11000000";
        Exec = Squalch_Test;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[102] =     FlowNode_  {
        XCoord = (595,605);
        Port[0] {
            To = 75;
            UIFPort = 74;
        }
        Port[1] {
            To = 75;
            UIFPort = 51;
        }
        UIFInfo = 0;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "17000000";
        Exec = TX100_CTM_TST;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[103] =     FlowNode_  {
        XCoord = (235,630);
        Port[0] {
            To = 94;
            UIFPort = 15;
        }
        Port[1] {
            To = 94;
            UIFPort = 61;
        }
        Port[2] {
            To = 94;
            UIFPort = 95;
        }
        UIFInfo = 278;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "22000000";
        Exec = PLL_Test_skip_HOT;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[104] =     FlowNode_  {
        XCoord = (461,128);
        Port[0] {
            To = 107;
            UIFPort = 53;
        }
        Port[1] {
            To = 105;
            UIFPort = 157;
        }
        Port[2] {
            To = 88;
            UIFPort = 177;
        }
        Port[3] {
            To = 93;
            UIFPort = 194;
        }
        Port[4] {
            To = 86;
            UIFPort = 203;
        }
        UIFInfo = 277;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "23000000";
        Exec = TX100_sync_tst;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[105] =     FlowNode_  {
        XCoord = (551,316);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY1_FailTX100BTLevels;
    }
    Node[107] =     FlowNode_  {
        XCoord = (551,143);
        Port[0] {
            To = 107;
            UIFPort = 75;
        }
        Port[1] {
            To = 108;
            UIFPort = 152;
        }
        Port[2] {
            To = 108;
            UIFPort = 169;
        }
        Port[3] {
            To = 108;
            UIFPort = 189;
        }
        Port[4] {
            To = 108;
            UIFPort = 206;
        }
        UIFInfo = 276;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            DCSpecs = Expr { String = "DCSpecs.CommonDCData"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
        }
        TestId = "59000000";
        Exec = TX100HiSupSyncTst;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[108] =     FlowNode_  {
        XCoord = (586,257);
        UIFInfo = 0;
        TestId = "";
        Exec = Fail100BTHighSupply;
    }
    Node[111] =     FlowNode_  {
        XCoord = (270,154);
        Port[0] {
            To = 114;
            UIFPort = 337;
        }
        Port[1] {
            To = 114;
            UIFPort = 152;
        }
        Port[2] {
            To = 114;
            UIFPort = 173;
        }
        Port[3] {
            To = 114;
            UIFPort = 197;
        }
        UIFInfo = 259;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.CommonACData"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            PSSpecs = Expr { String = "PSSpecs.PS_SFNOM"; }
            DCSpecs = Expr { String = "SortRule"; }
            Globals = Expr { String = "Globals.VARS"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
        }
        TestId = "57000000";
        Exec = TX100BTTrimTst;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[112] =     FlowNode_  {
        XCoord = (5,601);
        Port[0] {
            To = 113;
            UIFPort = 71;
        }
        Port[1] {
            To = 113;
            UIFPort = 91;
        }
        UIFInfo = 0;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.ACCat"; }
            DCSpecs = Expr { String = "SortRule"; }
            Globals = Expr { String = "Globals.VARS"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            PSSpecs = Expr { String = "PSSpecs.PS_SFNOM"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
        }
        TestId = "65000000";
        Exec = SetupPhyTrimBitsTest;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[113] =     FlowNode_  {
        XCoord = (94,599);
        Port[0] {
            To = 103;
            UIFPort = 160;
        }
        Port[1] {
            To = 103;
            UIFPort = 180;
        }
        UIFInfo = 0;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.ACCat"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            DCSpecs = Expr { String = "SortRule"; }
            Globals = Expr { String = "Globals.VARS"; }
            PSSpecs = Expr { String = "PSSpecs.PS_SFNOM"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
        }
        TestId = "66000000";
        Exec = ProgramPhyTrimBitsTest;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[114] =     FlowNode_  {
        XCoord = (363,109);
        Port[0] {
            To = 104;
            UIFPort = 173;
        }
        Port[1] {
            To = 104;
            UIFPort = 186;
        }
        UIFInfo = 284;
        SpecPairs {
            ACSpecs = Expr { String = "ACSpecs.ACCat"; }
            CodecDCSpecs = Expr { String = "CodecDCSpecs.FT_ROOM"; }
            DCSpecs = Expr { String = "SortRule"; }
            Globals = Expr { String = "Globals.VARS"; }
            PSSpecs = Expr { String = "PSSpecs.PS_SFNOM"; }
            TIGlobalVars = Expr { String = "TIGlobalVars.TIVariables"; }
            TIGlobals = Expr { String = "TIGlobals.TIGlobalTypes"; }
            AC_SpecTable = Expr { String = "AC_SpecTable.Cat0"; }
            AC_specs = Expr { String = "AC_specs.cat0"; }
            ADC_SpecTable = Expr { String = "ADC_SpecTable.Cat0"; }
            CodecACSpecs = Expr { String = "CodecACSpecs.FT_ROOM"; }
            DC_specs = Expr { String = "DC_specs.cat0"; }
            OS_specs = Expr { String = "OS_specs.cat0"; }
            SpecTable = Expr { String = "SpecTable.Std_catagory"; }
        }
        TestId = "67000000";
        Exec = ReadDieIDPostTrimTest;
        EVO_Calibration = f751618DS_FocusCalObject;
    }
    Node[115] =     FlowNode_  {
        XCoord = (858,770);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY0_FailTX100BTPreTrimLevels;
    }
    Node[116] =     FlowNode_  {
        XCoord = (875,600);
        UIFInfo = 182;
        TestId = "";
        Exec = PHY1_FailTX100BTPreTrimLevels;
    }
    Node[117] =     FlowNode_  {
        XCoord = (743,790);
        UIFInfo = 0;
        TestId = "";
        Exec = PHY_DieIDTrimFail;
    }
    Node[118] =     FlowNode_  {
        XCoord = (983,56);
        Port[0] {
            To = 100;
            UIFPort = 221;
        }
        Port[1] {
            To = 120;
            UIFPort = 138;
        }
        UIFInfo = 0;
        TestId = "";
        PortSelect = "((TIDeviceType=9) OR (TIDeviceType=10) OR (TIDeviceType=11)OR (TIDeviceType=14)OR (TIDeviceType=17) OR (TIDeviceType=19))";
    }
    Node[120] =     FlowNode_  {
        XCoord = (1099,168);
        Port[0] {
            To = 65;
            UIFPort = 84;
        }
        Port[1] {
            To = 92;
            UIFPort = 189;
        }
        Port[2] {
            To = 65;
            UIFPort = 161;
        }
        Port[3] {
            To = 92;
            UIFPort = 205;
        }
        UIFInfo = 0;
        TestId = "69000000";
        Exec = TX10_TST;
    }
    StartState = 77;
    Background {
        String = "ignore PHY1 if 1015 or 1056 or 1058";
        Data = (0,0,1166,177,0,0,23,0,0,6,0,0,1,0,0,0);
    }
    Background {
        String = "ignore PHY1 if 1015 or 1056 or 1058";
        Data = (0,0,0,0,0,0,23,0,0,6,0,0,1,0,0,0);
    }
}
MicroFlow Setup_AC_DV_4A_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Connection = Expr { String = "Connect:CENTRAL_PARAMETRIC_UNIT"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "PowerUpNeeded"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_porThrd0,ADCPatSeq.Thread.t3_porThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
        }
    }
}
MicroFlow Connect_rxp_rxn_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
        }
    }
}
MicroFlow Datalog_AC_DV_4A_MF {
    Event[0] {
        Tag = VG0;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain0"; }
                lo_lim_val = Expr { String = "VCOM_gain0.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain0.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 0'"; }
        }
    }
    Event[1] {
        Tag = VG1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain1"; }
                lo_lim_val = Expr { String = "VCOM_gain1.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain1.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 1'"; }
        }
    }
    Event[2] {
        Tag = VG2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain2"; }
                lo_lim_val = Expr { String = "VCOM_gain2.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain2.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 2'"; }
        }
    }
    Event[3] {
        Tag = VG3;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain3"; }
                lo_lim_val = Expr { String = "VCOM_gain3.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain3.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 3'"; }
        }
    }
    Event[4] {
        Tag = VG4;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain4"; }
                lo_lim_val = Expr { String = "VCOM_gain4.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain4.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 4'"; }
        }
    }
    Event[5] {
        Tag = VG5;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain5"; }
                lo_lim_val = Expr { String = "VCOM_gain5.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain5.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 5'"; }
        }
    }
    Event[6] {
        Tag = VG6;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain6"; }
                lo_lim_val = Expr { String = "VCOM_gain6.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain6.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 6'"; }
        }
    }
    Event[7] {
        Tag = VG7;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain7"; }
                lo_lim_val = Expr { String = "VCOM_gain7.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain7.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 7'"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Return {
            Expr { String = "if (.VG0 AND .VG1 AND .VG2 AND .VG3 AND .VG4 AND .VG5 AND .VG6 AND .VG7,tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[8] = 1;
}
Test AC_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADC_TstPatSeq;
    Entry[2] = SetSmsFreqUsed;
    Entry[3] = TurnOnObs_MUX_MF;
    Entry[4] = Set_ADC_test;
    Exit[0] = StopSMSSineWave_MF;
    Exit[1] = continue_patt;
    Exit[2] = Reset_ADC_test;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = AC_DV_1A_1MHz;
    Title[1] = AC_DV_1A_30MHz;
    Title[2] = AC_DV_1A_60MHz;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_pins[0] = Expr { String = "SMS4"; }
    Test_pins[1] = Expr { String = "SMS4"; }
    Test_pins[2] = Expr { String = "SMS4"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = PHY_level;
    Micro_flow_sequence[0] = Rx_DV1A_test_MUX_MF;
    Micro_flow_sequence[1] = Rx_DV1A_test_MUX_MF;
    Micro_flow_sequence[2] = Rx_DV1A_test_MUX_MF;
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
}
Mask ACADCMask {
    tClkle1_t3_por_0 = Typ;
    tClkle1_t3_por_bypass_0 = Typ;
    tClkle1_t3_100bt_clk_out_phase_2 = Typ;
    tClkle1_t3_100bt_clk_out_phase_6 = Typ;
    tClkle1_t3_100bt_std_2 = Typ;
    tClkle1_t3_100bt_std_6 = Typ;
    tClkle1_t3_100bt_tx_clkout_2 = Typ;
    tClkle1_t3_100bt_tx_clkout_6 = Typ;
    tClkle1_t3_10bt_rcv_clkout_2 = Typ;
    tClkle1_t3_10bt_rcv_clkout_6 = Typ;
    tClkle1_t3_10bt_std_2 = Typ;
    tClkle1_t3_10bt_std_6 = Typ;
    tClkle1_t3_adc_bandgap_2 = Typ;
    tClkle1_t3_adc_bandgap_6 = Typ;
    tClkle1_t3_adc_disable_2 = Typ;
    tClkle1_t3_adc_disable_6 = Typ;
    tClkle1_t3_adc_enable_obs_2 = Typ;
    tClkle1_t3_adc_enable_obs_6 = Typ;
    tClkle1_t3_adc_gain7_6 = Typ;
    tClkle1_t3_adc_gain7_convert_6 = Typ;
    tClkle1_t3_adc_gain_000_2 = Typ;
    tClkle1_t3_adc_gain_000_6 = Typ;
    tClkle1_t3_sqlpf_ex_2 = Typ;
    tClkle1_t3_sqlpf_ex_6 = Typ;
    tClkle1_t3_sqlpf_std_2 = Typ;
    tClkle1_t3_sqlpf_std_6 = Typ;
    tClkte0_t3_por_100 = Typ;
    tClkte0_t3_por_bypass_100 = Typ;
    tClkte0_t3_100bt_clk_out_phase_100 = Typ;
    tClkte0_t3_100bt_std_100 = Typ;
    tClkte0_t3_100bt_tx_clkout_100 = Typ;
    tClkte0_t3_10bt_rcv_clkout_100 = Typ;
    tClkte0_t3_10bt_std_100 = Typ;
    tClkte0_t3_adc_bandgap_100 = Typ;
    tClkte0_t3_adc_disable_100 = Typ;
    tClkte0_t3_adc_enable_obs_100 = Typ;
    tClkte0_t3_adc_gain7_100 = Typ;
    tClkte0_t3_adc_gain7_convert_100 = Typ;
    tClkte0_t3_adc_gain_000_100 = Typ;
    tClkte0_t3_sqlpf_ex_100 = Typ;
    tClkte0_t3_sqlpf_std_100 = Typ;
    tCmp_t3_por_190 = Typ;
    tCmp_t3_por_bypass_190 = Typ;
    tCmp_t3_100bt_clk_out_phase_190 = Typ;
    tCmp_t3_100bt_std_190 = Typ;
    tCmp_t3_100bt_tx_clkout_190 = Typ;
    tCmp_t3_10bt_rcv_clkout_190 = Typ;
    tCmp_t3_10bt_std_190 = Typ;
    tCmp_t3_adc_bandgap_190 = Typ;
    tCmp_t3_adc_disable_190 = Typ;
    tCmp_t3_adc_enable_obs_190 = Typ;
    tCmp_t3_adc_gain7_190 = Typ;
    tCmp_t3_adc_gain7_convert_190 = Typ;
    tCmp_t3_adc_gain_000_190 = Typ;
    tCmp_t3_sqlpf_ex_190 = Typ;
    tCmp_t3_sqlpf_std_190 = Typ;
    tDrv_t3_por_0 = Typ;
    tDrv_t3_por_bypass_0 = Typ;
    tDrv_t3_100bt_clk_out_phase_0 = Typ;
    tDrv_t3_100bt_clk_out_phase_1 = Typ;
    tDrv_t3_100bt_clk_out_phase_20 = Typ;
    tDrv_t3_100bt_clk_out_phase_27 = Typ;
    tDrv_t3_100bt_clk_out_phase_50 = Typ;
    tDrv_t3_100bt_clk_out_phase_60 = Typ;
    tDrv_t3_100bt_std_0 = Typ;
    tDrv_t3_100bt_std_1 = Typ;
    tDrv_t3_100bt_std_20 = Typ;
    tDrv_t3_100bt_std_27 = Typ;
    tDrv_t3_100bt_std_50 = Typ;
    tDrv_t3_100bt_std_60 = Typ;
    tDrv_t3_100bt_tx_clkout_0 = Typ;
    tDrv_t3_100bt_tx_clkout_1 = Typ;
    tDrv_t3_100bt_tx_clkout_20 = Typ;
    tDrv_t3_100bt_tx_clkout_27 = Typ;
    tDrv_t3_100bt_tx_clkout_50 = Typ;
    tDrv_t3_100bt_tx_clkout_60 = Typ;
    tDrv_t3_10bt_rcv_clkout_0 = Typ;
    tDrv_t3_10bt_rcv_clkout_1 = Typ;
    tDrv_t3_10bt_rcv_clkout_20 = Typ;
    tDrv_t3_10bt_rcv_clkout_27 = Typ;
    tDrv_t3_10bt_rcv_clkout_50 = Typ;
    tDrv_t3_10bt_rcv_clkout_60 = Typ;
    tDrv_t3_10bt_std_0 = Typ;
    tDrv_t3_10bt_std_1 = Typ;
    tDrv_t3_10bt_std_20 = Typ;
    tDrv_t3_10bt_std_27 = Typ;
    tDrv_t3_10bt_std_50 = Typ;
    tDrv_t3_10bt_std_60 = Typ;
    tDrv_t3_adc_bandgap_0 = Typ;
    tDrv_t3_adc_bandgap_1 = Typ;
    tDrv_t3_adc_bandgap_20 = Typ;
    tDrv_t3_adc_bandgap_27 = Typ;
    tDrv_t3_adc_bandgap_50 = Typ;
    tDrv_t3_adc_bandgap_60 = Typ;
    tDrv_t3_adc_disable_0 = Typ;
    tDrv_t3_adc_disable_1 = Typ;
    tDrv_t3_adc_disable_20 = Typ;
    tDrv_t3_adc_disable_27 = Typ;
    tDrv_t3_adc_disable_50 = Typ;
    tDrv_t3_adc_disable_60 = Typ;
    tDrv_t3_adc_enable_obs_0 = Typ;
    tDrv_t3_adc_enable_obs_1 = Typ;
    tDrv_t3_adc_enable_obs_20 = Typ;
    tDrv_t3_adc_enable_obs_27 = Typ;
    tDrv_t3_adc_enable_obs_50 = Typ;
    tDrv_t3_adc_enable_obs_60 = Typ;
    tDrv_t3_adc_gain7_0 = Typ;
    tDrv_t3_adc_gain7_1 = Typ;
    tDrv_t3_adc_gain7_20 = Typ;
    tDrv_t3_adc_gain7_27 = Typ;
    tDrv_t3_adc_gain7_50 = Typ;
    tDrv_t3_adc_gain7_60 = Typ;
    tDrv_t3_adc_gain7_convert_0 = Typ;
    tDrv_t3_adc_gain7_convert_1 = Typ;
    tDrv_t3_adc_gain7_convert_20 = Typ;
    tDrv_t3_adc_gain7_convert_27 = Typ;
    tDrv_t3_adc_gain7_convert_50 = Typ;
    tDrv_t3_adc_gain7_convert_60 = Typ;
    tDrv_t3_adc_gain_000_0 = Typ;
    tDrv_t3_adc_gain_000_1 = Typ;
    tDrv_t3_adc_gain_000_20 = Typ;
    tDrv_t3_adc_gain_000_27 = Typ;
    tDrv_t3_adc_gain_000_50 = Typ;
    tDrv_t3_adc_gain_000_60 = Typ;
    tDrv_t3_sqlpf_ex_0 = Typ;
    tDrv_t3_sqlpf_ex_1 = Typ;
    tDrv_t3_sqlpf_ex_20 = Typ;
    tDrv_t3_sqlpf_ex_27 = Typ;
    tDrv_t3_sqlpf_ex_50 = Typ;
    tDrv_t3_sqlpf_ex_60 = Typ;
    tDrv_t3_sqlpf_std_0 = Typ;
    tDrv_t3_sqlpf_std_1 = Typ;
    tDrv_t3_sqlpf_std_20 = Typ;
    tDrv_t3_sqlpf_std_27 = Typ;
    tDrv_t3_sqlpf_std_50 = Typ;
    tDrv_t3_sqlpf_std_60 = Typ;
    tPer_t3_por_200 = Typ;
    tPer_t3_por_bypass_200 = Typ;
    tPer_t3_100bt_clk_out_phase_200 = Typ;
    tPer_t3_100bt_std_200 = Typ;
    tPer_t3_100bt_tx_clkout_200 = Typ;
    tPer_t3_10bt_rcv_clkout_200 = Typ;
    tPer_t3_10bt_std_200 = Typ;
    tPer_t3_adc_bandgap_200 = Typ;
    tPer_t3_adc_disable_200 = Typ;
    tPer_t3_adc_enable_obs_200 = Typ;
    tPer_t3_adc_gain7_200 = Typ;
    tPer_t3_adc_gain7_convert_200 = Typ;
    tPer_t3_adc_gain_000_200 = Typ;
    tPer_t3_sqlpf_ex_200 = Typ;
    tPer_t3_sqlpf_std_200 = Typ;
}
Test AC_DV_2A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = ADCPatSeq;
    Entry[2] = TurnOnObs_MUX_MF;
    Entry[3] = Set_ADC_test;
    Exit[0] = StopSMSSineWave_MF;
    Exit[1] = continue_patt;
    Exit[2] = Reset_ADC_test;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS AND switch <=3"; }
    PortExpr[1] = Expr { String = ".Result = tm_rslt:PASS AND switch >3"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = AC_DV_2A_logain;
    Title[1] = AC_DV_2A_higain;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:UNCONDITIONAL_EXECUTION"; }
    Test_pins[0] = Expr { String = "SMS4"; }
    Test_pins[1] = Expr { String = "SMS4"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = PHY_level;
    Micro_flow_sequence[0] = Rx_DV2A_logain_MUX_MF;
    Micro_flow_sequence[1] = Rx_DV2A_higain_MUX_MF;
}
MicroFlow Rx_DV2A_logain_MUX_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "SMSFreqUsed.Min"; }
    }
    Event[1] {
        Tag = LoopCount;
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "GainLoopCounter.Min"; }
    }
    Event[2] {
        Tag = TwosCompTable;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.Twos_complement_lookup_table";
        }
    }
    Event[3] {
        Tag = HarmLocsMin;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Min*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[4] {
        Tag = HarmLocsTyp;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Typ*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[5] {
        Tag = HarmLocsMax;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Max*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[6] {
        Tag = TEST;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.Setup_SMS_Rx100";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                do_cbits = Expr { String = "TRUE"; }
                Vbg = Expr { String = "if(Connected_to_tester(),Vbg,1.23V)"; }
                AnalogWaveformName = Expr { String = "selectx(SMSFreqUsed,'InvalidWave','RX100bt_gain_1MHz','RX100bt_gain_30MHz','RX100bt_gain_60MHz')"; }
                FSs = Expr { String = "Source_SampleRate"; }
                Ms_loc = Expr { String = "select(SMSFreqUsed, Source_M.Min, Source_M.Typ, Source_M.Max)"; }
                Ns = Expr { String = "Source_N"; }
                Amp = Expr { String = "select(SMSFreqUsed , SMSAmpMult1MHz , SMSAmpMult30MHz ,SMSAmpMult60MHz) *if(Connected_to_tester(),Vbg*1.7,1.23V)"; }
                AttSet = Expr { String = "selectx(SMSFreqUsed,0.9999,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)"; }
        }
    }
    Event[7] {
        Tag = GainLoop;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=0,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_000Thrd0,ADCPatSeq.Thread.t3_adc_gain_000Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=1,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_001Thrd0,ADCPatSeq.Thread.t3_adc_gain_001Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=2,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_010Thrd0,ADCPatSeq.Thread.t3_adc_gain_010Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=3,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_011Thrd0,ADCPatSeq.Thread.t3_adc_gain_011Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[11] {
        Tag = SMSOnitAMPs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "Rx_DV2A_logain_MUX_MF.TEST.AnalogWaveformName"; }
        }
    }
    Event[12] {
        Tag = SMSInitSet;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = "selectx(SMSFreqUsed,0.9999,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)*(1.0-0.60*GainLoopCounter/8.0)"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_lin'"; }
                Samples = Expr { String = "DPRO_Samples*4+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_lin'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = DSP_load_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_file = Expr { String = "'./Dpro/adc_all_MUX_calc.wmod'"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_lin_Thread0,ADCPatSeq.Thread.ADC_lin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Enable = Expr { String = "if((SMSFreqUsed=1),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsMin"; }
        }
    }
    Event[21] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Enable = Expr { String = "if((SMSFreqUsed=2),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsTyp"; }
        }
    }
    Event[22] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Enable = Expr { String = "if((SMSFreqUsed=3),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsMax"; }
        }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
            Expr = Expr { String = ".TwosCompTable"; }
        }
    }
    Event[24] {
        Tag = DummyTwosComp;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
        }
    }
    Event[25] {
        Tag = DummyHarmLocs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "26"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
        }
    }
    Event[26] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "27"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[27] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "28"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[28] {
        Tag = CalCapture;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "29"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_cal";
        }
    }
    Event[29] {
        Tag = CalFloatData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "30"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[30] {
        Tag = snr_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "31"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_cal";
        }
    }
    Event[31] {
        Tag = lin_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "32"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "lin_cal";
        }
    }
    Event[32] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "33"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".snr_cal_factor*.SMSInitSet"; }
                Low_limit = Expr { String = "0.1"; }
                High_limit = Expr { String = "1.0"; }
                Message_pins = Expr { String = "SMS4"; }
        }
    }
    Event[33] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "34"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".lin_cal_factor*.SMSInitSet"; }
                Low_limit = Expr { String = "0.1"; }
                High_limit = Expr { String = "1.0"; }
                Message_pins = Expr { String = "SMS4"; }
        }
    }
    Event[34] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "35"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = ".snr_cal_factor*.SMSInitSet*1.1"; }
        }
    }
    Event[35] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "36"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "Rx_DV2A_logain_MUX_MF.TEST.AnalogWaveformName"; }
        }
    }
    Event[36] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "37"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[37] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "38"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[38] {
        Tag = RawSinData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "39"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_sin";
        }
    }
    Event[39] {
        Tag = PowerFFTdB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "40"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFTdB";
        }
    }
    Event[40] {
        Tag = PowerFFT;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "41"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFT";
        }
    }
    Event[41] {
        Tag = Thd;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "42"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "THDdB";
        }
    }
    Event[42] {
        Tag = Snr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "43"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_db";
        }
    }
    Event[43] {
        Tag = Enob;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "44"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "enob";
        }
    }
    Event[44] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "45"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.Save_float_data";
                test_nam = Expr { String = "'3A_logain'"; }
                device_num = Expr { String = "SerialNumber()"; }
                f_ary = Expr { String = ".PowerFFTdB"; }
        }
    }
    Event[45] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "46"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "Rx_DV2A_logain_MUX_MF.TEST.AnalogWaveformName"; }
        }
    }
    Event[46] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "47"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = ".lin_cal_factor*.SMSInitSet"; }
        }
    }
    Event[47] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "48"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_lin'"; }
                Samples = Expr { String = "DPRO_Samples*4+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_lin'"; }
        }
    }
    Event[48] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "49"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_lin_Thread0,ADCPatSeq.Thread.ADC_lin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[49] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "50"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = DSP_execute_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_name = Expr { String = "'ADC_sinewave_lin'"; }
        }
    }
    Event[50] {
        Tag = RawLinData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "51"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_lin";
        }
    }
    Event[51] {
        Tag = Tally;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "52"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TallyArray";
        }
    }
    Event[52] {
        Tag = TempTally;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "53"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TempTallyArray";
        }
    }
    Event[53] {
        Tag = RefTally;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "54"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "ref_TallyArray";
        }
    }
    Event[54] {
        Tag = dnlArray;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "55"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "DnlArray";
        }
    }
    Event[55] {
        Tag = inlArray;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "56"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "InlArray";
        }
    }
    Event[56] {
        Tag = InlMax;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "57"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "inl";
        }
    }
    Event[57] {
        Tag = DnlMax;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "58"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "dnl";
        }
    }
    Event[58] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "59"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter=0"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST AC_DV_MUX_2A_Min >>>>>>>>>\n`')"; }
    }
    Event[59] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "60"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter=0"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 000\n`')"; }
    }
    Event[60] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "61"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter=0"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 000\n`')"; }
    }
    Event[61] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "62"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter=0"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 000\n`')"; }
    }
    Event[62] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "63"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter=1"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 001\n`')"; }
    }
    Event[63] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "64"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter=1"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 001\n`')"; }
    }
    Event[64] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "65"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter=1"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 001\n`')"; }
    }
    Event[65] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "66"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter=2"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 010\n`')"; }
    }
    Event[66] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "67"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter=2"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 010\n`')"; }
    }
    Event[67] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "68"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter=2"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 010\n`')"; }
    }
    Event[68] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "69"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter=3"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 011\n`')"; }
    }
    Event[69] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "70"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter=3"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 011\n`')"; }
    }
    Event[70] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "71"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter=3"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 011\n`')"; }
    }
    Event[71] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "72"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[72] {
        Tag = TestTHD;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "73"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "THD_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, THD_limit.Max, THD_limit.Typ, THD_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'THD'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[73] {
        Tag = TestSnr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "74"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "SNR_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, SNR_limit.Max, SNR_limit.Typ, SNR_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'SNR'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[74] {
        Tag = TestENOB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "75"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "select (SMSFreqUsed, ENOB_limit.Max, ENOB_limit.Typ, ENOB_limit.Min)"; }
                hi_lim_val = Expr { String = "ENOB_limit"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'ENOB'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[75] {
        Tag = TestINL;
        Index = Expr { String = "76"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.InlMax,0.5)"; }
                lo_lim_val = Expr { String = "ENOB_limit.Min-1"; }
                hi_lim_val = Expr { String = "INL_limit.Max"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'INL'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[76] {
        Tag = TestDNL;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "77"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.DnlMax,0.5)"; }
                lo_lim_val = Expr { String = "DNL_limit.Min"; }
                hi_lim_val = Expr { String = "DNL_limit.Max"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'DNL'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[77] {
        Tag = ResultsGain000;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "78"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=0,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[78] {
        Tag = ResultsGain001;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "79"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=1,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[79] {
        Tag = ResultsGain010;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "80"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=2,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[80] {
        Tag = ResultsGain011;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "81"; }
        Enable = Expr { String = "if(GainLoopCounter.Meas=3,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[81] {
        Tag = IncLoop;
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "82"; }
        Expr = Expr { String = "GainLoopCounter.Meas+1"; }
    }
    Event[82] {
        Tag = GLoop;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "83"; }
        Enable = Expr { String = "if(GainLoopCounter<=GainLoopCounter.Max,TRUE,FALSE)"; }
        Goto {
            Expr { String = ".GainLoop.Index"; }
        }
    }
    Event[83] {
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "84"; }
        Expr = Expr { String = "1+SMSFreqUsed"; }
    }
    Event[84] {
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "85"; }
        Expr = Expr { String = "GainLoopCounter.Min"; }
    }
    Event[85] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "86"; }
        Enable = Expr { String = "FALSE"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[86] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "87"; }
        Enable = Expr { String = "if (SMSFreqUsed < 4 , TRUE,FALSE)"; }
        Goto {
            Expr { String = ".TEST.Index"; }
        }
    }
    Event[87] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "88"; }
        Return {
            Expr { String = "if((.ResultsGain000=tm_rslt:PASS) AND (.ResultsGain001=tm_rslt:PASS) AND (.ResultsGain010=tm_rslt:PASS) AND (.ResultsGain011=tm_rslt:PASS),tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[85] = 1;
    RTypeStatus[87] = 1;
}
MicroFlow Rx_DV2A_higain_MUX_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "GainLoopCounter_higain.Min"; }
    }
    Event[1] {
        Tag = LoopCount;
        Value = Expr { String = "#->GainLoopCounter_higain"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "GainLoopCounter_higain.Min"; }
    }
    Event[2] {
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "3"; }
        Expr = Expr { String = "SMSFreqUsed.Min"; }
    }
    Event[3] {
        Tag = TwosCompTable;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.Twos_complement_lookup_table";
        }
    }
    Event[4] {
        Tag = HarmLocsMin;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Min*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[5] {
        Tag = HarmLocsTyp;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Typ*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[6] {
        Tag = HarmLocsMax;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = "Titan.tp.SMS_calc_harmonics";
                DPRO_Samples = Expr { String = "DPRO_Samples"; }
                fund_loc = Expr { String = "round(Source_M.Max*Source_SampleRate*WFT_ADC_GAIN.Period)"; }
                n_harms = Expr { String = "5"; }
        }
    }
    Event[7] {
        Tag = TEST;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = "Titan.tp.Setup_SMS_Rx100";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                do_cbits = Expr { String = "TRUE"; }
                Vbg = Expr { String = "if(Connected_to_tester(),Vbg,1.23V)"; }
                AnalogWaveformName = Expr { String = "selectx(SMSFreqUsed,'InvalidWave','RX100bt_higain_1MHz','RX100bt_higain_30MHz','RX100bt_higain_60MHz')"; }
                FSs = Expr { String = "Source_SampleRate"; }
                Ms_loc = Expr { String = "select(SMSFreqUsed , Source_M.Min, Source_M.Typ , Source_M.Max)"; }
                Ns = Expr { String = "Source_N"; }
                Amp = Expr { String = "select ( SMSFreqUsed , SMSAmpMult1MHz_higain ,SMSAmpMult30MHz_higain, SMSAmpMult60MHz_higain) *Vbg"; }
                AttSet = Expr { String = "selectx(SMSFreqUsed,0.9999,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)"; }
        }
    }
    Event[8] {
        Tag = GainLoop;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=4,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_100Thrd0,ADCPatSeq.Thread.t3_adc_gain_100Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=5,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_101Thrd0,ADCPatSeq.Thread.t3_adc_gain_101Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=6,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_110Thrd0,ADCPatSeq.Thread.t3_adc_gain_110Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=7,TRUE,FALSE)"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.t3_adc_gain_111Thrd0,ADCPatSeq.Thread.t3_adc_gain_111Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[12] {
        Tag = SMSInitSet;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = "selectx(SMSFreqUsed,0.9999,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)*(1.0-0.5*(GainLoopCounter_higain-GainLoopCounter_higain.Min)/8.0)"; }
        }
    }
    Event[13] {
        Tag = SMSInitSetSMS;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "Rx_DV2A_higain_MUX_MF.TEST.AnalogWaveformName"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_lin'"; }
                Samples = Expr { String = "DPRO_Samples*4+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_lin'"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = DSP_load_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_file = Expr { String = "'./Dpro/adc_all_MUX_calc.wmod'"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Enable = Expr { String = "SMSFirstRun"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_lin_Thread0,ADCPatSeq.Thread.ADC_lin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[21] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Enable = Expr { String = "if((SMSFreqUsed=1),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsMin"; }
        }
    }
    Event[22] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Enable = Expr { String = "if((SMSFreqUsed=2),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsTyp"; }
        }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        Enable = Expr { String = "if((SMSFreqUsed=3),TRUE,FALSE)"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = ".HarmLocsMax"; }
        }
    }
    Event[24] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
            Expr = Expr { String = ".TwosCompTable"; }
        }
    }
    Event[25] {
        Tag = DummyTwosComp;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "26"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "TwosCompTable";
        }
    }
    Event[26] {
        Tag = DummyHarmLocs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "27"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
        }
    }
    Event[27] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "28"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[28] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "29"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_cal_Thread0,ADCPatSeq.Thread.ADC_cal_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[29] {
        Tag = CalCapture;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "30"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_cal";
        }
    }
    Event[30] {
        Tag = CalFloatData;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "31"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[31] {
        Tag = snr_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "32"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_cal";
        }
    }
    Event[32] {
        Tag = lin_cal_factor;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "33"; }
        Enable = Expr { String = "FALSE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "lin_cal";
        }
    }
    Event[33] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "34"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".snr_cal_factor*.SMSInitSet"; }
                Low_limit = Expr { String = "0.1"; }
                High_limit = Expr { String = "1"; }
                Message_pins = Expr { String = "SMS4"; }
        }
    }
    Event[34] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "35"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = ".lin_cal_factor*.SMSInitSet"; }
                Low_limit = Expr { String = "0.1"; }
                High_limit = Expr { String = "1.0"; }
                Message_pins = Expr { String = "SMS4"; }
        }
    }
    Event[35] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "36"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = ".snr_cal_factor*.SMSInitSet*1.1"; }
        }
    }
    Event[36] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "37"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "Rx_DV2A_higain_MUX_MF.TEST.AnalogWaveformName"; }
        }
    }
    Event[37] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "38"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "DPRO_Samples+100"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[38] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "39"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ADC_sin_Thread0,ADCPatSeq.Thread.ADC_sin_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[39] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "40"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_sin";
        }
    }
    Event[40] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "41"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[41] {
        Tag = PowerFFTdB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "42"; }
        Enable = Expr { String = "DebugTest OR Save_file"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFTdB";
        }
    }
    Event[42] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "43"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFT";
        }
    }
    Event[43] {
        Tag = Snr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "44"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_db";
        }
    }
    Event[44] {
        Tag = Thd;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "45"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "THDdB";
        }
    }
    Event[45] {
        Tag = Enob;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "46"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "enob";
        }
    }
    Event[46] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "47"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter_higain=4"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 100\n`')"; }
    }
    Event[47] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "48"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter_higain=4"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 100\n`')"; }
    }
    Event[48] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "49"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter_higain=4"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 100\n`')"; }
    }
    Event[49] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "50"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter_higain=5"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 101\n`')"; }
    }
    Event[50] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "51"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter_higain=5"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 101\n`')"; }
    }
    Event[51] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "52"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter_higain=5"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 101\n`')"; }
    }
    Event[52] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "53"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter_higain=6"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 110\n`')"; }
    }
    Event[53] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "54"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter_higain=6"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 110\n`')"; }
    }
    Event[54] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "55"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter_higain=6"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 110\n`')"; }
    }
    Event[55] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "56"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=1 AND GainLoopCounter_higain=7"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, Gain 111\n`')"; }
    }
    Event[56] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "57"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=2 AND GainLoopCounter_higain=7"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, Gain 111\n`')"; }
    }
    Event[57] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "58"; }
        Enable = Expr { String = "Print_characterisation AND SMSFreqUsed=3 AND GainLoopCounter_higain=7"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, Gain 111\n`')"; }
    }
    Event[58] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "59"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[59] {
        Tag = TestTHD;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "60"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "THD_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, THD_limit.Max, THD_limit.Typ, THD_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'THD'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[60] {
        Tag = TestSnr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "61"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "SNR_limit"; }
                hi_lim_val = Expr { String = "select (SMSFreqUsed, SNR_limit.Max, SNR_limit.Typ, SNR_limit.Min)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "'SNR'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[61] {
        Tag = TestENOB;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "62"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "select (SMSFreqUsed, ENOB_limit.Max, ENOB_limit.Typ, ENOB_limit.Min)"; }
                hi_lim_val = Expr { String = "ENOB_limit"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "'ENOB'"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[62] {
        Tag = ResultsGain100;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "63"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=4,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[63] {
        Tag = ResultsGain101;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "64"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=5,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[64] {
        Tag = ResultsGain110;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "65"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=6,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[65] {
        Tag = ResultsGain111;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "66"; }
        Enable = Expr { String = "if(GainLoopCounter_higain.Meas=7,TRUE,FALSE)"; }
        Expr = Expr { String = "if(.TestTHD AND .TestSnr AND .TestENOB,tm_rslt:PASS,tm_rslt:FAIL)"; }
    }
    Event[66] {
        Tag = IncLoop;
        Value = Expr { String = "#->GainLoopCounter_higain"; Mode = Output; }
        Index = Expr { String = "67"; }
        Expr = Expr { String = "GainLoopCounter_higain.Meas+1"; }
    }
    Event[67] {
        Tag = GLoop;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "68"; }
        Enable = Expr { String = "if(GainLoopCounter_higain<=GainLoopCounter_higain.Max,TRUE,FALSE)"; }
        Goto {
            Expr { String = ".GainLoop.Index"; }
        }
    }
    Event[68] {
        Value = Expr { String = "#->GainLoopCounter_higain"; Mode = Output; }
        Index = Expr { String = "69"; }
        Expr = Expr { String = "GainLoopCounter_higain.Min"; }
    }
    Event[69] {
        Value = Expr { String = "#->SMSFreqUsed"; Mode = Output; }
        Index = Expr { String = "70"; }
        Expr = Expr { String = "1+SMSFreqUsed"; }
    }
    Event[70] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "71"; }
        Enable = Expr { String = "FALSE"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[71] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "72"; }
        Enable = Expr { String = "if(SMSFreqUsed<=3,TRUE,FALSE) "; }
        Goto {
            Expr { String = ".TEST.Index"; }
        }
    }
    Event[72] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "73"; }
        Return {
            Expr { String = "if((.ResultsGain100=tm_rslt:PASS) AND (.ResultsGain101=tm_rslt:PASS) AND (.ResultsGain110=tm_rslt:PASS) AND (.ResultsGain111=tm_rslt:PASS),tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[70] = 1;
    RTypeStatus[72] = 1;
}
MicroFlow AddSwitchMF {
    Event[0] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "switch+1"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.setMaxNum";
                input_data = Expr { String = ".Rslt"; }
        }
    }
}
Test Set_CatSel_0 {
    Result = Expr { String = "#"; Mode = Output; }
    PortExpr[0] = Expr { String = "skip(if(TIDeviceType!=20 AND TIDeviceType!=21, TRUE,FALSE) AND (.Result = tm_rslt:PASS))"; }
    PortExpr[1] = Expr { String = "TRUE AND (TIDeviceType=20)"; }
    LoopDepth = Outside;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:FLOW_ONLY"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = Set_switch_0_MF;
    Analysis_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
    Characterization_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
}
MicroFlow Set_switch_0_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "acx.mod.BrakePoint";
        }
    }
    Event[1] {
        Value = Expr { String = "#->MinTypMax_Mask"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "0"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = PHY_level;
    }
    Event[3] {
        Value = Expr { String = "#->MinTypMax_Mask"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "0"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "AVdd"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: Temperature = %d \n`, Temperature')
"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: VDD = %f V\n`, AVdd.Max')"; }
    }
    Event[8] {
        Value = Expr { String = "#->CatSel"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "if(MinTypMax_Mask=0 AND Print_characterisation,TRUE,FALSE)"; }
        Expr = Expr { String = "CatSel.Min"; }
    }
    Event[9] {
        Value = Expr { String = "#->CatSel"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "if(MinTypMax_Mask=1,TRUE,FALSE)"; }
        Expr = Expr { String = "CatSel.Min"; }
    }
    Event[10] {
        Value = Expr { String = "#->CatSel"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "if(MinTypMax_Mask=2,TRUE,FALSE)"; }
        Expr = Expr { String = "CatSel.Typ"; }
    }
    Event[11] {
        Value = Expr { String = "#->CatSel"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "if(MinTypMax_Mask=3,TRUE,FALSE)"; }
        Expr = Expr { String = "CatSel.Max"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Expr = Expr { String = "Print('DLOG,`\n')"; }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "if(MinTypMax_Mask=0,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,` Device serial number: %d\n` ,SerialNumber()')"; }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "if(MinTypMax_Mask=0,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: VDD = %f V\n\n`, AVdd')"; }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "if(MinTypMax_Mask=1,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: VDD = %f V\n`, AVdd.Min')"; }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "if(MinTypMax_Mask=2,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,` VDD Max Spec Tests running...\n\n')"; }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "if(MinTypMax_Mask=3,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,` VDD Max Spec Tests running...\n\n')"; }
    }
    RTypeStatus[4] = 1;
}
Test Inc_CatSel {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = TritonInitMask;
    PortExpr[0] = Expr { String = "if ((MinTypMax_Mask <3),TRUE,FALSE) AND Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "if(Print_characterisation,Seq_en:DEFAULT_EXECUTION,Seq_en:BYPASS)"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = Inc_CatSel_MF;
    Analysis_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
    Characterization_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
}
MicroFlow Inc_CatSel_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: End_Datalog\n')"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "Print('DLOG,` Voltage level: %e\n\n` ,PHY_level.PowerSupply.VDD')"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#->MinTypMax_Mask"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "MinTypMax_Mask+1"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "if(MinTypMax_Mask > 2,FALSE,TRUE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: Begin_Datalog\n')"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "if(MinTypMax_Mask > 2,FALSE,TRUE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: Temperature = %d \n`, Temperature')
"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "if(MinTypMax_Mask > 2,FALSE,TRUE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: WAFER = %d \n`, DieIDMF.DIE_ARRAY.Die_Id_wafer')
"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "if(MinTypMax_Mask > 2,FALSE,TRUE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: X = %d \n`, DieIDMF.DIE_ARRAY.Die_Id_x')
"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "if(MinTypMax_Mask > 2,FALSE,TRUE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: Y = %d \n`,DieIDMF.DIE_ARRAY.Die_Id_y')"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "if(MinTypMax_Mask = 1,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: VDD = %f V\n`, AVdd.Min')"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "if(MinTypMax_Mask = 2,TRUE,FALSE)"; }
        Expr = Expr { String = "Print('DLOG,`DP_PARAM: VDD = %f V\n\n`, AVdd.Max')"; }
    }
    RTypeStatus[2] = 1;
}
Test Basic_focus_cal {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = AC_mask_standard;
    Mask[1] = DC_mask_standard;
    Entry[0] = focus_cal_levels;
    Entry[1] = Disconnnect_CBIT_10;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = Tcal;
    Cal_enable = Expr { String = "TRUE"; }
    Test_pins = Expr { String = "ALLPINS-PHY_EXRES_RTN"; }
    TcalObject = Triton_std_board_fcal;
    Calibration_mode = Expr { String = "CalMode:Execute_Calibration"; }
}
Levels focus_cal_levels {
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Group = Expr { String = "ALLPINS"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2.4V"; }
    	Iol = Expr { String = "30mA"; }
    	Ioh = Expr { String = "-30mA"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "1mS"; }
    }
    Column[1] {
    	LevelsColumnType = evCalibrationType;
    	Group = Expr { String = "ALLPINS"; }
    	Cal_Vref_Vih = Expr { String = "1.5V"; }
    	Cal_Vref_Vil = Expr { String = "500mV"; }
    	Cal_Vih_Vref = Expr { String = "1.5V"; }
    	Cal_Vil_Vref = Expr { String = "500mV"; }
    	Cal_Vil_Vih = Expr { String = "1V"; }
    	Cal_Vih_Vil = Expr { String = "1V"; }
    }
}

MicroFlow continue_patt {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Disable_datalog = Expr { String = "TRUE"; }
        }
    }
}

MicroFlow bandgap_min_mf {
    Event[0] {
        Value = Expr { Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        SerialMode {
            Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:CENTRAL_PARAMETRIC_UNIT"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if( PHY0_sel,EPHY_ADCPatSeq.Thread.ephy_bandgap_Thread0,EPHY_ADCPatSeq.Thread.ephy_bandgap_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Disable_datalog = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "'LAN running the bandgap pattern'"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Log_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Current;
                Pins = Expr { String = "PHY_TSTA"; }
                Forced_value = Expr { String = "0A"; }
                Min_allowed_voltage = Expr { String = "1.15V"; }
                Max_allowed_voltage = Expr { String = "1.3V"; }
                Max_expected_voltage = Expr { String = "2V"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#->Vbg"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Measure_voltage;
                Single_pin = Expr { String = "PHY_TSTA"; }
                Max_expected_voltage = Expr { String = "2V"; }
                Measurement_delay = Expr { String = "5mS"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "FALSE"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_BAND_GAP_GAIN_000','v', Vbg.Meas , TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Tag = DlogVbg0;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "Vbg.Meas"; }
                Low_limit = Expr { String = "Vbg.Min+0.002V*SigmaGuardbandFactor"; }
                High_limit = Expr { String = "Vbg.Max-0.002V*SigmaGuardbandFactor"; }
                Datalog_message = Expr { String = "'P0_BAND_GAP_GAIN_000'"; }
                Message_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'PHY_TSTA'"; }
                data_val = Expr { String = "Vbg.Meas"; }
                lo_lim_val = Expr { String = "Vbg.Min+0.002V*SigmaGuardbandFactor"; }
                hi_lim_val = Expr { String = "Vbg.Max-0.002V*SigmaGuardbandFactor"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'P0_BAND_GAP_GAIN_000'"; }
                fname = Expr { String = "'BG'"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if( NOT PHY0_sel,EPHY_ADCPatSeq.Thread.ephy_bandgap_Thread0,EPHY_ADCPatSeq.Thread.ephy_bandgap_Thread1)"; }
                Disable_datalog = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "'PC running the bandgap pattern'"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Current;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Control:APPLY"; }
                Forced_value = Expr { String = "0A"; }
                Min_allowed_voltage = Expr { String = "1.15V"; }
                Max_allowed_voltage = Expr { String = "1.3V"; }
                Max_expected_voltage = Expr { String = "2V"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#->Vbg1"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Measure_voltage;
                Single_pin = Expr { String = "PHY_TSTA"; }
                Max_expected_voltage = Expr { String = "2V"; }
                Measurement_delay = Expr { String = "5mS"; }
                Averages = Expr { String = "1"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_BAND_GAP_GAIN_000','v', Vbg1.Meas , TWDataType:TWMinimumData)"; }
    }
    Event[14] {
        Tag = DlogVbg;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "Vbg1.Meas"; }
                Low_limit = Expr { String = "Vbg.Min+0.002V*SigmaGuardbandFactor"; }
                High_limit = Expr { String = "Vbg.Max-0.002V*SigmaGuardbandFactor"; }
                Datalog_message = Expr { String = "'P1_BAND_GAP_GAIN_000'"; }
                Message_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'PHY_TSTA'"; }
                data_val = Expr { String = "Vbg1.Meas"; }
                lo_lim_val = Expr { String = "Vbg.Min+0.002V*SigmaGuardbandFactor"; }
                hi_lim_val = Expr { String = "Vbg.Max-0.002V*SigmaGuardbandFactor"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'P1_BAND_GAP_GAIN_000'"; }
                fname = Expr { String = "'BG'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
    Event[18] {
        Value = Expr { Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "TRUE"; }
        SerialMode {
            Expr { String = "FALSE"; }
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Return {
            Expr { String = "if (.DlogVbg=tm_rslt:PASS AND .DlogVbg0 =  tm_rslt:PASS, tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[19] = 1;
}
Test Bandgap {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level_32V;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = continue_patt;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result = tm_rslt:FAIL"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = MeasVbg;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:BYPASS"; }
    Test_pins[0] = Expr { String = "PHY_TSTA"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = bandgap_min_mf;
    Simulate_results[0] = Expr { String = "tm_rslt:PASS"; }
}
Test AC_DV_2A_vcom {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = ADCPatSeq;
    Entry[2] = Setup_AC_DV_4A_MF;
    Exit[0] = continue_patt;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = VCOM_Meas;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = AC_DV_2A_vcom_mf;
}
MicroFlow Disconnnect_CBIT_10 {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:RELAY_CONTROL"; }
                Connection = Expr { String = "Connect:LOW"; }
        }
    }
}
PinType cbit {
    Type = CBit;
}
PinGroup DiagAllPinsH2 {
}
PinGroup DiagAllPins {
	Group = Expr { String = "DiagAllPinsH2"; }
}
MicroFlow sqlpf_NSQE_mf {
    Event[0] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "150mV {600mV}"; }
    }
    Event[1] {
        Tag = inc_vdiff;
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "V_Diff + 1mV {V_Diff-10mV}"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXP+PC_RXP"; }
                Vin_low = Expr { String = "AVdd-AVdd"; }
                Vin_high = Expr { String = "AVdd/2+V_Diff/2"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXM+PC_RXM"; }
                Vin_low = Expr { String = "AVdd/2-V_Diff/2"; }
                Vin_high = Expr { String = "AVdd"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[4] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd0,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Goto {
            Expr { String = "if(.rslt=tm_rslt:PASS AND V_Diff<600mV,.inc_vdiff.Index,.outs.Index)"; }
        }
    }
    Event[6] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST SQLPF_DV_1A >>>>>>>>>\n`')"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "-V_Diff"; }
                lo_lim_val = Expr { String = "SQE_Thres.Min"; }
                hi_lim_val = Expr { String = "SQE_Thres.Max"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "'NSQE comparator threshold'"; }
                fname = Expr { String = "'NSQE'"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Print('DLOG,`\n\nNSQE comparator threshold:\t%2.4fV\n`,V_Diff')"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    RTypeStatus[10] = 1;
}
PinGroup SQULCH_PINS {
	Group = Expr { String = "CODEC_FS+CODEC_RINGIN4+CODEC_RINGIN3+CODEC_RINGIN2"; }
}
Levels High_pulse_width_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXPosPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "100mV"; }
    	Voh = Expr { String = "200mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "5ms"; }
    }
}
Levels Low_pulse_width_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = TXPosPulse;
    	Group = Expr { String = "TX_MAG"; }
    	Vol = Expr { String = "-200mV"; }
    	Voh = Expr { String = "-100mV"; }
    	Voc = Expr { String = "0V"; }
    	Delay = Expr { String = "1ms"; }
    }
}
MicroFlow AC_DCV_1A_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.ac_dv_1a_Thread0,ADCPatSeq.Thread.ac_dv_1a_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Log_pins = Expr { String = "PHY_TSTA"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:CENTRAL_PARAMETRIC_UNIT"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Current;
                Pins = Expr { String = "PHY_EXRES"; }
                Control_mode = Expr { String = "Control:APPLY"; }
                Forced_value = Expr { String = "0A"; }
                Min_allowed_voltage = Expr { String = "1.V"; }
                Max_allowed_voltage = Expr { String = "5V"; }
                Max_expected_voltage = Expr { String = "2.5V"; }
        }
    }
    Event[5] {
        Tag = V2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Measure_voltage;
                Single_pin = Expr { String = "PHY_EXRES"; }
                Max_expected_voltage = Expr { String = "2.5V"; }
                Measurement_delay = Expr { String = "10mS"; }
                Averages = Expr { String = "1"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST AC_DV_1A >>>>>>>>>\n`')"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[8] {
        Tag = VXR;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'PHY_EXRES'"; }
                data_val = Expr { String = "AC_DCV_1A_MF.V2"; }
                lo_lim_val = Expr { String = "VPHY_EXRES.Min"; }
                hi_lim_val = Expr { String = "VPHY_EXRES.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'PHY_EXRES'"; }
                fname = Expr { String = "'XR'"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Return {
            Expr { String = "if (.VXR,tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[9] = 1;
}
Test SQLPF_PHY0_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = SetUpSquelch_phy0_xfmr_MF;
    Exit[0] = continue_patt;
    Exit[1] = StopSMSSineWave_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS  OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = NSQE;
    Title[1] = PSQE;
    Title[2] = RXTPM;
    Title[3] = RXTPP;
    TestMethod = Ftest;
    Test_enable[0] = Expr { String = "Seq_en:FLOW_AFTER_MEASUREMENT "; }
    Test_enable[1] = Expr { String = "Seq_en:FLOW_AFTER_MEASUREMENT "; }
    Test_enable[2] = Expr { String = "Seq_en:FLOW_AFTER_MEASUREMENT "; }
    Test_enable[3] = Expr { String = "Seq_en:FLOW_AFTER_MEASUREMENT "; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN2"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN3"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN4"; }
    Test_pins[3] = Expr { String = "CODEC_FS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = SQLPF_Lvl;
    Micro_flow_sequence[0] = sqlpf_PHY0_mf;
    Micro_flow_sequence[1] = sqlpf_PHY0_mf;
    Micro_flow_sequence[2] = sqlpf_PHY0_mf;
    Micro_flow_sequence[3] = sqlpf_PHY0_mf;
    Simulate_results[0] = Expr { String = "tm_rslt:PASS"; }
    Simulate_results[1] = Expr { String = "tm_rslt:PASS"; }
    Simulate_results[2] = Expr { String = "tm_rslt:PASS"; }
    Simulate_results[3] = Expr { String = "tm_rslt:PASS"; }
    Simulator_measurement[1] = Expr { String = "TRUE"; }
    Simulator_measurement[2] = Expr { String = "TRUE"; }
    Simulator_measurement[3] = Expr { String = "TRUE"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[3] = Expr { String = "Log:LOG_OFF"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable[3] = Expr { String = "FALSE"; }
    Characterization_pins[0] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[1] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[2] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[3] = Expr { String = "CODEC_RINGIN2"; }
    Characterize_by_pin[0] = Expr { String = "TRUE"; }
    Characterize_by_pin[1] = Expr { String = "TRUE"; }
    Characterize_by_pin[2] = Expr { String = "TRUE"; }
    Characterize_by_pin[3] = Expr { String = "TRUE"; }
    Acquisition_method[0] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[1] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[2] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[3] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Independent_axis[0] = vvvv;
    Independent_axis[1] = vvvv;
    Independent_axis[2] = vvvv;
    Independent_axis[3] = vvvv;
    Dependent_axis[0] = xxxx;
    Dependent_axis[1] = xxxx;
    Dependent_axis[2] = xxxx;
    Dependent_axis[3] = xxxx;
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[3] = Expr { String = "FALSE"; }
    Acquisition_method_1[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_1[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_1[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[3] = Expr { String = "FALSE"; }
    Acquisition_method_2[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_2[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_2[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[3] = Expr { String = "FALSE"; }
    Acquisition_method_3[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_3[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_3[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[3] = Expr { String = "FALSE"; }
    Acquisition_method_4[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_4[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_4[3] = Expr { String = "Char_method:BINARY"; }
}
Levels SQLPF_RX_levels {
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = LowVoltMode;
    	Group = Expr { String = "LAN_RXP+PC_RXP+LAN_RXM+PC_RXM"; }
    	ExecSeq = Expr { String = "0"; }
    	Vil = Expr { String = "AVdd/2-V_DiffLo/2"; }
    	Vih = Expr { String = "AVdd/2+V_DiffLo/2"; }
    	Vol = Expr { String = "1.5V"; }
    	Voh = Expr { String = "1.8V"; }
    	Iol = Expr { String = "0nA"; }
    }
}
Axis vvvv {
    NumSteps = Expr { String = "2"; }
    ParameterVariance {
        Param iovdd_parm;
        Start = Expr { String = "3V"; }
        Stop = Expr { String = "3.6V"; }
        PinGroup = Expr { }
    }
}
Axis xxxx {
    NumSteps = Expr { String = "50"; }
    ParameterVariance {
        Param V_Diff;
        Start = Expr { String = "0V"; }
        Stop = Expr { String = "800mV"; }
        PinGroup = Expr { String = "CODEC_RINGIN2"; }
    }
}
MicroFlow sqlpf_PSQE_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "150mV {-800mV}"; }
    }
    Event[1] {
        Tag = inc_vdiff;
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "V_Diff + 1mV {V_Diff+10mV}"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXP+PC_RXP"; }
                Vin_low = Expr { String = "AVdd-AVdd"; }
                Vin_high = Expr { String = "AVdd/2+V_Diff/2"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXM+PC_RXM"; }
                Vin_low = Expr { String = "AVdd/2-V_Diff/2"; }
                Vin_high = Expr { String = "AVdd"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[4] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd0,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Goto {
            Expr { String = "if(.rslt=tm_rslt:PASS AND V_Diff<2V,.inc_vdiff.Index,.outs.Index)"; }
        }
    }
    Event[6] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "V_Diff"; }
                lo_lim_val = Expr { String = "SQE_Thres.Min"; }
                hi_lim_val = Expr { String = "SQE_Thres.Max"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "'PSQE comparator threshold'"; }
                fname = Expr { String = "'PSQE'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Print('DLOG,`PSQE comparator threshold:\t%2.4fV\n`,V_Diff')"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    RTypeStatus[8] = 1;
}
MicroFlow sqlpf_RXTPM_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "200mV"; }
    }
    Event[1] {
        Tag = inc_vdiff;
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "V_Diff-10mV"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXP+PC_RXP"; }
                Vin_low = Expr { String = "AVdd-AVdd"; }
                Vin_high = Expr { String = "AVdd/2+V_Diff/2"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXM+PC_RXM"; }
                Vin_low = Expr { String = "AVdd/2-V_Diff/2"; }
                Vin_high = Expr { String = "AVdd"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[4] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd0,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Goto {
            Expr { String = "if(.rslt=tm_rslt:PASS AND V_Diff>-300mV,.inc_vdiff.Index,.outs.Index)"; }
        }
    }
    Event[6] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "-V_Diff"; }
                lo_lim_val = Expr { String = "RXTP_Thres.Min"; }
                hi_lim_val = Expr { String = "RXTP_Thres.Max"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "'RXTPM comparator threshold'"; }
                fname = Expr { String = "'RXTPM'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Print('DLOG,`RXTPM comparator threshold:\t%2.4fV\n`,V_Diff')"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    RTypeStatus[8] = 1;
}
MicroFlow sqlpf_RXTPP_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "-800mV"; }
    }
    Event[1] {
        Tag = inc_vdiff;
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "V_Diff+10mV"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXP+PC_RXP"; }
                Vin_low = Expr { String = "AVdd-AVdd"; }
                Vin_high = Expr { String = "AVdd/2+V_Diff/2"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Pin_levels;
                Pins = Expr { String = "LAN_RXM+PC_RXM"; }
                Vin_low = Expr { String = "AVdd/2-V_Diff/2"; }
                Vin_high = Expr { String = "AVdd"; }
                Vout_low = Expr { String = "1.5V"; }
                Vout_high = Expr { String = "1.8V"; }
        }
    }
    Event[4] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd0,XfmrPatSeq.Thread.t3_sqlpf_std_match_xfmrThrd1)"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Goto {
            Expr { String = "if(.rslt=tm_rslt:PASS AND V_Diff<2V,.inc_vdiff.Index,.outs.Index)"; }
        }
    }
    Event[6] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "V_Diff"; }
                lo_lim_val = Expr { String = "RXTP_Thres.Min"; }
                hi_lim_val = Expr { String = "RXTP_Thres.Max"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "'RXTPP comparator threshold'"; }
                fname = Expr { String = "'RXTPP'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "Print('DLOG,`RXTPP comparator threshold:\t%2.4fV\n`,V_Diff')"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    RTypeStatus[8] = 1;
}
MicroFlow Datalog_PHY0_PLL10_DV_1A_Min {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_TX_PER','ns',PHY0_PLL10_DV_1A.Measurement_results.P0_PLL10_XMIT_DV_1A[0] , TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_TX_JITTER','s', PHY0_PLL10_DV_1A.Additional_results.P0_PLL10_XMIT_DV_1A[0] , TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_PER','s', PHY0_PLL10_DV_1A.Measurement_results.P0_PLL10_RCV_DV_1A_ref[0] , TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_JITTER','s', PHY0_PLL10_DV_1A.Additional_results.P0_PLL10_RCV_DV_1A_ref[0] , TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_PER_5MHZ','s', PHY0_PLL10_DV_1A.Measurement_results.P0_PLL10_RCV_DV_1A_data[0] , TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_JITTER_5MHZ','s', PHY0_PLL10_DV_1A.Additional_results.P0_PLL10_RCV_DV_1A_data[0] , TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_PER_5_05MHZ','s', PHY0_PLL10_DV_1A.Measurement_results.P0_PLL10_RCV_DV_1A_data_hi[0] , TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL10_RX_JITTER_5_05MHZ','s', PHY0_PLL10_DV_1A.Additional_results.P0_PLL10_RCV_DV_1A_data_hi[0] , TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "FALSE"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.P0_PLL10_XMIT_DV_1A = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Measurement_results.P0_PLL10_XMIT_DV_1A[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Low_limit.P0_PLL10_XMIT_DV_1A"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.High_limit.P0_PLL10_XMIT_DV_1A"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_TRA_PER'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_XMIT_DV_1A = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Additional_results.PHY0_PLL10_XMIT_DV_1A[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_low_limit.PHY0_PLL10_XMIT_DV_1A"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_high_limit.PHY0_PLL10_XMIT_DV_1A"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_TRA_PER_JITTER'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_ref = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Measurement_results.PHY0_PLL10_RCV_DV_1A_ref[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Low_limit.PHY0_PLL10_RCV_DV_1A_ref"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.High_limit.PHY0_PLL10_RCV_DV_1A_ref"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_PER_REF'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_ref = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Additional_results.PHY0_PLL10_RCV_DV_1A_ref[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_low_limit.PHY0_PLL10_RCV_DV_1A_ref"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_high_limit.PHY0_PLL10_RCV_DV_1A_ref"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_PER_JITTER_REF'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_data = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Measurement_results.PHY0_PLL10_RCV_DV_1A_data[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Low_limit.PHY0_PLL10_RCV_DV_1A_data"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.High_limit.PHY0_PLL10_RCV_DV_1A_data"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_PER_5MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_data = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Additional_results.PHY0_PLL10_RCV_DV_1A_data[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_low_limit.PHY0_PLL10_RCV_DV_1A_data"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_high_limit.PHY0_PLL10_RCV_DV_1A_data"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_PER_JITTER_5MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_data_hi = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Measurement_results.PHY0_PLL10_RCV_DV_1A_data_hi[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Low_limit.PHY0_PLL10_RCV_DV_1A_data_hi"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.High_limit.PHY0_PLL10_RCV_DV_1A_data_hi"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_PER_5_05MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY0_PLL10_DV_1A.Test_result.PHY0_PLL10_RCV_DV_1A_data_hi = tm_rslt:TIME_OUT_FAIL),PHY0_PLL10_DV_1A.Additional_results.PHY0_PLL10_RCV_DV_1A_data_hi[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_low_limit.PHY0_PLL10_RCV_DV_1A_data_hi"; }
                hi_lim_val = Expr { String = "PHY0_PLL10_DV_1A.Additional_high_limit.PHY0_PLL10_RCV_DV_1A_data_hi"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL10_REC_JITTER_5_05MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    RTypeStatus[8] = 1;
}
MicroFlow Datalog_PHY1_PLL100_DV_1A_Min {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL100_PERIOD','hz',PHY1_PLL100_DV_1A.Measurement_results.P1_PhaseFreq[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL100_JITTER','hz',PHY1_PLL100_DV_1A.Additional_results.P1_PhaseFreq[0], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[4] {
        Tag = rst1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "Print_characterisation"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PHY1_PLL100_DV_1A.Measurement_results.PHY1_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "pll100_per.Min"; }
                hi_lim_val = Expr { String = "pll100_per.Max"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL100_PHASE_PER'"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[5] {
        Tag = rst2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "Print_characterisation"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PHY1_PLL100_DV_1A.Additional_results.PHY1_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "PHY1_PLL100_DV_1A.Additional_low_limit.PHY1_PhaseFreq"; }
                hi_lim_val = Expr { String = "PHY1_PLL100_DV_1A.Additional_high_limit.PHY1_PhaseFreq"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL100_PHASE_PER_JITTER'"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    RTypeStatus[2] = 1;
}
MicroFlow Datalog_TX10bt_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST Tx_10BT_Timing >>>>>>>>>\n`')"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Measurement_results.LongPeriod[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Low_limit.LongPeriod"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.High_limit.LongPeriod"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'5 MHz period (long pulse)'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Additional_results.LongPeriod[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Additional_low_limit.LongPeriod"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.Additional_high_limit.LongPeriod"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'5 MHz jitter'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Measurement_results.LongDutyCycle[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Low_limit.LongDutyCycle"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.High_limit.LongDutyCycle"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Long pulse width'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Additional_results.LongDutyCycle[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Additional_low_limit.LongDutyCycle"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.Additional_high_limit.LongDutyCycle"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Long pulse width jitter'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Measurement_results.ShortPeriod[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Low_limit.ShortPeriod"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.High_limit.ShortPeriod"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'10 MHz period (short pulse)'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Additional_results.ShortPeriod[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Additional_low_limit.ShortPeriod"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.Additional_high_limit.ShortPeriod"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'10 MHz jitter'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Measurement_results.ShortDutyCycle[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Low_limit.ShortDutyCycle"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.High_limit.ShortDutyCycle"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Short pulse width'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'LAN_TXP+PC_TXP'"; }
                data_val = Expr { String = "Tx_10BT_Timing.Additional_results.ShortDutyCycle[0]"; }
                lo_lim_val = Expr { String = "Tx_10BT_Timing.Additional_low_limit.ShortDutyCycle"; }
                hi_lim_val = Expr { String = "Tx_10BT_Timing.Additional_high_limit.ShortDutyCycle"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'Short pulse width jitter'"; }
                fname = Expr { String = "'TX10'"; }
        }
    }
}
WaveformTable WFT_MAIN {
    Period "20nS";
    Inherit Sync_clck_WF.Sync_clk1;
    Cell "DUT_PM+DUT_PM_" z/Z Pm_line {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0nS"; DriveData @ "0nS"; }
        }
    }
    Cell "LCD_PD01" z/Z LCD_PD01_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LCD_PD05" z/Z LCD_PD05_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "CODEC_CLKIN" z/Z CODEC_CLKIN_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "RST_N" z/Z RST_N_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "REFCLKI" z/Z REFCLKI_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.05"; DriveData @ "WFT_MAIN.Period*0.05"; DriveLow @ "WFT_MAIN.Period*.55"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "EJTAG_TCK" z/Z EJTAG_TCK_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "JTAG_TCK" z/Z JTAG_TCK_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LAN_RXM" z/Z LAN_RXM_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "PC_RXM" z/Z PC_RXM_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LAN_RXP" z/Z LAN_RXP_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "PC_RXP" z/Z PC_RXP_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO0" z/Z GPIO0_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.3000"; DriveData @ "WFT_MAIN.Period*0.3000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO2" z/Z GPIO2_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.3000"; DriveData @ "WFT_MAIN.Period*0.3000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO3" z/Z GPIO3_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.1000"; DriveData @ "WFT_MAIN.Period*0.1000"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "GPIO4" z/Z GPIO4_tp1_in {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.3"; DriveData @ "WFT_MAIN.Period*0.3"; }
            Control DriveOn NonMuxed;
        }
    }
    Cell "LCD_PD08" a/A LCD_PD08_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD00" a/A LCD_PD00_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD12" a/A LCD_PD12_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.2500"; CompareClose @ "WFT_MAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD13" a/A LCD_PD13_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD14" a/A LCD_PD14_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.2500"; CompareClose @ "WFT_MAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD15" a/A LCD_PD15_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD11" a/A LCD_PD11_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD09" a/A LCD_PD09_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*1"; CompareClose @ "WFT_MAIN.Period*1.2"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD06" a/A LCD_PD06_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.2500"; CompareClose @ "WFT_MAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_PD10" a/A LCD_PD10_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.2500"; CompareClose @ "WFT_MAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_SPEED100" a/A PC_SPEED100_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.2500"; CompareClose @ "WFT_MAIN.Period*0.4000"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_LINKON" a/A PC_LINKON_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.6000"; CompareClose @ "WFT_MAIN.Period*0.7500"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_ACTIVITY" a/A PC_ACTIVITY_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "PC_FDUPLEX" a/A PC_FDUPLEX_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LCD_HSYNC_RNW" a/A co_mdo_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_CLKOUT" a/A CODEC_CLKOUT_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RESET_N" a/A CODEC_RESET_N_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.25"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_INT" a/A CODEC_INT_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.Period*0.2+11nS"; @ "WFT_MAIN.Period*0.35"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_CS_N" a/A CODEC_CS_N_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.CODEC_INT_tp1_out.C1"; @ "WFT_MAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_FS" a/A CODEC_FS_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.CODEC_INT_tp1_out.C1"; @ "WFT_MAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN4" a/A CODEC_RINGIN4_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.CODEC_INT_tp1_out.C1"; @ "WFT_MAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN3" a/A CODEC_RINGIN3_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.CODEC_INT_tp1_out.C1"; @ "WFT_MAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN2" a/A CODEC_RINGIN2_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_MAIN.CODEC_INT_tp1_out.C1"; @ "WFT_MAIN.CODEC_INT_tp1_out.C2"; }
            Control Care NonMuxed;
        }
    }
    Cell "CODEC_RINGIN1" a/A CODEC_RINGIN1_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "LAN_FDUPLEX" a/A LAN_FDUPLEX_tp1_out {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.1000"; CompareClose @ "WFT_MAIN.Period*0.2500"; }
            Control Care NonMuxed;
        }
    }
    Cell "ALLPINS" 0/1 _default_drive_ {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "WFT_MAIN.Period*0.00"; DriveData @ "WFT_MAIN.Period*0.00"; }
        }
    }
    Cell "ALLPINS" L/H _default_compare_inouts_ {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "WFT_MAIN.Period*0.00"; }
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.8"; CompareClose @ "WFT_MAIN.Period*1.00"; }
        }
    }
    Cell "ALLPINS" L/H _default_compare_outputs_ {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0nS"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_MAIN.Period*0.00"; CompareClose @ "WFT_MAIN.Period*1.00"; }
            Control Care NonMuxed;
        }
    }
    Cell "ALLPINS+FUNC_GRP.Pins" x/X dont_care_xX {
        Data 2/3;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "ALLPINS" z/Z Drive_z {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0nS"; DriveData @ "0nS"; }
        }
    }
    Cell "FUNC_GRP.Pins" . _dontcare_ {
        Data 2;
        Drive {
            Waveform { DriveOn @ "0nS"; }
        }
    }
}
MicroFlow Datalog_Vbg_MF {
    FinderFilter = "";
    Event[0] {
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'PHY_TSTA'"; }
                data_val = Expr { String = "Vbg.Meas"; }
                lo_lim_val = Expr { String = "Vbg.Min"; }
                hi_lim_val = Expr { String = "Vbg.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'Bandgap for gain 000'"; }
        }
    }
    Event[1] {
        Tag = DlogVcb;
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "Vcb.Meas"; }
                Low_limit = Expr { String = "Vcb.Min"; }
                High_limit = Expr { String = "Vcb.Max"; }
                Datalog_message = Expr { String = "''"; }
                Message_pins = Expr { String = "PHY_EXRES"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Return {
            Expr { String = "if (DlogVbg.Meas  , tm_rslt:PASS, tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[2] = 1;
}
MicroFlow Datalog_tx_10_diffV_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX10_SFDR','dB',TX10_TST.PHY_rslts[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_10BT_PK_OUT','V',TX10_TST.PHY_rslts[1], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_RISE_TIME_1','nS',TX10_TST.PHY_rslts[2], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_FALL_TIME_1','nS',TX10_TST.PHY_rslts[3], TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_RISE_TIME_2','nS',TX10_TST.PHY_rslts[4], TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_FALL_TIME_2','nS',TX10_TST.PHY_rslts[5], TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_RISE_TIME_3','ns',TX10_TST.PHY_rslts[6], TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_FALL_TIME_3','ns',TX10_TST.PHY_rslts[7], TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_RISE_FALL_MATCH','nS',TX10_TST.PHY_rslts[8], TWDataType:TWMinimumData)"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX10_TEMP_MATCH','nS',TX10_TST.PHY_rslts[9], TWDataType:TWMinimumData)"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_SFDR','dB',TX10_TST.PHY_rslts[10], TWDataType:TWMinimumData)"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_10bt_pk_out','V',TX10_TST.PHY_rslts[11], TWDataType:TWMinimumData)"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_RISE_TIME_1','nS',TX10_TST.PHY_rslts[12], TWDataType:TWMinimumData)"; }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_FALL_TIME_1','nS',TX10_TST.PHY_rslts[13], TWDataType:TWMinimumData)"; }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_RISE_TIME_2','nS',TX10_TST.PHY_rslts[14], TWDataType:TWMinimumData)"; }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_FALL_TIME_2','V',TX10_TST.PHY_rslts[15], TWDataType:TWMinimumData)"; }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_RISE_TIME_3','V',TX10_TST.PHY_rslts[16], TWDataType:TWMinimumData)"; }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_FALL_TIME_3','V',TX10_TST.PHY_rslts[17], TWDataType:TWMinimumData)"; }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX10_RISE_FALL_MATCHING','V',TX10_TST.PHY_rslts[18], TWDataType:TWMinimumData)"; }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TEMPLATE_MATCH_TX10','V',TX10_TST.PHY_rslts[19], TWDataType:TWMinimumData)"; }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
}
MicroFlow Datalog_tx_100_diffV_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "Transmit_100BT.opV"; }
                lo_lim_val = Expr { String = "tx_100bt_diff_out_V.Min"; }
                hi_lim_val = Expr { String = "tx_100bt_diff_out_V.Max"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "'Differential O/P V'"; }
                fname = Expr { String = "'TX100'"; }
        }
    }
}
MicroFlow Set_ADC_test {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->in_ADC_test"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "TRUE"; }
    }
}
MicroFlow Reset_ADC_test {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#->in_ADC_test"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "FALSE"; }
    }
    Event[1] {
        Value = Expr { String = "#->minus_1dB_loop_counter"; Mode = Output; }
        Index = Expr { String = "2"; }
        Expr = Expr { String = "minus_1dB_loop_counter+1"; }
    }
}
MicroFlow PowerUp10BTTxDiffV_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'1 3 4 5' "; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_10bt_Thread0,ADCPatSeq.Thread.tx_10bt_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
}
MicroFlow IsCharacterisation_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Init_sms";
                SMS_PIN = Expr { String = "SMS4"; }
                full = Expr { String = "FALSE"; }
        }
    }
}
OperatorVariable Print_characterisation {
    Comment = "";
    Expr = Expr { String = "FALSE"; }
    UserMode = Production;
}
MicroFlow Transmit_10BT_Setup_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES_RTN+PHY_EXRES"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "DUT_PM+DUT_PM_"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM_"; }
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT Transmit_10BT.Vonly AND FALSE"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST Transmit_10BT >>>>>>>>>\n`')"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "NOT Transmit_10BT.Vonly"; }
        enVisionObject = ReadyForDatalog;
    }
}
MicroFlow Run_tx10_loop_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_loop_10bt_dup_Thread0,ADCPatSeq.Thread.tx_loop_10bt_dup_Thread1"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
}
Test tx10_MF_test {
    Result = Expr { String = "#"; Mode = Output; }
    Entry[0] = ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = Transmit_10BT_Setup_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = Run_tx10_loop_MF;
}
MicroFlow Run_tx10_Cadence_mf {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_loop_10bt_dup_Thread0,ADCPatSeq.Thread.tx_loop_10bt_dup_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Transmit_10_100bt";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "SMSFirstRun"; }
                debug_test = Expr { String = "DebugTest"; }
                AnalogWaveformName = Expr { String = "'Transmit_10BT'"; }
                line_rate = Expr { String = "10"; }
                Nm = Expr { String = "800"; }
                Amp = Expr { String = "2.5V"; }
                Vonly = Expr { String = "FALSE"; }
                PHY_rslt = Expr { String = "#"; Mode = Output; }
        }
    }
}
Test tx10_test {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = Transmit_10BT_Setup_MF;
    Exit[0] = Pattern_Continue_MF;
    Exit[1] = StopSMSSineWave_MF;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester())"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    TestMethod = Ftest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = TXDiffPeriodLevels;
    Pattern_index[0] = Expr { String = "ADCPatSeq.Thread.tx_loop_10bt_dup_Thread"; }
}
MicroFlow tx10_test_setup_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Index = Expr { String = "2"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "TX_MAG"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
    Event[2] {
        Index = Expr { String = "3"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "LAN_TXM+PC_TXM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'1 3 4 5' "; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(PHY0_sel,ADCPatSeq.Thread.tx_10bt_Thread0,ADCPatSeq.Thread.tx_10bt_Thread1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
}
Test tx100_test {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = PowerUp100BT_MF;
    Exit[0] = Datalog_TX100bt_MF;
    Exit[1] = continue_patt;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester())"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    TestMethod = Ftest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "LAN_TXP+PC_TXP"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = TXDiffPeriodLevels;
    Pattern_index[0] = Expr { String = "ADCPatSeq.Thread.tx_100bt_Loop"; }
}
MicroFlow sqlpf_PHY0_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "sqlpf_loop = 0"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST SQLPF_DV_1A >>>>>>>>>\n`')"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "sqlpf_loop = 0"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[2] {
        Value = Expr { String = "#->sqlpf_loop"; Mode = Output; }
        Index = Expr { String = "3"; }
        Expr = Expr { String = "sqlpf_loop + 1"; }
    }
    Event[3] {
        Value = Expr { String = "#->loop_count"; Mode = Output; }
        Index = Expr { String = "4"; }
        Expr = Expr { String = "0"; }
    }
    Event[4] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "5"; }
        Expr = Expr { String = "select(sqlpf_loop,2250mV, 2250mV, 0V, 0V)"; }
    }
    Event[5] {
        Tag = inc_vdiff;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "'Squelch_src'"; }
                sms_meas = Expr { String = "'Squelch_meas'"; }
                amplitude = Expr { String = "V_Diff < 0V ? -V_Diff : V_Diff"; }
        }
    }
    Event[6] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "NOT DebugTest"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_sqlpf_dv_1a_Thread0"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[7] {
        Tag = sim_rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "DebugTest"; }
        Expr = Expr { String = "selectx(loop_count, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS)"; }
    }
    Event[8] {
        Value = Expr { String = "{# < 0V ? -# -> V_Diff :} # -> V_Diff"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "loop_count = 0"; }
        Expr = Expr { String = "V_Diff + 10mV"; }
    }
    Event[9] {
        Value = Expr { String = "{# < 0V ? -# -> V_Diff :} # -> V_Diff"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "loop_count > 0"; }
        Expr = Expr { String = "V_Diff + (10mV / pow(2, loop_count) * ((DebugTest ? .sim_rslt : .rslt) = tm_rslt:PASS ? 1 : -1))"; }
    }
    Event[10] {
        Value = Expr { String = "#->loop_count"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "loop_count > 0 OR .rslt = tm_rslt:FAIL"; }
        Expr = Expr { String = "loop_count + 1"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = ".rslt = tm_rslt:FAIL"; }
        Goto {
            Expr { String = "if(V_Diff > 3V OR loop_count > 20,.outs.Index,.inc_vdiff.Index)"; }
        }
    }
    Event[12] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Method {
                MicroFlowMid = "Titan.tp.GetDiffValue";
                SMS_PIN = Expr { String = "SMS4"; }
                AnalogWaveformName = Expr { String = "'Squelch'"; }
                plus_minus = Expr { String = "selectx(sqlpf_loop, 1, -1, 1, -1, 1)"; }
                debug_test = Expr { String = "DebugTest"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "(Connected_to_tester() ? .outs : V_Diff )* 1V"; }
                Low_limit = Expr { String = "select(sqlpf_loop, SQE_Thres.Min, SQE_Thres.Min, RXTP_Thres.Min, RXTP_Thres.Min)"; }
                High_limit = Expr { String = "select(sqlpf_loop, SQE_Thres.Max, SQE_Thres.Max, RXTP_Thres.Max, RXTP_Thres.Max)"; }
                Datalog_message = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'NSQE_comparator_threshold', 'PSQE_comparator_threshold', 'RXTPM_comparator_threshold', 'RXTPP_comparator_threshold')"; }
                Message_pins = Expr { String = "selectx(sqlpf_loop,CODEC_RINGIN2,CODEC_RINGIN3,CODEC_RINGIN4,CODEC_FS)"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "selectx(sqlpf_loop, TWPDLDataLogRealVariable('PHY0_SQLCH_NSQE','V', .outs , TWDataType:TWMinimumData), TWPDLDataLogRealVariable('PHY0_SQLCH_NSQE','V', .outs , TWDataType:TWMinimumData), TWPDLDataLogRealVariable('PHY0_SQLCH_RXTPM','V', .outs , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY0_SQLCH_RXTPP','V', .outs , TWDataType:TWMinimumData))"; }
    }
    Event[15] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "Connected_to_tester() ? .outs : V_Diff"; }
                lo_lim_val = Expr { String = "select(sqlpf_loop, SQE_Thres.Min, SQE_Thres.Min, RXTP_Thres.Min, RXTP_Thres.Min)"; }
                hi_lim_val = Expr { String = "select(sqlpf_loop, SQE_Thres.Max, SQE_Thres.Max, RXTP_Thres.Max, RXTP_Thres.Max)"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'PHY0_NSQE_comparator_threshold', 'PHY0_PSQE_comparator_threshold', 'PHY0_RXTPM_comparator_threshold', 'PHY0_RXTPP_comparator_threshold')"; }
                fname = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'NSQE', 'PSQE', 'RXTPM', 'RXTPP')"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "sqlpf_loop = 4"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_cbits";
                SetRelayNumber_str = Expr { String = "'17 18 22'"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "sqlpf_loop = 4"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "1s/1000"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Return {
            Expr { String = "if(.Rslt,tm_rslt:PASS ,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[18] = 1;
}
MicroFlow AC_DV_2A_vcom_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:CENTRAL_PARAMETRIC_UNIT"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "GainLoopCounter_higain.Max"; }
    }
    Event[3] {
        Index = Expr { String = "4"; }
        Enable = Expr { String = "PHY0_sel"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "selectx(GainLoopCounter, ADCPatSeq.Thread.t3_adc_gain_000Thrd0, ADCPatSeq.Thread.t3_adc_gain_001Thrd0, ADCPatSeq.Thread.t3_adc_gain_010Thrd0, ADCPatSeq.Thread.t3_adc_gain_011Thrd0, ADCPatSeq.Thread.t3_adc_gain_100Thrd0, ADCPatSeq.Thread.t3_adc_gain_101Thrd0, ADCPatSeq.Thread.t3_adc_gain_110Thrd0, ADCPatSeq.Thread.t3_adc_gain_111Thrd0)"; }
        }
    }
    Event[4] {
        Tag = Run;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT PHY0_sel"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "selectx(GainLoopCounter, ADCPatSeq.Thread.t3_adc_gain_000Thrd1, ADCPatSeq.Thread.t3_adc_gain_001Thrd1, ADCPatSeq.Thread.t3_adc_gain_010Thrd1, ADCPatSeq.Thread.t3_adc_gain_011Thrd1, ADCPatSeq.Thread.t3_adc_gain_100Thrd1, ADCPatSeq.Thread.t3_adc_gain_101Thrd1, ADCPatSeq.Thread.t3_adc_gain_110Thrd1, ADCPatSeq.Thread.t3_adc_gain_111Thrd1)"; }
                Override_fails = Expr { String = "TRUE"; }
                Log_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Current;
                Control_mode = Expr { String = "Control:APPLY"; }
                Forced_value = Expr { String = "0A"; }
                Min_allowed_voltage = Expr { String = "1.V"; }
                Max_allowed_voltage = Expr { String = "5V"; }
                Max_expected_voltage = Expr { String = "2.5V"; }
        }
    }
    Event[6] {
        Value = Expr { String = "selectx(GainLoopCounter, #->VCOM_gain0, #->VCOM_gain1, #->VCOM_gain2, #->VCOM_gain3, #->VCOM_gain4, #->VCOM_gain5, #->VCOM_gain6, #->VCOM_gain7)"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = Measure_voltage;
                Max_expected_voltage = Expr { String = "2.5V"; }
                Measurement_delay = Expr { String = "10mS"; }
                Averages = Expr { String = "1"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#->GainLoopCounter"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "GainLoopCounter - 1"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "GainLoopCounter => 0"; }
        Goto {
            Expr { String = ".Run.Index"; }
        }
    }
    Event[9] {
        Tag = Out;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[10] {
        Tag = VG7;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain7"; }
                lo_lim_val = Expr { String = "VCOM_gain7.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain7.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 7'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[11] {
        Tag = VG6;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain6"; }
                lo_lim_val = Expr { String = "VCOM_gain6.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain6.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 6'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[12] {
        Tag = VG5;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                lo_lim_val = Expr { String = "VCOM_gain5.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain5.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 5'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[13] {
        Tag = VG4;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain4"; }
                lo_lim_val = Expr { String = "VCOM_gain4.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain4.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 4'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[14] {
        Tag = VG3;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                lo_lim_val = Expr { String = "VCOM_gain3.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain3.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 3'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[15] {
        Tag = VG2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain2"; }
                lo_lim_val = Expr { String = "VCOM_gain2.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain2.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 2'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[16] {
        Tag = VG1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain1"; }
                lo_lim_val = Expr { String = "VCOM_gain1.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain1.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 1'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[17] {
        Tag = VG0;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "''"; }
                data_val = Expr { String = "VCOM_gain0"; }
                lo_lim_val = Expr { String = "VCOM_gain0.Min"; }
                hi_lim_val = Expr { String = "VCOM_gain0.Max"; }
                units_desc = Expr { String = "'Volts'"; }
                comments = Expr { String = "'CM for gain 0'"; }
                fname = Expr { String = "'VC'"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Method {
                MicroFlowMid = Pin_connections;
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Return {
            Expr { String = "if ((.VG0) AND (.VG1 ) AND (.VG2 ) AND (.VG3 ) AND (.VG4 ) AND (.VG5 ) AND (.VG6) AND (.VG7 ),tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[20] = 1;
}

EVO_Calibration Triton_std_board_fcal {
}
Test ON_power_down_tst {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Entry[0] = vdd_0V_levels;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = connect_PS;
    Title[1] = connect_pins;
    TestMethod = SYScntl;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "ALL_VDDPINS"; }
    Test_pins[1] = Expr { String = "ALLPINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Pin_control[0] = Expr { String = "Action:CONNECT_TO_DUT"; }
    Pin_control[1] = Expr { String = "Action:CONNECT_TO_DUT"; }
}
Trigger ENV_trig {
	TrigRow[0] {
        ClassType = TrigEticClass;
        ObjPos = 0;
        ObjName = EVe_ExecPatternContinue;
        TrigState = True;
        TrigIndex = TrigTopRow;
        Before_trig_block {
            Qualifier = Expr { String = "TRUE"; }
            }
        After_trig_block {
            Qualifier = Expr { String = "TRUE"; }
            TrigAction[0] {
                TrigActionType = TrigBreakpoint;
                }
            }
        }
	TrigRow[1] {
        ClassType = TrigEticClass;
        ObjPos = 0;
        ObjName = EVe_ExecutePatterns;
        TrigState = True;
        TrigIndex = TrigBetweenRow;
        }
	TrigRow[2] {
        ClassType = TrigEticClass;
        ObjPos = 0;
        ObjName = EVe_TestPatternContinue;
        TrigState = True;
        TrigIndex = TrigBetweenRow;
        }
	TrigRow[3] {
        ClassType = TrigEticClass;
        ObjPos = 0;
        ObjName = EVe_TestPatterns;
        TrigState = True;
        TrigIndex = TrigBottomRow;
        }
}
WaveformCapture RX_cap {
  evReferenceSegment "";
  evStart "0";
  evStop "1000";
  evResolution "3200pS";
  evPins "DUT_PM+DUT_PM_+REFCLKI+LCD_PD10+LCD_PD12+LCD_PD13+LCD_PD14+LCD_PD15" {
	evEnable True;
	evMerge EVW_Merge_All;
	evDriveEnable True;
	evResponseEnable True;
  }
}
WaveformCapture TX_cap {
  evReferenceSegment "";
  evStart "0";
  evStop "100";
  evResolution "3200pS";
  evPins "DUT_PM+DUT_PM_+REFCLKI+LCD_PD06+LCD_PD05+LCD_PD07+LCD_PD01+LCD_PD02+LCD_PD03+LCD_PD04" {
	evEnable True;
	evMerge EVW_Merge_All;
	evDriveEnable True;
	evResponseEnable True;
  }
}
WaveformCapture Test_clk {
  evReferenceSegment "";
  evStart "1000";
  evStop "100";
  evResolution "3200pS";
  evPins "REFCLKI+CODEC_RINGIN1+CODEC_RINGIN2+CODEC_RINGIN3+CODEC_RINGIN4+CODEC_FS+CODEC_CS_N+CODEC_INT+CODEC_RESET_N+CODEC_CLKOUT" {
	evEnable True;
	evDriveEnable True;
  }
  evPins "REFCLKI+CODEC_RINGIN1+CODEC_RINGIN2+CODEC_RINGIN3+CODEC_RINGIN4+CODEC_FS+CODEC_CS_N+CODEC_INT+CODEC_RESET_N+CODEC_CLKOUT" {
	evEnable True;
	evResponseEnable True;
  }
  evPins "REFCLKI+CODEC_RINGIN1+CODEC_RINGIN2+CODEC_RINGIN3+CODEC_RINGIN4+CODEC_FS+CODEC_CS_N+CODEC_INT+CODEC_RESET_N+CODEC_CLKOUT" {
	evEnable True;
	evScopeEnable True;
	evScopeHi "3V";
	evScopeLo "0.1V";
  }
}
PinType Analog {
    Type = AnalogPin;
    Direction = Input;
}


MicroFlow Set_LAN_RX_cbit_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'18'"; }
        }
    }
}
MicroFlow Set_PC_RX_cbit_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'17'"; }
        }
    }
}
MicroFlow Set_LAN_TX_cbit_MF {
    Event[0] {
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'16'"; }
        }
    }
}
MicroFlow Set_PC_TX_cbit_MF {
    FinderFilter = "";
    Event[0] {
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'15'"; }
        }
    }
}
Test Calb_PHY_TX_path_Test {
    Result = Expr { String = "#"; Mode = Output; }
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = Cal_TX_test;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = Calb_PHY_TX_MF;
}

MicroFlow Calb_PHY_TX_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Comment = "Set the Ca;bration path for the TX in the PHY. This path will be used by TX100, TX10 and the ADC test.
";
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'19 24'"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.Focus_cal_transmit_10bt";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "TRUE"; }
                AnalogWaveformName = Expr { String = "'TX10_Calb'"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Focus_cal_transmit_100bt";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "TRUE"; }
                AnalogWaveformName = Expr { String = "'TX100_calb'"; }
        }
    }
    Event[4] {
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
}
Test calb_PHY_RX_Test {
    Result = Expr { String = "#"; Mode = Output; }
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = RX_calb;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = Calb_PHY_RX_MF;
}
MicroFlow Calb_PHY_RX_MF {
    Event[0] {
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'22'"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = "Titan.tp.Setup_SMS_Rx100";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "TRUE"; }
                ftt = Expr { String = "TRUE"; }
                do_cbits = Expr { String = "FALSE"; }
                Vbg = Expr { String = "1.2V"; }
                AnalogWaveformName = Expr { String = "'RX_calb'"; }
                FSs = Expr { String = "100MHz"; }
                Ms_loc = Expr { String = "811"; }
                Ns = Expr { String = "1024*8"; }
                Amp = Expr { String = "1V"; }
                AttSet = Expr { String = "1"; }
        }
    }
    Event[3] {
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
}
PatternGroup EPHY_PatGrp {
    SignalHeader ADC_GAIN_signalheader;
}
WaveformTable WFT_ADC2_GAIN_old {
    Period "40nS";
    Cell "EPHY_PatGrp.Pins-REFCLKI" 0/1 drive {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0ns"; DriveData @ "0ns"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" L/H compare {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC2_GAIN.Period*0.8"; CompareClose @ "WFT_ADC2_GAIN.Period*1.00"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" X dontcare {
        Data 3;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "REFCLKI" 0/1 clkin {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0ns"; DriveData @ "0ns"; DriveHigh @ "WFT_ADC2_GAIN.Period*0.500"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" - hold {
        Data 6;
        Drive {
            Waveform { DriveOn @ "0nS"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" . mask {
        Data 2;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" c/C capture {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareData @ "WFT_ADC2_GAIN.Period*0.5"; }
            Control Care NonMuxed;
        }
    }
    Cell "EPHY_PatGrp.Pins" s/S dsp_send {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0s"; DriveData @ "0s"; }
        }
    }
}
Thread t3_adc_bandgapThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_bandgap.adc_bandgap_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_bandgap.adc_bandgap_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_enable_obsThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_100bt_clk_out_phaseThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100.pll100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100.pll100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_100bt_StdThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx100.tx100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "tx100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx100.tx100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_100bt_tx_clkoutThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100.pll100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100.pll100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_10bt_rcv_clkoutThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll10_rcv.pll10_rcv_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll10_rcv.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll10_rcv.pll10_rcv_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_10bt_stdThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll10.pll10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll10.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll10.pll10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx100bt_phase_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100_phase.pll100_phase_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100_phase.trig_30us"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100_phase.tx100bt_phase_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_porThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pwrupr_pat.por_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pwrupr_pat.por_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_cal_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_cal_pat.adc_cal_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_cal_pat.adc_cal_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_sin_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_lin_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_000Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_001Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain001.adc_observe_gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain001.adc_observe_gain001_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_010Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain010.adc_observe_gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain010.adc_observe_gain010_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_011Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain011.adc_observe_gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain011.adc_observe_gain011_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_100Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain100.adc_observe_gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain100.adc_observe_gain100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_101Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain101.adc_observe_gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain101.adc_observe_gain101_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_110Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain110.adc_observe_gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain110.adc_observe_gain110_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_111Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain111.adc_observe_gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain111.adc_observe_gain111_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_std_match_xfmrThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "sqlpf_srch.Sqlpf_match_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "sqlpf_srch.Sqlpf_match_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_stdThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "sqlpf.sqlpf_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "sqlpf.sqlpf_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_exThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_long_10bt_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_long_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "txmt_10bt.ctmu_long_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_long_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_short_10bt_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_short_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "txmt_10bt.ctmu_short_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_short_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ac_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ac_dv_1a.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ac_dv_1a.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_10bt_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx10.tx10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx10.tx10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_loop_10bt_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_loop_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_loop_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_loop_10bt_dup_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx10.tx10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx10.tx10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_100bt_DupThrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx100bt_dup.tx100bt_dup_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx100bt_dup.tx100bt_dup_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ephy_adc_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_adc_dv_2a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_tx100_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_100_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_100_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_tx10_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_tx10_sfdr_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sfdr_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sfdr_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_sqlpf_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.sqlpf_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.sqlpf_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_Squalch_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Squalch_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Squalch_sp"; }
    }
}
Thread ephy_pll10_xmt_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_xmt_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_xmt_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_pll10_rcv_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_rcv_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_rcv_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_pll100_dv_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll100_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll100_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_bandgap_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread t3_adc_bandgapThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_bandgap.adc_bandgap_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_bandgap.adc_bandgap_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_enable_obsThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_100bt_clk_out_phaseThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100.pll100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100.pll100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_100bt_StdThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx100.tx100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "tx100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx100.tx100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_100bt_tx_clkoutThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100.pll100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100.pll100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_10bt_rcv_clkoutThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll10_rcv.pll10_rcv_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll10_rcv.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll10_rcv.pll10_rcv_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}
Thread t3_10bt_stdThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll10.pll10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll10.trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll10.pll10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx100bt_phase_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pll100_phase.pll100_phase_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "pll100_phase.trig_30us"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pll100_phase.tx100bt_phase_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_porThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "pwrupr_pat.por_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "pwrupr_pat.por_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_cal_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_cal_pat.adc_cal_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_cal_pat.adc_cal_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_sin_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ADC_lin_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_000Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain000.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_001Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain001.adc_observe_gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain001.adc_observe_gain001_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_010Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain010.adc_observe_gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain010.adc_observe_gain010_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_011Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain011.adc_observe_gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain011.adc_observe_gain011_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_100Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain100.adc_observe_gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain100.adc_observe_gain100_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_101Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain101.adc_observe_gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain101.adc_observe_gain101_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_110Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain110.adc_observe_gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain110.adc_observe_gain110_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_adc_gain_111Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_observe_gain111.adc_observe_gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_observe_gain111.adc_observe_gain111_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_std_match_xfmrThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "sqlpf_srch.Sqlpf_match_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "sqlpf_srch.Sqlpf_match_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_stdThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "sqlpf.sqlpf_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "sqlpf.sqlpf_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_sqlpf_exThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_long_10bt_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_long_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "txmt_10bt.ctmu_long_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_long_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_short_10bt_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_short_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "txmt_10bt.ctmu_short_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_short_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ac_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ac_dv_1a.adc_observe_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ac_dv_1a.adc_observe_gain000_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_10bt_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx10.tx10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx10.tx10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_loop_10bt_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_loop_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "txmt_10bt.transmit_loop_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread tx_loop_10bt_dup_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx10.tx10_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx10.tx10_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread t3_100bt_DupThrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "tx100bt_dup.tx100bt_dup_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "tx100bt_dup.tx100bt_dup_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = Base_pattern;
    }
}

Thread ephy_adc_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_adc_dv_2a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_tx100_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_100_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_100_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_tx10_sfdr_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sfdr_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sfdr_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_tx10_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.tx_10_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Sms_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_sqlpf_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.sqlpf_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.sqlpf_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_pll10_xmt_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_xmt_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_xmt_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_pll10_rcv_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_rcv_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll10_rcv_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_pll100_dv_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.pll100_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.pll100_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_bandgap_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
PatternSequence ADCPatSeq {
    Thread[0] = t3_porThrd0;
    Thread[1] = t3_adc_bandgapThrd0;
    Thread[2] = t3_adc_enable_obsThrd0;
    Thread[3] = ADC_cal_Thread0;
    Thread[4] = ADC_sin_Thread0;
    Thread[5] = ADC_lin_Thread0;
    Thread[6] = t3_adc_gain_000Thrd0;
    Thread[7] = t3_adc_gain_001Thrd0;
    Thread[8] = t3_adc_gain_010Thrd0;
    Thread[9] = t3_adc_gain_011Thrd0;
    Thread[10] = t3_adc_gain_100Thrd0;
    Thread[11] = t3_adc_gain_101Thrd0;
    Thread[12] = t3_adc_gain_110Thrd0;
    Thread[13] = t3_adc_gain_111Thrd0;
    Thread[14] = t3_100bt_clk_out_phaseThrd0;
    Thread[15] = t3_100bt_StdThrd0;
    Thread[16] = t3_100bt_tx_clkoutThrd0;
    Thread[17] = t3_10bt_rcv_clkoutThrd0;
    Thread[18] = t3_10bt_stdThrd0;
    Thread[19] = tx100bt_phase_Thread0;
    Thread[20] = tx_long_10bt_Thread0;
    Thread[21] = tx_short_10bt_Thread0;
    Thread[22] = ac_dv_1a_Thread0;
    Thread[23] = tx_10bt_Thread0;
    Thread[24] = tx_loop_10bt_Thread0;
    Thread[25] = tx_loop_10bt_dup_Thread0;
    Thread[26] = t3_100bt_DupThrd0;
    Thread[27] = t3_porThrd1;
    Thread[28] = t3_adc_bandgapThrd1;
    Thread[29] = t3_adc_enable_obsThrd1;
    Thread[30] = ADC_cal_Thread1;
    Thread[31] = ADC_sin_Thread1;
    Thread[32] = ADC_lin_Thread1;
    Thread[33] = t3_adc_gain_000Thrd1;
    Thread[34] = t3_adc_gain_001Thrd1;
    Thread[35] = t3_adc_gain_010Thrd1;
    Thread[36] = t3_adc_gain_011Thrd1;
    Thread[37] = t3_adc_gain_100Thrd1;
    Thread[38] = t3_adc_gain_101Thrd1;
    Thread[39] = t3_adc_gain_110Thrd1;
    Thread[40] = t3_adc_gain_111Thrd1;
    Thread[41] = t3_100bt_clk_out_phaseThrd1;
    Thread[42] = t3_100bt_StdThrd1;
    Thread[43] = t3_100bt_tx_clkoutThrd1;
    Thread[44] = t3_10bt_rcv_clkoutThrd1;
    Thread[45] = t3_10bt_stdThrd1;
    Thread[46] = tx100bt_phase_Thread1;
    Thread[47] = tx_long_10bt_Thread1;
    Thread[48] = tx_short_10bt_Thread1;
    Thread[49] = ac_dv_1a_Thread1;
    Thread[50] = tx_10bt_Thread1;
    Thread[51] = tx_loop_10bt_Thread1;
    Thread[52] = tx_loop_10bt_dup_Thread1;
    Thread[53] = t3_100bt_DupThrd1;
    Zipper = Zipper {
        Row { FUNC_GRP, WFT_MAIN = { WFT_MAIN } }
        Row { FUNC_GRP, WFT_ADC_GAIN = { WFT_ADC_GAIN } }
        Row { EPHY_PatGrp, WFT_ADC2_GAIN = {  } }
    }
}
PatternSequence XfmrPatSeq {
    Thread[0] = t3_porThrd0;
    Thread[1] = t3_sqlpf_std_match_xfmrThrd0;
    Thread[2] = t3_sqlpf_stdThrd0;
    Thread[3] = t3_porThrd1;
    Thread[4] = t3_sqlpf_std_match_xfmrThrd1;
    Thread[5] = t3_sqlpf_stdThrd1;
    Zipper = Zipper {
        Row { FUNC_GRP, WFT_MAIN = { WFT_MAIN } }
        Row { FUNC_GRP, WFT_ADC_GAIN = { WFT_ADC_GAIN } }
    }
}
PatternSequence EPHY_ADCPatSeq {
    Thread[0] = ephy_bandgap_Thread0;
    Thread[1] = ephy_adc_dv_1a_Thread0;
    Thread[2] = ephy_adc_dv_2a_Thread0;
    Thread[3] = ephy_tx100_dv_1a_Thread0;
    Thread[4] = ephy_tx10_dv_1a_Thread0;
    Thread[5] = ephy_sqlpf_dv_1a_Thread0;
    Thread[6] = ephy_pll10_xmt_dv_1a_Thread0;
    Thread[7] = ephy_pll10_rcv_dv_1a_Thread0;
    Thread[8] = ephy_pll100_dv_1a_Thread0;
    Thread[9] = ephy_tx100_startup_Thread0;
    Thread[10] = ephy_adc_gain000_Thread0;
    Thread[11] = ephy_adc_gain001_Thread0;
    Thread[12] = ephy_adc_gain010_Thread0;
    Thread[13] = ephy_adc_gain011_Thread0;
    Thread[14] = ephy_adc_gain100_Thread0;
    Thread[15] = ephy_adc_gain101_Thread0;
    Thread[16] = ephy_adc_gain110_Thread0;
    Thread[17] = ephy_adc_gain111_Thread0;
    Thread[18] = ephy_dc_1a_Thread0;
    Thread[19] = ephy_bandgap_Thread1;
    Thread[20] = ephy_adc_dv_1a_Thread1;
    Thread[21] = ephy_adc_dv_2a_Thread1;
    Thread[22] = ephy_tx100_dv_1a_Thread1;
    Thread[23] = ephy_tx10_dv_1a_Thread1;
    Thread[24] = ephy_sqlpf_dv_1a_Thread1;
    Thread[25] = ephy_pll10_xmt_dv_1a_Thread1;
    Thread[26] = ephy_pll10_rcv_dv_1a_Thread1;
    Thread[27] = ephy_pll100_dv_1a_Thread1;
    Thread[28] = ephy_tx100_startup_Thread1;
    Thread[29] = ephy_adc_gain000_Thread1;
    Thread[30] = ephy_adc_gain001_Thread1;
    Thread[31] = ephy_adc_gain010_Thread1;
    Thread[32] = ephy_adc_gain011_Thread1;
    Thread[33] = ephy_adc_gain100_Thread1;
    Thread[34] = ephy_adc_gain101_Thread1;
    Thread[35] = ephy_adc_gain110_Thread1;
    Thread[36] = ephy_adc_gain111_Thread1;
    Thread[37] = ephy_tx10_sfdr_Thread0;
    Thread[38] = ephy_tx10_sfdr_Thread1;
    Thread[39] = ephy_Squalch_thrd;
    Zipper = Zipper {
        Row { FUNC_GRP, WFT_MAIN = { WFT_MAIN } }
        Row { EPHY_PatGrp, WFT_ADC2_GAIN = { WFT_ADC2_GAIN } }
    }
    BasePeriodResolution = Expr { String = "40ns"; }
}
/*PatternSequence EPHY_ADCPatSeq {
    Thread[0] = ephy_bandgap_Thread0;
    Thread[1] = ephy_adc_dv_1a_Thread0;
    Thread[2] = ephy_adc_dv_2a_Thread0;
    Thread[3] = ephy_tx100_dv_1a_Thread0;
    Thread[4] = ephy_tx10_dv_1a_Thread0;
    Thread[5] = ephy_sqlpf_dv_1a_Thread0;
    Thread[6] = ephy_pll10_xmt_dv_1a_Thread0;
    Thread[7] = ephy_pll10_rcv_dv_1a_Thread0;
    Thread[8] = ephy_pll100_dv_1a_Thread0;
    Thread[9] = ephy_bandgap_Thread1;
    Thread[10] = ephy_adc_dv_1a_Thread1;
    Thread[11] = ephy_adc_dv_2a_Thread1;
    Thread[12] = ephy_tx100_dv_1a_Thread1;
    Thread[13] = ephy_tx10_dv_1a_Thread1;
    Thread[14] = ephy_sqlpf_dv_1a_Thread1;
    Thread[15] = ephy_pll10_xmt_dv_1a_Thread1;
    Thread[16] = ephy_pll10_rcv_dv_1a_Thread1;
    Thread[17] = ephy_pll100_dv_1a_Thread1;
    Zipper = Zipper {
        Row { EPHY_PatGrp, WFT_ADC2_GAIN = { WFT_ADC2_GAIN } }
        Row { FUNC_GRP, WFT_MAIN = { WFT_MAIN } }
    }
    TransactionCount = 6580;
    BasePeriodResolution = Expr { String = "40ns"; Type = s; }
}
*/
WaveformCapture chkallpins {
  evReferenceSegment "";
  evStart "1";
  evStop "50";
  evResolution "3200pS";
  evPins "CODEC_RINGIN1+TEST+RST_N+EM_A00+LCD_MCLK+UART_CTS+LCD_AC_NCS+GPIO2+GPIO3+GPIO4+LAN_FDUPLEX+REFCLKI+CODEC_DOUT+KEYPAD15+KEYPAD14+KEYPAD13+KEYPAD12+REFCLKO+CODEC_RINGIN2+CODEC_RINGIN3+CODEC_RINGIN4+CODEC_FS" {
	evEnable True;
	evMerge EVW_Merge_All;
	evDriveEnable True;
	evResponseEnable True;
  }
  evPins "CODEC_RINGIN1+REFCLKI" {
	evEnable True;
	evMerge EVW_Merge_All;
	evDriveEnable True;
	evScopeEnable True;
	evScopeHi "3V";
	evScopeLo "0V";
  }
}

Levels PHY_level_36V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.6V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA
"; }
    	Ioh = Expr { String = "-200uA
"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}






Levels PHY_level {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA
"; }
    	Ioh = Expr { String = "-200uA
"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih+0*selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max)"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Iol = Expr { String = "1mA"; }
    	Ioh = Expr { String = "-1mA"; }
    	Vref = Expr { String = "(PHY_level.Vih.AIC_HN_pins-PHY_level.Vil.AIC_HN_pins)/2.0"; }
    	Delay = Expr { String = "0s"; }
    }
}
Test PHY1_PLL100_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level_36V;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = continue_patt;
    Exit[1] = Datalog_PHY1_PLL100_DV_1A_Min;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester()) OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Inside;
    Title[0] = P1_PhaseFreq;
    Title[1] = P1_PhaseFreq2;
    Title[2] = P1_PhaseInc;
    Title[3] = P1_PhaseIncDlog;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:ON_FAIL_ONLY_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:BYPASS"; }
    Test_enable[3] = Expr { String = "Seq_en:BYPASS"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "tm_rslt:PASS"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL100;
    Levels_setup[1] = CODEC_RINGIN1_PLL100;
    Levels_setup[2] = CODEC_RINGIN1_PLL100;
    Micro_flow_sequence[3] = PHY1_Fix100BTPhase_MF;
    Test_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:FREQUENCY_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:FREQUENCY_MEAS"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:TPD_FALL_TO_RISE"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:TPD_RISE_TO_RISE"; }
    Tpd_reference_pin[2] = Expr { String = "REFCLKI"; }
    Tpd_reference_pin[3] = Expr { String = "REFCLKI"; }
    Tpd_reference_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_input"; }
    Tpd_reference_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_input"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[1] = Expr { String = "ACPMU_arm_mode:AUTO_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:AUTO_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_START_EDGE"; }
    Number_of_samples[0] = Expr { String = "100"; }
    Number_of_samples[1] = Expr { String = "100"; }
    Number_of_samples[2] = Expr { String = "640"; }
    Number_of_samples[3] = Expr { String = "1"; }
    Trigger_start_count[0] = Expr { String = "1"; }
    Trigger_start_count[1] = Expr { String = "1"; }
    Trigger_start_count[2] = Expr { String = "1"; }
    Trigger_start_count[3] = Expr { String = "1"; }
    Trigger_stop_count[0] = Expr { String = "100"; }
    Trigger_stop_count[1] = Expr { String = "100"; }
    Trigger_stop_count[2] = Expr { String = "2"; }
    Trigger_stop_count[3] = Expr { String = "1"; }
    Trigger_stop_count_high[2] = Expr { String = "640"; }
    Bit_cell[0] = Expr { String = "pll100_per.Typ"; }
    Bit_cell[1] = Expr { String = "pll100_per.Typ"; }
    Bit_cell[2] = Expr { String = "pll100_per.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[1] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Start_pattern_first[3] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread1"; }
    Pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread1"; }
    Pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread1"; }
    Override_pattern_fails[0] = Expr { String = "TRUE"; }
    Override_pattern_fails[1] = Expr { String = "TRUE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "123MHz"; }
    Low_limit[1] = Expr { String = "123MHz"; }
    Low_limit[2] = Expr { String = "0ns"; }
    Low_limit[3] = Expr { String = "0ns"; }
    High_limit[0] = Expr { String = "1/pll100_per.Min"; }
    High_limit[1] = Expr { String = "1/pll100_per.Min"; }
    High_limit[2] = Expr { String = "pll100_per.Max*2.0"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[2] = Expr { String = "ACPMU_Result_type:NO_RESULT"; }
    Additional_test[3] = Expr { String = "ACPMU_Result_type:NO_RESULT"; }
    Additional_low_limit[0] = Expr { String = "1/pll100_jitter.Min+3.8MHz*SigmaGuardbandFactor"; }
    Additional_low_limit[1] = Expr { String = "1/pll100_jitter.Min+3.8MHz*SigmaGuardbandFactor"; }
    Additional_high_limit[0] = Expr { String = "1/pll100_jitter.Max-3.8MHz*SigmaGuardbandFactor"; }
    Additional_high_limit[1] = Expr { String = "1/pll100_jitter.Max-3.8MHz*SigmaGuardbandFactor"; }
    Analysis_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[1] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "FALSE"; }
    Test_measurement_results[3] = Expr { String = "TRUE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Test_additional_results[1] = Expr { String = "TRUE"; }
    Test_additional_results[2] = Expr { String = "TRUE"; }
    Test_additional_results[3] = Expr { String = "TRUE"; }
    Measurement_timeout[0] = Expr { String = "2s"; }
    Measurement_timeout[1] = Expr { String = "2s"; }
    Measurement_timeout[2] = Expr { String = "2s"; }
    Measurement_timeout[3] = Expr { String = "2s"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[3] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[0] = Expr { String = "1/8ns"; }
    Simulator_measurement[1] = Expr { String = "1/8ns"; }
    Disable_pattern_datalog[0] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[1] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[2] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[3] = Expr { String = "FALSE"; }
    Output_run_time_errors[0] = Expr { String = "FALSE"; }
    Output_run_time_errors[1] = Expr { String = "FALSE"; }
    Output_run_time_errors[2] = Expr { String = "FALSE"; }
    Output_run_time_errors[3] = Expr { String = "FALSE"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
    Execute_sites_serially[1] = Expr { String = "FALSE"; }
    Execute_sites_serially[2] = Expr { String = "FALSE"; }
    Execute_sites_serially[3] = Expr { String = "FALSE"; }
    Log_enable[0] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[3] = Expr { String = "Log:LOG_OFF"; }
    Raw_data_to_Log_tool[0] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[1] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[2] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[3] = Expr { String = "FALSE"; }
    Raw_data_to_text_file = Expr { String = "''"; }
    Measurement_results[0] = Expr { String = "#/100"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
    Characterization_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable[3] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[3] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[3] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[3] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[3] = Expr { String = "FALSE"; }
}
MicroFlow Datalog_PHY0_PLL100_DV_1A_Min {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL100_PERIOD','hz',PHY0_PLL100_DV_1A.Measurement_results.P0_PhaseFreq[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PLL100_JITTER','hz',PHY0_PLL100_DV_1A.Additional_results.P0_PhaseFreq[0], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "FALSE"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[4] {
        Tag = rst1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PHY0_PLL100_DV_1A.Measurement_results.PHY0_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "pll100_per.Min"; }
                hi_lim_val = Expr { String = "pll100_per.Max"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL100_PHASE_PER'"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[5] {
        Tag = rst2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PHY0_PLL100_DV_1A.Additional_results.PHY0_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "PHY0_PLL100_DV_1A.Additional_low_limit.PHY0_PhaseFreq"; }
                hi_lim_val = Expr { String = "PHY0_PLL100_DV_1A.Additional_high_limit.PHY0_PhaseFreq"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P0_PLL100_PHASE_PER_JITTER'"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    RTypeStatus[2] = 1;
}
MicroFlow PHY0_Fix100BTPhase_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "Print_characterisation"; }
        enVisionObject = Datalog_PHY0_PLL100_DV_1A_Min;
    }
    Event[1] {
        Tag = Array1;
        Index = Expr { String = "2"; }
        Enable = Expr { String = "NOT (Connected_to_tester())"; }
        Method {
                MicroFlowMid = "Titan.tp.Make_sim_phase_data";
                p_array = Expr { String = "SimpleArray(640,7nS)"; }
                p_array_out = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[2] {
        Tag = FixPhase;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Shift_Clkout_phase";
                DIG_PIN = Expr { String = "CODEC_RINGIN1"; }
                p_array = Expr { String = " PHY0_PLL100_DV_1A.Measurement_results.PHY0_PhaseInc "; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                length = Expr { String = "PHY0_PLL100_DV_1A.Trigger_stop_count_high.PHY0_PhaseInc"; }
                numOfSamples = Expr { String = "10"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[3] {
        Tag = FixPhase1;
        Index = Expr { String = "4"; }
        Enable = Expr { String = "NOT Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Shift_Clkout_phase";
                DIG_PIN = Expr { String = "CODEC_RINGIN1"; }
                p_array = Expr { String = " Fix100BTPhase_MF.Array1.p_array_out"; }
                debug_test = Expr { String = "DebugTest"; }
                ftt = Expr { String = "SMSFirstRun"; }
                length = Expr { String = "PHY0_PLL100_DV_1A.Trigger_stop_count_high.PHY0_PhaseInc"; }
                numOfSamples = Expr { String = "10"; }
                fname = Expr { String = "'PLL100'"; }
        }
    }
    Event[4] {
        Tag = SimRslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT (Connected_to_tester())"; }
        Return {
            Expr { String = "if(.FixPhase1, tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    Event[5] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "Connected_to_tester()"; }
        Return {
            Expr { String = "if(.FixPhase AND Datalog_PHY0_PLL100_DV_1A_Min.rst1 AND Datalog_PHY0_PLL100_DV_1A_Min.rst2,tm_rslt:PASS,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[5] = 1;
}
MicroFlow Datalog_PHY1_PLL10_DV_1A_Min {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_TX_PERIOD','ns',PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_XMIT_DV_1A[0] , TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_TX_JITTER','s', PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_XMIT_DV_1A[0] , TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_PERIOD','s', PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_ref[0] , TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_JITTER','s', PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_ref[0] , TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_PERIOD_5MHZ','s', PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_data[0] , TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_JITTER_5MHZ','s', PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_data[0] , TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_PERIOD_5_05MHZ','s', PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_data_hi[0] , TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PLL10_RX_JITTER_5_05MHZ','s', PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_data_hi[0] , TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_XMIT_DV_1A =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_XMIT_DV_1A[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Low_limit.P1_PLL10_XMIT_DV_1A"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.High_limit.P1_PLL10_XMIT_DV_1A"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_TRA_PER'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_XMIT_DV_1A =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_XMIT_DV_1A[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_low_limit.P1_PLL10_XMIT_DV_1A"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_high_limit.P1_PLL10_XMIT_DV_1A"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_TRA_PER_JITTER'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_ref =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_ref[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Low_limit.P1_PLL10_RCV_DV_1A_ref"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.High_limit.P1_PLL10_RCV_DV_1A_ref"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_REC_PER_REF'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_ref =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_ref[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_low_limit.P1_PLL10_RCV_DV_1A_ref"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_high_limit.P1_PLL10_RCV_DV_1A_ref"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_REC_PER_JITTER_REF'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_data =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_data[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Low_limit.P1_PLL10_RCV_DV_1A_data"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.High_limit.P1_PLL10_RCV_DV_1A_data"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_REC_PER_5MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_data =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_data[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_low_limit.P1_PLL10_RCV_DV_1A_data"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_high_limit.P1_PLL10_RCV_DV_1A_data"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_REC_JITTER_5MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_data_hi =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Measurement_results.P1_PLL10_RCV_DV_1A_data_hi[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Low_limit.P1_PLL10_RCV_DV_1A_data_hi"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.High_limit.P1_PLL10_RCV_DV_1A_data_hi"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_REC_PER_5_05MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "Print_characterisation OR CodecPrintDPStatements"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "if(NOT(PHY1_PLL10_DV_1A.Test_result.P1_PLL10_RCV_DV_1A_data_hi =tm_rslt:TIME_OUT_FAIL),PHY1_PLL10_DV_1A.Additional_results.P1_PLL10_RCV_DV_1A_data_hi[0],-1e-6)"; }
                lo_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_low_limit.P1_PLL10_RCV_DV_1A_data_hi"; }
                hi_lim_val = Expr { String = "PHY1_PLL10_DV_1A.Additional_high_limit.P1_PLL10_RCV_DV_1A_data_hi"; }
                units_desc = Expr { String = "'s'"; }
                comments = Expr { String = "'P1_PLL10_REC_JITTER_5_05MHZ'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    RTypeStatus[8] = 1;
}
Test PHY1_PLL10_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = StopSMSSineWave_MF;
    Exit[1] = continue_patt;
    Exit[2] = Datalog_PHY1_PLL10_DV_1A_Min;
    PortExpr[0] = Expr { String = "(.Result = tm_rslt:PASS) OR (NOT Connected_to_tester()) OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'PHY1_PLL10_DV_1A', TWDataType:TWMinimumData)"; }
    LoopDepth = Inside;
    Title[0] = P1_PLL10_XMIT_DV_1A;
    Title[1] = P1_PLL10_RCV_DV_1A_ref;
    Title[2] = P1_PLL10_RCV_DV_1A_data;
    Title[3] = P1_PLL10_RCV_DV_1A_data_hi;
    TestMethod = TMUtest;
    Test_enable[0] = Expr { String = "if(((TIDeviceType>8) AND (TIDeviceType<12)), Seq_en:BYPASS, Seq_en:DEFAULT_EXECUTION)"; }
    Test_enable[1] = Expr { String = "if(((TIDeviceType>8) AND (TIDeviceType<12)), Seq_en:BYPASS, Seq_en:DEFAULT_EXECUTION)"; }
    Test_enable[2] = Expr { String = "if(((TIDeviceType>8) AND (TIDeviceType<12)), Seq_en:BYPASS, Seq_en:DEFAULT_EXECUTION)"; }
    Test_enable[3] = Expr { String = "if(((TIDeviceType>8) AND (TIDeviceType<12)), Seq_en:BYPASS, Seq_en:DEFAULT_EXECUTION)"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL10;
    Micro_flow_sequence[2] = PHY1_MakeSMSSineWave_Rcv_MF;
    Micro_flow_sequence[3] = PHY1_MakeSMSSineWave_Rcv_hi_MF;
    Test_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Test_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Measurement_type[0] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[1] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[2] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Measurement_type[3] = Expr { String = "ACPMU_Meas_type:PERIOD_MEAS"; }
    Tpd_reference_pin_direction[0] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[1] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[2] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Tpd_reference_pin_direction[3] = Expr { String = "ACPMU_pin_dir:DUT_output"; }
    Arming_mode[0] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[1] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[2] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Arming_mode[3] = Expr { String = "ACPMU_arm_mode:PATTERN_TRIGGER_ARM"; }
    Trigger_enable_mode[0] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[1] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[2] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Trigger_enable_mode[3] = Expr { String = "ACPMU_enable_mode:ON_STOP_AFTER_START_EDGE"; }
    Number_of_samples[0] = Expr { String = "1000"; }
    Number_of_samples[1] = Expr { String = "1000"; }
    Number_of_samples[2] = Expr { String = "1000"; }
    Number_of_samples[3] = Expr { String = "1000"; }
    Trigger_start_count[0] = Expr { String = "1"; }
    Trigger_start_count[1] = Expr { String = "1"; }
    Trigger_start_count[2] = Expr { String = "1"; }
    Trigger_start_count[3] = Expr { String = "1"; }
    Trigger_stop_count[0] = Expr { String = "1"; }
    Trigger_stop_count[1] = Expr { String = "1"; }
    Trigger_stop_count[2] = Expr { String = "1"; }
    Trigger_stop_count[3] = Expr { String = "1"; }
    Bit_cell[0] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[1] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[2] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Bit_cell[3] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Start_pattern_first[0] = Expr { String = "FALSE"; }
    Start_pattern_first[1] = Expr { String = "FALSE"; }
    Start_pattern_first[2] = Expr { String = "FALSE"; }
    Start_pattern_first[3] = Expr { String = "FALSE"; }
    Pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_xmt_dv_1a_Thread1"; }
    Pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Pattern_index[3] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Override_pattern_fails[0] = Expr { String = "TRUE"; }
    Override_pattern_fails[1] = Expr { String = "TRUE"; }
    Override_pattern_fails[2] = Expr { String = "TRUE"; }
    Override_pattern_fails[3] = Expr { String = "TRUE"; }
    Low_limit[0] = Expr { String = "1/pll10_clk_freq.Max+3.7e-11s*SigmaGuardbandFactor"; }
    Low_limit[1] = Expr { String = "1/pll10_clk_freq.Max+9.2e-12s*SigmaGuardbandFactor"; }
    Low_limit[2] = Expr { String = "1/pll10_clk_freq.Max+2.8e-11s*SigmaGuardbandFactor"; }
    Low_limit[3] = Expr { String = "1/pll10_rcv_lo_freq.Max+1.1e-11s*SigmaGuardbandFactor"; }
    High_limit[0] = Expr { String = "1/pll10_clk_freq.Min-3.7e-11s*SigmaGuardbandFactor"; }
    High_limit[1] = Expr { String = "1/pll10_clk_freq.Min-9.2e-12s*SigmaGuardbandFactor"; }
    High_limit[2] = Expr { String = "1/pll10_clk_freq.Min-2.8e-11s*SigmaGuardbandFactor"; }
    High_limit[3] = Expr { String = "1/pll10_rcv_lo_freq.Min-1.1e-11s*SigmaGuardbandFactor"; }
    Additional_test[0] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[1] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[2] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_test[3] = Expr { String = "ACPMU_Result_type:RMS_JITTER"; }
    Additional_low_limit[0] = Expr { String = "pll10_jitter.Min+2.2e-11s*SigmaGuardbandFactor"; }
    Additional_low_limit[1] = Expr { String = "pll10_jitter.Min+3.0e-12s*SigmaGuardbandFactor"; }
    Additional_low_limit[2] = Expr { String = "pll10_jitter.Min+4.0e-11s*SigmaGuardbandFactor"; }
    Additional_low_limit[3] = Expr { String = "pll10_jitter.Min+2.5e-12s*SigmaGuardbandFactor"; }
    Additional_high_limit[0] = Expr { String = "pll10_jitter.Max-2.2e-11s*SigmaGuardbandFactor"; }
    Additional_high_limit[1] = Expr { String = "pll10_jitter.Max-3.0e-12s*SigmaGuardbandFactor"; }
    Additional_high_limit[2] = Expr { String = "pll10_jitter.Max-4.0e-11s*SigmaGuardbandFactor"; }
    Additional_high_limit[3] = Expr { String = "pll10_jitter.Max-2.5e-12s*SigmaGuardbandFactor"; }
    Analysis_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Test_measurement_results[0] = Expr { String = "TRUE"; }
    Test_measurement_results[1] = Expr { String = "TRUE"; }
    Test_measurement_results[2] = Expr { String = "TRUE"; }
    Test_measurement_results[3] = Expr { String = "TRUE"; }
    Test_additional_results[0] = Expr { String = "TRUE"; }
    Test_additional_results[1] = Expr { String = "TRUE"; }
    Test_additional_results[2] = Expr { String = "TRUE"; }
    Test_additional_results[3] = Expr { String = "TRUE"; }
    Measurement_timeout[0] = Expr { String = "2s/100"; }
    Measurement_timeout[1] = Expr { String = "2s/100"; }
    Measurement_timeout[2] = Expr { String = "2s/100"; }
    Measurement_timeout[3] = Expr { String = "2s/100"; }
    Simulate_results[0] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[3] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[0] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Simulator_measurement[1] = Expr { String = "1.0/pll10_clk_freq.Typ"; }
    Simulator_measurement[2] = Expr { String = "1.0/tx_10bt_rcv_freq.Typ"; }
    Simulator_measurement[3] = Expr { String = "1.0/pll10_rcv_lo_freq.Typ"; }
    Disable_pattern_datalog[0] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[1] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[2] = Expr { String = "FALSE"; }
    Disable_pattern_datalog[3] = Expr { String = "FALSE"; }
    Output_run_time_errors[0] = Expr { String = "FALSE"; }
    Output_run_time_errors[1] = Expr { String = "FALSE"; }
    Output_run_time_errors[2] = Expr { String = "FALSE"; }
    Output_run_time_errors[3] = Expr { String = "FALSE"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
    Execute_sites_serially[1] = Expr { String = "FALSE"; }
    Execute_sites_serially[2] = Expr { String = "FALSE"; }
    Execute_sites_serially[3] = Expr { String = "FALSE"; }
    Log_enable[0] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[3] = Expr { String = "Log:LOG_OFF"; }
    Raw_data_to_Log_tool[0] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[1] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[2] = Expr { String = "FALSE"; }
    Raw_data_to_Log_tool[3] = Expr { String = "FALSE"; }
    Raw_data_to_text_file = Expr { String = "''"; }
    Measurement_results[0] = Expr { String = "#"; Mode = Output; }
    Measurement_results[1] = Expr { String = "#"; Mode = Output; }
    Measurement_results[2] = Expr { String = "#"; Mode = Output; }
    Measurement_results[3] = Expr { String = "#"; Mode = Output; }
    Additional_results[0] = Expr { String = "#"; Mode = Output; }
    Additional_results[1] = Expr { String = "#"; Mode = Output; }
    Additional_results[2] = Expr { String = "#"; Mode = Output; }
    Additional_results[3] = Expr { String = "#"; Mode = Output; }
    Characterization_switch = Expr { String = "arg_switch:SWITCH_ON"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable[3] = Expr { String = "FALSE"; }
    Characterization_enable_1[0] = Expr { String = "FALSE"; }
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[3] = Expr { String = "FALSE"; }
    Characterization_enable_2[0] = Expr { String = "FALSE"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[3] = Expr { String = "FALSE"; }
    Characterization_enable_3[0] = Expr { String = "FALSE"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[3] = Expr { String = "FALSE"; }
    Characterization_enable_4[0] = Expr { String = "FALSE"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[3] = Expr { String = "FALSE"; }
}


/* Test PHY0_Adc_dv_2a {   */
/*     Result = Expr { String = "#"; Mode = Output; }   */
/*     Mask[0] = ACTypMask;   */
/*     Mask[1] = FuncTypMask;   */
/*     Mask[2] = TritonInitMask;   */
/*     Entry[0] = PHY_level;   */
/*     Entry[1] = EPHY_ADCPatSeq;   */
/*     PortExpr[0] = Expr { String = "TRUE"; }   */
/*     PortExpr[1] = Expr { String = "FALSE"; }   */
/*     LoopDepth = Outside;   */
/*     TestMethod = "sang.mod.Adc_dv_2a";   */
/*     SMS_PIN = Expr { String = "SMS4"; }   */
/*     DPRO_PIN = Expr { String = "ADCMUX_PINS"; }   */
/*     freq = Expr { String = "Array(1.0MHz,25.6MHz,51.2MHz)"; }   */
/*     Vbg = Expr { String = "Vbg1"; }   */
/* }   */


MicroFlow Adc_dv_2a_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = DSP_load_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_file = Expr { String = "'./Dpro/ephy_adc.calc'"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'ephy_adc_dpro_cap'"; }
                Samples = Expr { String = "8292"; }
                Calculation_name = Expr { String = "'ephy_adc_sine'"; }
        }
    }
}
MicroFlow Adc_dpro_MF {
    Event[0] {
        Tag = dpro_data;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
}
Thread ephy_tx100_startup_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_tx100_startup.ephy_adc_cal_pat_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain000_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain000.ephy_adc_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain001_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain001.gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain010_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain010.gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain011_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain011.gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain100_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain100.gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain101_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain101.gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain110_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain110.gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain111_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain111.gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_dc_1a_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dc_1a.dc_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_tx100_startup_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_tx100_startup.ephy_adc_cal_pat_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain000_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain000.ephy_adc_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain001_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain001.gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain010_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain010.gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain011_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain011.gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain100_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain100.gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain101_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain101.gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain110_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain110.gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain111_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain111.gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_dc_1a_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dc_1a.dc_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
MicroFlow PHY0_MakeSMSSineWave_Rcv_hi_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Override_fails = Expr { String = "FALSE"; }
                Disable_datalog = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.StopSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = Set_LAN_RX_cbit_MF;
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.MakeSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "TRUE"; }
                WaveName = Expr { String = "'pll10bt_lo_freq'"; }
                Amplitude = Expr { String = "4V"; }
                Freq = Expr { String = "tx_10bt_rcv_input_freq.Max"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "10ms"; }
        }
    }
}
MicroFlow PHY0_MakeSMSSineWave_Rcv_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = Continue_patterns;
                Override_fails = Expr { String = "FALSE"; }
                Disable_datalog = Expr { String = "TRUE"; }
                Datalog_message = Expr { String = "''"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.StopSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = Set_LAN_RX_cbit_MF;
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.MakeSMSSineWave";
                SMS_PIN = Expr { String = "SMS4"; }
                ftt = Expr { String = "TRUE"; }
                WaveName = Expr { String = "'pll10bt_hi_freq'"; }
                Amplitude = Expr { String = "3V"; }
                Freq = Expr { String = "tx_10bt_rcv_input_freq.Typ"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "50ms"; }
        }
    }
}
Thread ephy_adc_dv_1a_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_1a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}

Thread ephy_adc_dv_2a_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_pat.Reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.Adc_dv_2a_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain000_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain000.ephy_adc_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain001_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain001.gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain010_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain010.gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain011_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain011.gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain100_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain100.gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain101_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain101.gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain110_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain110.gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain111_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain111.gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_dc_1a_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dc_1a.dc_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain000_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain000.ephy_adc_gain000_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain001_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain001.gain001_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain010_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain010.gain010_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain011_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain011.gain011_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain100_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain100.gain100_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain101_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain101.gain101_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain110_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain110.gain110_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_adc_gain111_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_adc_gain111.gain111_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_dc_1a_Thrd1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:EnterExit"; }
        PatternLabel = Expr { String = "ephy_dc_1a.dc_1a_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ADC_cal_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Cal_Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.cal_Dpro_sp"; }
    }
}
Thread ADC_sin_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_sin_pat.adc_sin_sp"; }
    }
}
Thread ADC_lin_Thrd0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "adc_lin_pat.adc_lin_sp"; }
    }
}
PatternSequence EPHY_ADC_TstPatSeq {
    Thread[0] = ephy_adc_dv_1a_Thrd0;
    Thread[1] = ephy_adc_dv_2a_Thrd0;
    Thread[2] = ephy_adc_gain000_Thrd0;
    Thread[3] = ephy_adc_gain001_Thrd0;
    Thread[4] = ephy_adc_gain010_Thrd0;
    Thread[5] = ephy_adc_gain011_Thrd0;
    Thread[6] = ephy_adc_gain100_Thrd0;
    Thread[7] = ephy_adc_gain101_Thrd0;
    Thread[8] = ephy_adc_gain110_Thrd0;
    Thread[9] = ephy_adc_gain111_Thrd0;
    Thread[10] = ephy_dc_1a_Thrd0;
    Thread[11] = ephy_adc_gain000_Thrd1;
    Thread[12] = ephy_adc_gain001_Thrd1;
    Thread[13] = ephy_adc_gain010_Thrd1;
    Thread[14] = ephy_adc_gain011_Thrd1;
    Thread[15] = ephy_adc_gain100_Thrd1;
    Thread[16] = ephy_adc_gain101_Thrd1;
    Thread[17] = ephy_adc_gain110_Thrd1;
    Thread[18] = ephy_adc_gain111_Thrd1;
    Thread[19] = ADC_cal_Thrd0;
    Thread[20] = ADC_sin_Thrd;
    Zipper = Zipper {
        Row { FUNC_GRP, WFT_MAIN = { WFT_MAIN } }
        Row { EPHY_PatGrp, WFT_ADC2_GAIN = { WFT_ADC2_GAIN } }
    }
    BasePeriodResolution = Expr { String = "40ns"; }
}
Test PHY_Adc_dv_2a_TST {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADC_TstPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result = tm_rslt:FAIL AND PHY_ADC_DV_2A_MF.PHY_num = 1"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = PHY_RX_TST;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "ADCMUX_PINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = PHY_ADC_DV_2A_MF;
    Simulate_results[0] = Expr { String = "tm_rslt:PASS"; }
}
MicroFlow PHY_ADC_DV_2A_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "SetCounter(0,-1)"; }
    }
    Event[1] {
        Tag = Inc_Freq;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "IncCounter(0)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Expr = Expr { String = "SetCounter(1,2)"; }
    }
    Event[3] {
        Tag = PHY_num;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Expr = Expr { String = "DecCounter(1)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Expr = Expr { String = "SetCounter(2,-1)"; }
    }
    Event[5] {
        Tag = Inc_gain;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Expr = Expr { String = "IncCounter(2)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "FALSE{.PHY_num = 1 AND .Inc_Freq <2 }"; }
        enVisionObject = CPS6_PH1_lvl;
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "{.PHY_num = 0 OR .Inc_Freq >1} FALSE"; }
        enVisionObject = CPS6_lvl;
    }
    Event[8] {
        Tag = pat_sim;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "NOT Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Adc_dv_2a_mf";
                SMS_PIN = Expr { String = "SMS4"; }
                freq = Expr { String = "selectx(.Inc_Freq,1.0MHz,25.6MHz,51.2MHz)"; }
                Vbg = Expr { String = "1.25V"; }
                PHY_num = Expr { String = ".PHY_num"; }
                gain_count = Expr { String = ".Inc_gain"; }
                harm_locs = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[9] {
        Tag = Pat_numb;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "Connected_to_tester()"; }
        Method {
                MicroFlowMid = "Titan.tp.Adc_dv_2a_mf";
                SMS_PIN = Expr { String = "SMS4"; }
                freq = Expr { String = "selectx(.Inc_Freq,1.0MHz,25.6MHz,51.2MHz)"; }
                Vbg = Expr { String = "if(.PHY_num = 0, Vbg, Vbg1)"; }
                PHY_num = Expr { String = ".PHY_num"; }
                gain_count = Expr { String = ".Inc_gain"; }
                harm_locs = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[10] {
        Tag = SMSINTSet;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = "selectx(.Inc_Freq,InitAttSet1MHz,InitAttSet30MHz,InitAttSet60MHz)"; }
        }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_TSTA"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:ALL"; }
        }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Method {
                MicroFlowMid = DSP_load_calculation;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Calculation_file = Expr { String = "'./Dpro/adc_all_MUX_calc.wmod'"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = ".Inc_gain = 0 "; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "8292"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = ".Inc_gain = 0 "; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "8292"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = ".Inc_gain = 0 "; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADC_TstPatSeq.Thread.ADC_cal_Thrd0"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = ".Inc_gain = 0 "; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADC_TstPatSeq.Thread.ADC_sin_Thrd"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Continue_patterns;
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "NOT Connected_to_tester()"; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = "PHY_ADC_DV_2A_MF.pat_sim.harm_locs"; }
        }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "Connected_to_tester() AND .Inc_gain = 0 "; }
        SetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
            Expr = Expr { String = "PHY_ADC_DV_2A_MF.Pat_numb.harm_locs"; }
        }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_sin'"; }
                Samples = Expr { String = "8292"; }
                Calculation_name = Expr { String = "'ADC_sinewave_sin'"; }
        }
    }
    Event[21] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Method {
                MicroFlowMid = DSP_Rcv_capture;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Capture_name = Expr { String = "'Sine_data_cal'"; }
                Samples = Expr { String = "8292"; }
                Calculation_name = Expr { String = "'ADC_sinewave_amp'"; }
        }
    }
    Event[22] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(Connected_to_tester(),.Pat_numb,.pat_sim)"; }
        }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADC_TstPatSeq.Thread.ADC_cal_Thrd0"; }
        }
    }
    Event[24] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_cal";
        }
    }
    Event[25] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "26"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[26] {
        Tag = snr_cal_fact;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "27"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_cal";
        }
    }
    Event[27] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "28"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAtt";
                SMS_PIN = Expr { String = "SMS4"; }
                att_setting = Expr { String = ".snr_cal_fact *PHY_ADC_DV_2A_MF.SMSINTSet.att_setting"; }
        }
    }
    Event[28] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "29"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "if(Connected_to_tester(),.Pat_numb,.pat_sim)"; }
        }
    }
    Event[29] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "30"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADC_TstPatSeq.Thread.ADC_sin_Thrd"; }
        }
    }
    Event[30] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "31"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = "sang.mod.breakpoint";
        }
    }
    Event[31] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "32"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = CODEC_RINGIN1_PLL10;
    }
    Event[32] {
        Tag = Time1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "33"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Measure_frequency;
                Single_pin = Expr { String = "{REFCLKI}CODEC_RINGIN1"; }
                Max_expected_frequency = Expr { String = "130MHz"; }
                Sample_size = Expr { String = "FRQ_count:COUNT_LEGACY"; }
                Method_of_test = Expr { String = "Method:ASYNCHRONOUS"; }
                Pattern_index = Expr { String = "20"; }
        }
    }
    Event[33] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "34"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Continue_patterns;
        }
    }
    Event[34] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "35"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "harm_locs";
        }
    }
    Event[35] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "36"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "Sine_data_sin";
        }
    }
    Event[36] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "37"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "OffsetBinaryData";
        }
    }
    Event[37] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "38"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFTdB";
        }
    }
    Event[38] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "39"; }
        Enable = Expr { String = "DebugTest"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "PwrFFT";
        }
    }
    Event[39] {
        Tag = Thd;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "40"; }
        Enable = Expr { String = "TRUE"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "THDdB";
        }
    }
    Event[40] {
        Tag = Snr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "41"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "snr_db";
        }
    }
    Event[41] {
        Tag = Enob;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "42"; }
        GetVariable {
            evPins = Expr { String = "ADCMUX_PINS"; }
            Name = "enob";
        }
    }
    Event[42] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "43"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_Freq_ADC','Hz', .Time1*1Hz , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_Freq_ADC','Hz', .Time1*1Hz , TWDataType:TWMinimumData))"; }
    }
    Event[43] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "44"; }
        Enable = Expr { String = ".Inc_Freq =0 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_THD_1MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_THD_1MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[44] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "45"; }
        Enable = Expr { String = ".Inc_Freq =1 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_THD_25MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_THD_25MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[45] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "46"; }
        Enable = Expr { String = ".Inc_Freq =2 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_THD_51MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_THD_51MHZ','dB', .Thd*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[46] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "47"; }
        Enable = Expr { String = ".Inc_Freq =0 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_SNR_1MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_SNR_1MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[47] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "48"; }
        Enable = Expr { String = ".Inc_Freq =1 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_SNR_25MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_SNR_25MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[48] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "49"; }
        Enable = Expr { String = ".Inc_Freq =2 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_SNR_51MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_SNR_51MHZ','dB', .Snr*1dB , TWDataType:TWMinimumData))"; }
    }
    Event[49] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "50"; }
        Enable = Expr { String = ".Inc_Freq =0 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_ENOB_1MHZ','BITS', .Enob , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_ENOB_1MHZ','BITS', .Enob , TWDataType:TWMinimumData))"; }
    }
    Event[50] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "51"; }
        Enable = Expr { String = ".Inc_Freq =1 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_ENOB_25MHZ','BITS', .Enob , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_ENOB_25MHZ','BITS', .Enob , TWDataType:TWMinimumData))"; }
    }
    Event[51] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "52"; }
        Enable = Expr { String = ".Inc_Freq =2 AND TRUE"; }
        Expr = Expr { String = "if(.PHY_num = 0,TWPDLDataLogRealVariable('PHY0_ENOB_51MHZ','BITS', .Enob , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_ENOB_51MHZ','BITS', .Enob , TWDataType:TWMinimumData))"; }
    }
    Event[52] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "53"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
    Event[53] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "54"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=0 "; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST AC_DV_MUX_1A_Min >>>>>>>>>\n`')"; }
    }
    Event[54] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "55"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=0 "; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave\n`')"; }
    }
    Event[55] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "56"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=0"; }
        Expr = Expr { String = "Print('stdout, `\n\t1 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[56] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "57"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=1"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave\n`')"; }
    }
    Event[57] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "58"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=1"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[58] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "59"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=2"; }
        Expr = Expr { String = "Print('stdout, `\n\t30 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[59] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "60"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
    Event[60] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "61"; }
        Enable = Expr { String = "Print_characterisation AND .Inc_Freq=2"; }
        Expr = Expr { String = "Print('stdout, `\n\t60 MHz sinewave, 1 dB down\n`')"; }
    }
    Event[61] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "62"; }
        Enable = Expr { String = "FALSE"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[62] {
        Tag = F0;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "63"; }
        Enable = Expr { String = ".Inc_Freq =0"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, THD_limit.Max.Cat0, THD_limit.Typ.Cat0, THD_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_THD_1MHz' ,'PHY1_THD_1MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[63] {
        Tag = F1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "64"; }
        Enable = Expr { String = ".Inc_Freq =1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, THD_limit.Max.Cat0, THD_limit.Typ.Cat0, THD_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_THD_25Mhz' ,'PHY1_THD_25Mhz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[64] {
        Tag = F2;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "65"; }
        Enable = Expr { String = ".Inc_Freq =02"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Thd*1dB,-40dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, THD_limit.Max.Cat0, THD_limit.Typ.Cat0, THD_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_THD_60MHz' ,'PHY1_THD_60MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[65] {
        Tag = F00;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "66"; }
        Enable = Expr { String = ".Inc_Freq =0"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, SNR_limit.Max.Cat0, SNR_limit.Typ.Cat0, SNR_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_SNR_1MHz','PHY1_SNR_1MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[66] {
        Tag = F11;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "67"; }
        Enable = Expr { String = ".Inc_Freq =1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, SNR_limit.Max.Cat0, SNR_limit.Typ.Cat0, SNR_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_SNR_25Mhz','PHY1_SNR_25Mhz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[67] {
        Tag = F22;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "68"; }
        Enable = Expr { String = ".Inc_Freq =2"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Snr*1dB,-25dB)"; }
                lo_lim_val = Expr { String = "-100"; }
                hi_lim_val = Expr { String = "selectx (.Inc_Freq, SNR_limit.Max.Cat0, SNR_limit.Typ.Cat0, SNR_limit.Min.Cat0)"; }
                units_desc = Expr { String = "'dB'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_SNR_60MHz','PHY1_SNR_60MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[68] {
        Tag = F000;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "69"; }
        Enable = Expr { String = ".Inc_Freq =0"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "selectx (.Inc_Freq, ENOB_limit.Max.Cat0, ENOB_limit.Typ.Cat0, ENOB_limit.Min.Cat0)"; }
                hi_lim_val = Expr { String = "6"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_ENOB_1MHz','PHY1_ENOB_1MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[69] {
        Tag = F111;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "70"; }
        Enable = Expr { String = ".Inc_Freq =1"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "selectx (.Inc_Freq, ENOB_limit.Max.Cat0, ENOB_limit.Typ.Cat0, ENOB_limit.Min.Cat0)"; }
                hi_lim_val = Expr { String = "6"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_ENOB_25Mhz','PHY1_ENOB_25Mhz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[70] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "71"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = ".Time1"; }
                lo_lim_val = Expr { String = "10MHz"; }
                hi_lim_val = Expr { String = "250MHz"; }
                units_desc = Expr { String = "'Hz'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_ADC_FREQ','PHY1_ADC_FREQ')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[71] {
        Tag = F222;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "72"; }
        Enable = Expr { String = ".Inc_Freq =2"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'SMS4'"; }
                data_val = Expr { String = "if(Connected_to_tester(),.Enob,4.0)"; }
                lo_lim_val = Expr { String = "selectx (.Inc_Freq, ENOB_limit.Max.Cat0, ENOB_limit.Typ.Cat0, ENOB_limit.Min.Cat0)"; }
                hi_lim_val = Expr { String = "6"; }
                units_desc = Expr { String = "'bits'"; }
                comments = Expr { String = "if(.PHY_num = 0,'PHY0_ENOB_60MHz','PHY1_ENOB_60MHz')"; }
                fname = Expr { String = "'SW'"; }
        }
    }
    Event[72] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "73"; }
        Enable = Expr { String = "(.Inc_Freq =0 AND NOT( .F0 AND .F00 AND .F000)) AND NOT  Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:FAIL"; }
        }
    }
    Event[73] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "74"; }
        Enable = Expr { String = ".Inc_Freq =1 AND NOT( .F1 AND .F11 AND .F111) AND NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:FAIL"; }
        }
    }
    Event[74] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "75"; }
        Enable = Expr { String = ".Inc_Freq =2 AND NOT( .F2 AND .F22 AND .F222) AND NOT Print_characterisation"; }
        Return {
            Expr { String = "tm_rslt:FAIL"; }
        }
    }
    Event[75] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "76"; }
        Enable = Expr { String = ".Inc_gain <7 AND Print_characterisation "; }
        Goto {
            Expr { String = ".Inc_gain.Index"; }
        }
    }
    Event[76] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "77"; }
        Enable = Expr { String = ".PHY_num >0"; }
        Goto {
            Expr { String = ".PHY_num.Index"; }
        }
    }
    Event[77] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "78"; }
        Enable = Expr { String = ".Inc_Freq <2 AND Print_characterisation"; }
        Goto {
            Expr { String = ".Inc_Freq.Index"; }
        }
    }
    Event[78] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "79"; }
        Return {
            Expr { String = "tm_rslt:PASS"; }
        }
    }
    RTypeStatus[72] = 1;
    RTypeStatus[73] = 1;
    RTypeStatus[74] = 1;
    RTypeStatus[78] = 1;
}
Thread ADC_sin_Thrd {
    Row {
        ThreadAction = Expr { String = "Seq:DisableFails"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Trig1"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.Dpro_sp"; }
    }
}
OperatorVariable mag_squelch {
    Comment = "Use magnetic interface for squelch";
    Expr = Expr { String = "TRUE"; }
    UserMode = Production;
}
OperatorVariable TI_category {
    Comment = "Category select";
    Expr = Expr { String = "1"; }
    UserMode = Production;
}
OperatorVariable TI_focus_cal {
    Comment = "If TRUE, run focus cal, otherwise load from tables";
    Expr = Expr { String = "TRUE"; }
    UserMode = Production;
}
OperatorVariable STDF_file_open {
    Comment = "Set to TRUE to open disk file for STDF->MBayse data collection";
    Expr = Expr { String = "false"; }
    UserMode = Production;
}
OperatorVariable STDF_dlog_On {
    Comment = "Set to TRUE to STDF-log all tests";
    Expr = Expr { String = "false"; }
    UserMode = Production;
}
OperatorVariable STDF_dlog_FailOnly {
    Comment = "Set to TRUE to STDF-log all failed tests";
    Expr = Expr { String = "false"; }
    UserMode = Production;
}
OperatorVariable Run_charz {
    Comment = "Characterization select";
    Expr = Expr { String = "FALSE"; }
    UserMode = Production;
}
OperatorVariable Run_stress {
    Comment = "Enable Stress Test";
    Expr = Expr { String = "false"; }
    UserMode = Production;
}
OperatorVariable ProbeCheck {
    Comment = "If true, execute Probe Test ";
    Expr = Expr { String = "TRUE"; }
    UserMode = Production;
}
OperatorVariable switch {
    Comment = "";
    Expr = Expr { String = "#"; Mode = Output; }
    Direction = Output;
    Value = "152";
    UserMode = Production;
}
OperatorVariable MinTypMax_Mask {
    Comment = "0=All;1=Min only;2=Typ only;3=Max only";
    Expr = Expr { String = "#"; Mode = Output; }
    Direction = Output;
    Value = "0";
    UserMode = Production;
}
OperatorVariable Save_file {
    Comment = "Save data as individual files per test";
    Expr = Expr { String = "FALSE"; }
    UserMode = Production;
}
Test VCO_Test {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = StopSMSSineWave_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = PHY1_TEST;
    Title[1] = PHY0_TEST;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = VCO_PHY1_MF;
    Micro_flow_sequence[1] = VCO_PHY0_MF;
}
MicroFlow VCO_PHY0_MF {
    Event[0] {
        Tag = NumberOFSteps;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "if(Print_characterisation,100,100/50)"; }
    }
    Event[1] {
        Tag = Counter;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "SetCounter(0,-1)"; }
    }
    Event[2] {
        Tag = Cntr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "IncCounter(0)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = VCO_PHY0_lvl;
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "FALSE"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "1S"; }
        }
    }
    Event[5] {
        Tag = Tst_rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Method {
                MicroFlowMid = TMU_test;
                Pins = Expr { String = "CODEC_RINGIN1"; }
                Arming_mode = Expr { String = "CTMU_arm:PATTERN_TRIGGER"; }
                Trigger_enable = Expr { String = "CTMU_trigger:ON_STOP_AFTER_START"; }
                Measurement_type = Expr { String = "CTMU_meas:FREQUENCY"; }
                Number_of_samples = Expr { String = "100"; }
                Bit_cell = Expr { String = "8nS"; }
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_VCO_Thread0"; }
                Low_limit = Expr { String = "50MHz/2"; }
                High_limit = Expr { String = "250MHz"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "AVdd-VCO_PHY0_lvl.Vih.TstBusA"; }
                Low_limit = Expr { String = "0V"; }
                High_limit = Expr { String = "AVdd"; }
                Datalog_message = Expr { String = "'Vvco Voltage'"; }
                Message_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[7] {
        Tag = T1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "Print_characterisation"; }
        Method {
                MicroFlowMid = TMU_measure;
                Pins = Expr { String = "CODEC_RINGIN1"; }
                Pins_are_outputs = Expr { String = "TRUE"; }
                Arming_mode = Expr { String = "CTMU_arm:PATTERN_TRIGGER"; }
                Trigger_enable = Expr { String = "CTMU_trigger:ON_STOP_AFTER_START"; }
                Measurement_type = Expr { String = "CTMU_meas:FREQUENCY"; }
                Number_of_samples = Expr { String = "100"; }
                Trigger_stop_count = Expr { String = "1024"; }
                Bit_cell = Expr { String = "8nS"; }
                Measurement_timeout = Expr { String = "2s/100"; }
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_VCO_Thread0"; }
                RMS_jitter = Expr { String = "#"; Mode = Output; }
                Range = Expr { String = "#"; Mode = Output; }
                Min_value = Expr { String = "#"; Mode = Output; }
                Max_value = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,` DP_PARAM: CODEC_RINGIN1_FREQ_%d = `,VCO_PHY0_MF.Cntr')
"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,`  %e Hz\n`,VCO_PHY0_MF.T1[0]')
"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,` DP_PARAM: VCO_Voltage_%d = `,VCO_PHY0_MF.Cntr')
"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,`  %e V\n`,AVdd-VCO_PHY0_lvl.Vih.TstBusA')
"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "if(Print_characterisation,.Cntr<.NumberOFSteps, .Cntr<.NumberOFSteps AND VCO_PHY0_MF.Tst_rslt = tm_rslt:PASS)"; }
        Goto {
            Expr { String = ".Cntr.Index"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Return {
            Expr { String = "if(Print_characterisation, tm_rslt:PASS,.Tst_rslt)"; }
        }
    }
    RTypeStatus[13] = 1;
}
Levels VCO_PHY0_lvl {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "VDD"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "AVdd*0.8"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "VDD"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-CODEC_RINGIN1-DUT_PM-DUT_PM_-PHY_TSTA"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = PLL_output;
    	Group = Expr { String = "CODEC_RINGIN1"; }
    	ExecSeq = Expr { String = "9"; }
    	Vil = Expr { String = "vil/VCO_PHY0_MF.NumberOFSteps *VCO_PHY0_MF.Cntr"; }
    	Vih = Expr { String = "vih/VCO_PHY0_MF.NumberOFSteps *VCO_PHY0_MF.Cntr"; }
    	Vol = Expr { String = "VCO_PHY0_lvl.Vih.TstBusA/6"; }
    	Voh = Expr { String = "VCO_PHY0_lvl.Vih.TstBusA/2"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = TstBusA;
    	Group = Expr { String = "PHY_TSTA"; }
    	ExecSeq = Expr { String = "9"; }
    	Vil = Expr { String = "vil/VCO_PHY0_MF.NumberOFSteps *VCO_PHY0_MF.Cntr"; }
    	Vih = Expr { String = "AVdd-vih/VCO_PHY0_MF.NumberOFSteps *VCO_PHY0_MF.Cntr"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Delay = Expr { String = "0ms"; }
    }
}
Thread ephy_VCO_Thread0 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY0_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.VCO_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.VCO_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
Thread ephy_VCO_Thread1 {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PHY_setup_cpm_pat.PHY1_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_reset.ephy_reset_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_pat.VCO_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_pat.VCO_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:PatTrigger"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "ephy_dpro_adc_sms.PLL_trig2_sp"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:SetRef"; }
        Pattern = ephy_hold_state;
    }
}
MicroFlow VCO_PHY1_MF {
    FinderFilter = "";
    Event[0] {
        Tag = NumberOFSteps;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "if(Print_characterisation,100,100/50)"; }
    }
    Event[1] {
        Tag = Counter;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "SetCounter(0,-1)"; }
    }
    Event[2] {
        Tag = Cntr;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "IncCounter(0)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        enVisionObject = VCO_PHY1_lvl;
    }
    Event[4] {
        Tag = Tst_rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Method {
                MicroFlowMid = TMU_test;
                Pins = Expr { String = "CODEC_RINGIN1"; }
                Pins_are_outputs = Expr { String = "TRUE"; }
                Arming_mode = Expr { String = "CTMU_arm:PATTERN_TRIGGER"; }
                Trigger_enable = Expr { String = "CTMU_trigger:ON_STOP_AFTER_START"; }
                Measurement_type = Expr { String = "CTMU_meas:FREQUENCY"; }
                Reference_is_input = Expr { String = "TRUE"; }
                Number_of_samples = Expr { String = "100"; }
                Trigger_start_count = Expr { String = "1"; }
                Trigger_stop_count = Expr { String = "1"; }
                Bit_cell = Expr { String = "8nS"; }
                Measurement_timeout = Expr { String = "2s"; }
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_VCO_Thread1"; }
                Override_pattern_fails = Expr { String = "FALSE"; }
                Low_limit = Expr { String = "50MHz/2"; }
                High_limit = Expr { String = "250MHz"; }
                Additional_test = Expr { String = "CTMU_test:NO_TEST"; }
                Datalog_message = Expr { String = "''"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "NOT Print_characterisation"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "AVdd-VCO_PHY1_lvl.Vih.TstBusA"; }
                Low_limit = Expr { String = "0V"; }
                High_limit = Expr { String = "AVdd"; }
                Datalog_message = Expr { String = "'Vvco Voltage'"; }
                Message_pins = Expr { String = "PHY_TSTA"; }
        }
    }
    Event[6] {
        Tag = T1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "Print_characterisation OR TRUE"; }
        Method {
                MicroFlowMid = TMU_measure;
                Pins = Expr { String = "CODEC_RINGIN1"; }
                Pins_are_outputs = Expr { String = "TRUE"; }
                Arming_mode = Expr { String = "CTMU_arm:PATTERN_TRIGGER"; }
                Trigger_enable = Expr { String = "CTMU_trigger:ON_STOP_AFTER_START"; }
                Measurement_type = Expr { String = "CTMU_meas:FREQUENCY"; }
                Reference_is_input = Expr { String = "TRUE"; }
                Number_of_samples = Expr { String = "100"; }
                Trigger_start_count = Expr { String = "1"; }
                Trigger_stop_count = Expr { String = "1024"; }
                Bit_cell = Expr { String = "8nS"; }
                Measurement_timeout = Expr { String = "2s/100"; }
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_VCO_Thread1"; }
                Override_pattern_fails = Expr { String = "FALSE"; }
                RMS_jitter = Expr { String = "#"; Mode = Output; }
                Range = Expr { String = "#"; Mode = Output; }
                Min_value = Expr { String = "#"; Mode = Output; }
                Max_value = Expr { String = "#"; Mode = Output; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('VCO_FREQ','Hz', .T1[0] , TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('VCO_VOLTAGE','V', AVdd-VCO_PHY1_lvl.Vih.TstBusA , TWDataType:TWMinimumData)"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,` DP_PARAM: CODEC_RINGIN1_FREQ_%d = `,VCO_PHY1_MF.Cntr')
"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,`  %e Hz\n`,VCO_PHY1_MF.T1[0]')
"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,` DP_PARAM: VCO_Voltage_%d = `,VCO_PHY1_MF.Cntr')
"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "Print_characterisation"; }
        Expr = Expr { String = "Print('DLOG,`  %e V\n`,AVdd-VCO_PHY1_lvl.Vih.TstBusA')
"; }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "if ( Print_characterisation,.Cntr<.NumberOFSteps,.Cntr<.NumberOFSteps AND .Tst_rslt = tm_rslt:PASS)"; }
        Goto {
            Expr { String = ".Cntr.Index"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Return {
            Expr { String = "if(Print_characterisation, tm_rslt:PASS,.Tst_rslt)"; }
        }
    }
    RTypeStatus[14] = 1;
}
Levels VCO_PHY1_lvl {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "VDD"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "VDD"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "AVdd"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-CODEC_RINGIN1-DUT_PM-DUT_PM_-PHY_TSTA"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = PLL_output;
    	Group = Expr { String = "CODEC_RINGIN1"; }
    	ExecSeq = Expr { String = "9"; }
    	Vil = Expr { String = "vil/VCO_PHY1_MF.NumberOFSteps *VCO_PHY1_MF.Cntr"; }
    	Vih = Expr { String = "vih/VCO_PHY1_MF.NumberOFSteps * VCO_PHY1_MF.Cntr"; }
    	Vol = Expr { String = "VCO_PHY1_lvl.Vih.TstBusA/6"; }
    	Voh = Expr { String = "VCO_PHY1_lvl.Vih.TstBusA/2"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = TstBusA;
    	Group = Expr { String = "PHY_TSTA"; }
    	ExecSeq = Expr { String = "9"; }
    	Vil = Expr { String = "vil/VCO_PHY1_MF.NumberOFSteps *VCO_PHY1_MF.Cntr"; }
    	Vih = Expr { String = "AVdd-vih/VCO_PHY1_MF.NumberOFSteps * VCO_PHY1_MF.Cntr"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Delay = Expr { String = "0ms"; }
    }
}
Test SQLPF_PHY1_DV_1A {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level;
    Entry[2] = SetUpSquelch_phy1_xfmr_MF;
    Exit[0] = continue_patt;
    Exit[1] = StopSMSSineWave_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS  OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = NSQE;
    Title[1] = PSQE;
    Title[2] = RXTPM;
    Title[3] = RXTPP;
    TestMethod = Ftest;
    Test_enable[0] = Expr { String = "mag_squelch ? Seq_en:FLOW_AFTER_MEASUREMENT : Seq_en:BYPASS"; }
    Test_enable[1] = Expr { String = "mag_squelch ? Seq_en:FLOW_AFTER_MEASUREMENT : Seq_en:BYPASS"; }
    Test_enable[2] = Expr { String = "mag_squelch ? Seq_en:FLOW_AFTER_MEASUREMENT : Seq_en:BYPASS"; }
    Test_enable[3] = Expr { String = "mag_squelch ? Seq_en:FLOW_AFTER_MEASUREMENT : Seq_en:BYPASS"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN3"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN2"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN4"; }
    Test_pins[3] = Expr { String = "CODEC_FS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = SQLPF_Lvl;
    Micro_flow_sequence[0] = sqlpf_PHY1_mf;
    Micro_flow_sequence[1] = sqlpf_PHY1_mf;
    Micro_flow_sequence[2] = sqlpf_PHY1_mf;
    Micro_flow_sequence[3] = sqlpf_PHY1_mf;
    Simulate_results[1] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[2] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulate_results[3] = Expr { String = "tm_rslt:FLOW_SIM_OFF"; }
    Simulator_measurement[1] = Expr { String = "TRUE"; }
    Simulator_measurement[2] = Expr { String = "TRUE"; }
    Simulator_measurement[3] = Expr { String = "TRUE"; }
    Log_enable[1] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[2] = Expr { String = "Log:LOG_OFF"; }
    Log_enable[3] = Expr { String = "Log:LOG_OFF"; }
    Characterization_enable[0] = Expr { String = "FALSE"; }
    Characterization_enable[1] = Expr { String = "FALSE"; }
    Characterization_enable[2] = Expr { String = "FALSE"; }
    Characterization_enable[3] = Expr { String = "FALSE"; }
    Characterization_pins[0] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[1] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[2] = Expr { String = "CODEC_RINGIN2"; }
    Characterization_pins[3] = Expr { String = "CODEC_RINGIN2"; }
    Characterize_by_pin[0] = Expr { String = "TRUE"; }
    Characterize_by_pin[1] = Expr { String = "TRUE"; }
    Characterize_by_pin[2] = Expr { String = "TRUE"; }
    Characterize_by_pin[3] = Expr { String = "TRUE"; }
    Acquisition_method[0] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[1] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[2] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Acquisition_method[3] = Expr { String = "Char_method:SHMOO_PAT_LOCATION"; }
    Independent_axis[0] = vvvv;
    Independent_axis[1] = vvvv;
    Independent_axis[2] = vvvv;
    Independent_axis[3] = vvvv;
    Dependent_axis[0] = xxxx;
    Dependent_axis[1] = xxxx;
    Dependent_axis[2] = xxxx;
    Dependent_axis[3] = xxxx;
    Characterization_enable_1[1] = Expr { String = "FALSE"; }
    Characterization_enable_1[2] = Expr { String = "FALSE"; }
    Characterization_enable_1[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_1[3] = Expr { String = "FALSE"; }
    Acquisition_method_1[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_1[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_1[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_2[1] = Expr { String = "FALSE"; }
    Characterization_enable_2[2] = Expr { String = "FALSE"; }
    Characterization_enable_2[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_2[3] = Expr { String = "FALSE"; }
    Acquisition_method_2[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_2[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_2[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_3[1] = Expr { String = "FALSE"; }
    Characterization_enable_3[2] = Expr { String = "FALSE"; }
    Characterization_enable_3[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_3[3] = Expr { String = "FALSE"; }
    Acquisition_method_3[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_3[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_3[3] = Expr { String = "Char_method:BINARY"; }
    Characterization_enable_4[1] = Expr { String = "FALSE"; }
    Characterization_enable_4[2] = Expr { String = "FALSE"; }
    Characterization_enable_4[3] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[1] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[2] = Expr { String = "FALSE"; }
    Characterize_by_pin_4[3] = Expr { String = "FALSE"; }
    Acquisition_method_4[1] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_4[2] = Expr { String = "Char_method:BINARY"; }
    Acquisition_method_4[3] = Expr { String = "Char_method:BINARY"; }
}
MicroFlow SetUpSquelch_phy1_xfmr_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "mag_squelch"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_all_cbits";
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_cbits";
                SetRelayNumber_str = Expr { String = "'16 18 22 28 3 22 1 2 30 19'"; }
        }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "mag_squelch"; }
        Method {
                MicroFlowMid = "Titan.tp.Set_cbits";
                SetRelayNumber_str = Expr { String = "'15 17 29 1 2'"; }
        }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM"; }
                Pin_state = Expr { String = "State:LOW_LEVEL"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Set_pin_state;
                Pins = Expr { String = "DUT_PM_"; }
                Pin_state = Expr { String = "State:HIGH_LEVEL"; }
        }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+PHY_EXRES_RTN"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
        }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "LAN_RXM+PC_RXM+LAN_RXP+PC_RXP+ADCMUX_PINS+DUT_PM+DUT_PM_+SQULCH_PINS"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "1ms"; }
        }
    }
}
Levels SQLPF_Lvl {
    Column[0] {
    	LevelsColumnType = evDigitalType;
    	Title = SQlPF_lvl;
    	Group = Expr { String = "CODEC_RINGIN2+CODEC_RINGIN3+CODEC_RINGIN4+CODEC_FS"; }
    	Vil = Expr { String = "450mV"; }
    	Vih = Expr { String = "2.8V"; }
    	Vol = Expr { String = "0.2V"; }
    	Voh = Expr { String = "1.0V/4"; }
    	Iol = Expr { String = "0A"; }
    	Ioh = Expr { String = "-100uA"; }
    	Delay = Expr { String = "0mS"; }
    }
}
MicroFlow sqlpf_PHY1_mf {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "sqlpf_loop = 0"; }
        Expr = Expr { String = "Print('stdout, `\n\n<<<<<<<<< TEST SQLPF_DV_1A >>>>>>>>>\n`')"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "sqlpf_loop = 0"; }
        enVisionObject = ReadyForDatalog;
    }
    Event[2] {
        Value = Expr { String = "#->sqlpf_loop"; Mode = Output; }
        Index = Expr { String = "3"; }
        Expr = Expr { String = "sqlpf_loop + 1"; }
    }
    Event[3] {
        Value = Expr { String = "#->loop_count"; Mode = Output; }
        Index = Expr { String = "4"; }
        Expr = Expr { String = "0"; }
    }
    Event[4] {
        Value = Expr { String = "#->V_Diff"; Mode = Output; }
        Index = Expr { String = "5"; }
        Expr = Expr { String = "select(sqlpf_loop,2500mV, 2500mV, 0V, 0V)"; }
    }
    Event[5] {
        Tag = inc_vdiff;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Method {
                MicroFlowMid = "Titan.tp.SetSmsAmpl";
                SMS_PIN = Expr { String = "SMS4"; }
                sms_src = Expr { String = "'Squelch_src'"; }
                sms_meas = Expr { String = "'Squelch_meas'"; }
                amplitude = Expr { String = "V_Diff < 0V ? -V_Diff : V_Diff"; }
        }
    }
    Event[6] {
        Tag = rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "NOT DebugTest"; }
        Method {
                MicroFlowMid = Test_patterns;
                Pattern_index = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_sqlpf_dv_1a_Thread1"; }
                Override_fails = Expr { String = "FALSE"; }
                Datalog_message = Expr { String = "''"; }
                Log_enable = Expr { String = "Log:LOG_OFF"; }
                Char_enable = Expr { String = "FALSE"; }
                Char_by_pin = Expr { String = "FALSE"; }
                Acquisition_method = Expr { String = "Char_method:BINARY"; }
        }
    }
    Event[7] {
        Tag = sim_rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "DebugTest"; }
        Expr = Expr { String = "selectx(loop_count, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:PASS, tm_rslt:FAIL, tm_rslt:PASS)"; }
    }
    Event[8] {
        Value = Expr { String = "{# < 0V ? -# -> V_Diff :} # -> V_Diff"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "loop_count = 0"; }
        Expr = Expr { String = "V_Diff + 10mV"; }
    }
    Event[9] {
        Value = Expr { String = "{# < 0V ? -# -> V_Diff :} # -> V_Diff"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "loop_count > 0"; }
        Expr = Expr { String = "V_Diff + (10mV / pow(2, loop_count) * ((DebugTest ? .sim_rslt : .rslt) = tm_rslt:PASS ? 1 : -1))"; }
    }
    Event[10] {
        Value = Expr { String = "#->loop_count"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "loop_count > 0 OR .rslt = tm_rslt:FAIL"; }
        Expr = Expr { String = "loop_count + 1"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = ".rslt = tm_rslt:FAIL"; }
        Goto {
            Expr { String = "if(V_Diff > 3V OR loop_count > 20,.outs.Index,.inc_vdiff.Index)"; }
        }
    }
    Event[12] {
        Tag = outs;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Method {
                MicroFlowMid = "Titan.tp.GetDiffValue";
                SMS_PIN = Expr { String = "SMS4"; }
                AnalogWaveformName = Expr { String = "'Squelch'"; }
                plus_minus = Expr { String = "selectx(sqlpf_loop, 1, -1, 1, -1, 1)"; }
                debug_test = Expr { String = "DebugTest"; }
        }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Test_float;
                Test_value = Expr { String = "(Connected_to_tester() ? sqlpf_PHY1_mf.outs : V_Diff )* 1V"; }
                Low_limit = Expr { String = "select(sqlpf_loop, SQE_Thres.Min, SQE_Thres.Min, RXTP_Thres.Min, RXTP_Thres.Min)"; }
                High_limit = Expr { String = "select(sqlpf_loop, SQE_Thres.Max, SQE_Thres.Max, RXTP_Thres.Max, RXTP_Thres.Max)"; }
                Datalog_message = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'NSQE comparator threshold', 'PSQE comparator threshold', 'RXTPM comparator threshold', 'RXTPP comparator threshold')"; }
                Message_pins = Expr { String = "selectx(sqlpf_loop,CODEC_RINGIN2,CODEC_RINGIN3,CODEC_RINGIN4,CODEC_FS)"; }
        }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "selectx(sqlpf_loop, TWPDLDataLogRealVariable('PHY1_SQLCH_NSQE','V', .outs , TWDataType:TWMinimumData), TWPDLDataLogRealVariable('PHY1_SQLCHP_NSQE','V', .outs , TWDataType:TWMinimumData), TWPDLDataLogRealVariable('PHY1_SQLCH_RXTPM','V', .outs , TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_SQLCH_RXTPP','V', .outs , TWDataType:TWMinimumData))"; }
    }
    Event[15] {
        Tag = Rslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits";
                pins = Expr { String = "'analog_in'"; }
                data_val = Expr { String = "Connected_to_tester() ? sqlpf_PHY1_mf.outs : V_Diff"; }
                lo_lim_val = Expr { String = "select(sqlpf_loop, SQE_Thres.Min, SQE_Thres.Min, RXTP_Thres.Min, RXTP_Thres.Min)"; }
                hi_lim_val = Expr { String = "select(sqlpf_loop, SQE_Thres.Max, SQE_Thres.Max, RXTP_Thres.Max, RXTP_Thres.Max)"; }
                units_desc = Expr { String = "'V'"; }
                comments = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'PHY1_NSQE_comparator_threshold', 'PHY1_PSQE_comparator_threshold', 'PHY1_RXTPM_comparator_threshold', 'PHY1_RXTPP_comparator_threshold')"; }
                fname = Expr { String = "selectx(sqlpf_loop, 'NOT IN LOOP', 'NSQE', 'PSQE', 'RXTPM', 'RXTPP')"; }
        }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "sqlpf_loop = 4"; }
        Method {
                MicroFlowMid = "Titan.tp.Reset_cbits";
                SetRelayNumber_str = Expr { String = "'17 18 22'"; }
        }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "sqlpf_loop = 4"; }
        Method {
                MicroFlowMid = Time_delay;
                Delay_value = Expr { String = "1s/1000"; }
        }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Return {
            Expr { String = "if(.Rslt,tm_rslt:PASS ,tm_rslt:FAIL)"; }
        }
    }
    RTypeStatus[18] = 1;
}
MicroFlow Disconnect_PHY_RES_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "ADCMUX_PINS"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+PHY_EXRES_RTN"; }
                Control_mode = Expr { String = "Operation:DISCONNECT_FROM_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
}

/*** Rev29 rsf  ***/
MicroFlow Connect_PHY_RES_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = Pin_connections;
                Pins = Expr { String = "PHY_EXRES+PHY_EXRES_RTN"; }
                Control_mode = Expr { String = "Operation:CONNECT_TO_DUT"; }
                Connection = Expr { String = "Connect:HIGH_SPEED"; }
        }
    }
}

/** rsf **/
Test TX100_TST {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = "Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result [0] =1 AND .Result [1] =1"; }
    PortExpr[2] = Expr { String = ".Result [1] =0"; }
    PortExpr[3] = Expr { String = ".Result [0] =0"; }
    PortExpr[4] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = "Titan.tp.Tx100bt";
    SMS_PIN = Expr { String = "SMS4"; }
    debug_test = Expr { String = "DebugTest"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
Test TX10_TST {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level_32V;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Entry[3] = Transmit_10BT_Setup_MF;
    PortExpr[0] = Expr { String = ".Result[0] = 1 AND .Result[1] = 1  OR Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result[0] = 0"; }
    PortExpr[2] = Expr { String = ".Result[1] = 0"; }
    PortExpr[3] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'TX10_TST_PHY0', TWDataType:TWMinimumData)"; }
    PortAction[2] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'TX10_TST_PHY1', TWDataType:TWMinimumData)"; }
    LoopDepth = Outside;
    Title[0] = TX10;
    TestMethod = "sang.mod.Tx10bt";
    SMS_PIN = Expr { String = "SMS4"; }
    debug_test = Expr { String = "DebugTest"; }
    PHY_rslts = Expr { String = "#"; Mode = Output; }
}
MicroFlow Datalog_tx_100_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_100BT_PK_PK','V',TX100_TST.PHY_rslt[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_POS_RISE_TIME_100BT','S',TX100_TST.PHY_rslt[1], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_POS_FALL_TIME_100BT','S',TX100_TST.PHY_rslt[2], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_NEG_RISE_TIME_100BT','S',TX100_TST.PHY_rslt[3], TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_NEG_FALL_TIME_100BT','S',TX100_TST.PHY_rslt[4], TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX100_RISE-FALL_MATCH','S',TX100_TST.PHY_rslt[5], TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_LO-MID_LVL_100BT','V',TX100_TST.PHY_rslt[6], TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_HIGH_LEVEL_100BT','V',TX100_TST.PHY_rslt[7], TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX100_HI_MID_LVL','V',TX100_TST.PHY_rslt[8], TWDataType:TWMinimumData)"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_LOW_LEVEL_100BT','V',TX100_TST.PHY_rslt[9], TWDataType:TWMinimumData)"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX100_DUTY_CYCLE_DISTORT','V',TX100_TST.PHY_rslt[10], TWDataType:TWMinimumData)"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX_DIFF_AMP_100BT','V',TX100_TST.PHY_rslt[11], TWDataType:TWMinimumData)"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_100BT_PK_PK','V',TX100_TST.PHY_rslt[12], TWDataType:TWMinimumData)"; }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_POS_RISE_TIME_100BT1','V',TX100_TST.PHY_rslt[13], TWDataType:TWMinimumData)"; }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_POS_TIME_100BT','V',TX100_TST.PHY_rslt[14], TWDataType:TWMinimumData)"; }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_NEG_RISE_TIME_100BT2','V',TX100_TST.PHY_rslt[15], TWDataType:TWMinimumData)"; }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_NEG_FALL_TIME_100BT','V',TX100_TST.PHY_rslt[16], TWDataType:TWMinimumData)"; }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX100_RISE-FALL_MATCH','V',TX100_TST.PHY_rslt[17], TWDataType:TWMinimumData)"; }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX100_LOW-MID_LVL','V',TX100_TST.PHY_rslt[18], TWDataType:TWMinimumData)"; }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_HIGH_LEVEL_100BT','V',TX100_TST.PHY_rslt[19], TWDataType:TWMinimumData)"; }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX100_HI-MID_LVL','V',TX100_TST.PHY_rslt[20], TWDataType:TWMinimumData)"; }
    }
    Event[21] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_LOW_LEVEL_100BT','V',TX100_TST.PHY_rslt[21], TWDataType:TWMinimumData)"; }
    }
    Event[22] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX100_DUTY_CYCLE_DISTORT','V',TX100_TST.PHY_rslt[22], TWDataType:TWMinimumData)"; }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_TX_DIFF_AMP_100BT','V',TX100_TST.PHY_rslt[23], TWDataType:TWMinimumData)"; }
    }
    Event[24] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
}
Test PLL100_FREQ_Test {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = continue_patt;
    Exit[1] = dlog_PLL100_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "PLL100_FREQ_Test.Test_result.PHY1_PhaseFreq = tm_rslt:FAIL"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = PHY1_PhaseFreq;
    Title[1] = PHY1_Phase_Freq1;
    Title[2] = PHY0_PhaseFreq;
    Title[3] = PHY0_Phase_Freq1;
    TestMethod = FRQtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:ON_FAIL_ONLY_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[3] = Expr { String = "Seq_en:ON_FAIL_ONLY_EXECUTION"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL100;
    Sample_size[0] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[1] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[2] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[3] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Method_of_test[0] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[1] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[2] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[3] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Preset_pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread1"; }
    Preset_pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread1"; }
    Preset_pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Preset_pattern_index[3] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll100_dv_1a_Thread0"; }
    Override_pattern_fails[1] = Expr { String = "FALSE"; }
    Low_limit[0] = Expr { String = "1/pll100_per.Max"; }
    Low_limit[1] = Expr { String = "1/pll100_per.Max"; }
    Low_limit[2] = Expr { String = "1/pll100_per.Max"; }
    Low_limit[3] = Expr { String = "1/pll100_per.Max"; }
    High_limit[0] = Expr { String = "1/pll100_per.Min"; }
    High_limit[1] = Expr { String = "1/pll100_per.Min"; }
    High_limit[2] = Expr { String = "1/pll100_per.Min"; }
    High_limit[3] = Expr { String = "1/pll100_per.Min"; }
    Simulator_measurement[0] = Expr { String = "125MHz"; }
    Simulator_measurement[2] = Expr { String = "125MHz"; }
    Analysis_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Per_pin_measurements[0] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[1] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[2] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[3] = Expr { String = "#"; Mode = Output; }
}
Test PLL10_Freq_Test {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    Exit[0] = continue_patt;
    Exit[1] = StopSMSSineWave_MF;
    Exit[2] = dlog_PLL10_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "PLL10_Freq_Test.Test_result.PHY1_PLL10_XMIT_DV_1A =tm_rslt:FAIL OR PLL10_Freq_Test.Test_result.PHY1_PLL10_RCV_DV_1A_ref =tm_rslt:FAIL OR PLL10_Freq_Test.Test_result.PHY1_PLL10_RCV_DV_1A_data =tm_rslt:FAIL OR PLL10_Freq_Test.Test_result.PHY1_PLL10_RCV_DV_1A_data_hi =tm_rslt:FAIL "; }
    PortExpr[2] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = PHY1_PLL10_XMIT_DV_1A;
    Title[1] = PHY1_PLL10_RCV_DV_1A_ref;
    Title[2] = PHY1_PLL10_RCV_DV_1A_data;
    Title[3] = PHY1_PLL10_RCV_DV_1A_data_hi;
    Title[4] = PHY0_PLL10_XMIT_DV_1A;
    Title[5] = PHY0_PLL10_RCV_DV_1A_ref;
    Title[6] = PHY0_PLL10_RCV_DV_1A_data;
    Title[7] = PHY0_PLL10_RCV_DV_1A_data_hi;
    TestMethod = FRQtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[1] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[2] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[3] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[4] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[5] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[6] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_enable[7] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[4] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[5] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[6] = Expr { String = "CODEC_RINGIN1"; }
    Test_pins[7] = Expr { String = "CODEC_RINGIN1"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Test_result[1] = Expr { String = "#"; Mode = Output; }
    Test_result[2] = Expr { String = "#"; Mode = Output; }
    Test_result[3] = Expr { String = "#"; Mode = Output; }
    Test_result[4] = Expr { String = "#"; Mode = Output; }
    Test_result[5] = Expr { String = "#"; Mode = Output; }
    Test_result[6] = Expr { String = "#"; Mode = Output; }
    Test_result[7] = Expr { String = "#"; Mode = Output; }
    Levels_setup[0] = CODEC_RINGIN1_PLL10;
    Levels_setup[4] = CODEC_RINGIN1_PLL10;
    Micro_flow_sequence[2] = PHY1_MakeSMSSineWave_Rcv_MF;
    Micro_flow_sequence[3] = PHY1_MakeSMSSineWave_Rcv_hi_MF;
    Micro_flow_sequence[4] = StopSMSSineWave_MF;
    Micro_flow_sequence[6] = PHY0_MakeSMSSineWave_Rcv_MF;
    Micro_flow_sequence[7] = PHY0_MakeSMSSineWave_Rcv_hi_MF;
    Sample_size[0] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[1] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[2] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[3] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[4] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[5] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[6] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Sample_size[7] = Expr { String = "FRQ_count:COUNT_LEGACY"; }
    Method_of_test[0] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[1] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[2] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[3] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[4] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[5] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[6] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Method_of_test[7] = Expr { String = "FRQtest_Method:SYNCHRONOUS"; }
    Preset_pattern_index[0] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_xmt_dv_1a_Thread1"; }
    Preset_pattern_index[1] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Preset_pattern_index[2] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Preset_pattern_index[3] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread1"; }
    Preset_pattern_index[4] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_xmt_dv_1a_Thread0"; }
    Preset_pattern_index[5] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Preset_pattern_index[6] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Preset_pattern_index[7] = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_pll10_rcv_dv_1a_Thread0"; }
    Low_limit[0] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[1] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[2] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[3] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[4] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[5] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[6] = Expr { String = "pll10_clk_freq.Min"; }
    Low_limit[7] = Expr { String = "pll10_rcv_lo_freq.Min"; }
    High_limit[0] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[1] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[2] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[3] = Expr { String = "pll10_rcv_lo_freq.Max"; }
    High_limit[4] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[5] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[6] = Expr { String = "pll10_clk_freq.Max"; }
    High_limit[7] = Expr { String = "pll10_rcv_lo_freq.Max"; }
    Simulator_measurement[0] = Expr { String = "20MHz"; }
    Simulator_measurement[1] = Expr { String = "20MHz"; }
    Simulator_measurement[2] = Expr { String = "20MHz"; }
    Simulator_measurement[3] = Expr { String = "20MHz"; }
    Simulator_measurement[4] = Expr { String = "20MHz"; }
    Simulator_measurement[5] = Expr { String = "20MHz"; }
    Simulator_measurement[6] = Expr { String = "20MHz"; }
    Simulator_measurement[7] = Expr { String = "20MHz"; }
    Analysis_pins[0] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[1] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[2] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[3] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[4] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[5] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[6] = Expr { String = "CODEC_RINGIN1"; }
    Analysis_pins[7] = Expr { String = "CODEC_RINGIN1"; }
    Per_pin_measurements[0] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[1] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[2] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[3] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[4] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[5] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[6] = Expr { String = "#"; Mode = Output; }
    Per_pin_measurements[7] = Expr { String = "#"; Mode = Output; }
}
MicroFlow dlog_PLL100_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "if(PLL100_FREQ_Test.Test_result.PHY1_PhaseFreq = tm_rslt:PASS,TWPDLDataLogRealVariable('PHY1_PLL100_FREQ','Hz',PLL100_FREQ_Test.Per_pin_measurements.PHY1_PhaseFreq[0], TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY1_PLL100_FREQ','Hz',PLL100_FREQ_Test.Per_pin_measurements.PHY1_Phase_Freq1[0], TWDataType:TWMinimumData))"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "if(PLL100_FREQ_Test.Test_result.PHY0_PhaseFreq = tm_rslt:PASS,TWPDLDataLogRealVariable('PHY0_PLL100_FREQ','Hz',PLL100_FREQ_Test.Per_pin_measurements.PHY0_PhaseFreq[0], TWDataType:TWMinimumData),TWPDLDataLogRealVariable('PHY0_PLL100_FREQ','Hz',PLL100_FREQ_Test.Per_pin_measurements.PHY0_Phase_Freq1[0], TWDataType:TWMinimumData))"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PLL100_FREQ_Test.Per_pin_measurements.PHY1_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "1/pll100_per.Max"; }
                hi_lim_val = Expr { String = "1/pll100_per.Min"; }
                units_desc = Expr { String = "'Hz'"; }
                comments = Expr { String = "'PHY1_Freq'"; }
                fname = Expr { String = "'PLL10'"; }
        }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Method {
                MicroFlowMid = "Titan.tp.test_limits_times";
                pins = Expr { String = "'CODEC_RINGIN1'"; }
                data_val = Expr { String = "PLL100_FREQ_Test.Per_pin_measurements.PHY0_PhaseFreq[0]"; }
                lo_lim_val = Expr { String = "1/pll100_per.Max"; }
                hi_lim_val = Expr { String = "1/pll100_per.Min"; }
                units_desc = Expr { String = "'Hz'"; }
                comments = Expr { String = "'PHY0_Freq'"; }
                fname = Expr { String = "'Pll10'"; }
        }
    }
}
MicroFlow dlog_PLL10_MF {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_PLL10_XMIT_Freq','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY1_PLL10_XMIT_DV_1A[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_PLL10_RCV_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY1_PLL10_RCV_DV_1A_ref[0], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_PLL10_RCV_data_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY1_PLL10_RCV_DV_1A_data[0], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY1_PLL10_RCV_data_hi_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY1_PLL10_RCV_DV_1A_data_hi[0], TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_PLL10_XMIT_Freq','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY0_PLL10_XMIT_DV_1A[0], TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_PLL10_RCV_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY0_PLL10_RCV_DV_1A_ref[0], TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_PLL10_RCV_data_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY0_PLL10_RCV_DV_1A_data[0], TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_PLL10_RCV_data_hi_FREQ','Hz',PLL10_Freq_Test.Per_pin_measurements.PHY0_PLL10_RCV_DV_1A_data_hi[0], TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
}
WaveformTable WFT_ADC2_GAIN {
    Period "40nS";
    Cell "EPHY_PatGrp.Pins-REFCLKI+AIC_HN_INP+AIC_HN_INM" 0/1 drive {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0ns"; DriveData @ "0ns"; }
        }
    }
    Cell "EPHY_PatGrp.Pins-SQULCH_PINS" L/H compare {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CompareOpenData @ "WFT_ADC2_GAIN.Period*0.8"; CompareClose @ "WFT_ADC2_GAIN.Period*1.00"; }
        }
    }
    Cell "SQULCH_PINS" S Squlech {
        Data 0;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CaptureWindow @ "WFT_ADC2_GAIN.Period*0.8"; CompareClose @ "WFT_ADC2_GAIN.Period*1.00"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" X dontcare {
        Data 3;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "REFCLKI" 0/1 clkin {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0ns"; DriveData @ "0ns"; DriveHigh @ "WFT_ADC2_GAIN.Period*0.500"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" - hold {
        Data 6;
        Drive {
            Waveform { DriveOn @ "0nS"; }
        }
    }
    Cell "EPHY_PatGrp.Pins" . mask {
        Data 2;
        Drive {
            Waveform { DriveOff @ "0nS"; }
        }
    }
    Cell "ADCMUX_PINS" c capture {
        Data 0;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { CaptureData @ "WFT_ADC2_GAIN.Period*0.5"; }
            Control Care NonMuxed;
        }
    }
    Cell "ADCMUX_PINS" a/A capture {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { }
        }
        DSPEvent EndCapture "Sine_data_cal";
    }
    Cell "SQULCH_PINS" u/U capture {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { }
        }
        DSPEvent EndCapture "Squlech_Data";
    }
    Cell "ADCMUX_PINS" n/N capture {
        Data 0/1;
        Drive {
            Waveform { DriveOff @ "0ns"; }
            Control DriveOn NonMuxed;
        }
        Compare {
            Waveform { }
        }
        DSPEvent EndCapture "Sine_data_sin";
    }
    Cell "EPHY_PatGrp.Pins-Scope_Trigger" s/S dsp_send {
        Data 6/7;
        Drive {
            Waveform { DriveOn @ "0s"; DriveData @ "0s"; }
        }
    }
    Inherit Sync_clck_WF.Sync_clk1;
}
Test RCV_ADC_PHY_TST {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Mask[3] = CodecDCMask;
    Entry[0] = PHY_level_32V;
    Entry[1] = EPHY_ADC_TstPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result[0] = 1 AND .Result[1] = 1  OR Print_characterisation"; }
    PortExpr[1] = Expr { String = ".Result[0] = 0"; }
    PortExpr[2] = Expr { String = " .Result[1] = 0"; }
    PortExpr[3] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'RCV_ADC_PHY_0_TST', TWDataType:TWMinimumData)"; }
    PortAction[2] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'RCV_ADC_PHY_1_TST', TWDataType:TWMinimumData)"; }
    LoopDepth = Outside;
    Title[0] = PHY_tst;
    TestMethod = "Titan.tp.ADC_3GL_test";
    DproPins = Expr { String = "ADCMUX_PINS"; }
    DproCapture = Expr { String = "DPRO_CapturePhy"; }
    SMS_PIN = Expr { String = "SMS4"; }
    Vbg = Expr { String = "Array(Vbg,Vbg1)"; }
    debug_test = Expr { String = "FALSE"; }
    charactarization = Expr { String = "Print_characterisation"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}

ETest Squalch_tst {
    Result = Expr { String = "#"; Mode = Output; }
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR NOT TestProgData.evFastBinning OR CheckOverride()"; }
    PortExpr[1] = Expr { String = "TRUE"; }
}
ETest Squalch_Test {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = EPHY_ADCPatSeq;
    Entry[1] = PHY_level_32V;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR Print_characterisation"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "TWPDLDataLogText('FAIL_TEST', 'Squalch_Test', TWDataType:TWMinimumData)"; }
    evBlock[0] = {
        Title = Squalch_PHY0;
        EnableExpr = Expr { String = "TRUE"; }
        Value = Expr { String = "#"; Mode = Output; }
        Result = Expr { String = "..Value"; }
        Entry[0] = SetUpSquelch_phy0_xfmr_MF;
        Exit[0] = Testware_SqualchTest_PHY0;
        TestMethod {
            Name = "Squalch_tst.tmod";
            SMS_PIN = Expr { String = "SMS4"; }
            SMS_file_name = Expr { String = "'../SMS/Squalch.sms'"; }
            SMS_source = Expr { String = "'Squalch_src'"; }
            DproPins = Expr { String = "SQULCH_PINS"; }
            DproCapture = Expr { String = "DPRO_CapturePhy"; }
            pattern_index_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_sqlpf_dv_1a_Thread0"; }
            pattern_index2_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_Squalch_thrd"; }
            Squal_vot_data = Expr { String = "#"; Mode = Output; }
            debug = Expr { String = "FALSE"; }
            reinitialize_all = Expr { String = "FALSE"; }
            Squal_limits1 = evParametricTest {
                Number = Expr { String = "0"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_1st_4_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "4.1"; }
            }
            Squal_limits2 = evParametricTest {
                Number = Expr { String = "1"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_2nd_4_code'"; }
                evLowLimit = Expr { String = "3.9"; }
                evHighLimit = Expr { String = "4.1"; }
            }
            Squal_limits3 = evParametricTest {
                Number = Expr { String = "2"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_1st_8_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "8.1"; }
            }
            Squal_limits4 = evParametricTest {
                Number = Expr { String = "3"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_2nd_8_code'"; }
                evLowLimit = Expr { String = "7.9"; }
                evHighLimit = Expr { String = "8.1"; }
            }
            Squal_limits5 = evParametricTest {
                Number = Expr { String = "4"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_1st_6_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "6.1"; }
            }
            Squal_limits6 = evParametricTest {
                Number = Expr { String = "5"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_2nd_6_code'"; }
                evLowLimit = Expr { String = "5.9"; }
                evHighLimit = Expr { String = "6.1"; }
            }
            Squal_limits7 = evParametricTest {
                Number = Expr { String = "6"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_1st_9_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "9.1"; }
            }
            Squal_limits8 = evParametricTest {
                Number = Expr { String = "7"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_2nd_9_code'"; }
                evLowLimit = Expr { String = "8.9"; }
                evHighLimit = Expr { String = "9.1"; }
            }
            Squal_limits9 = evParametricTest {
                Number = Expr { String = "8"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_index_of_1st_4_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits10 = evParametricTest {
                Number = Expr { String = "9"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_index_of_1st_8_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits11 = evParametricTest {
                Number = Expr { String = "10"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_index_of_1st_6_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits12 = evParametricTest {
                Number = Expr { String = "11"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_index_of_1st_9_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits13 = evParametricTest {
                Number = Expr { String = "12"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_NSQ_data'"; }
                evLowLimit = Expr { String = "10mV+SigmaGuardbandFactor*0.0V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 400mV ,400mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits14 = evParametricTest {
                Number = Expr { String = "13"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_PSQ_data'"; }
                evLowLimit = Expr { String = "10mV+SigmaGuardbandFactor*0.0V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 400mV , 400mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits15 = evParametricTest {
                Number = Expr { String = "14"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_NSQ'"; }
                evLowLimit = Expr { String = "150mV+SigmaGuardbandFactor*0.005V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 800mV ,690mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits16 = evParametricTest {
                Number = Expr { String = "15"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P0_PSQ'"; }
                evLowLimit = Expr { String = "150mV+SigmaGuardbandFactor*0.005V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 800mV ,690mV-SigmaGuardbandFactor*0.005V)"; }
            }
        }
    }
    evBlock[1] = {
        Title = Squalch_PHY1;
        Value = Expr { String = "#"; Mode = Output; }
        Result = Expr { String = "..Value"; }
        Entry[0] = SetUpSquelch_phy1_xfmr_MF;
        Exit[0] = Testware_SqualchTest_PHY1;
        TestMethod {
            Name = "Squalch_tst.tmod";
            SMS_PIN = Expr { String = "SMS4"; }
            SMS_file_name = Expr { String = "'../SMS/Squalch.sms'"; }
            SMS_source = Expr { String = "'Squalch_src'"; }
            DproPins = Expr { String = "SQULCH_PINS"; }
            DproCapture = Expr { String = "DPRO_CapturePhy"; }
            pattern_index_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_sqlpf_dv_1a_Thread1"; }
            pattern_index2_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_Squalch_thrd"; }
            Squal_vot_data = Expr { String = "#"; Mode = Output; }
            debug = Expr { String = "FALSE"; }
            reinitialize_all = Expr { String = "FALSE"; }
            Squal_limits1 = evParametricTest {
                Number = Expr { String = "16"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_1st_4_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "4.1"; }
            }
            Squal_limits2 = evParametricTest {
                Number = Expr { String = "17"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_2nd_4_code'"; }
                evLowLimit = Expr { String = "3.9"; }
                evHighLimit = Expr { String = "4.1"; }
            }
            Squal_limits3 = evParametricTest {
                Number = Expr { String = "18"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_1st_8_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "8.1"; }
            }
            Squal_limits4 = evParametricTest {
                Number = Expr { String = "19"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_2nd_8_code'"; }
                evLowLimit = Expr { String = "7.9"; }
                evHighLimit = Expr { String = "8.1"; }
            }
            Squal_limits5 = evParametricTest {
                Number = Expr { String = "20"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_1st_6_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "6.1"; }
            }
            Squal_limits6 = evParametricTest {
                Number = Expr { String = "21"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_2nd_6_code'"; }
                evLowLimit = Expr { String = "5.9"; }
                evHighLimit = Expr { String = "6.1"; }
            }
            Squal_limits7 = evParametricTest {
                Number = Expr { String = "22"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_1st_9_code'"; }
                evLowLimit = Expr { String = "-1.0"; }
                evHighLimit = Expr { String = "9.1"; }
            }
            Squal_limits8 = evParametricTest {
                Number = Expr { String = "23"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_2nd_9_code'"; }
                evLowLimit = Expr { String = "8.9"; }
                evHighLimit = Expr { String = "9.1"; }
            }
            Squal_limits9 = evParametricTest {
                Number = Expr { String = "24"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_index_of_1st_4_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits10 = evParametricTest {
                Number = Expr { String = "25"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_index_of_1st_8_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits11 = evParametricTest {
                Number = Expr { String = "26"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_index_of_1st_6_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits12 = evParametricTest {
                Number = Expr { String = "27"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_index_of_1st_9_code'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "100"; }
            }
            Squal_limits13 = evParametricTest {
                Number = Expr { String = "28"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_NSQ_data'"; }
                evLowLimit = Expr { String = "10mV+SigmaGuardbandFactor*0.0V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 400mV ,400mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits14 = evParametricTest {
                Number = Expr { String = "29"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_PSQ_data'"; }
                evLowLimit = Expr { String = "10mV+SigmaGuardbandFactor*0.0V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 400mV ,400mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits15 = evParametricTest {
                Number = Expr { String = "30"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_NSQ'"; }
                evLowLimit = Expr { String = "150mV+SigmaGuardbandFactor*0.005V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 800mV ,690mV-SigmaGuardbandFactor*0.005V)"; }
            }
            Squal_limits16 = evParametricTest {
                Number = Expr { String = "31"; }
                Result = Expr { String = "#"; Mode = Output; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = FailSquelch;
                evTestText = Expr { String = "'P1_PSQ'"; }
                evLowLimit = Expr { String = "150mV+SigmaGuardbandFactor*0.005V"; }
                evHighLimit = Expr { String = "if(Print_characterisation, 800mV ,690mV-SigmaGuardbandFactor*0.005V)"; }
            }
        }
    }
}
ETest TX100_CTM_TST {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Entry[0] = PHY_level;
    Entry[1] = EPHY_ADCPatSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR NOT TestProgData.evFastBinning OR CheckOverride()"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    evBlock[0] = {
        Title = PHY0_TST;
        Value = Expr { String = "#"; Mode = Output; }
        Result = Expr { String = "..Value"; }
        Entry[0] =             MicroFlow  {
                Event[0] {
                    Value = Expr { String = "#"; Mode = Output; }
                    Index = Expr { String = "1"; }
                    Enable = Expr { String = "TRUE"; }
                    Method {
                            MicroFlowMid = "scm_ctrl.mod.Scm_reset_all";
                    }
                }
                Event[1] {
                    Value = Expr { String = "#"; Mode = Output; }
                    Index = Expr { String = "2"; }
                    Method {
                            MicroFlowMid = "scm_ctrl.mod.Scm_set_cbits";
                            cbit_set = Expr { String = "Array(16)"; }
                    }
                }
            }
        TestMethod {
            Name = "TX100_test.tmod";
            SMS_PIN = Expr { String = "SMS4"; }
            SMS_file_name = Expr { String = "'../SMS/ephy_tx100.sms'"; }
            SMS_meas = Expr { String = "'Tx100bt_msr_long'"; }
            pattern_index_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_tx100_dv_1a_Thread0"; }
            pk_pk_limit = evParametricTest {
                Number = Expr { String = "0"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Pk_Pk_test'"; }
                evLowLimit = Expr { String = "1.9V"; }
                evHighLimit = Expr { String = "2.1V"; }
                evUnits = Expr { String = "'=V'"; }
            }
            Pos_Rise_time = evParametricTest {
                Number = Expr { String = "1"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Pos_Rise_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Pos_Fall_time = evParametricTest {
                Number = Expr { String = "2"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Pos_fall_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_Rise_time = evParametricTest {
                Number = Expr { String = "3"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Neg_pos_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_fall_time = evParametricTest {
                Number = Expr { String = "4"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Neg_fall_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_Pos_matching = evParametricTest {
                Number = Expr { String = "5"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Neg_pos_matching'"; }
                evLowLimit = Expr { String = "-500pS"; }
                evHighLimit = Expr { String = "500pS"; }
                evUnits = Expr { String = "'=ps'"; }
            }
            Mid_lvl_low = evParametricTest {
                Number = Expr { String = "6"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Mid_lvl_from_low'"; }
                evLowLimit = Expr { String = "-20mV"; }
                evHighLimit = Expr { String = "20mV"; }
                evUnits = Expr { String = "'=mV'"; }
            }
            Hi_lvl = evParametricTest {
                Number = Expr { String = "7"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Hi_lvl'"; }
                evLowLimit = Expr { String = "950mV"; }
                evHighLimit = Expr { String = "1050mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            Mid_lvl_hi = evParametricTest {
                Number = Expr { String = "8"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Mid_lvl_from_hi'"; }
                evLowLimit = Expr { String = "-20mV"; }
                evHighLimit = Expr { String = "20mV"; }
                evUnits = Expr { String = "'=mV'"; }
            }
            low_lvl = evParametricTest {
                Number = Expr { String = "9"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Lo_lvl'"; }
                evLowLimit = Expr { String = "-1050mV"; }
                evHighLimit = Expr { String = "-950mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            duty_cyc = evParametricTest {
                Number = Expr { String = "10"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_duty_cyc'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "500pS"; }
                evUnits = Expr { String = "'=pS'"; }
            }
            diff_amp = evParametricTest {
                Number = Expr { String = "11"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_diff_amp'"; }
                evLowLimit = Expr { String = "950mV"; }
                evHighLimit = Expr { String = "1050mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            neg_over_shot = evParametricTest {
                Number = Expr { String = "12"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_neg_overshoot'"; }
                evLowLimit = Expr { String = "0%"; }
                evHighLimit = Expr { String = "5%"; }
                evUnits = Expr { String = "'=%'"; }
            }
            pos_over_shoot = evParametricTest {
                Number = Expr { String = "13"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY0_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY0_Pos_overshoot'"; }
                evLowLimit = Expr { String = "0%"; }
                evHighLimit = Expr { String = "5%"; }
                evUnits = Expr { String = "'=%'"; }
            }
        }
    }
    evBlock[1] = {
        Title = PHY1_TST;
        Value = Expr { String = "#"; Mode = Output; }
        Result = Expr { String = "..Value"; }
        Entry[0] =             MicroFlow  {
                FinderFilter = "";
                Event[0] {
                    Value = Expr { String = "#"; Mode = Output; }
                    Index = Expr { String = "1"; }
                    Enable = Expr { String = "TRUE"; }
                    Method {
                            MicroFlowMid = "scm_ctrl.mod.Scm_reset_all";
                    }
                }
                Event[1] {
                    Value = Expr { String = "#"; Mode = Output; }
                    Index = Expr { String = "2"; }
                    Method {
                            MicroFlowMid = "scm_ctrl.mod.Scm_set_cbits";
                            cbit_set = Expr { String = "Array(15)"; }
                    }
                }
            }
        TestMethod {
            Name = "TX100_test.tmod";
            SMS_PIN = Expr { String = "SMS4"; }
            SMS_file_name = Expr { String = "'../SMS/ephy_tx100.sms'"; }
            SMS_meas = Expr { String = "'Tx100bt_msr_long'"; }
            pattern_index_num = Expr { String = "EPHY_ADCPatSeq.Thread.ephy_tx100_dv_1a_Thread1"; }
            pk_pk_limit = evParametricTest {
                Number = Expr { String = "0"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Pk_Pk_test'"; }
                evLowLimit = Expr { String = "1.9V"; }
                evHighLimit = Expr { String = "2.1V"; }
                evUnits = Expr { String = "'=V'"; }
            }
            Pos_Rise_time = evParametricTest {
                Number = Expr { String = "1"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Pos_Rise_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Pos_Fall_time = evParametricTest {
                Number = Expr { String = "2"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Pos_fall_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_Rise_time = evParametricTest {
                Number = Expr { String = "3"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Neg_pos_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_fall_time = evParametricTest {
                Number = Expr { String = "4"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Neg_fall_time'"; }
                evLowLimit = Expr { String = "3nS"; }
                evHighLimit = Expr { String = "5nS"; }
                evUnits = Expr { String = "'=ns'"; }
            }
            Neg_Pos_matching = evParametricTest {
                Number = Expr { String = "5"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Neg_pos_matching'"; }
                evLowLimit = Expr { String = "-500pS"; }
                evHighLimit = Expr { String = "500pS"; }
                evUnits = Expr { String = "'=ps'"; }
            }
            Mid_lvl_low = evParametricTest {
                Number = Expr { String = "6"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Mid_lvl_from_low'"; }
                evLowLimit = Expr { String = "-20mV"; }
                evHighLimit = Expr { String = "20mV"; }
                evUnits = Expr { String = "'=mV'"; }
            }
            Hi_lvl = evParametricTest {
                Number = Expr { String = "7"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Hi_lvl'"; }
                evLowLimit = Expr { String = "950mV"; }
                evHighLimit = Expr { String = "1050mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            Mid_lvl_hi = evParametricTest {
                Number = Expr { String = "8"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Mid_lvl_from_hi'"; }
                evLowLimit = Expr { String = "-20mV"; }
                evHighLimit = Expr { String = "20mV"; }
                evUnits = Expr { String = "'=mV'"; }
            }
            low_lvl = evParametricTest {
                Number = Expr { String = "9"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Lo_lvl'"; }
                evLowLimit = Expr { String = "-1050mV"; }
                evHighLimit = Expr { String = "-950mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            duty_cyc = evParametricTest {
                Number = Expr { String = "10"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_duty_cyc'"; }
                evLowLimit = Expr { String = "0"; }
                evHighLimit = Expr { String = "500pS"; }
                evUnits = Expr { String = "'=pS'"; }
            }
            diff_amp = evParametricTest {
                Number = Expr { String = "11"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_diff_amp'"; }
                evLowLimit = Expr { String = "950mV"; }
                evHighLimit = Expr { String = "1050mV"; }
                evUnits = Expr { String = "'=V'"; }
            }
            neg_over_shot = evParametricTest {
                Number = Expr { String = "12"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_neg_overshoot'"; }
                evLowLimit = Expr { String = "0%"; }
                evHighLimit = Expr { String = "5%"; }
                evUnits = Expr { String = "'=%'"; }
            }
            pos_over_shoot = evParametricTest {
                Number = Expr { String = "13"; }
                evPins = Expr { String = "SMS4"; }
                evFailBin = PHY1_FailTX100BTtiming;
                evTestText = Expr { String = "'PHY1_Pos_overshoot'"; }
                evLowLimit = Expr { String = "0%"; }
                evHighLimit = Expr { String = "5%"; }
                evUnits = Expr { String = "'=%'"; }
            }
        }
    }
}
WaveformTable Sync_clck_WF {
    Period "80.0625nS";
    Cell "Scope_Trigger" s/S Sync_clk1 {
        Data 6/7;
        Drive {
            EntryState DriveLow;
            Waveform { DriveHigh @ "0nS"; DriveLow @ "Sync_clck_WF.Period/2"; PeriodMarker @ "Sync_clck_WF.Period"; }
            Control DriveOff;
        }
    }
}
Test TX100_sync_tst {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Mask[3] = CodecDCMask;
    Entry[0] = PHY_level_33V;
    Entry[1] = Sync_clk_patSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result [0] =1 AND .Result [1] =1 AND .Result [2] =1 AND .Result [3] =1"; }
    PortExpr[1] = Expr { String = ".Result [3] =0"; }
    PortExpr[2] = Expr { String = ".Result [2] =0"; }
    PortExpr[3] = Expr { String = ".Result [1] =0"; }
    PortExpr[4] = Expr { String = ".Result [0] =0"; }
    PortExpr[5] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = TX100_sync;
    TestMethod = "Titan.tp.Tx100bt";
    SMS_PIN = Expr { String = "SMS4"; }
    debug_test = Expr { String = "DebugTest"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
PatternSequence Sync_clk_patSeq {
    Thread[0] = PHY0_thrd;
    Thread[1] = PHY1_thrd;
    Thread[2] = SMS_cal_thrd;
    Thread[3] = PHY0_Lvl_000_thrd;
    Thread[4] = PHY0_Lvl_001_thrd;
    Thread[5] = PHY0_Lvl_010_thrd;
    Thread[6] = PHY0_Lvl_011_thrd;
    Thread[7] = PHY0_Lvl_100_thrd;
    Thread[8] = PHY0_Lvl_101_thrd;
    Thread[9] = PHY0_Lvl_110_thrd;
    Thread[10] = PHY0_Lvl_111_thrd;
    Thread[11] = PHY1_Lvl_000_thrd;
    Thread[12] = PHY1_Lvl_001_thrd;
    Thread[13] = PHY1_Lvl_010_thrd;
    Thread[14] = PHY1_Lvl_011_thrd;
    Thread[15] = PHY1_Lvl_100_thrd;
    Thread[16] = PHY1_Lvl_101_thrd;
    Thread[17] = PHY1_Lvl_110_thrd;
    Thread[18] = PHY1_Lvl_111_thrd;
    Thread[19] = Efuse2MarginCh0Thrd;
    Thread[20] = Efuse2ReadCh0Thrd;
    Thread[21] = Efuse2LoadCh0Thrd;
    Thread[22] = Efuse2ProgCh0Thrd;
    Thread[23] = CLK_DATA_1Thrd;
    Zipper = Zipper {
        Row { EPHY_PatGrp, WFT_MAIN = { WFT_MAIN } }
        Row { EPHY_PatGrp, WFT_ADC2_GAIN = { WFT_ADC2_GAIN } }
        Row { TDLStdPatGrp, AC_TS86_WftRef = { AC_TS86efuse } }
        Row { TDLStdPatGrp, AC_TS53_WftRef = { AC_TS53 } }
    }
    evAutoBasePeriod = True;
}
Thread PHY0_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "Sync_clk_pat.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "Sync_clk_pat.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_000_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl000.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl000.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_001_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl001.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl001.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_010_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl010.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl010.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_011_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl011.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl011.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_100_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl100.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl100.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_101_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl101.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl101.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_110_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl110.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl110.Sms_trig1_sp"; }
    }
}
Thread PHY0_Lvl_111_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl111.PHY0_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl111.Sms_trig1_sp"; }
    }
}
Thread PHY1_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "Sync_clk_pat.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "Sync_clk_pat.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_000_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl000.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl000.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_001_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl001.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl001.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_010_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl010.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl010.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_011_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl011.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl011.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_100_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl100.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl100.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_101_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl101.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl101.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_110_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl110.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl110.Sms_trig1_sp"; }
    }
}
Thread PHY1_Lvl_111_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl111.PHY1_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "PhyTX100SyncClkLvl111.Sms_trig1_sp"; }
    }
}
Test Sync_clk_test {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = DCMask;
    Mask[1] = ACMask;
    Mask[2] = PSMask;
    Mask[3] = VARSMask;
    Entry[0] = PHY_level;
    Entry[1] = Sync_clk_patSeq;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = FocusCalTest;
    TestMethod = Tcal;
    Cal_enable = Expr { String = "TRUE"; }
    Test_pins = Expr { String = "Scope_Trigger"; }
    TcalObject = Sync_clk_fcal;
    Calibration_mode = Expr { String = "CalMode:Execute_Calibration"; }
}
EVO_Calibration Sync_clk_fcal {
}
MicroFlow SMS_cal_MF {
    Event[0] {
        Tag = Result_cal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Method {
                MicroFlowMid = "Titan.tp.Focus_cal_transmit_100bt_dp";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "True"; }
        }
    }
    Event[1] {
        Tag = Result_tx10cal;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Method {
                MicroFlowMid = "Titan.tp.Focus_cal_transmit_10bt_dp";
                SMS_PIN = Expr { String = "SMS4"; }
                debug_test = Expr { String = "TRUE"; }
        }
    }
}
Thread SMS_cal_thrd {
    Row {
        ThreadAction = Expr { String = "Seq:Enter"; }
        PatternLabel = Expr { String = "Sync_clk_pat.SMS_cal_st"; }
    }
    Row {
        ThreadAction = Expr { String = "Seq:Exit"; }
        PatternLabel = Expr { String = "Sync_clk_pat.SMS_cal_sp"; }
    }
}
WaveformCapture sync_clk {
  evReferenceSegment "";
  evPins "AIC_HN_INM+AIC_HN_INP+Scope_Trigger" {
	evEnable True;
	evMerge EVW_Merge_All;
	evDriveEnable True;
	evResponseEnable True;
  }
}
MicroFlow TX100_tstware_dlog {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('PHY0_TX100_PK_PK','V',TX100_TST.PHY_rslt[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_POS_RISE_TIME','nS',TX100_TST.PHY_rslt[1], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_POS_FALL_TIME','nS',TX100_TST.PHY_rslt[2], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_NEG_RISE_TIME','nS',TX100_TST.PHY_rslt[3], TWDataType:TWMinimumData)"; }
    }
    Event[4] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "5"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_NEG_FALL_TIME','nS',TX100_TST.PHY_rslt[4], TWDataType:TWMinimumData)"; }
    }
    Event[5] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "6"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_RISE_FALL_MATCHING','nS',TX100_TST.PHY_rslt[5], TWDataType:TWMinimumData)"; }
    }
    Event[6] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "7"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_MID_LVL_FROM_LO','V',TX100_TST.PHY_rslt[6], TWDataType:TWMinimumData)"; }
    }
    Event[7] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "8"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_HI_LVL','V',TX100_TST.PHY_rslt[7], TWDataType:TWMinimumData)"; }
    }
    Event[8] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "9"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_MID_LVL_FROM_HI','V',TX100_TST.PHY_rslt[8], TWDataType:TWMinimumData)"; }
    }
    Event[9] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "10"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX00_LO_LVL','V',TX100_TST.PHY_rslt[9], TWDataType:TWMinimumData)"; }
    }
    Event[10] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "11"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_DUTY_CYC_DISTOR','nS',TX100_TST.PHY_rslt[10], TWDataType:TWMinimumData)"; }
    }
    Event[11] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "12"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_DIFF_AMP','V',TX100_TST.PHY_rslt[11], TWDataType:TWMinimumData)"; }
    }
    Event[12] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "13"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_NEG_OVERSHOOT','%',TX100_TST.PHY_rslt[12], TWDataType:TWMinimumData)"; }
    }
    Event[13] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "14"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY0_TX100_POS_OVERSHOOT','%',TX100_TST.PHY_rslt[13], TWDataType:TWMinimumData)"; }
    }
    Event[14] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "15"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_PK_PK','V',TX100_TST.PHY_rslt[14], TWDataType:TWMinimumData)"; }
    }
    Event[15] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "16"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_POS_RISE_TIME','ns',TX100_TST.PHY_rslt[15], TWDataType:TWMinimumData)"; }
    }
    Event[16] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "17"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_POS_FALL_TIME','ns',TX100_TST.PHY_rslt[16], TWDataType:TWMinimumData)"; }
    }
    Event[17] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "18"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_NEG_RISE_TIME','nS',TX100_TST.PHY_rslt[17], TWDataType:TWMinimumData)"; }
    }
    Event[18] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "19"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_NEG_FALL_TIME','ns',TX100_TST.PHY_rslt[18], TWDataType:TWMinimumData)"; }
    }
    Event[19] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "20"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_MID_LVL_FROM_LO','V',TX100_TST.PHY_rslt[20], TWDataType:TWMinimumData)"; }
    }
    Event[20] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "21"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_HI_LVL','V',TX100_TST.PHY_rslt[21], TWDataType:TWMinimumData)"; }
    }
    Event[21] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "22"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_MID_LVL_FROM_HI','V',TX100_TST.PHY_rslt[22], TWDataType:TWMinimumData)"; }
    }
    Event[22] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "23"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX00_LO_LVL','V',TX100_TST.PHY_rslt[23], TWDataType:TWMinimumData)"; }
    }
    Event[23] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "24"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_DUTY_CYC_DISTOR','nS',TX100_TST.PHY_rslt[24], TWDataType:TWMinimumData)"; }
    }
    Event[24] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "25"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_DIFF_AMP','V',TX100_TST.PHY_rslt[25], TWDataType:TWMinimumData)"; }
    }
    Event[25] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "26"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_NEG_OVERSHOOT','%',TX100_TST.PHY_rslt[26], TWDataType:TWMinimumData)"; }
    }
    Event[26] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "27"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_POS_OVERSHOOT','%',TX100_TST.PHY_rslt[27], TWDataType:TWMinimumData)"; }
    }
    Event[27] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "28"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable( 'PHY1_TX100_RISE_FALL_MATCHING','nS',TX100_TST.PHY_rslt[19], TWDataType:TWMinimumData)"; }
    }
    Event[28] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "29"; }
        Enable = Expr { String = "FALSE"; }
        Expr = Expr { String = "TWPDLDataLogPrint()"; }
    }
}
MicroFlow Testware_SqualchTest_PHY0 {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_NSQ_DATA','v',Squalch_Test.Squalch_PHY0.Squal_vot_data[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PSQ_DATA','v',Squalch_Test.Squalch_PHY0.Squal_vot_data[1], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_NSQ','v',Squalch_Test.Squalch_PHY0.Squal_vot_data[2], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P0_PSQ','v',Squalch_Test.Squalch_PHY0.Squal_vot_data[3], TWDataType:TWMinimumData)"; }
    }
}
MicroFlow Testware_SqualchTest_PHY1 {
    FinderFilter = "";
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_NSQ_DATA','v',Squalch_Test.Squalch_PHY1.Squal_vot_data[0], TWDataType:TWMinimumData)"; }
    }
    Event[1] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PSQ_DATA','v',Squalch_Test.Squalch_PHY1.Squal_vot_data[1], TWDataType:TWMinimumData)"; }
    }
    Event[2] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "3"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_NSQ','v',Squalch_Test.Squalch_PHY1.Squal_vot_data[2], TWDataType:TWMinimumData)"; }
    }
    Event[3] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "4"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "TWPDLDataLogRealVariable('P1_PSQ','v',Squalch_Test.Squalch_PHY1.Squal_vot_data[3], TWDataType:TWMinimumData)"; }
    }
}
Test SMS_Calibaration {
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = DCMask;
    Mask[1] = ACMask;
    Mask[2] = PSMask;
    Mask[3] = VARSMask;
    Entry[0] = PHY_level;
    Entry[1] = Sync_clk_patSeq;
    Exit[0] = CreateSMSSourceMF;
    PortExpr[0] = Expr { String = "SMS_cal_MF.Result_cal AND SMS_cal_MF.Result_tx10cal"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = SMS_cal_MF;
}

Levels Change_DP_Level {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA"; }
    	Ioh = Expr { String = "-200uA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD.Min,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih+0*selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max)"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Iol = Expr { String = "1mA"; }
    	Ioh = Expr { String = "-1mA"; }
    	Vref = Expr { String = "(Change_DP_Level.Vih.AIC_HN_pins-Change_DP_Level.Vil.AIC_HN_pins)/2.0"; }
    	Delay = Expr { String = "0s"; }
    }
}

MicroFlow Set_TIBoardCheckResult {
    Event[0] {
        Tag = t1;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "if(TitanBoardChk.__EV_Block_0.Value = FALSE OR TitanBoardChk.__EV_Block_1.Value = FALSE OR
	TitanBoardChk.__EV_Block_2.Value= FALSE OR TitanBoardChk.__EV_Block_3.Value = FALSE OR TitanBoardChk.__EV_Block_4.Value =
	FALSE OR TitanBoardChk.__EV_Block_5.Value= FALSE OR TitanBoardChk.__EV_Block_6.Value = FALSE OR
	TitanBoardChk.__EV_Block_7.Value = FALSE OR
TitanBoardChk.__EV_Block_9.Value = FALSE, FALSE->TIBoardCheckResult, TRUE->TIBoardCheckResult)"; }
    }
}
MicroFlow DisplayErrorTool_MF {
    Event[0] {
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Expr = Expr { String = "Warning_message(warning_message.Meas)"; }
    }
}
Levels PHY_level_32V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.2V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.2V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.2V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.2V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "0.0V"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA"; }
    	Ioh = Expr { String = "-200uA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}
Test TX100HiSupSyncTst {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Mask[3] = CodecDCMask;
    Entry[0] = PHY_level_35V;
    Entry[1] = Sync_clk_patSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result [0] =1 AND .Result [1] =1 AND .Result [2] =1 AND .Result [3] =1"; }
    PortExpr[1] = Expr { String = ".Result [3] =0"; }
    PortExpr[2] = Expr { String = ".Result [2] =0"; }
    PortExpr[3] = Expr { String = ".Result [1] =0"; }
    PortExpr[4] = Expr { String = ".Result [0] =0"; }
    PortExpr[5] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = TX100BTHiSup;
    TestMethod = "Titan.tp.Tx100btHiSup";
    SMS_PIN = Expr { String = "SMS4"; }
    debug_test = Expr { String = "FALSE"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
Levels PHY_level_33V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA"; }
    	Ioh = Expr { String = "-200uA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}
Levels PHY_level_34V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.4V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.4V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.4V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.4V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA"; }
    	Ioh = Expr { String = "-200uA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}
Levels PHY_level_347V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.47V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.47V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.47V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.47V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA
"; }
    	Ioh = Expr { String = "-200uA
"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}
Test TX100BTTrimTst {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = ACTypMask;
    Mask[1] = FuncTypMask;
    Mask[2] = TritonInitMask;
    Mask[3] = CodecDCMask;
    Entry[0] = PHY_level_33V;
    Entry[1] = Sync_clk_patSeq;
    Entry[2] = Disconnect_PHY_RES_MF;
    PortExpr[0] = Expr { String = ".Result [0] =1 AND .Result [1] =1 AND .Result [2] =1"; }
    PortExpr[1] = Expr { String = ".Result [0] =0"; }
    PortExpr[2] = Expr { String = ".Result [1] =0"; }
    PortExpr[3] = Expr { String = ".Result [2] =0"; }
    PortExpr[4] = Expr { String = "TRUE"; }
    LoopDepth = Outside;
    Title[0] = TX100BTTrim;
    TestMethod = "Titan.tp.Tx100btPreTrim";
    SMS_PIN = Expr { String = "SMS4"; }
    debug_test = Expr { String = "FALSE"; }
    PHY_rslt = Expr { String = "#"; Mode = Output; }
}
MicroFlow TIEfuseProgMF {
    FinderFilter = "";
    Event[0] {
        Tag = EFuseProg;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = TIEfuseProg;
                Technology = Expr { String = "eFuseTech:C035_1"; }
                Chain = Expr { String = "0"; }
                NumBitsInChain = Expr { String = "64"; }
                InString = Expr { String = "DieIDDataWithPhyTrimBits.Meas"; }
                NReadThrd = Expr { String = "Sync_clk_patSeq.Thread.Efuse2ReadCh0Thrd
"; }
                MReadThrd = Expr { String = "Sync_clk_patSeq.Thread.Efuse2MarginCh0Thrd"; }
                LoadThrd = Expr { String = "Sync_clk_patSeq.Thread.Efuse2LoadCh0Thrd
"; }
                ProgThrd = Expr { String = "Sync_clk_patSeq.Thread.Efuse2ProgCh0Thrd"; }
                NReadStCycle = Expr { String = "89"; }
                MReadStCycle = Expr { String = "89"; }
                LoadStVec = Expr { String = "24"; }
                InPin = Expr { String = "GPIO2"; }
                OutPin = Expr { String = "LAN_LINKON"; }
                VddPin = Expr { String = "VDD_1"; }
                VppPin = Expr { String = "VPP_1"; }
                VddVoltages = Expr { String = "Array ( 2.0V, 1.5V,  1.5V, 2.5V)"; }
                VppVoltages = Expr { String = "Array ( 2.0V, 1.5V,  1.5V, 3.1V)"; }
                ReadOnly = Expr { String = "FALSE"; }
                ReProg = Expr { String = "TRUE"; }
                Datalog = Expr { String = "FALSE"; }
                TWDatalog = Expr { String = "TRUE"; }
        }
    }
    Event[1] {
        Tag = EFuseProgRslt;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "2"; }
        Enable = Expr { String = "TRUE"; }
        Expr = Expr { String = "if(TIEfuseProgMF.EFuseProg=tm_rslt:PASS,1,0)"; }
    }
}
MicroFlow TIReadDieIDMF {
    FinderFilter = "";
    Event[0] {
        Tag = EFuseRead;
        Value = Expr { String = "#"; Mode = Output; }
        Index = Expr { String = "1"; }
        Enable = Expr { String = "TRUE"; }
        Method {
                MicroFlowMid = TIRead_Die_Id;
                Technology = Expr { String = "dieid_tech:C035"; }
                Bitorder = Expr { String = "dieid_bitorder:MSB"; }
                Readback_pins = Expr { String = "LAN_LINKON"; }
                First_word_index = Expr { String = "Sync_clk_patSeq.Thread.CLK_DATA_1Thrd"; }
                Second_word_index_or_count = Expr { String = "11"; }
                Die_Id_data = Expr { String = "#->DieIDData"; Mode = Output; }
                Die_Id_lot = Expr { String = "#"; Mode = Output; }
                Die_Id_wafer = Expr { String = "#"; Mode = Output; }
                Die_Id_fab = Expr { String = "#"; Mode = Output; }
                Die_Id_x = Expr { String = "#"; Mode = Output; }
                Die_Id_y = Expr { String = "#"; Mode = Output; }
                Die_Id_revcode = Expr { String = "#"; Mode = Output; }
                Die_Id_tstcode = Expr { String = "#"; Mode = Output; }
                Die_Id_rambit = Expr { String = "#"; Mode = Output; }
                Die_Id_resvcode = Expr { String = "#"; Mode = Output; }
                Die_Id_chksum = Expr { String = "#"; Mode = Output; }
        }
    }
}
Test SetupPhyTrimBitsTest {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = PSMask;
    Mask[1] = ACMask;
    Mask[2] = TWMask;
    Mask[3] = CodecDCMask;
    Entry[0] = SLOWFUNCNOM;
    Entry[1] = DieIDPatSeq1;
    PortExpr[0] = Expr { String = ".Result = 1 OR RunAllTests"; }
    PortExpr[1] = Expr { String = "TRUE"; }
    PortAction[0] = Expr { String = "if(TWPDLDataViewer, TWPDLDataLogPrint(), FALSE)"; }
    PortAction[1] = Expr { String = "if(TWPDLDataViewer, TWPDLDataLogPrint(), FALSE)"; }
    LoopDepth = Outside;
    Title[0] = ProgramPhyTrimBitsTest;
    TestMethod = "Titan.tp.ProgramPhyTrimBits";
    debug_test = Expr { String = "FALSE"; }
}
Test ProgramPhyTrimBitsTest {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = PSMask;
    Mask[1] = ACMask;
    Mask[2] = CodecDCMask;
    Entry[0] = SLOWFUNCNOM;
    Entry[1] = Efuse2Ch0Seq;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR RunAllTests"; }
    PortExpr[1] = Expr { String = ".Result = tm_rslt:FAIL"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    PortAction[1] = Expr { String = "if(TWPDLDataViewer, TWPDLDataLogPrint(), FALSE)"; }
    LoopDepth = Outside;
    Title[0] = ProgramPhyTrimBits;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "Seq_en:DEFAULT_EXECUTION"; }
    Test_pins[0] = Expr { String = "ALL_PINS"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = TIEfuseProgMF;
    Simulate_results[0] = Expr { String = "tm_rslt:PASS"; }
}
Test ReadDieIDPostTrimTest {
    FinderFilter = "";
    Result = Expr { String = "#"; Mode = Output; }
    Mask[0] = PSMask;
    Mask[1] = ACMask;
    Mask[2] = TWMask;
    Entry[0] = SLOWFUNCNOM;
    Entry[1] = Sync_clk_patSeq;
    PortExpr[0] = Expr { String = ".Result = tm_rslt:PASS OR RunAllTests"; }
    PortExpr[1] = Expr { String = ".Result = tm_rslt:FAIL"; }
    PortExpr[2] = Expr { String = "TRUE"; }
    PortAction[0] = Expr { String = "if(TWPDLDataViewer, TWPDLDataLogPrint(), FALSE)"; }
    PortAction[1] = Expr { String = "if(TWPDLDataViewer, TWPDLDataLogPrint(), FALSE)"; }
    LoopDepth = Outside;
    Title[0] = ReadDieIDPostTrim;
    TestMethod = MFtest;
    Test_enable[0] = Expr { String = "if(RunAllTests, Seq_en:UNCONDITIONAL_EXECUTION, Seq_en:DEFAULT_EXECUTION)"; }
    Test_result[0] = Expr { String = "#"; Mode = Output; }
    Micro_flow_sequence[0] = TIReadDieIDMF;
    Simulate_results[0] = Expr { String = "tm_rslt:PASS"; }
    Execute_sites_serially[0] = Expr { String = "FALSE"; }
}
Levels vdd_0V_levels {
    Column[0] {
    	LevelsColumnType = evPowerType;
    	Group = Expr { String = "ALL_VDDPINS"; }
    	PowerSupply = Expr { String = "0V"; }
    }
}
Levels FuncSetup {
    Column[0] {
    	LevelsColumnType = evPowerType;
    	Group = Expr { String = "VDD_1+VDDH_1"; }
    	ExecSeq = Expr { String = "0"; }
    	PowerSupply = Expr { String = "1.5V"; }
    }
    Column[1] {
    	LevelsColumnType = evPowerType;
    	Group = Expr { String = "VDD_14"; }
    	ExecSeq = Expr { String = "0"; }
    	PowerSupply = Expr { String = "VDD"; }
    }
    Column[2] {
    	LevelsColumnType = evDigitalType;
    	Group = Expr { String = "ALLPINS"; }
    	ExecSeq = Expr { String = "1"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Delay = Expr { String = "0ms"; }
    }
}
 

Levels PHY_level_35V {
	Comment = "
      DCSetup = SLOWFUNCNOM
   DCTemplate = SLOWFUNC
      PSSetup = PS_SFNOM
";
	FinderFilter = "";
    Column[0] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDD;
    	Group = Expr { String = "VDD_1+VPP_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 0, 8)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[1] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDSHV;
    	Group = Expr { String = "VDDSHV_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 7, 1)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[2] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS2;
    	Group = Expr { String = "VDDS2_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 2, 6)"; }
    	PowerSupply = Expr { String = "3.5V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[3] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS3;
    	Group = Expr { String = "VDDS3_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 3, 5)"; }
    	PowerSupply = Expr { String = "3.5V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[4] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS4;
    	Group = Expr { String = "VDDS4_1"; }
    	ExecSeq = Expr { String = "4"; }
    	PowerSupply = Expr { String = "3.5V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[5] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDH;
    	Group = Expr { String = "VDDH_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 1, 7)"; }
    	PowerSupply = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[6] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS5;
    	Group = Expr { String = "VDDS5_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 5, 3)"; }
    	PowerSupply = Expr { String = "3.3V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[7] {
    	LevelsColumnType = evSeqPowerType;
    	Title = VDDS8;
    	Group = Expr { String = "VDDS8_1"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 6, 2)"; }
    	PowerSupply = Expr { String = "3.5V"; }
    	StepSize = Expr { String = "200mV"; }
    	StepDelay = Expr { String = "100uS"; }
    	Delay = Expr { String = "1ms"; }
    }
    Column[8] {
    	LevelsColumnType = evDigitalType;
    	Title = PM_LINES;
    	Group = Expr { String = "DUT_PM+DUT_PM_"; }
    	ExecSeq = Expr { String = "8"; }
    	Vil = Expr { String = "-2.0V"; }
    	Vih = Expr { String = "-1V/2"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[9] {
    	LevelsColumnType = evDigitalType;
    	Title = OSC_PINS;
    	Group = Expr { String = "FUNC_INOUT10+FUNC_INOUT11+REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0.1V"; }
    	Vih = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.95"; }
    	Vol = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.49"; }
    	Voh = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.51"; }
    	Iol = Expr { String = "200uA
"; }
    	Ioh = Expr { String = "-200uA
"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,VDD,VDD,VDD.Max)*0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[10] {
    	LevelsColumnType = evDigitalType;
    	Title = AIC_HN_pins;
    	Group = Expr { String = "Scope_Trigger"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "2V"; }
    	Vol = Expr { String = "1V"; }
    	Voh = Expr { String = "1V"; }
    	Vref = Expr { String = "1V"; }
    	Delay = Expr { String = "0S"; }
    }
    Column[11] {
    	LevelsColumnType = evDigitalType;
    	Title = FUNC_INOUT12;
    	Group = Expr { String = "ALLPINS-FUNC_INOUT10-FUNC_INOUT11-REFCLKI-AIC_HN_INP-AIC_HN_INM"; }
    	ExecSeq = Expr { String = "if (VDD_PS_tracker <= VDD_PS, 8, 0)"; }
    	Vil = Expr { String = "vil"; }
    	Vih = Expr { String = "vih"; }
    	Vol = Expr { String = "vol"; }
    	Voh = Expr { String = "voh"; }
    	Iol = Expr { String = "0.3mA"; }
    	Ioh = Expr { String = "-0.1mA"; }
    	Vref = Expr { String = "selectx(MinTypMax_Mask,AVdd,AVdd.Min,AVdd.Max) * 0.5"; }
    	Delay = Expr { String = "0s"; }
    }
    Column[12] {
    	LevelsColumnType = evDigitalType;
    	Title = Sync_clk_pins;
    	Group = Expr { String = "AIC_HN_INP+AIC_HN_INM"; }
    	Vil = Expr { String = "0V"; }
    	Vih = Expr { String = "1V"; }
    	Vol = Expr { String = "0.5V"; }
    	Voh = Expr { String = "0.5V"; }
    	Delay = Expr { String = "0s"; }
    }
}
