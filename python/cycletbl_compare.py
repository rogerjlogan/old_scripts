#This script takes 2 input files and creates 4 output files.
#The 2 input files are cycletbl.p files from the same Polaris Program.
#It compares all the CycleSet/CycleSetMD statements and trys to put all
#of them into one file, unless there (is a/are) different waveform(s)
#defined for the same pingroup and cycle name.
#If there is duplication (same wave and pin, but different format),
#then the first is placed in the first file,
#while the 2nd is placed in the second output file.
#Two diff files are also created for viewing in a diff editor (kompare, tkdiff, etc).

import sys
import os
import re
import pprint
from datetime import datetime

__FILENAME__ = "cycletbl_compare.py"
__VERSION__  = "v1.0"
__AUTHOR__   = "Roger Logan, Anora"
__CYCLETBL1__ = 'cycletbl_1.p'
__CYCLETBL2__ = 'cycletbl_2.p'
__DIFF1__ = 'cycletbldiff_1.p'
__DIFF2__ = 'cycletbldiff_2.p'

__maxCylceLen__ = 0
__maxDsetLen__  = 0
__maxPinLen__   = 0


class AutoVivification(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value
#End AutoVivification()

def writefile(cycles,fn):
    ostr =  "(* This file was auto-generated by '"+__FILENAME__+" "+__VERSION__+"'*)\n"
    ostr += "(* with the following input files: '"+sys.argv[1]+"' and '"+sys.argv[2]+"'*)\n"
    ostr += "(* "+__AUTHOR__+"'*)\n"
    ostr += "(* DATE RUN: "+str(datetime.today())+"'*)\n"
    ostr += "(* OS: "+str(os.uname())+"*)\n\n"

    for cyc in cycles:
        for pl in cycles[cyc]:
            d0 = cycles[cyc][pl][0]
            d1 = cycles[cyc][pl][1]
            mapping  = { 'cycletbl':cyc+',','d0':d0+',','d1': d1+',','pins':pl}
            cycleStr = '\tCycleSetMD( %(cycletbl)-'+str(__maxCylceLen__+1)+'s%(d0)-'+str(__maxDsetLen__)+'s%(d1)-'+str(__maxDsetLen__)+'s%(pins)-'+str(__maxPinLen__)+'s );\n'
            ostr += cycleStr % mapping
        ostr += '\n'
    outfile = open(fn, "w")
    outfile.write(ostr)
    outfile.close
#End writefile

def main(c1,c2):
    global __maxCylceLen__,__maxDsetLen__,__maxPinLen__
    cycleset_patrn   = re.compile("CycleSet(?:\s*)\((?P<cycle>.*),(?P<wavename>.*),(?P<pinlist>.*)\)")
    cyclesetmd_patrn = re.compile("CycleSetMD(?:\s*)\((?P<cycle>.*),(?P<d0wave>.*),(?P<d1wave>.*),(?P<pinlist>.*)\)")
    cycles  = AutoVivification( )
    c1p = open(c1)
    for line in c1p:
        cycleset = cycleset_patrn.search(line)
        cyclesetmd = cyclesetmd_patrn.search(line)
        found = False
        cycle = ''
        if cycleset:
            found = True
            cyc = cycleset.group("cycle").strip()
            d0  = cycleset.group("wavename").strip()
            d1  = cycleset.group("wavename").strip()
            pl  = cycleset.group("pinlist").strip()
        elif cyclesetmd:
            found = True
            cyc = cyclesetmd.group("cycle").strip()
            d0  = cyclesetmd.group("d0wave").strip()
            d1  = cyclesetmd.group("d1wave").strip()
            pl  = cyclesetmd.group("pinlist").strip()
        if found:
            __maxCylceLen__ = max(__maxCylceLen__,len(cyc)+2)
            __maxDsetLen__  = max(__maxDsetLen__,len(d0)+2,len(d1)+2)
            __maxPinLen__   = max(__maxPinLen__,len(pl)+1)
            if pl not in cycles[cyc].keys() or cycles[cyc][pl] == (d0,d1):
                cycles[cyc][pl] = (d0,d1)
            else:
                print "Error! Duplicate pingroup in CycleSet"
                print "  cycle: "+cyc
                print "pinlist: "+pl
                print "  first: "+str(cycles[cyc][pl])
                print " second: "+str((d0,d1))
                exit()
    #End for
    c1p.close()
    
    cyc2List = []
    cycles2  = AutoVivification( )
    cyclesdiff1  = AutoVivification( )
    cyclesdiff2  = AutoVivification( )
    c2p = open(c2)
    for line in c2p:
        cycleset = cycleset_patrn.search(line)
        cyclesetmd = cyclesetmd_patrn.search(line)
        found = False
        cycle = ''
        if cycleset:
            found = True
            cyc = cycleset.group("cycle").strip()
            d0  = cycleset.group("wavename").strip()
            d1  = cycleset.group("wavename").strip()
            pl  = cycleset.group("pinlist").strip()
        elif cyclesetmd:
            found = True
            cyc = cyclesetmd.group("cycle").strip()
            d0  = cyclesetmd.group("d0wave").strip()
            d1  = cyclesetmd.group("d1wave").strip()
            pl  = cyclesetmd.group("pinlist").strip()
        if found:
            __maxCylceLen__ = max(__maxCylceLen__,len(cyc)+2)
            __maxDsetLen__  = max(__maxDsetLen__,len(d0)+2,len(d1)+2)
            __maxPinLen__   = max(__maxPinLen__,len(pl)+1)
            if (pl not in cycles[cyc].keys() or cycles[cyc][pl] == (d0,d1)) and cyc not in cyc2List:
                cycles[cyc][pl] = (d0,d1)
            else:
                if cyc not in cyc2List:
                    cyc2List.append(cyc)
                    cycles2[cyc].update(cycles[cyc])
                cycles2[cyc][pl] = (d0,d1)

                if cycles[cyc][pl] != (d0,d1):
                    cyclesdiff1[cyc][pl] = cycles[cyc][pl]
                    cyclesdiff2[cyc][pl] = (d0,d1)

    #End for
    c2p.close()
    
    writefile(cycles,__CYCLETBL1__)
    writefile(cycles2,__CYCLETBL2__)
    writefile(cyclesdiff1,__DIFF1__)
    writefile(cyclesdiff2,__DIFF2__)
        
#End main()

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print("usage: python cycletbl_compare.py <cycletbl_1.p> <cycletbl_2.p>")
        sys.exit()
    print 'Comparing '+sys.argv[1]+' and '+sys.argv[2]
    main(sys.argv[1],sys.argv[2])
