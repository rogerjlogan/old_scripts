import sys
import re
import pprint
import time

__progname__ = "Polaris to Fusion Pingroup Converter"
__author__ = "AUTHOR: Roger Logan, Anora, Test Engineer, Dallas, TX"
__date__ = "LAST MODIFIED: Aug 23, 2012"
__version__ = " v1.0"
__progfile__ = "pol2fus_pingroups.py"
__VERBOSE__ = False
__PINLIST_IFILE__ = "<pinlists.p>"
__PINGROUP_OFILE__ = "pinlists.evo"
__EVHDR__ = "enVision:\"bl8:R11.1.0.WW1111:S3.5\";\n\n"


#Error Messages
__PERMISSIONS_ERR__ = "If file was input, check to see if it exists and that read permissions are allowed for you.\n"
__PERMISSIONS_ERR__ += "Also, check that write permissions are allowed for this directory, as this scripts creates certain files."

class TextException(Exception): pass

class Ddict(dict):
    def __init__(self, default=None):
        self.default = default
    def __getitem__(self, key):
        if not self.has_key(key):
            self[key] = self.default()
        return dict.__getitem__(self, key)
#End Ddict()

def getGroups(ifile):
    """
        Gathers groups and their pins from <pinlists.p>
    """

    ifileObj = file(ifile, 'r')
    ifileCont = ifileObj.read()
    ifileObj.close()

    #all spaces WITH newlines
    wsn_patrn = re.compile("(\s*)")

    pingroups = Ddict( dict )
    setpingrps = Ddict( dict )
    unsetpingrps = Ddict( dict )
    
    #INIT REGEX FOR RAW PINGROUPS
    pinlistsetnull_patrn = re.compile("PinListSetNull(?:\s*)\((.*?)\)",re.DOTALL)
    pinlistset_patrn = re.compile("PinListSet(?:\s*)\((.*?),(.*?)\)",re.DOTALL)
    pinlistunset_patrn = re.compile("PinListUnSet(?:\s*)\((.*?),(.*?)\)",re.DOTALL)
    #GET NULL PINGROUPS
    rawgroups=pinlistsetnull_patrn.findall(ifileCont)
    for pingroup in rawgroups:
        pingroup=pingroup.strip();
        pingroups[pingroup]['set']=[]
    #End for
    #GET SET PINGROUPS
    rawgroups=pinlistset_patrn.findall(ifileCont)
    for pingroup,pins in rawgroups:
        #strip leading and trailing spaces
        pingroup=pingroup.strip();
        pins=re.sub(wsn_patrn,'',pins)
        pins=pins.split(',')
        if 'set' in pingroups[pingroup].keys():
            print "WARNING: Found more than one definition of "+pingroup+". Updating to latest definition..."
            print "\tPrevious Definition: "+'+'.join(pingroups[pingroup]['set'])
            print "\t  Latest Definition: "+'+'.join(pins)
            if pingroup in pins:
                pins.remove(pingroup)
                pins.extend(pingroups[pingroup]['set'])
        #End if
        pingroups[pingroup]['set']=pins
    #End for
    #GET UNSET PINGROUPS
    rawgroups=pinlistunset_patrn.findall(ifileCont)
    for pingroup,pins in rawgroups:
        #strip leading and trailing spaces
        pingroup=pingroup.strip();
        pins=re.sub(wsn_patrn,'',pins)
        pins=pins.split(',')
        if 'unset' in pingroups[pingroup].keys():
            for pin in pins:
                pingroups[pingroup]['unset'].append(pin)
        else:
            pingroups[pingroup]['unset']=pins
        #End if
    #End for
    return pingroups
#End getGroups()

def mkPinGroupEVOFile(pingroups):
    try:
        pingrp_ofile = open(__PINGROUP_OFILE__, "w")
    except:
        err="File Error: "+__PINGROUP_OFILE__+"\n"
        err+=__PERMISSIONS_ERR__
        sys.exit(stop(err))
    pingrp_ostr=__EVHDR__+mkHeader(__progfile__,__version__,__author__)+'\n\n'

    #build max length of parameters
    maxlen=0
    for grp in pingroups:
        if len(grp) > maxlen:
            maxlen=len(grp)
        #End if
    #End for

    for grp in pingroups:
        spaces = ' '
        for i in range(maxlen-len(grp)):
            spaces+=' '
        grpStr =  '+'.join(pingroups[grp]['set'])
        if 'unset' in pingroups[grp]:
            grpStr += '-'+'-'.join(pingroups[grp]['unset'])
        pingrp_ostr+="PinGroup "+grp+spaces+"{ Group = Expr { String = \""+grpStr+"\"; } }\n"
    #End for    

#     #REPLACE ALL INSTANCES OF 'MUXPIN' WITH 'MUXPIN','MUXPINm'
#     for muxpin in apex['muxpins']:
#         pingrp_ostr=pingrp_ostr.replace(muxpin,muxpin+"+"+muxpin+"m")
    
    pingrp_ofile.write(pingrp_ostr)
    pingrp_ofile.close()
#End mkPinGroupEVOFile()

def mkHeader (prog,ver,auth):
    localtime = time.asctime(time.localtime(time.time()))
    header  = "// This file was generated by: "+prog+ver+" from "+__PINLIST_IFILE__+"\n"
    header += "// "+auth+"\n"
    header += "// CREATION DATE: "+str(localtime)+"\n\n"
    return header
#End mkHeader()

#-----------------------------------------------------------------------
#   main
#-----------------------------------------------------------------------
def main():
    global __PINLIST_IFILE__
    
    # Get the arguments from the command line, except the first one.
    args = sys.argv[1:]
    if len(args) != 1:
        err="\nusage: python "+__progfile__+" "+__PINLIST_IFILE__+"\n"
        sys.exit(err)

    __PINLIST_IFILE__=args[0]

    if __VERBOSE__:
        print '\n\n'
        print __progname__
        print __progfile__,__version__
        print __author__
        print __date__
    print '\n'

    pingroups=getGroups(__PINLIST_IFILE__)
    mkPinGroupEVOFile(pingroups)
    
    ostr="SUCCESS!!! NEW FILE CREATED:\n"
    ostr+=__PINGROUP_OFILE__+"\n"
    print ostr

#End main()
#-----------------------------------------------------------------------
#     BEGIN MAIN
#-----------------------------------------------------------------------
if __name__ == '__main__':
    main()
